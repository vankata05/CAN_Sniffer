
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008efc  08008efc  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f04  08008f04  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001df0  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001f3c  20001f3c  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ff10  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003093  00000000  00000000  000300cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a1  00000000  00000000  00033e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023470  00000000  00000000  00034811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000117ad  00000000  00000000  00057c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c67b8  00000000  00000000  0006942e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003908  00000000  00000000  0012fbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001334f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d18 	.word	0x08008d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008d18 	.word	0x08008d18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
//	if(BDTKTD == 1){

	  CAN_RxHeaderTypeDef rxPHead = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800059e:	2100      	movs	r1, #0
 80005a0:	481b      	ldr	r0, [pc, #108]	; (8000610 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80005a2:	f001 f881 	bl	80016a8 <HAL_CAN_GetRxMessage>
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	469c      	mov	ip, r3
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005b0:	785b      	ldrb	r3, [r3, #1]
 80005b2:	4619      	mov	r1, r3
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	4618      	mov	r0, r3
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005bc:	78db      	ldrb	r3, [r3, #3]
 80005be:	461c      	mov	r4, r3
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	461d      	mov	r5, r3
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	461e      	mov	r6, r3
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80005d4:	79db      	ldrb	r3, [r3, #7]
 80005d6:	9306      	str	r3, [sp, #24]
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	9305      	str	r3, [sp, #20]
 80005dc:	9604      	str	r6, [sp, #16]
 80005de:	9503      	str	r5, [sp, #12]
 80005e0:	9402      	str	r4, [sp, #8]
 80005e2:	9001      	str	r0, [sp, #4]
 80005e4:	9100      	str	r1, [sp, #0]
 80005e6:	4663      	mov	r3, ip
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80005ec:	f007 fef0 	bl	80083d0 <siprintf>
//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
//	  if(rxPHead.StdId == 0x7E8){
	  CDC_Transmit_FS((uint8_t*)data1, strlen(data1));
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80005f2:	f7ff fded 	bl	80001d0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80005fe:	f007 fa79 	bl	8007af4 <CDC_Transmit_FS>
//	  }
//	  CDC_Transmit_FS(data, 8);
//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
//	}
}
 8000602:	bf00      	nop
 8000604:	372c      	adds	r7, #44	; 0x2c
 8000606:	46bd      	mov	sp, r7
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	bf00      	nop
 800060c:	20000168 	.word	0x20000168
 8000610:	200001b4 	.word	0x200001b4
 8000614:	08008d30 	.word	0x08008d30
 8000618:	20000170 	.word	0x20000170

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fc67 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f99b 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fa51 	bl	8000ad0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800062e:	f007 f985 	bl	800793c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8000632:	f000 f811 	bl	8000658 <HODL_Till_BTN>

  uint32_t PRE[] = {42, 210, 84, 21};
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <main+0x38>)
 8000638:	463c      	mov	r4, r7
 800063a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800063c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  Auto_Baudrate_Setup(PRE);
 8000640:	463b      	mov	r3, r7
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f824 	bl	8000690 <Auto_Baudrate_Setup>

  Capture_PID_Snapshot();
 8000648:	f000 f8b2 	bl	80007b0 <Capture_PID_Snapshot>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Capture_PID_Snapshot();
 800064c:	f000 f8b0 	bl	80007b0 <Capture_PID_Snapshot>
 8000650:	e7fc      	b.n	800064c <main+0x30>
 8000652:	bf00      	nop
 8000654:	08008e08 	.word	0x08008e08

08000658 <HODL_Till_BTN>:
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800065c:	e005      	b.n	800066a <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <HODL_Till_BTN+0x30>)
 8000666:	f001 fe4d 	bl	8002304 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800066a:	2101      	movs	r1, #1
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <HODL_Till_BTN+0x34>)
 800066e:	f001 fe31 	bl	80022d4 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f2      	beq.n	800065e <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <HODL_Till_BTN+0x30>)
 8000680:	f001 fe40 	bl	8002304 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40020000 	.word	0x40020000

08000690 <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 5; i++){
 8000698:	2300      	movs	r3, #0
 800069a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800069e:	e065      	b.n	800076c <Auto_Baudrate_Setup+0xdc>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <Auto_Baudrate_Setup+0x10c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d12b      	bne.n	8000702 <Auto_Baudrate_Setup+0x72>
 80006aa:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <Auto_Baudrate_Setup+0x110>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d126      	bne.n	8000702 <Auto_Baudrate_Setup+0x72>
		  if(i == 0){
 80006b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10d      	bne.n	80006d8 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f9b5 	bl	8000a34 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 80006ca:	4836      	ldr	r0, [pc, #216]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 80006cc:	f000 fe84 	bl	80013d8 <HAL_CAN_Start>
			  HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f000 fc81 	bl	8000fd8 <HAL_Delay>
		  if(i == 0){
 80006d6:	e044      	b.n	8000762 <Auto_Baudrate_Setup+0xd2>
		  }else{
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_0);
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_1);
			  HAL_CAN_Stop(&hcan1);
 80006d8:	4832      	ldr	r0, [pc, #200]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 80006da:	f000 fec1 	bl	8001460 <HAL_CAN_Stop>
//			  HAL_Delay(100);
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 80006de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f9a0 	bl	8000a34 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 80006f4:	482b      	ldr	r0, [pc, #172]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 80006f6:	f000 fe6f 	bl	80013d8 <HAL_CAN_Start>
			  HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f000 fc6c 	bl	8000fd8 <HAL_Delay>
		  if(i == 0){
 8000700:	e02f      	b.n	8000762 <Auto_Baudrate_Setup+0xd2>
		  }
	  }else{
		  if(IRQRX1 == 1 || IRQRX0 == 1){
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <Auto_Baudrate_Setup+0x10c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b01      	cmp	r3, #1
 800070a:	d004      	beq.n	8000716 <Auto_Baudrate_Setup+0x86>
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <Auto_Baudrate_Setup+0x110>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b01      	cmp	r3, #1
 8000714:	d125      	bne.n	8000762 <Auto_Baudrate_Setup+0xd2>
			  char str[42];
			  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i]);
 8000716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4920      	ldr	r1, [pc, #128]	; (80007a8 <Auto_Baudrate_Setup+0x118>)
 8000728:	4618      	mov	r0, r3
 800072a:	f007 fe51 	bl	80083d0 <siprintf>
			  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd4c 	bl	80001d0 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f9d6 	bl	8007af4 <CDC_Transmit_FS>
			  HAL_CAN_Stop(&hcan1);
 8000748:	4816      	ldr	r0, [pc, #88]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 800074a:	f000 fe89 	bl	8001460 <HAL_CAN_Stop>
//			  MX_CAN1_Init(PRE[i], CAN_MODE_NORMAL);
			  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
			  HAL_CAN_Init(&hcan1);
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 8000756:	f000 fc63 	bl	8001020 <HAL_CAN_Init>
//			  CAN1_Filter_Config();
			  HAL_CAN_Start(&hcan1);
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <Auto_Baudrate_Setup+0x114>)
 800075c:	f000 fe3c 	bl	80013d8 <HAL_CAN_Start>
			  break;
 8000760:	e008      	b.n	8000774 <Auto_Baudrate_Setup+0xe4>
  for(i = 0; i < 5; i++){
 8000762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000766:	3301      	adds	r3, #1
 8000768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800076c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000770:	2b04      	cmp	r3, #4
 8000772:	d995      	bls.n	80006a0 <Auto_Baudrate_Setup+0x10>
		  }
	  }
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <Auto_Baudrate_Setup+0x10c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10a      	bne.n	8000794 <Auto_Baudrate_Setup+0x104>
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <Auto_Baudrate_Setup+0x110>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d105      	bne.n	8000794 <Auto_Baudrate_Setup+0x104>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 8000788:	2118      	movs	r1, #24
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <Auto_Baudrate_Setup+0x11c>)
 800078c:	f007 f9b2 	bl	8007af4 <CDC_Transmit_FS>
	  Error_Handler();
 8000790:	f000 f9fe 	bl	8000b90 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3738      	adds	r7, #56	; 0x38
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001b1 	.word	0x200001b1
 80007a0:	200001b0 	.word	0x200001b0
 80007a4:	200001b4 	.word	0x200001b4
 80007a8:	08008e18 	.word	0x08008e18
 80007ac:	08008e44 	.word	0x08008e44

080007b0 <Capture_PID_Snapshot>:

static void Capture_PID_Snapshot(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b092      	sub	sp, #72	; 0x48
 80007b4:	af00      	add	r7, sp, #0
	//    **Transmit**
	//  **PIDs Supported**
	  uint32_t mailbox;
	  CAN_TxHeaderTypeDef pHead;
	  pHead.StdId = 0x7DF;
 80007b6:	f240 73df 	movw	r3, #2015	; 0x7df
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	  pHead.IDE = CAN_ID_STD;
 80007bc:	2300      	movs	r3, #0
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
	  pHead.RTR = CAN_RTR_DATA;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
	  pHead.DLC = 8;
 80007c4:	2308      	movs	r3, #8
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	  uint8_t data[] = {0x02, 0x01, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80007c8:	4a62      	ldr	r2, [pc, #392]	; (8000954 <Capture_PID_Snapshot+0x1a4>)
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d2:	e883 0003 	stmia.w	r3, {r0, r1}

	  CAN_TxHeaderTypeDef TPpHead;
	  TPpHead.StdId = 0x700;
 80007d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007da:	60fb      	str	r3, [r7, #12]
	  TPpHead.IDE = CAN_ID_STD;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
	  TPpHead.RTR = CAN_RTR_DATA;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
	  TPpHead.DLC = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	61fb      	str	r3, [r7, #28]

	  HAL_Delay(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f000 fbf5 	bl	8000fd8 <HAL_Delay>

	  uint8_t TP_data[] = {0x02, 0x3E, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80007ee:	4a5a      	ldr	r2, [pc, #360]	; (8000958 <Capture_PID_Snapshot+0x1a8>)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f6:	e883 0003 	stmia.w	r3, {r0, r1}
	//  uint8_t readVin_Req[] = {0x04, 0x22, 0xF1, 0x90, 0x00, 0x00, 0x00, 0x00};

	  HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 fbec 	bl	8000fd8 <HAL_Delay>

	//  **Tester Present**
	  HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 8000800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000804:	1d3a      	adds	r2, r7, #4
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	4854      	ldr	r0, [pc, #336]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 800080c:	f000 fe71 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(01-20)**
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000814:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000818:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800081c:	484f      	ldr	r0, [pc, #316]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 800081e:	f000 fe68 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 8000822:	200a      	movs	r0, #10
 8000824:	f000 fbd8 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 8000828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800082c:	1d3a      	adds	r2, r7, #4
 800082e:	f107 010c 	add.w	r1, r7, #12
 8000832:	484a      	ldr	r0, [pc, #296]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 8000834:	f000 fe5d 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(21-40)**
	  data[2] = 0x20;
 8000838:	2320      	movs	r3, #32
 800083a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800083e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000842:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000846:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800084a:	4844      	ldr	r0, [pc, #272]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 800084c:	f000 fe51 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 8000850:	200a      	movs	r0, #10
 8000852:	f000 fbc1 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 8000856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800085a:	1d3a      	adds	r2, r7, #4
 800085c:	f107 010c 	add.w	r1, r7, #12
 8000860:	483e      	ldr	r0, [pc, #248]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 8000862:	f000 fe46 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(41-60)**
	  data[2] = 0x40;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800086c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000870:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000874:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000878:	4838      	ldr	r0, [pc, #224]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 800087a:	f000 fe3a 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f000 fbaa 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 8000884:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000888:	1d3a      	adds	r2, r7, #4
 800088a:	f107 010c 	add.w	r1, r7, #12
 800088e:	4833      	ldr	r0, [pc, #204]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 8000890:	f000 fe2f 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(61-80)**
	  data[2] = 0x60;
 8000894:	2360      	movs	r3, #96	; 0x60
 8000896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800089a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800089e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008a2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80008a6:	482d      	ldr	r0, [pc, #180]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 80008a8:	f000 fe23 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 fb93 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 80008b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	f107 010c 	add.w	r1, r7, #12
 80008bc:	4827      	ldr	r0, [pc, #156]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 80008be:	f000 fe18 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(81-A0)**
	  data[2] = 0x80;
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80008c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008d0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80008d4:	4821      	ldr	r0, [pc, #132]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 80008d6:	f000 fe0c 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f000 fb7c 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 80008e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	f107 010c 	add.w	r1, r7, #12
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 80008ec:	f000 fe01 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(A1-C0)**
	  data[2] = 0xA0;
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80008f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008fe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 8000904:	f000 fdf5 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 8000908:	200a      	movs	r0, #10
 800090a:	f000 fb65 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 800090e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000912:	1d3a      	adds	r2, r7, #4
 8000914:	f107 010c 	add.w	r1, r7, #12
 8000918:	4810      	ldr	r0, [pc, #64]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 800091a:	f000 fdea 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  //  **PIDs supported(C1-E0)**
	  data[2] = 0xC0;
 800091e:	23c0      	movs	r3, #192	; 0xc0
 8000920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000924:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000928:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800092c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 8000932:	f000 fdde 	bl	80014f2 <HAL_CAN_AddTxMessage>

	  HAL_Delay(10);
 8000936:	200a      	movs	r0, #10
 8000938:	f000 fb4e 	bl	8000fd8 <HAL_Delay>

	  //  **Tester Present**
	    HAL_CAN_AddTxMessage(&hcan1, &TPpHead, TP_data, &mailbox);
 800093c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000940:	1d3a      	adds	r2, r7, #4
 8000942:	f107 010c 	add.w	r1, r7, #12
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <Capture_PID_Snapshot+0x1ac>)
 8000948:	f000 fdd3 	bl	80014f2 <HAL_CAN_AddTxMessage>
}
 800094c:	bf00      	nop
 800094e:	3748      	adds	r7, #72	; 0x48
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08008e60 	.word	0x08008e60
 8000958:	08008e68 	.word	0x08008e68
 800095c:	200001b4 	.word	0x200001b4

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f007 fd4e 	bl	8008410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <SystemClock_Config+0xcc>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClock_Config+0xcc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <SystemClock_Config+0xd0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <SystemClock_Config+0xd0>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009de:	2307      	movs	r3, #7
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 ff22 	bl	8003830 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009f2:	f000 f8cd 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2105      	movs	r1, #5
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 f983 	bl	8003d20 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a20:	f000 f8b6 	bl	8000b90 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	; 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <MX_CAN1_Init>:
  }

}

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a40:	4a22      	ldr	r2, [pc, #136]	; (8000acc <MX_CAN1_Init+0x98>)
 8000a42:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a5c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a88:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a8a:	f000 fac9 	bl	8001020 <HAL_CAN_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000a94:	f000 f87c 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000a9e:	f000 ff15 	bl	80018cc <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fcb0 	bl	8008410 <memset>
  filters.FilterActivation = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_CAN1_Init+0x94>)
 8000abc:	f000 fbac 	bl	8001218 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200001b4 	.word	0x200001b4
 8000acc:	40006400 	.word	0x40006400

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_GPIO_Init+0xb4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000b42:	f001 fbdf 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_GPIO_Init+0xbc>)
 8000b5a:	f001 fa1f 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000b78:	f001 fa10 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40020000 	.word	0x40020000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a4e      	ldr	r2, [pc, #312]	; (8000d44 <HAL_CAN_MspInit+0x158>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d14d      	bne.n	8000caa <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <HAL_CAN_MspInit+0x15c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_CAN_MspInit+0x15c>)
 8000c16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <HAL_CAN_MspInit+0x15c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10d      	bne.n	8000c3c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a48      	ldr	r2, [pc, #288]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a41      	ldr	r2, [pc, #260]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c68:	2309      	movs	r3, #9
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4837      	ldr	r0, [pc, #220]	; (8000d50 <HAL_CAN_MspInit+0x164>)
 8000c74:	f001 f992 	bl	8001f9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f001 f956 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c82:	2013      	movs	r0, #19
 8000c84:	f001 f96f 	bl	8001f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2014      	movs	r0, #20
 8000c8e:	f001 f94e 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c92:	2014      	movs	r0, #20
 8000c94:	f001 f967 	bl	8001f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2015      	movs	r0, #21
 8000c9e:	f001 f946 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ca2:	2015      	movs	r0, #21
 8000ca4:	f001 f95f 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ca8:	e048      	b.n	8000d3c <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <HAL_CAN_MspInit+0x168>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d143      	bne.n	8000d3c <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_CAN_MspInit+0x15c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <HAL_CAN_MspInit+0x15c>)
 8000cd8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <HAL_CAN_MspInit+0x15c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d10d      	bne.n	8000cfe <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000cec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_CAN_MspInit+0x160>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_CAN_MspInit+0x16c>)
 8000d38:	f001 f930 	bl	8001f9c <HAL_GPIO_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3730      	adds	r7, #48	; 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40006400 	.word	0x40006400
 8000d48:	200001dc 	.word	0x200001dc
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40006800 	.word	0x40006800
 8000d58:	40020400 	.word	0x40020400

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f8f6 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <CAN1_TX_IRQHandler+0x10>)
 8000db6:	f000 fdaf 	bl	8001918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001b4 	.word	0x200001b4

08000dc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <CAN1_RX0_IRQHandler+0x14>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <CAN1_RX0_IRQHandler+0x18>)
 8000dd0:	f000 fda2 	bl	8001918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200001b0 	.word	0x200001b0
 8000ddc:	200001b4 	.word	0x200001b4

08000de0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <CAN1_RX1_IRQHandler+0x14>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <CAN1_RX1_IRQHandler+0x18>)
 8000dec:	f000 fd94 	bl	8001918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200001b1 	.word	0x200001b1
 8000df8:	200001b4 	.word	0x200001b4

08000dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <OTG_FS_IRQHandler+0x10>)
 8000e02:	f001 fbe8 	bl	80025d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200016c8 	.word	0x200016c8

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f007 faee 	bl	8008420 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20020000 	.word	0x20020000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	200001e0 	.word	0x200001e0
 8000e78:	20001f40 	.word	0x20001f40

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f007 faad 	bl	800842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fba3 	bl	800061c <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000ee4:	08008f0c 	.word	0x08008f0c
  ldr r2, =_sbss
 8000ee8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000eec:	20001f3c 	.word	0x20001f3c

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 fffb 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe38 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f813 	bl	8001f82 <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 ffdb 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200001e4 	.word	0x200001e4

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200001e4 	.word	0x200001e4

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0ed      	b.n	800120e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fdd4 	bl	8000bec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff ffb4 	bl	8000fc0 <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105a:	e012      	b.n	8001082 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800105c:	f7ff ffb0 	bl	8000fc0 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d90b      	bls.n	8001082 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2205      	movs	r2, #5
 800107a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0c5      	b.n	800120e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0e5      	beq.n	800105c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0202 	bic.w	r2, r2, #2
 800109e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a0:	f7ff ff8e 	bl	8000fc0 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010a6:	e012      	b.n	80010ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a8:	f7ff ff8a 	bl	8000fc0 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b0a      	cmp	r3, #10
 80010b4:	d90b      	bls.n	80010ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e09f      	b.n	800120e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e5      	bne.n	80010a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e1b      	ldrb	r3, [r3, #24]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e007      	b.n	8001106 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7e5b      	ldrb	r3, [r3, #25]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e007      	b.n	8001130 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800112e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7e9b      	ldrb	r3, [r3, #26]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0220 	orr.w	r2, r2, #32
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e007      	b.n	800115a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0220 	bic.w	r2, r2, #32
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7edb      	ldrb	r3, [r3, #27]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d108      	bne.n	8001174 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0210 	bic.w	r2, r2, #16
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e007      	b.n	8001184 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0210 	orr.w	r2, r2, #16
 8001182:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7f1b      	ldrb	r3, [r3, #28]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d108      	bne.n	800119e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0208 	orr.w	r2, r2, #8
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e007      	b.n	80011ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0208 	bic.w	r2, r2, #8
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7f5b      	ldrb	r3, [r3, #29]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0204 	orr.w	r2, r2, #4
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e007      	b.n	80011d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	ea42 0103 	orr.w	r1, r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001230:	7cfb      	ldrb	r3, [r7, #19]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d003      	beq.n	800123e <HAL_CAN_ConfigFilter+0x26>
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	2b02      	cmp	r3, #2
 800123a:	f040 80be 	bne.w	80013ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001240:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001258:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	431a      	orrs	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2201      	movs	r2, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	401a      	ands	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d123      	bne.n	80012e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3248      	adds	r2, #72	; 0x48
 80012c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012de:	6979      	ldr	r1, [r7, #20]
 80012e0:	3348      	adds	r3, #72	; 0x48
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d122      	bne.n	8001336 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001310:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3248      	adds	r2, #72	; 0x48
 8001316:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800132c:	6979      	ldr	r1, [r7, #20]
 800132e:	3348      	adds	r3, #72	; 0x48
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001350:	e007      	b.n	8001362 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	401a      	ands	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800137c:	e007      	b.n	800138e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	431a      	orrs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d107      	bne.n	80013a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	431a      	orrs	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013ac:	f023 0201 	bic.w	r2, r3, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e006      	b.n	80013c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40006400 	.word	0x40006400

080013d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d12e      	bne.n	800144a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff fddc 	bl	8000fc0 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800140a:	e012      	b.n	8001432 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800140c:	f7ff fdd8 	bl	8000fc0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d90b      	bls.n	8001432 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2205      	movs	r2, #5
 800142a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e012      	b.n	8001458 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e5      	bne.n	800140c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e006      	b.n	8001458 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d133      	bne.n	80014dc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff fd9c 	bl	8000fc0 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800148a:	e012      	b.n	80014b2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800148c:	f7ff fd98 	bl	8000fc0 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d90b      	bls.n	80014b2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2205      	movs	r2, #5
 80014aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e01b      	b.n	80014ea <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0e5      	beq.n	800148c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0202 	bic.w	r2, r2, #2
 80014ce:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e006      	b.n	80014ea <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b089      	sub	sp, #36	; 0x24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001506:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d003      	beq.n	800151e <HAL_CAN_AddTxMessage+0x2c>
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	2b02      	cmp	r3, #2
 800151a:	f040 80b8 	bne.w	800168e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a0 	beq.w	800167e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	0e1b      	lsrs	r3, r3, #24
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d907      	bls.n	800155e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e09e      	b.n	800169c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10d      	bne.n	800158c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	6809      	ldr	r1, [r1, #0]
 800157e:	431a      	orrs	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e00f      	b.n	80015ac <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001596:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800159c:	68f9      	ldr	r1, [r7, #12]
 800159e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3318      	adds	r3, #24
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	440b      	add	r3, r1
 80015aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3318      	adds	r3, #24
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	7d1b      	ldrb	r3, [r3, #20]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d111      	bne.n	80015ec <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3318      	adds	r3, #24
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4413      	add	r3, r2
 80015d4:	3304      	adds	r3, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6811      	ldr	r1, [r2, #0]
 80015dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3318      	adds	r3, #24
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	440b      	add	r3, r1
 80015e8:	3304      	adds	r3, #4
 80015ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3307      	adds	r3, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	061a      	lsls	r2, r3, #24
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3306      	adds	r3, #6
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3305      	adds	r3, #5
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	4313      	orrs	r3, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	3204      	adds	r2, #4
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	4610      	mov	r0, r2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	6811      	ldr	r1, [r2, #0]
 8001614:	ea43 0200 	orr.w	r2, r3, r0
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	440b      	add	r3, r1
 800161e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001622:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3303      	adds	r3, #3
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	061a      	lsls	r2, r3, #24
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3302      	adds	r3, #2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	4313      	orrs	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	4610      	mov	r0, r2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	6811      	ldr	r1, [r2, #0]
 800164a:	ea43 0200 	orr.w	r2, r3, r0
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001658:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3318      	adds	r3, #24
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	6811      	ldr	r1, [r2, #0]
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3318      	adds	r3, #24
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	440b      	add	r3, r1
 8001678:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e00e      	b.n	800169c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e006      	b.n	800169c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	3724      	adds	r7, #36	; 0x24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_GetRxMessage+0x24>
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	f040 80f3 	bne.w	80018b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10e      	bne.n	80016f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d116      	bne.n	800170e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0e7      	b.n	80018c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0d8      	b.n	80018c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	331b      	adds	r3, #27
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0204 	and.w	r2, r3, #4
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10c      	bne.n	8001746 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	331b      	adds	r3, #27
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0d5b      	lsrs	r3, r3, #21
 800173c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e00b      	b.n	800175e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	331b      	adds	r3, #27
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	08db      	lsrs	r3, r3, #3
 8001756:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	331b      	adds	r3, #27
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0202 	and.w	r2, r3, #2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	331b      	adds	r3, #27
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	3304      	adds	r3, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 020f 	and.w	r2, r3, #15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	331b      	adds	r3, #27
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	331b      	adds	r3, #27
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	3304      	adds	r3, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0a1a      	lsrs	r2, r3, #8
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0c1a      	lsrs	r2, r3, #16
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	3302      	adds	r3, #2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0e1a      	lsrs	r2, r3, #24
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3303      	adds	r3, #3
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3304      	adds	r3, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0a1a      	lsrs	r2, r3, #8
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	3305      	adds	r3, #5
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4413      	add	r3, r2
 800185c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0c1a      	lsrs	r2, r3, #16
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3306      	adds	r3, #6
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0e1a      	lsrs	r2, r3, #24
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	3307      	adds	r3, #7
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d108      	bne.n	800189e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0220 	orr.w	r2, r2, #32
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e007      	b.n	80018ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0220 	orr.w	r2, r2, #32
 80018ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e006      	b.n	80018c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
  }
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d002      	beq.n	80018ea <HAL_CAN_ActivateNotification+0x1e>
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d109      	bne.n	80018fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6959      	ldr	r1, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e006      	b.n	800190c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d07c      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f983 	bl	8001c86 <HAL_CAN_TxMailbox0CompleteCallback>
 8001980:	e016      	b.n	80019b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	e00c      	b.n	80019b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e002      	b.n	80019b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f989 	bl	8001cc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d024      	beq.n	8001a04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f963 	bl	8001c9a <HAL_CAN_TxMailbox1CompleteCallback>
 80019d4:	e016      	b.n	8001a04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	e00c      	b.n	8001a04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e002      	b.n	8001a04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f969 	bl	8001cd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d024      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f943 	bl	8001cae <HAL_CAN_TxMailbox2CompleteCallback>
 8001a28:	e016      	b.n	8001a58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e00c      	b.n	8001a58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	e002      	b.n	8001a58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f949 	bl	8001cea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2208      	movs	r2, #8
 8001a96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f930 	bl	8001cfe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fd60 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2208      	movs	r2, #8
 8001afa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f912 	bl	8001d26 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8f9 	bl	8001d12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f8fc 	bl	8001d3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8f5 	bl	8001d4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07b      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d072      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d043      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03e      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001be6:	2b60      	cmp	r3, #96	; 0x60
 8001be8:	d02b      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x32a>
 8001bea:	2b60      	cmp	r3, #96	; 0x60
 8001bec:	d82e      	bhi.n	8001c4c <HAL_CAN_IRQHandler+0x334>
 8001bee:	2b50      	cmp	r3, #80	; 0x50
 8001bf0:	d022      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x320>
 8001bf2:	2b50      	cmp	r3, #80	; 0x50
 8001bf4:	d82a      	bhi.n	8001c4c <HAL_CAN_IRQHandler+0x334>
 8001bf6:	2b40      	cmp	r3, #64	; 0x40
 8001bf8:	d019      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x316>
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d826      	bhi.n	8001c4c <HAL_CAN_IRQHandler+0x334>
 8001bfe:	2b30      	cmp	r3, #48	; 0x30
 8001c00:	d010      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x30c>
 8001c02:	2b30      	cmp	r3, #48	; 0x30
 8001c04:	d822      	bhi.n	8001c4c <HAL_CAN_IRQHandler+0x334>
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d002      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x2f8>
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d005      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c0e:	e01d      	b.n	8001c4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c18:	e019      	b.n	8001c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c22:	e014      	b.n	8001c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f043 0320 	orr.w	r3, r3, #32
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c2c:	e00f      	b.n	8001c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c36:	e00a      	b.n	8001c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c40:	e005      	b.n	8001c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c4a:	e000      	b.n	8001c4e <HAL_CAN_IRQHandler+0x336>
            break;
 8001c4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2204      	movs	r2, #4
 8001c64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f872 	bl	8001d62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e16b      	b.n	8002290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 815a 	bne.w	800228a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80b4 	beq.w	800228a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f ae90 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002338:	b08f      	sub	sp, #60	; 0x3c
 800233a:	af0a      	add	r7, sp, #40	; 0x28
 800233c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e10f      	b.n	8002568 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f005 fd0e 	bl	8007d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2203      	movs	r2, #3
 800236c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f001 ffd7 	bl	800433a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	687e      	ldr	r6, [r7, #4]
 8002394:	466d      	mov	r5, sp
 8002396:	f106 0410 	add.w	r4, r6, #16
 800239a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023aa:	1d33      	adds	r3, r6, #4
 80023ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	f001 feae 	bl	8004110 <USB_CoreInit>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0d0      	b.n	8002568 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 ffc5 	bl	800435c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	e04a      	b.n	800246e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	333d      	adds	r3, #61	; 0x3d
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	333c      	adds	r3, #60	; 0x3c
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	b298      	uxth	r0, r3
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3344      	adds	r3, #68	; 0x44
 8002414:	4602      	mov	r2, r0
 8002416:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3340      	adds	r3, #64	; 0x40
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3348      	adds	r3, #72	; 0x48
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	334c      	adds	r3, #76	; 0x4c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3354      	adds	r3, #84	; 0x54
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d3af      	bcc.n	80023d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e044      	b.n	8002508 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	3301      	adds	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3b5      	bcc.n	800247e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	687e      	ldr	r6, [r7, #4]
 800251a:	466d      	mov	r5, sp
 800251c:	f106 0410 	add.w	r4, r6, #16
 8002520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002528:	e894 0003 	ldmia.w	r4, {r0, r1}
 800252c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002530:	1d33      	adds	r3, r6, #4
 8002532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002534:	6838      	ldr	r0, [r7, #0]
 8002536:	f001 ff5d 	bl	80043f4 <USB_DevInit>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e00d      	b.n	8002568 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f003 f8ac 	bl	80056be <USB_DevDisconnect>

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002570 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_Start+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e020      	b.n	80025ce <HAL_PCD_Start+0x5e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	2b01      	cmp	r3, #1
 800259a:	d109      	bne.n	80025b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d005      	beq.n	80025b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 feaf 	bl	8004318 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f85c 	bl	800567c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025d6:	b590      	push	{r4, r7, lr}
 80025d8:	b08d      	sub	sp, #52	; 0x34
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 f91a 	bl	8005826 <USB_GetMode>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 848a 	bne.w	8002f0e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f87e 	bl	8005700 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8480 	beq.w	8002f0c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 f86b 	bl	8005700 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d107      	bne.n	8002644 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f002 0202 	and.w	r2, r2, #2
 8002642:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f003 f859 	bl	8005700 <USB_ReadInterrupts>
 800264e:	4603      	mov	r3, r0
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b10      	cmp	r3, #16
 8002656:	d161      	bne.n	800271c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0210 	bic.w	r2, r2, #16
 8002666:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 020f 	and.w	r2, r3, #15
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	0c5b      	lsrs	r3, r3, #17
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	2b02      	cmp	r3, #2
 8002692:	d124      	bne.n	80026de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d035      	beq.n	800270c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	6a38      	ldr	r0, [r7, #32]
 80026b4:	f002 fe90 	bl	80053d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c4:	441a      	add	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d6:	441a      	add	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	621a      	str	r2, [r3, #32]
 80026dc:	e016      	b.n	800270c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	0c5b      	lsrs	r3, r3, #17
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d110      	bne.n	800270c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026f0:	2208      	movs	r2, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	6a38      	ldr	r0, [r7, #32]
 80026f6:	f002 fe6f 	bl	80053d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002706:	441a      	add	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0210 	orr.w	r2, r2, #16
 800271a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 ffed 	bl	8005700 <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002730:	f040 80a7 	bne.w	8002882 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f002 fff2 	bl	8005726 <USB_ReadDevAllOutEpInterrupt>
 8002742:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002744:	e099      	b.n	800287a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 808e 	beq.w	800286e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f003 f816 	bl	800578e <USB_ReadDevOutEPInterrupt>
 8002762:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277a:	461a      	mov	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fec2 	bl	800350c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	2308      	movs	r3, #8
 80027a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 ff98 	bl	80036dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	461a      	mov	r2, r3
 80027c4:	2310      	movs	r3, #16
 80027c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d030      	beq.n	8002834 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d109      	bne.n	80027f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	3304      	adds	r3, #4
 8002806:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	78db      	ldrb	r3, [r3, #3]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d108      	bne.n	8002822 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2200      	movs	r2, #0
 8002814:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f005 fbc9 	bl	8007fb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	2302      	movs	r3, #2
 8002832:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284a:	461a      	mov	r2, r3
 800284c:	2320      	movs	r3, #32
 800284e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002866:	461a      	mov	r2, r3
 8002868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	3301      	adds	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f af62 	bne.w	8002746 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 ff3a 	bl	8005700 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002896:	f040 80db 	bne.w	8002a50 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 ff5b 	bl	800575a <USB_ReadDevAllInEpInterrupt>
 80028a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028aa:	e0cd      	b.n	8002a48 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80c2 	beq.w	8002a3c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 ff81 	bl	80057ca <USB_ReadDevInEPInterrupt>
 80028c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d057      	beq.n	8002984 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	2201      	movs	r2, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69f9      	ldr	r1, [r7, #28]
 80028f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028f4:	4013      	ands	r3, r2
 80028f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002904:	461a      	mov	r2, r3
 8002906:	2301      	movs	r3, #1
 8002908:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d132      	bne.n	8002978 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	334c      	adds	r3, #76	; 0x4c
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4403      	add	r3, r0
 8002932:	3348      	adds	r3, #72	; 0x48
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4419      	add	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4403      	add	r3, r0
 8002946:	334c      	adds	r3, #76	; 0x4c
 8002948:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d113      	bne.n	8002978 <HAL_PCD_IRQHandler+0x3a2>
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3354      	adds	r3, #84	; 0x54
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d108      	bne.n	8002978 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002970:	461a      	mov	r2, r3
 8002972:	2101      	movs	r1, #1
 8002974:	f002 ff88 	bl	8005888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f005 fa93 	bl	8007eaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299a:	461a      	mov	r2, r3
 800299c:	2308      	movs	r3, #8
 800299e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b6:	461a      	mov	r2, r3
 80029b8:	2310      	movs	r3, #16
 80029ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d2:	461a      	mov	r2, r3
 80029d4:	2340      	movs	r3, #64	; 0x40
 80029d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d023      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e4:	6a38      	ldr	r0, [r7, #32]
 80029e6:	f001 fe69 	bl	80046bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3338      	adds	r3, #56	; 0x38
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	3304      	adds	r3, #4
 80029fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	78db      	ldrb	r3, [r3, #3]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d108      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f005 fae0 	bl	8007fd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a24:	461a      	mov	r2, r3
 8002a26:	2302      	movs	r3, #2
 8002a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fcdb 	bl	80033f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	3301      	adds	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f47f af2e 	bne.w	80028ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fe53 	bl	8005700 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a64:	d122      	bne.n	8002aac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d108      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fec2 	bl	8003818 <HAL_PCDEx_LPM_Callback>
 8002a94:	e002      	b.n	8002a9c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f005 fa7e 	bl	8007f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fe25 	bl	8005700 <USB_ReadInterrupts>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d112      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f005 fa3a 	bl	8007f4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ae6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 fe07 	bl	8005700 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afc:	f040 80b7 	bne.w	8002c6e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2110      	movs	r1, #16
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 fdce 	bl	80046bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b24:	e046      	b.n	8002bb4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b32:	461a      	mov	r2, r3
 8002b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4a:	0151      	lsls	r1, r2, #5
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	440a      	add	r2, r1
 8002b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b66:	461a      	mov	r2, r3
 8002b68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	0151      	lsls	r1, r2, #5
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	440a      	add	r2, r1
 8002b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9e:	0151      	lsls	r1, r2, #5
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ba8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d3b3      	bcc.n	8002b26 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bcc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bd0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bea:	f043 030b 	orr.w	r3, r3, #11
 8002bee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c00:	f043 030b 	orr.w	r3, r3, #11
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	e015      	b.n	8002c34 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c1a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c1e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2e:	f043 030b 	orr.w	r3, r3, #11
 8002c32:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c46:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f002 fe15 	bl	8005888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fd44 	bl	8005700 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c82:	d124      	bne.n	8002cce <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fdda 	bl	8005842 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fd8f 	bl	80047b6 <USB_GetDevSpeed>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681c      	ldr	r4, [r3, #0]
 8002ca4:	f001 fa28 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f001 fa8e 	bl	80041d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f005 f91e 	bl	8007efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fd14 	bl	8005700 <USB_ReadInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f005 f8fb 	bl	8007ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f002 0208 	and.w	r2, r2, #8
 8002cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fcff 	bl	8005700 <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d122      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d18:	2301      	movs	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e014      	b.n	8002d48 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fb27 	bl	8003390 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3e5      	bcc.n	8002d1e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fcd2 	bl	8005700 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d66:	d13b      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d68:	2301      	movs	r3, #1
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6c:	e02b      	b.n	8002dc6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3340      	adds	r3, #64	; 0x40
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d115      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da12      	bge.n	8002dc0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	333f      	adds	r3, #63	; 0x3f
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fae8 	bl	8003390 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3ce      	bcc.n	8002d6e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 fc8b 	bl	8005700 <USB_ReadInterrupts>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002df4:	d155      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002df6:	2301      	movs	r3, #1
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	e045      	b.n	8002e88 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d12e      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da2b      	bge.n	8002e82 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d121      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6053      	str	r3, [r2, #4]
            break;
 8002e80:	e007      	b.n	8002e92 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3b4      	bcc.n	8002dfc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fc2a 	bl	8005700 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb6:	d10a      	bne.n	8002ece <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f005 f89f 	bl	8007ffc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 fc14 	bl	8005700 <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d115      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f005 f88f 	bl	8008018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	e000      	b.n	8002f0e <HAL_PCD_IRQHandler+0x938>
      return;
 8002f0c:	bf00      	nop
    }
  }
}
 8002f0e:	3734      	adds	r7, #52	; 0x34
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}

08002f14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_SetAddress+0x1a>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e013      	b.n	8002f56 <HAL_PCD_SetAddress+0x42>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fb72 	bl	8005630 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	4608      	mov	r0, r1
 8002f68:	4611      	mov	r1, r2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	70fb      	strb	r3, [r7, #3]
 8002f70:	460b      	mov	r3, r1
 8002f72:	803b      	strh	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da0f      	bge.n	8002fa4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 020f 	and.w	r2, r3, #15
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3338      	adds	r3, #56	; 0x38
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	705a      	strb	r2, [r3, #1]
 8002fa2:	e00f      	b.n	8002fc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fd0:	883a      	ldrh	r2, [r7, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	78ba      	ldrb	r2, [r7, #2]
 8002fda:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	785b      	ldrb	r3, [r3, #1]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fee:	78bb      	ldrb	r3, [r7, #2]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d102      	bne.n	8002ffa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_PCD_EP_Open+0xaa>
 8003004:	2302      	movs	r3, #2
 8003006:	e00e      	b.n	8003026 <HAL_PCD_EP_Open+0xc8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68f9      	ldr	r1, [r7, #12]
 8003016:	4618      	mov	r0, r3
 8003018:	f001 fbf2 	bl	8004800 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003024:	7afb      	ldrb	r3, [r7, #11]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800303a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303e:	2b00      	cmp	r3, #0
 8003040:	da0f      	bge.n	8003062 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	3338      	adds	r3, #56	; 0x38
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	705a      	strb	r2, [r3, #1]
 8003060:	e00f      	b.n	8003082 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_EP_Close+0x6e>
 8003098:	2302      	movs	r3, #2
 800309a:	e00e      	b.n	80030ba <HAL_PCD_EP_Close+0x8c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 fc30 	bl	8004910 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	460b      	mov	r3, r1
 80030d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003104:	7afb      	ldrb	r3, [r7, #11]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	b2da      	uxtb	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d102      	bne.n	800311e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	f001 ff0f 	bl	8004f58 <USB_EP0StartXfer>
 800313a:	e008      	b.n	800314e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	6979      	ldr	r1, [r7, #20]
 800314a:	f001 fcbd 	bl	8004ac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	460b      	mov	r3, r1
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	3338      	adds	r3, #56	; 0x38
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2201      	movs	r2, #1
 80031c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	7afb      	ldrb	r3, [r7, #11]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	f001 fead 	bl	8004f58 <USB_EP0StartXfer>
 80031fe:	e008      	b.n	8003212 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	6979      	ldr	r1, [r7, #20]
 800320e:	f001 fc5b 	bl	8004ac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d901      	bls.n	800323a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e050      	b.n	80032dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0f      	bge.n	8003262 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	705a      	strb	r2, [r3, #1]
 8003260:	e00d      	b.n	800327e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_PCD_EP_SetStall+0x82>
 800329a:	2302      	movs	r3, #2
 800329c:	e01e      	b.n	80032dc <HAL_PCD_EP_SetStall+0xc0>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 f8eb 	bl	8005488 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	b2d9      	uxtb	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032cc:	461a      	mov	r2, r3
 80032ce:	f002 fadb 	bl	8005888 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d901      	bls.n	8003302 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e042      	b.n	8003388 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003306:	2b00      	cmp	r3, #0
 8003308:	da0f      	bge.n	800332a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	3338      	adds	r3, #56	; 0x38
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	3304      	adds	r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	705a      	strb	r2, [r3, #1]
 8003328:	e00f      	b.n	800334a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 020f 	and.w	r2, r3, #15
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	3304      	adds	r3, #4
 8003342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_EP_ClrStall+0x86>
 8003366:	2302      	movs	r3, #2
 8003368:	e00e      	b.n	8003388 <HAL_PCD_EP_ClrStall+0xa4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	4618      	mov	r0, r3
 800337a:	f002 f8f3 	bl	8005564 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da0c      	bge.n	80033be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3338      	adds	r3, #56	; 0x38
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e00c      	b.n	80033d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68f9      	ldr	r1, [r7, #12]
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 ff12 	bl	8005208 <USB_EPStopXfer>
 80033e4:	4603      	mov	r3, r0
 80033e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033e8:	7afb      	ldrb	r3, [r7, #11]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b08a      	sub	sp, #40	; 0x28
 80033f6:	af02      	add	r7, sp, #8
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	3338      	adds	r3, #56	; 0x38
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	429a      	cmp	r2, r3
 8003424:	d901      	bls.n	800342a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06c      	b.n	8003504 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	429a      	cmp	r2, r3
 800343e:	d902      	bls.n	8003446 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3303      	adds	r3, #3
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800344e:	e02b      	b.n	80034a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	429a      	cmp	r2, r3
 8003464:	d902      	bls.n	800346c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	3303      	adds	r3, #3
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6919      	ldr	r1, [r3, #16]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003484:	b2db      	uxtb	r3, r3
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4603      	mov	r3, r0
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f001 ff66 	bl	800535c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	441a      	add	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d809      	bhi.n	80034d2 <PCD_WriteEmptyTxFifo+0xe0>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d203      	bcs.n	80034d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1be      	bne.n	8003450 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d811      	bhi.n	8003502 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	6939      	ldr	r1, [r7, #16]
 80034fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034fe:	4013      	ands	r3, r2
 8003500:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	333c      	adds	r3, #60	; 0x3c
 8003524:	3304      	adds	r3, #4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d17b      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4a61      	ldr	r2, [pc, #388]	; (80036d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	f240 80b9 	bls.w	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80b3 	beq.w	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	e0a7      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	2320      	movs	r3, #32
 8003592:	6093      	str	r3, [r2, #8]
 8003594:	e098      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8093 	bne.w	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4a4b      	ldr	r2, [pc, #300]	; (80036d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d90f      	bls.n	80035ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	461a      	mov	r2, r3
 80035c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c6:	6093      	str	r3, [r2, #8]
 80035c8:	e07e      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	440b      	add	r3, r1
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d114      	bne.n	800362c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003614:	461a      	mov	r2, r3
 8003616:	2101      	movs	r1, #1
 8003618:	f002 f936 	bl	8005888 <USB_EP0_OutStart>
 800361c:	e006      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f004 fc1e 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
 8003638:	e046      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d124      	bne.n	800368c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	6093      	str	r3, [r2, #8]
 8003660:	e032      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	461a      	mov	r2, r3
 800367a:	2320      	movs	r3, #32
 800367c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f004 fbf5 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
 800368a:	e01d      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d114      	bne.n	80036bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036b4:	461a      	mov	r2, r3
 80036b6:	2100      	movs	r1, #0
 80036b8:	f002 f8e6 	bl	8005888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f004 fbd6 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	4f54300a 	.word	0x4f54300a
 80036d8:	4f54310a 	.word	0x4f54310a

080036dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	333c      	adds	r3, #60	; 0x3c
 80036f4:	3304      	adds	r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <PCD_EP_OutSetupPacket_int+0x88>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d90e      	bls.n	8003730 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	461a      	mov	r2, r3
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f004 fb8d 	bl	8007e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <PCD_EP_OutSetupPacket_int+0x88>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d90c      	bls.n	8003758 <PCD_EP_OutSetupPacket_int+0x7c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003750:	461a      	mov	r2, r3
 8003752:	2101      	movs	r1, #1
 8003754:	f002 f898 	bl	8005888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	4f54300a 	.word	0x4f54300a

08003768 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
 8003774:	4613      	mov	r3, r2
 8003776:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003786:	883b      	ldrh	r3, [r7, #0]
 8003788:	0419      	lsls	r1, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	430a      	orrs	r2, r1
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
 8003794:	e028      	b.n	80037e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e00d      	b.n	80037c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	3340      	adds	r3, #64	; 0x40
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	3301      	adds	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d3ec      	bcc.n	80037aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037d0:	883b      	ldrh	r3, [r7, #0]
 80037d2:	0418      	lsls	r0, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	3b01      	subs	r3, #1
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	4302      	orrs	r2, r0
 80037e0:	3340      	adds	r3, #64	; 0x40
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e267      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d075      	beq.n	800393a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b04      	cmp	r3, #4
 8003858:	d00c      	beq.n	8003874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003862:	2b08      	cmp	r3, #8
 8003864:	d112      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003866:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003872:	d10b      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05b      	beq.n	8003938 <HAL_RCC_OscConfig+0x108>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d157      	bne.n	8003938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e242      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x74>
 8003896:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a75      	ldr	r2, [pc, #468]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x98>
 80038ae:	4b70      	ldr	r3, [pc, #448]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6f      	ldr	r2, [pc, #444]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6c      	ldr	r2, [pc, #432]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038c8:	4b69      	ldr	r3, [pc, #420]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a68      	ldr	r2, [pc, #416]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a65      	ldr	r2, [pc, #404]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fd fb6a 	bl	8000fc0 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fd fb66 	bl	8000fc0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e207      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b5b      	ldr	r3, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0xc0>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd fb56 	bl	8000fc0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd fb52 	bl	8000fc0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1f3      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	4b51      	ldr	r3, [pc, #324]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0xe8>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d063      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11c      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395e:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1c7      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4937      	ldr	r1, [pc, #220]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	e03a      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a0:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x244>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fd fb0b 	bl	8000fc0 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fd fb07 	bl	8000fc0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1a8      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4925      	ldr	r1, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x244>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd faea 	bl	8000fc0 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fd fae6 	bl	8000fc0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e187      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x248>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd faca 	bl	8000fc0 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fd fac6 	bl	8000fc0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e167      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x200>
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_OscConfig+0x248>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fd fab3 	bl	8000fc0 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	e00e      	b.n	8003a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fd faaf 	bl	8000fc0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d907      	bls.n	8003a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e150      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	42470000 	.word	0x42470000
 8003a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ea      	bne.n	8003a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8097 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a7c      	ldr	r2, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b77      	ldr	r3, [pc, #476]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a73      	ldr	r2, [pc, #460]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fd fa6f 	bl	8000fc0 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fd fa6b 	bl	8000fc0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e10c      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2ea>
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a63      	ldr	r2, [pc, #396]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x324>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x30c>
 8003b22:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a5e      	ldr	r2, [pc, #376]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a5b      	ldr	r2, [pc, #364]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0x324>
 8003b3c:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a57      	ldr	r2, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	4b55      	ldr	r3, [pc, #340]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd fa30 	bl	8000fc0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd fa2c 	bl	8000fc0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0cb      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <HAL_RCC_OscConfig+0x334>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b88:	f7fd fa1a 	bl	8000fc0 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd fa16 	bl	8000fc0 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0b5      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ee      	bne.n	8003b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4a38      	ldr	r2, [pc, #224]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80a1 	beq.w	8003d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d05c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d141      	bne.n	8003c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fd f9ea 	bl	8000fc0 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fd f9e6 	bl	8000fc0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e087      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	491b      	ldr	r1, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fd f9bf 	bl	8000fc0 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fd f9bb 	bl	8000fc0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e05c      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x416>
 8003c64:	e054      	b.n	8003d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd f9a8 	bl	8000fc0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd f9a4 	bl	8000fc0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e045      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x444>
 8003c92:	e03d      	b.n	8003d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e038      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x4ec>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d121      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d11a      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d111      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0cc      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d90c      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b65      	ldr	r3, [pc, #404]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a52      	ldr	r2, [pc, #328]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d119      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e067      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4934      	ldr	r1, [pc, #208]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fd f8d6 	bl	8000fc0 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd f8d2 	bl	8000fc0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e04f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d20c      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd f836 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	08008eb8 	.word	0x08008eb8
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b094      	sub	sp, #80	; 0x50
 8003ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef8:	2300      	movs	r3, #0
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	2300      	movs	r3, #0
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f04:	4b79      	ldr	r3, [pc, #484]	; (80040ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x40>
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	f200 80e1 	bhi.w	80040d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x34>
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f1e:	e0db      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f20:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f24:	e0db      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f26:	4b73      	ldr	r3, [pc, #460]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f2a:	e0d8      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2c:	4b6f      	ldr	r3, [pc, #444]	; (80040ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f36:	4b6d      	ldr	r3, [pc, #436]	; (80040ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d063      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
 8003f56:	2300      	movs	r3, #0
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f5e:	4622      	mov	r2, r4
 8003f60:	462b      	mov	r3, r5
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	0159      	lsls	r1, r3, #5
 8003f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f70:	0150      	lsls	r0, r2, #5
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4621      	mov	r1, r4
 8003f78:	1a51      	subs	r1, r2, r1
 8003f7a:	6139      	str	r1, [r7, #16]
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f90:	4659      	mov	r1, fp
 8003f92:	018b      	lsls	r3, r1, #6
 8003f94:	4651      	mov	r1, sl
 8003f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	018a      	lsls	r2, r1, #6
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fbe:	4690      	mov	r8, r2
 8003fc0:	4699      	mov	r9, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	eb18 0303 	adds.w	r3, r8, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	462b      	mov	r3, r5
 8003fcc:	eb49 0303 	adc.w	r3, r9, r3
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	024b      	lsls	r3, r1, #9
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fe8:	4621      	mov	r1, r4
 8003fea:	024a      	lsls	r2, r1, #9
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ffc:	f7fc f940 	bl	8000280 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004008:	e058      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_RCC_GetSysClockFreq+0x200>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	2200      	movs	r2, #0
 8004012:	4618      	mov	r0, r3
 8004014:	4611      	mov	r1, r2
 8004016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	2300      	movs	r3, #0
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	f04f 0000 	mov.w	r0, #0
 800402c:	f04f 0100 	mov.w	r1, #0
 8004030:	0159      	lsls	r1, r3, #5
 8004032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004036:	0150      	lsls	r0, r2, #5
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4641      	mov	r1, r8
 800403e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb63 0b01 	sbc.w	fp, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800405c:	ebb2 040a 	subs.w	r4, r2, sl
 8004060:	eb63 050b 	sbc.w	r5, r3, fp
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	00eb      	lsls	r3, r5, #3
 800406e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004072:	00e2      	lsls	r2, r4, #3
 8004074:	4614      	mov	r4, r2
 8004076:	461d      	mov	r5, r3
 8004078:	4643      	mov	r3, r8
 800407a:	18e3      	adds	r3, r4, r3
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	464b      	mov	r3, r9
 8004080:	eb45 0303 	adc.w	r3, r5, r3
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004092:	4629      	mov	r1, r5
 8004094:	028b      	lsls	r3, r1, #10
 8004096:	4621      	mov	r1, r4
 8004098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800409c:	4621      	mov	r1, r4
 800409e:	028a      	lsls	r2, r1, #10
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a6:	2200      	movs	r2, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	61fa      	str	r2, [r7, #28]
 80040ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b0:	f7fc f8e6 	bl	8000280 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4613      	mov	r3, r2
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCC_GetSysClockFreq+0x200>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	3301      	adds	r3, #1
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d6:	e002      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3750      	adds	r7, #80	; 0x50
 80040e4:	46bd      	mov	sp, r7
 80040e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	007a1200 	.word	0x007a1200

080040f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_GetHCLKFreq+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000000 	.word	0x20000000

08004110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004110:	b084      	sub	sp, #16
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	f107 001c 	add.w	r0, r7, #28
 800411e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	d122      	bne.n	800416e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800413c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f001 fbee 	bl	8005944 <USB_CoreReset>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	e01a      	b.n	80041a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f001 fbe2 	bl	8005944 <USB_CoreReset>
 8004180:	4603      	mov	r3, r0
 8004182:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	639a      	str	r2, [r3, #56]	; 0x38
 8004196:	e005      	b.n	80041a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10b      	bne.n	80041c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f043 0206 	orr.w	r2, r3, #6
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041ce:	b004      	add	sp, #16
 80041d0:	4770      	bx	lr
	...

080041d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d165      	bne.n	80042b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4a41      	ldr	r2, [pc, #260]	; (80042f0 <USB_SetTurnaroundTime+0x11c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d906      	bls.n	80041fe <USB_SetTurnaroundTime+0x2a>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4a40      	ldr	r2, [pc, #256]	; (80042f4 <USB_SetTurnaroundTime+0x120>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d202      	bcs.n	80041fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041f8:	230f      	movs	r3, #15
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e062      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <USB_SetTurnaroundTime+0x120>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d306      	bcc.n	8004214 <USB_SetTurnaroundTime+0x40>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <USB_SetTurnaroundTime+0x124>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d202      	bcs.n	8004214 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800420e:	230e      	movs	r3, #14
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e057      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a38      	ldr	r2, [pc, #224]	; (80042f8 <USB_SetTurnaroundTime+0x124>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d306      	bcc.n	800422a <USB_SetTurnaroundTime+0x56>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a37      	ldr	r2, [pc, #220]	; (80042fc <USB_SetTurnaroundTime+0x128>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d202      	bcs.n	800422a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004224:	230d      	movs	r3, #13
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e04c      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4a33      	ldr	r2, [pc, #204]	; (80042fc <USB_SetTurnaroundTime+0x128>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d306      	bcc.n	8004240 <USB_SetTurnaroundTime+0x6c>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a32      	ldr	r2, [pc, #200]	; (8004300 <USB_SetTurnaroundTime+0x12c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d802      	bhi.n	8004240 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800423a:	230c      	movs	r3, #12
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e041      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <USB_SetTurnaroundTime+0x12c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d906      	bls.n	8004256 <USB_SetTurnaroundTime+0x82>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a2e      	ldr	r2, [pc, #184]	; (8004304 <USB_SetTurnaroundTime+0x130>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d802      	bhi.n	8004256 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004250:	230b      	movs	r3, #11
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e036      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <USB_SetTurnaroundTime+0x130>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d906      	bls.n	800426c <USB_SetTurnaroundTime+0x98>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <USB_SetTurnaroundTime+0x134>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d802      	bhi.n	800426c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004266:	230a      	movs	r3, #10
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e02b      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a26      	ldr	r2, [pc, #152]	; (8004308 <USB_SetTurnaroundTime+0x134>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0xae>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a25      	ldr	r2, [pc, #148]	; (800430c <USB_SetTurnaroundTime+0x138>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d202      	bcs.n	8004282 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800427c:	2309      	movs	r3, #9
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e020      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <USB_SetTurnaroundTime+0x138>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d306      	bcc.n	8004298 <USB_SetTurnaroundTime+0xc4>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a20      	ldr	r2, [pc, #128]	; (8004310 <USB_SetTurnaroundTime+0x13c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d802      	bhi.n	8004298 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004292:	2308      	movs	r3, #8
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e015      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <USB_SetTurnaroundTime+0x13c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0xda>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <USB_SetTurnaroundTime+0x140>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d202      	bcs.n	80042ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042a8:	2307      	movs	r3, #7
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e00a      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042ae:	2306      	movs	r3, #6
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e007      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042ba:	2309      	movs	r3, #9
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e001      	b.n	80042c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042c0:	2309      	movs	r3, #9
 80042c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	029b      	lsls	r3, r3, #10
 80042d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	00d8acbf 	.word	0x00d8acbf
 80042f4:	00e4e1c0 	.word	0x00e4e1c0
 80042f8:	00f42400 	.word	0x00f42400
 80042fc:	01067380 	.word	0x01067380
 8004300:	011a499f 	.word	0x011a499f
 8004304:	01312cff 	.word	0x01312cff
 8004308:	014ca43f 	.word	0x014ca43f
 800430c:	016e3600 	.word	0x016e3600
 8004310:	01a6ab1f 	.word	0x01a6ab1f
 8004314:	01e84800 	.word	0x01e84800

08004318 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d115      	bne.n	80043aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800438a:	2001      	movs	r0, #1
 800438c:	f7fc fe24 	bl	8000fd8 <HAL_Delay>
      ms++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f001 fa45 	bl	8005826 <USB_GetMode>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d01e      	beq.n	80043e0 <USB_SetCurrentMode+0x84>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b31      	cmp	r3, #49	; 0x31
 80043a6:	d9f0      	bls.n	800438a <USB_SetCurrentMode+0x2e>
 80043a8:	e01a      	b.n	80043e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d115      	bne.n	80043dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043bc:	2001      	movs	r0, #1
 80043be:	f7fc fe0b 	bl	8000fd8 <HAL_Delay>
      ms++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 fa2c 	bl	8005826 <USB_GetMode>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <USB_SetCurrentMode+0x84>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b31      	cmp	r3, #49	; 0x31
 80043d8:	d9f0      	bls.n	80043bc <USB_SetCurrentMode+0x60>
 80043da:	e001      	b.n	80043e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e005      	b.n	80043ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b32      	cmp	r3, #50	; 0x32
 80043e4:	d101      	bne.n	80043ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f4:	b084      	sub	sp, #16
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e009      	b.n	8004428 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	3340      	adds	r3, #64	; 0x40
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3301      	adds	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0e      	cmp	r3, #14
 800442c:	d9f2      	bls.n	8004414 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800442e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11c      	bne.n	800446e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004442:	f043 0302 	orr.w	r3, r3, #2
 8004446:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
 800446c:	e00b      	b.n	8004486 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800448c:	461a      	mov	r2, r3
 800448e:	2300      	movs	r3, #0
 8004490:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	4619      	mov	r1, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	461a      	mov	r2, r3
 80044a2:	680b      	ldr	r3, [r1, #0]
 80044a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d10c      	bne.n	80044c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044b2:	2100      	movs	r1, #0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f965 	bl	8004784 <USB_SetDevSpeed>
 80044ba:	e008      	b.n	80044ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044bc:	2101      	movs	r1, #1
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f960 	bl	8004784 <USB_SetDevSpeed>
 80044c4:	e003      	b.n	80044ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044c6:	2103      	movs	r1, #3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f95b 	bl	8004784 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044ce:	2110      	movs	r1, #16
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8f3 	bl	80046bc <USB_FlushTxFifo>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f91f 	bl	8004724 <USB_FlushRxFifo>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	461a      	mov	r2, r3
 8004504:	2300      	movs	r3, #0
 8004506:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	461a      	mov	r2, r3
 8004510:	2300      	movs	r3, #0
 8004512:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e043      	b.n	80045a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004530:	d118      	bne.n	8004564 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	461a      	mov	r2, r3
 8004546:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e013      	b.n	8004576 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	461a      	mov	r2, r3
 800455c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e008      	b.n	8004576 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	461a      	mov	r2, r3
 8004572:	2300      	movs	r3, #0
 8004574:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	461a      	mov	r2, r3
 8004584:	2300      	movs	r3, #0
 8004586:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800459a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3301      	adds	r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3b7      	bcc.n	800451a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e043      	b.n	8004638 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c6:	d118      	bne.n	80045fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e013      	b.n	800460c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e008      	b.n	800460c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	461a      	mov	r2, r3
 800461a:	2300      	movs	r3, #0
 800461c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004630:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3301      	adds	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d3b7      	bcc.n	80045b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004652:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004660:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f043 0210 	orr.w	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <USB_DevInit+0x2c4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f043 0208 	orr.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b4:	b004      	add	sp, #16
 80046b6:	4770      	bx	lr
 80046b8:	803c3800 	.word	0x803c3800

080046bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a13      	ldr	r2, [pc, #76]	; (8004720 <USB_FlushTxFifo+0x64>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e01b      	b.n	8004714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	daf2      	bge.n	80046ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	019b      	lsls	r3, r3, #6
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a08      	ldr	r2, [pc, #32]	; (8004720 <USB_FlushTxFifo+0x64>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e006      	b.n	8004714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b20      	cmp	r3, #32
 8004710:	d0f0      	beq.n	80046f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	00030d40 	.word	0x00030d40

08004724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a11      	ldr	r2, [pc, #68]	; (8004780 <USB_FlushRxFifo+0x5c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e018      	b.n	8004774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	daf2      	bge.n	8004730 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2210      	movs	r2, #16
 8004752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a08      	ldr	r2, [pc, #32]	; (8004780 <USB_FlushRxFifo+0x5c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e006      	b.n	8004774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b10      	cmp	r3, #16
 8004770:	d0f0      	beq.n	8004754 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	00030d40 	.word	0x00030d40

08004784 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b087      	sub	sp, #28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0306 	and.w	r3, r3, #6
 80047ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
 80047da:	e00a      	b.n	80047f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d002      	beq.n	80047e8 <USB_GetDevSpeed+0x32>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d102      	bne.n	80047ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047e8:	2302      	movs	r3, #2
 80047ea:	75fb      	strb	r3, [r7, #23]
 80047ec:	e001      	b.n	80047f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047ee:	230f      	movs	r3, #15
 80047f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d13a      	bne.n	8004892 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	b29b      	uxth	r3, r3
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800483a:	4313      	orrs	r3, r2
 800483c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d155      	bne.n	8004900 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004870:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	059b      	lsls	r3, r3, #22
 8004876:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004878:	4313      	orrs	r3, r2
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	e036      	b.n	8004900 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	2101      	movs	r1, #1
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11a      	bne.n	8004900 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	791b      	ldrb	r3, [r3, #4]
 80048e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048e6:	430b      	orrs	r3, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d161      	bne.n	80049f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004942:	d11f      	bne.n	8004984 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004962:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	440a      	add	r2, r1
 800497a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	b29b      	uxth	r3, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a4:	4013      	ands	r3, r2
 80049a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	2101      	movs	r1, #1
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c8:	4013      	ands	r3, r2
 80049ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0159      	lsls	r1, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	440b      	add	r3, r1
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	4619      	mov	r1, r3
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <USB_DeactivateEndpoint+0x1b0>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
 80049ee:	e060      	b.n	8004ab2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a06:	d11f      	bne.n	8004a48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	2101      	movs	r1, #1
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	43db      	mvns	r3, r3
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a68:	4013      	ands	r3, r2
 8004a6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	43db      	mvns	r3, r3
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	0159      	lsls	r1, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	440b      	add	r3, r1
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <USB_DeactivateEndpoint+0x1b4>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	ec337800 	.word	0xec337800
 8004ac4:	eff37800 	.word	0xeff37800

08004ac8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 815c 	bne.w	8004da2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d132      	bne.n	8004b58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	0cdb      	lsrs	r3, r3, #19
 8004b52:	04db      	lsls	r3, r3, #19
 8004b54:	6113      	str	r3, [r2, #16]
 8004b56:	e074      	b.n	8004c42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b72:	0cdb      	lsrs	r3, r3, #19
 8004b74:	04db      	lsls	r3, r3, #19
 8004b76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	440b      	add	r3, r1
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bbe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bc0:	4b9d      	ldr	r3, [pc, #628]	; (8004e38 <USB_EPStartXfer+0x370>)
 8004bc2:	400b      	ands	r3, r1
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	0148      	lsls	r0, r1, #5
 8004bc8:	69f9      	ldr	r1, [r7, #28]
 8004bca:	4401      	add	r1, r0
 8004bcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	0148      	lsls	r0, r1, #5
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	4401      	add	r1, r0
 8004bf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	791b      	ldrb	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d11f      	bne.n	8004c42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d14b      	bne.n	8004ce0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	791b      	ldrb	r3, [r3, #4]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d128      	bne.n	8004cbe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d110      	bne.n	8004c9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	e00f      	b.n	8004cbe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e133      	b.n	8004f48 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cfe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	791b      	ldrb	r3, [r3, #4]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d015      	beq.n	8004d34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 811b 	beq.w	8004f48 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	2101      	movs	r1, #1
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	634b      	str	r3, [r1, #52]	; 0x34
 8004d32:	e109      	b.n	8004f48 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d110      	bne.n	8004d66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e00f      	b.n	8004d86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6919      	ldr	r1, [r3, #16]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	b298      	uxth	r0, r3
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4603      	mov	r3, r0
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fade 	bl	800535c <USB_WritePacket>
 8004da0:	e0d2      	b.n	8004f48 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dbc:	0cdb      	lsrs	r3, r3, #19
 8004dbe:	04db      	lsls	r3, r3, #19
 8004dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d126      	bne.n	8004e3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	0148      	lsls	r0, r1, #5
 8004e08:	69f9      	ldr	r1, [r7, #28]
 8004e0a:	4401      	add	r1, r0
 8004e0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e10:	4313      	orrs	r3, r2
 8004e12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e32:	6113      	str	r3, [r2, #16]
 8004e34:	e03a      	b.n	8004eac <USB_EPStartXfer+0x3e4>
 8004e36:	bf00      	nop
 8004e38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	8afa      	ldrh	r2, [r7, #22]
 8004e58:	fb03 f202 	mul.w	r2, r3, r2
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	8afb      	ldrh	r3, [r7, #22]
 8004e70:	04d9      	lsls	r1, r3, #19
 8004e72:	4b38      	ldr	r3, [pc, #224]	; (8004f54 <USB_EPStartXfer+0x48c>)
 8004e74:	400b      	ands	r3, r1
 8004e76:	69b9      	ldr	r1, [r7, #24]
 8004e78:	0148      	lsls	r0, r1, #5
 8004e7a:	69f9      	ldr	r1, [r7, #28]
 8004e7c:	4401      	add	r1, r0
 8004e7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	0148      	lsls	r0, r1, #5
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	4401      	add	r1, r0
 8004ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10d      	bne.n	8004ece <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6919      	ldr	r1, [r3, #16]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	460a      	mov	r2, r1
 8004ecc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	791b      	ldrb	r3, [r3, #4]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d128      	bne.n	8004f28 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d110      	bne.n	8004f08 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e00f      	b.n	8004f28 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	1ff80000 	.word	0x1ff80000

08004f58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 80ce 	bne.w	8005116 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d132      	bne.n	8004fe8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	0cdb      	lsrs	r3, r3, #19
 8004fe2:	04db      	lsls	r3, r3, #19
 8004fe4:	6113      	str	r3, [r2, #16]
 8004fe6:	e04e      	b.n	8005086 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005002:	0cdb      	lsrs	r3, r3, #19
 8005004:	04db      	lsls	r3, r3, #19
 8005006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800502a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d903      	bls.n	8005040 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005076:	6939      	ldr	r1, [r7, #16]
 8005078:	0148      	lsls	r0, r1, #5
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	4401      	add	r1, r0
 800507e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d11e      	bne.n	80050ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e097      	b.n	80051fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8083 	beq.w	80051fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005110:	4313      	orrs	r3, r2
 8005112:	634b      	str	r3, [r1, #52]	; 0x34
 8005114:	e071      	b.n	80051fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005130:	0cdb      	lsrs	r3, r3, #19
 8005132:	04db      	lsls	r3, r3, #19
 8005134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005158:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a8:	6939      	ldr	r1, [r7, #16]
 80051aa:	0148      	lsls	r0, r1, #5
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	4401      	add	r1, r0
 80051b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10d      	bne.n	80051da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6919      	ldr	r1, [r3, #16]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	460a      	mov	r2, r1
 80051d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d14a      	bne.n	80052bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523e:	f040 8086 	bne.w	800534e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005264:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005288:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f242 7210 	movw	r2, #10000	; 0x2710
 8005296:	4293      	cmp	r3, r2
 8005298:	d902      	bls.n	80052a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
          break;
 800529e:	e056      	b.n	800534e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b8:	d0e7      	beq.n	800528a <USB_EPStopXfer+0x82>
 80052ba:	e048      	b.n	800534e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d4:	d13b      	bne.n	800534e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f242 7210 	movw	r2, #10000	; 0x2710
 800532a:	4293      	cmp	r3, r2
 800532c:	d902      	bls.n	8005334 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
          break;
 8005332:	e00c      	b.n	800534e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800534c:	d0e7      	beq.n	800531e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800535c:	b480      	push	{r7}
 800535e:	b089      	sub	sp, #36	; 0x24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	460b      	mov	r3, r1
 800536c:	71fb      	strb	r3, [r7, #7]
 800536e:	4613      	mov	r3, r2
 8005370:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800537a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d123      	bne.n	80053ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	3303      	adds	r3, #3
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e018      	b.n	80053c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	031a      	lsls	r2, r3, #12
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539c:	461a      	mov	r2, r3
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3301      	adds	r3, #1
 80053b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	3301      	adds	r3, #1
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d3e2      	bcc.n	8005390 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3724      	adds	r7, #36	; 0x24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053d8:	b480      	push	{r7}
 80053da:	b08b      	sub	sp, #44	; 0x2c
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	e014      	b.n	800542e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	3301      	adds	r3, #1
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	3301      	adds	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	3301      	adds	r3, #1
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	3301      	adds	r3, #1
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	3301      	adds	r3, #1
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	6a3a      	ldr	r2, [r7, #32]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	429a      	cmp	r2, r3
 8005434:	d3e6      	bcc.n	8005404 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005436:	8bfb      	ldrh	r3, [r7, #30]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01e      	beq.n	800547a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	461a      	mov	r2, r3
 8005448:	f107 0310 	add.w	r3, r7, #16
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	b2da      	uxtb	r2, r3
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	701a      	strb	r2, [r3, #0]
      i++;
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	3301      	adds	r3, #1
 8005466:	623b      	str	r3, [r7, #32]
      pDest++;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	3301      	adds	r3, #1
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800546e:	8bfb      	ldrh	r3, [r7, #30]
 8005470:	3b01      	subs	r3, #1
 8005472:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005474:	8bfb      	ldrh	r3, [r7, #30]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ea      	bne.n	8005450 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800547c:	4618      	mov	r0, r3
 800547e:	372c      	adds	r7, #44	; 0x2c
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d12c      	bne.n	80054fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db12      	blt.n	80054dc <USB_EPSetStall+0x54>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00f      	beq.n	80054dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e02b      	b.n	8005556 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db12      	blt.n	8005536 <USB_EPSetStall+0xae>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00f      	beq.n	8005536 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005530:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005534:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005554:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d128      	bne.n	80055d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800559e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d003      	beq.n	80055b0 <USB_EPClearStall+0x4c>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	791b      	ldrb	r3, [r3, #4]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d138      	bne.n	8005622 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	e027      	b.n	8005622 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	791b      	ldrb	r3, [r3, #4]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d003      	beq.n	8005602 <USB_EPClearStall+0x9e>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	791b      	ldrb	r3, [r3, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d10f      	bne.n	8005622 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005652:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056aa:	f023 0302 	bic.w	r3, r3, #2
 80056ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056d8:	f023 0303 	bic.w	r3, r3, #3
 80056dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005718:	68fb      	ldr	r3, [r7, #12]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0c1b      	lsrs	r3, r3, #16
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	b29b      	uxth	r3, r3
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057bc:	68bb      	ldr	r3, [r7, #8]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	01db      	lsls	r3, r3, #7
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4013      	ands	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005818:	68bb      	ldr	r3, [r7, #8]
}
 800581a:	4618      	mov	r0, r3
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0301 	and.w	r3, r3, #1
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	460b      	mov	r3, r1
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	333c      	adds	r3, #60	; 0x3c
 800589e:	3304      	adds	r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4a26      	ldr	r2, [pc, #152]	; (8005940 <USB_EP0_OutStart+0xb8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d90a      	bls.n	80058c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058bc:	d101      	bne.n	80058c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e037      	b.n	8005932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f0:	f043 0318 	orr.w	r3, r3, #24
 80058f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10f      	bne.n	8005930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	461a      	mov	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800592e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	4f54300a 	.word	0x4f54300a

08005944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <USB_CoreReset+0x64>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e01b      	b.n	800599a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	daf2      	bge.n	8005950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f043 0201 	orr.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <USB_CoreReset+0x64>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e006      	b.n	800599a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b01      	cmp	r3, #1
 8005996:	d0f0      	beq.n	800597a <USB_CoreReset+0x36>

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	00030d40 	.word	0x00030d40

080059ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059bc:	f002 fcc4 	bl	8008348 <USBD_static_malloc>
 80059c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	32b0      	adds	r2, #176	; 0xb0
 80059d2:	2100      	movs	r1, #0
 80059d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80059d8:	2302      	movs	r3, #2
 80059da:	e0d4      	b.n	8005b86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80059dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80059e0:	2100      	movs	r1, #0
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f002 fd14 	bl	8008410 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	32b0      	adds	r2, #176	; 0xb0
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	32b0      	adds	r2, #176	; 0xb0
 8005a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7c1b      	ldrb	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d138      	bne.n	8005a86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a14:	4b5e      	ldr	r3, [pc, #376]	; (8005b90 <USBD_CDC_Init+0x1e4>)
 8005a16:	7819      	ldrb	r1, [r3, #0]
 8005a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f002 fb6f 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a24:	4b5a      	ldr	r3, [pc, #360]	; (8005b90 <USBD_CDC_Init+0x1e4>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3324      	adds	r3, #36	; 0x24
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a3e:	4b55      	ldr	r3, [pc, #340]	; (8005b94 <USBD_CDC_Init+0x1e8>)
 8005a40:	7819      	ldrb	r1, [r3, #0]
 8005a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a46:	2202      	movs	r2, #2
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f002 fb5a 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a4e:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <USBD_CDC_Init+0x1e8>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a66:	2201      	movs	r2, #1
 8005a68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a6a:	4b4b      	ldr	r3, [pc, #300]	; (8005b98 <USBD_CDC_Init+0x1ec>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3326      	adds	r3, #38	; 0x26
 8005a80:	2210      	movs	r2, #16
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e035      	b.n	8005af2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a86:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <USBD_CDC_Init+0x1e4>)
 8005a88:	7819      	ldrb	r1, [r3, #0]
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 fb37 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a94:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <USBD_CDC_Init+0x1e4>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3324      	adds	r3, #36	; 0x24
 8005aaa:	2201      	movs	r2, #1
 8005aac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005aae:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <USBD_CDC_Init+0x1e8>)
 8005ab0:	7819      	ldrb	r1, [r3, #0]
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fb23 	bl	8008102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005abc:	4b35      	ldr	r3, [pc, #212]	; (8005b94 <USBD_CDC_Init+0x1e8>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <USBD_CDC_Init+0x1ec>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	3326      	adds	r3, #38	; 0x26
 8005aee:	2210      	movs	r2, #16
 8005af0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005af2:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <USBD_CDC_Init+0x1ec>)
 8005af4:	7819      	ldrb	r1, [r3, #0]
 8005af6:	2308      	movs	r3, #8
 8005af8:	2203      	movs	r2, #3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f002 fb01 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <USBD_CDC_Init+0x1ec>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3324      	adds	r3, #36	; 0x24
 8005b16:	2201      	movs	r2, #1
 8005b18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	33b0      	adds	r3, #176	; 0xb0
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b50:	2302      	movs	r3, #2
 8005b52:	e018      	b.n	8005b86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7c1b      	ldrb	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <USBD_CDC_Init+0x1e8>)
 8005b5e:	7819      	ldrb	r1, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f002 fbb8 	bl	80082e0 <USBD_LL_PrepareReceive>
 8005b70:	e008      	b.n	8005b84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <USBD_CDC_Init+0x1e8>)
 8005b74:	7819      	ldrb	r1, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b7c:	2340      	movs	r3, #64	; 0x40
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f002 fbae 	bl	80082e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000093 	.word	0x20000093
 8005b94:	20000094 	.word	0x20000094
 8005b98:	20000095 	.word	0x20000095

08005b9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ba8:	4b3a      	ldr	r3, [pc, #232]	; (8005c94 <USBD_CDC_DeInit+0xf8>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f002 facd 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005bb4:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <USBD_CDC_DeInit+0xf8>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3324      	adds	r3, #36	; 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005bce:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <USBD_CDC_DeInit+0xfc>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f002 faba 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <USBD_CDC_DeInit+0xfc>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f003 020f 	and.w	r2, r3, #15
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005bf6:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <USBD_CDC_DeInit+0x100>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f002 faa6 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005c02:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <USBD_CDC_DeInit+0x100>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f003 020f 	and.w	r2, r3, #15
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	2200      	movs	r2, #0
 8005c1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <USBD_CDC_DeInit+0x100>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3326      	adds	r3, #38	; 0x26
 8005c32:	2200      	movs	r2, #0
 8005c34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	32b0      	adds	r2, #176	; 0xb0
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01f      	beq.n	8005c88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	33b0      	adds	r3, #176	; 0xb0
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	32b0      	adds	r2, #176	; 0xb0
 8005c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f002 fb7a 	bl	8008364 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	32b0      	adds	r2, #176	; 0xb0
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000093 	.word	0x20000093
 8005c98:	20000094 	.word	0x20000094
 8005c9c:	20000095 	.word	0x20000095

08005ca0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	32b0      	adds	r2, #176	; 0xb0
 8005cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e0bf      	b.n	8005e50 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d050      	beq.n	8005d7e <USBD_CDC_Setup+0xde>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	f040 80af 	bne.w	8005e40 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	88db      	ldrh	r3, [r3, #6]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d03a      	beq.n	8005d60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b25b      	sxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	da1b      	bge.n	8005d2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	33b0      	adds	r3, #176	; 0xb0
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005d0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	88d2      	ldrh	r2, [r2, #6]
 8005d10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	88db      	ldrh	r3, [r3, #6]
 8005d16:	2b07      	cmp	r3, #7
 8005d18:	bf28      	it	cs
 8005d1a:	2307      	movcs	r3, #7
 8005d1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	89fa      	ldrh	r2, [r7, #14]
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 fd89 	bl	800783c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d2a:	e090      	b.n	8005e4e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	785a      	ldrb	r2, [r3, #1]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	88db      	ldrh	r3, [r3, #6]
 8005d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8005d3c:	d803      	bhi.n	8005d46 <USBD_CDC_Setup+0xa6>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	88db      	ldrh	r3, [r3, #6]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	e000      	b.n	8005d48 <USBD_CDC_Setup+0xa8>
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d4e:	6939      	ldr	r1, [r7, #16]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005d56:	461a      	mov	r2, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fd9b 	bl	8007894 <USBD_CtlPrepareRx>
      break;
 8005d5e:	e076      	b.n	8005e4e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	33b0      	adds	r3, #176	; 0xb0
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7850      	ldrb	r0, [r2, #1]
 8005d76:	2200      	movs	r2, #0
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	4798      	blx	r3
      break;
 8005d7c:	e067      	b.n	8005e4e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b0b      	cmp	r3, #11
 8005d84:	d851      	bhi.n	8005e2a <USBD_CDC_Setup+0x18a>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <USBD_CDC_Setup+0xec>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005dbd 	.word	0x08005dbd
 8005d90:	08005e39 	.word	0x08005e39
 8005d94:	08005e2b 	.word	0x08005e2b
 8005d98:	08005e2b 	.word	0x08005e2b
 8005d9c:	08005e2b 	.word	0x08005e2b
 8005da0:	08005e2b 	.word	0x08005e2b
 8005da4:	08005e2b 	.word	0x08005e2b
 8005da8:	08005e2b 	.word	0x08005e2b
 8005dac:	08005e2b 	.word	0x08005e2b
 8005db0:	08005e2b 	.word	0x08005e2b
 8005db4:	08005de7 	.word	0x08005de7
 8005db8:	08005e11 	.word	0x08005e11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d107      	bne.n	8005dd8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dc8:	f107 030a 	add.w	r3, r7, #10
 8005dcc:	2202      	movs	r2, #2
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fd33 	bl	800783c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dd6:	e032      	b.n	8005e3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fcbd 	bl	800775a <USBD_CtlError>
            ret = USBD_FAIL;
 8005de0:	2303      	movs	r3, #3
 8005de2:	75fb      	strb	r3, [r7, #23]
          break;
 8005de4:	e02b      	b.n	8005e3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d107      	bne.n	8005e02 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005df2:	f107 030d 	add.w	r3, r7, #13
 8005df6:	2201      	movs	r2, #1
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fd1e 	bl	800783c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e00:	e01d      	b.n	8005e3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 fca8 	bl	800775a <USBD_CtlError>
            ret = USBD_FAIL;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e0e:	e016      	b.n	8005e3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d00f      	beq.n	8005e3c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fc9b 	bl	800775a <USBD_CtlError>
            ret = USBD_FAIL;
 8005e24:	2303      	movs	r3, #3
 8005e26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e28:	e008      	b.n	8005e3c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 fc94 	bl	800775a <USBD_CtlError>
          ret = USBD_FAIL;
 8005e32:	2303      	movs	r3, #3
 8005e34:	75fb      	strb	r3, [r7, #23]
          break;
 8005e36:	e002      	b.n	8005e3e <USBD_CDC_Setup+0x19e>
          break;
 8005e38:	bf00      	nop
 8005e3a:	e008      	b.n	8005e4e <USBD_CDC_Setup+0x1ae>
          break;
 8005e3c:	bf00      	nop
      }
      break;
 8005e3e:	e006      	b.n	8005e4e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fc89 	bl	800775a <USBD_CtlError>
      ret = USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	32b0      	adds	r2, #176	; 0xb0
 8005e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e065      	b.n	8005f4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32b0      	adds	r2, #176	; 0xb0
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	f003 020f 	and.w	r2, r3, #15
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3318      	adds	r3, #24
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d02f      	beq.n	8005f0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	f003 020f 	and.w	r2, r3, #15
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	3318      	adds	r3, #24
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	f003 010f 	and.w	r1, r3, #15
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	440b      	add	r3, r1
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4403      	add	r3, r0
 8005ed4:	3348      	adds	r3, #72	; 0x48
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d112      	bne.n	8005f0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3318      	adds	r3, #24
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005efe:	78f9      	ldrb	r1, [r7, #3]
 8005f00:	2300      	movs	r3, #0
 8005f02:	2200      	movs	r2, #0
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 f9ca 	bl	800829e <USBD_LL_Transmit>
 8005f0a:	e01f      	b.n	8005f4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	33b0      	adds	r3, #176	; 0xb0
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d010      	beq.n	8005f4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	33b0      	adds	r3, #176	; 0xb0
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	32b0      	adds	r2, #176	; 0xb0
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	32b0      	adds	r2, #176	; 0xb0
 8005f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e01a      	b.n	8005fbe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 f9c8 	bl	8008322 <USBD_LL_GetRxDataSize>
 8005f92:	4602      	mov	r2, r0
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	33b0      	adds	r3, #176	; 0xb0
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	32b0      	adds	r2, #176	; 0xb0
 8005fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e025      	b.n	8006034 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	33b0      	adds	r3, #176	; 0xb0
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01a      	beq.n	8006032 <USBD_CDC_EP0_RxReady+0x6c>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006002:	2bff      	cmp	r3, #255	; 0xff
 8006004:	d015      	beq.n	8006032 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	33b0      	adds	r3, #176	; 0xb0
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800601e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006026:	b292      	uxth	r2, r2
 8006028:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006044:	2182      	movs	r1, #130	; 0x82
 8006046:	4818      	ldr	r0, [pc, #96]	; (80060a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006048:	f000 fd4f 	bl	8006aea <USBD_GetEpDesc>
 800604c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800604e:	2101      	movs	r1, #1
 8006050:	4815      	ldr	r0, [pc, #84]	; (80060a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006052:	f000 fd4a 	bl	8006aea <USBD_GetEpDesc>
 8006056:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006058:	2181      	movs	r1, #129	; 0x81
 800605a:	4813      	ldr	r0, [pc, #76]	; (80060a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800605c:	f000 fd45 	bl	8006aea <USBD_GetEpDesc>
 8006060:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2210      	movs	r2, #16
 800606c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2200      	movs	r2, #0
 8006078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800607c:	711a      	strb	r2, [r3, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d006      	beq.n	8006096 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006090:	711a      	strb	r2, [r3, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2243      	movs	r2, #67	; 0x43
 800609a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000050 	.word	0x20000050

080060ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060b4:	2182      	movs	r1, #130	; 0x82
 80060b6:	4818      	ldr	r0, [pc, #96]	; (8006118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060b8:	f000 fd17 	bl	8006aea <USBD_GetEpDesc>
 80060bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060be:	2101      	movs	r1, #1
 80060c0:	4815      	ldr	r0, [pc, #84]	; (8006118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060c2:	f000 fd12 	bl	8006aea <USBD_GetEpDesc>
 80060c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060c8:	2181      	movs	r1, #129	; 0x81
 80060ca:	4813      	ldr	r0, [pc, #76]	; (8006118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060cc:	f000 fd0d 	bl	8006aea <USBD_GetEpDesc>
 80060d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2210      	movs	r2, #16
 80060dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2200      	movs	r2, #0
 80060e8:	711a      	strb	r2, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f042 0202 	orr.w	r2, r2, #2
 80060f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	711a      	strb	r2, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f042 0202 	orr.w	r2, r2, #2
 8006104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2243      	movs	r2, #67	; 0x43
 800610a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000050 	.word	0x20000050

0800611c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006124:	2182      	movs	r1, #130	; 0x82
 8006126:	4818      	ldr	r0, [pc, #96]	; (8006188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006128:	f000 fcdf 	bl	8006aea <USBD_GetEpDesc>
 800612c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800612e:	2101      	movs	r1, #1
 8006130:	4815      	ldr	r0, [pc, #84]	; (8006188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006132:	f000 fcda 	bl	8006aea <USBD_GetEpDesc>
 8006136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006138:	2181      	movs	r1, #129	; 0x81
 800613a:	4813      	ldr	r0, [pc, #76]	; (8006188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800613c:	f000 fcd5 	bl	8006aea <USBD_GetEpDesc>
 8006140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2210      	movs	r2, #16
 800614c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2200      	movs	r2, #0
 8006158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615c:	711a      	strb	r2, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d006      	beq.n	8006176 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006170:	711a      	strb	r2, [r3, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2243      	movs	r2, #67	; 0x43
 800617a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000050 	.word	0x20000050

0800618c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	220a      	movs	r2, #10
 8006198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800619a:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	2000000c 	.word	0x2000000c

080061ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	e009      	b.n	80061d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	33b0      	adds	r3, #176	; 0xb0
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	32b0      	adds	r2, #176	; 0xb0
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006202:	2303      	movs	r3, #3
 8006204:	e008      	b.n	8006218 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	32b0      	adds	r2, #176	; 0xb0
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	e004      	b.n	8006252 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	32b0      	adds	r2, #176	; 0xb0
 8006272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006276:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32b0      	adds	r2, #176	; 0xb0
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800628e:	2303      	movs	r3, #3
 8006290:	e025      	b.n	80062de <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006298:	2b00      	cmp	r3, #0
 800629a:	d11f      	bne.n	80062dc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80062a4:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <USBD_CDC_TransmitPacket+0x88>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4403      	add	r3, r0
 80062be:	3318      	adds	r3, #24
 80062c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <USBD_CDC_TransmitPacket+0x88>)
 80062c4:	7819      	ldrb	r1, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 ffe3 	bl	800829e <USBD_LL_Transmit>

    ret = USBD_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000093 	.word	0x20000093

080062ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32b0      	adds	r2, #176	; 0xb0
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32b0      	adds	r2, #176	; 0xb0
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	e018      	b.n	800634c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7c1b      	ldrb	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <USBD_CDC_ReceivePacket+0x68>)
 8006324:	7819      	ldrb	r1, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800632c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 ffd5 	bl	80082e0 <USBD_LL_PrepareReceive>
 8006336:	e008      	b.n	800634a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <USBD_CDC_ReceivePacket+0x68>)
 800633a:	7819      	ldrb	r1, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006342:	2340      	movs	r3, #64	; 0x40
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 ffcb 	bl	80082e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000094 	.word	0x20000094

08006358 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e01f      	b.n	80063b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	79fa      	ldrb	r2, [r7, #7]
 80063a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fe45 	bl	8008034 <USBD_LL_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e025      	b.n	800641c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	32ae      	adds	r2, #174	; 0xae
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00f      	beq.n	800640c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	32ae      	adds	r2, #174	; 0xae
 80063f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f107 020e 	add.w	r2, r7, #14
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
 8006404:	4602      	mov	r2, r0
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fe4d 	bl	80080cc <USBD_LL_Start>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	4611      	mov	r1, r2
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	4798      	blx	r3
 800647c:	4603      	mov	r3, r0
 800647e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	4611      	mov	r1, r2
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 f908 	bl	80076e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d01a      	beq.n	8006530 <USBD_LL_SetupStage+0x72>
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d822      	bhi.n	8006544 <USBD_LL_SetupStage+0x86>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <USBD_LL_SetupStage+0x4a>
 8006502:	2b01      	cmp	r3, #1
 8006504:	d00a      	beq.n	800651c <USBD_LL_SetupStage+0x5e>
 8006506:	e01d      	b.n	8006544 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fb5f 	bl	8006bd4 <USBD_StdDevReq>
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
      break;
 800651a:	e020      	b.n	800655e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fbc7 	bl	8006cb8 <USBD_StdItfReq>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
      break;
 800652e:	e016      	b.n	800655e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fc29 	bl	8006d90 <USBD_StdEPReq>
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]
      break;
 8006542:	e00c      	b.n	800655e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800654a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fe1a 	bl	800818c <USBD_LL_StallEP>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	bf00      	nop
  }

  return ret;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	460b      	mov	r3, r1
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d16e      	bne.n	800665e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006586:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800658e:	2b03      	cmp	r3, #3
 8006590:	f040 8098 	bne.w	80066c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	429a      	cmp	r2, r3
 800659e:	d913      	bls.n	80065c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bf28      	it	cs
 80065ba:	4613      	movcs	r3, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f001 f984 	bl	80078ce <USBD_CtlContinueRx>
 80065c6:	e07d      	b.n	80066c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d014      	beq.n	8006600 <USBD_LL_DataOutStage+0x98>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d81d      	bhi.n	8006616 <USBD_LL_DataOutStage+0xae>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <USBD_LL_DataOutStage+0x7c>
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d003      	beq.n	80065ea <USBD_LL_DataOutStage+0x82>
 80065e2:	e018      	b.n	8006616 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75bb      	strb	r3, [r7, #22]
            break;
 80065e8:	e018      	b.n	800661c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fa5e 	bl	8006ab6 <USBD_CoreFindIF>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75bb      	strb	r3, [r7, #22]
            break;
 80065fe:	e00d      	b.n	800661c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006606:	b2db      	uxtb	r3, r3
 8006608:	4619      	mov	r1, r3
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa60 	bl	8006ad0 <USBD_CoreFindEP>
 8006610:	4603      	mov	r3, r0
 8006612:	75bb      	strb	r3, [r7, #22]
            break;
 8006614:	e002      	b.n	800661c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	75bb      	strb	r3, [r7, #22]
            break;
 800661a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800661c:	7dbb      	ldrb	r3, [r7, #22]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d119      	bne.n	8006656 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d113      	bne.n	8006656 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800662e:	7dba      	ldrb	r2, [r7, #22]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	32ae      	adds	r2, #174	; 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800663e:	7dba      	ldrb	r2, [r7, #22]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006646:	7dba      	ldrb	r2, [r7, #22]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	32ae      	adds	r2, #174	; 0xae
 800664c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f001 f94a 	bl	80078f0 <USBD_CtlSendStatus>
 800665c:	e032      	b.n	80066c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006664:	b2db      	uxtb	r3, r3
 8006666:	4619      	mov	r1, r3
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fa31 	bl	8006ad0 <USBD_CoreFindEP>
 800666e:	4603      	mov	r3, r0
 8006670:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006672:	7dbb      	ldrb	r3, [r7, #22]
 8006674:	2bff      	cmp	r3, #255	; 0xff
 8006676:	d025      	beq.n	80066c4 <USBD_LL_DataOutStage+0x15c>
 8006678:	7dbb      	ldrb	r3, [r7, #22]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d122      	bne.n	80066c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d117      	bne.n	80066ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800668a:	7dba      	ldrb	r2, [r7, #22]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	32ae      	adds	r2, #174	; 0xae
 8006690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00f      	beq.n	80066ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800669a:	7dba      	ldrb	r2, [r7, #22]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066a2:	7dba      	ldrb	r2, [r7, #22]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	32ae      	adds	r2, #174	; 0xae
 80066a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	7afa      	ldrb	r2, [r7, #11]
 80066b0:	4611      	mov	r1, r2
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	4798      	blx	r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	e000      	b.n	80066c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	460b      	mov	r3, r1
 80066d8:	607a      	str	r2, [r7, #4]
 80066da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d16f      	bne.n	80067c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3314      	adds	r3, #20
 80066e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d15a      	bne.n	80067a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d914      	bls.n	8006728 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	461a      	mov	r2, r3
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f001 f8ac 	bl	8007872 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800671a:	2300      	movs	r3, #0
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f001 fddd 	bl	80082e0 <USBD_LL_PrepareReceive>
 8006726:	e03f      	b.n	80067a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d11c      	bne.n	800676e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800673c:	429a      	cmp	r2, r3
 800673e:	d316      	bcc.n	800676e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800674a:	429a      	cmp	r2, r3
 800674c:	d20f      	bcs.n	800676e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800674e:	2200      	movs	r2, #0
 8006750:	2100      	movs	r1, #0
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f001 f88d 	bl	8007872 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f001 fdba 	bl	80082e0 <USBD_LL_PrepareReceive>
 800676c:	e01c      	b.n	80067a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d10f      	bne.n	800679a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800679a:	2180      	movs	r1, #128	; 0x80
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f001 fcf5 	bl	800818c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f001 f8b7 	bl	8007916 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d03a      	beq.n	8006828 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fe42 	bl	800643c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067c0:	e032      	b.n	8006828 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	4619      	mov	r1, r3
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f97f 	bl	8006ad0 <USBD_CoreFindEP>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	2bff      	cmp	r3, #255	; 0xff
 80067da:	d025      	beq.n	8006828 <USBD_LL_DataInStage+0x15a>
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d122      	bne.n	8006828 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d11c      	bne.n	8006828 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80067ee:	7dfa      	ldrb	r2, [r7, #23]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	32ae      	adds	r2, #174	; 0xae
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d014      	beq.n	8006828 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80067fe:	7dfa      	ldrb	r2, [r7, #23]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006806:	7dfa      	ldrb	r2, [r7, #23]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	32ae      	adds	r2, #174	; 0xae
 800680c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	7afa      	ldrb	r2, [r7, #11]
 8006814:	4611      	mov	r1, r2
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	4798      	blx	r3
 800681a:	4603      	mov	r3, r0
 800681c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800681e:	7dbb      	ldrb	r3, [r7, #22]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006824:	7dbb      	ldrb	r3, [r7, #22]
 8006826:	e000      	b.n	800682a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d014      	beq.n	8006898 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6852      	ldr	r2, [r2, #4]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	4611      	mov	r1, r2
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006898:	2340      	movs	r3, #64	; 0x40
 800689a:	2200      	movs	r2, #0
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fc2f 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	2200      	movs	r2, #0
 80068b8:	2180      	movs	r1, #128	; 0x80
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fc21 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2240      	movs	r2, #64	; 0x40
 80068ca:	621a      	str	r2, [r3, #32]

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006904:	b2da      	uxtb	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2204      	movs	r2, #4
 8006910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b04      	cmp	r3, #4
 8006934:	d106      	bne.n	8006944 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800693c:	b2da      	uxtb	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d110      	bne.n	8006988 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	32ae      	adds	r2, #174	; 0xae
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e01c      	b.n	80069ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d115      	bne.n	80069ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32ae      	adds	r2, #174	; 0xae
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	32ae      	adds	r2, #174	; 0xae
 80069de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	4611      	mov	r1, r2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	32ae      	adds	r2, #174	; 0xae
 8006a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e01c      	b.n	8006a52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d115      	bne.n	8006a50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32ae      	adds	r2, #174	; 0xae
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	32ae      	adds	r2, #174	; 0xae
 8006a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6852      	ldr	r2, [r2, #4]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ac2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006adc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d920      	bls.n	8006b54 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b1a:	e013      	b.n	8006b44 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b1c:	f107 030a 	add.w	r3, r7, #10
 8006b20:	4619      	mov	r1, r3
 8006b22:	6978      	ldr	r0, [r7, #20]
 8006b24:	f000 f81b 	bl	8006b5e <USBD_GetNextDesc>
 8006b28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d108      	bne.n	8006b44 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	789b      	ldrb	r3, [r3, #2]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d008      	beq.n	8006b52 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	885b      	ldrh	r3, [r3, #2]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	897b      	ldrh	r3, [r7, #10]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d8e5      	bhi.n	8006b1c <USBD_GetEpDesc+0x32>
 8006b50:	e000      	b.n	8006b54 <USBD_GetEpDesc+0x6a>
          break;
 8006b52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b54:	693b      	ldr	r3, [r7, #16]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	881a      	ldrh	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	3301      	adds	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bb6:	8a3b      	ldrh	r3, [r7, #16]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	b21a      	sxth	r2, r3
 8006bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d005      	beq.n	8006bfa <USBD_StdDevReq+0x26>
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d857      	bhi.n	8006ca2 <USBD_StdDevReq+0xce>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00f      	beq.n	8006c16 <USBD_StdDevReq+0x42>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d153      	bne.n	8006ca2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	32ae      	adds	r2, #174	; 0xae
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
      break;
 8006c14:	e04a      	b.n	8006cac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	2b09      	cmp	r3, #9
 8006c1c:	d83b      	bhi.n	8006c96 <USBD_StdDevReq+0xc2>
 8006c1e:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <USBD_StdDevReq+0x50>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006c8d 	.word	0x08006c8d
 8006c2c:	08006c97 	.word	0x08006c97
 8006c30:	08006c83 	.word	0x08006c83
 8006c34:	08006c97 	.word	0x08006c97
 8006c38:	08006c57 	.word	0x08006c57
 8006c3c:	08006c4d 	.word	0x08006c4d
 8006c40:	08006c97 	.word	0x08006c97
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c61 	.word	0x08006c61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa3c 	bl	80070cc <USBD_GetDescriptor>
          break;
 8006c54:	e024      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fba1 	bl	80073a0 <USBD_SetAddress>
          break;
 8006c5e:	e01f      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fbe0 	bl	8007428 <USBD_SetConfig>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c6c:	e018      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fc83 	bl	800757c <USBD_GetConfig>
          break;
 8006c76:	e013      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fcb4 	bl	80075e8 <USBD_GetStatus>
          break;
 8006c80:	e00e      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fce3 	bl	8007650 <USBD_SetFeature>
          break;
 8006c8a:	e009      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fd07 	bl	80076a2 <USBD_ClrFeature>
          break;
 8006c94:	e004      	b.n	8006ca0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fd5e 	bl	800775a <USBD_CtlError>
          break;
 8006c9e:	bf00      	nop
      }
      break;
 8006ca0:	e004      	b.n	8006cac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fd58 	bl	800775a <USBD_CtlError>
      break;
 8006caa:	bf00      	nop
  }

  return ret;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop

08006cb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d005      	beq.n	8006cde <USBD_StdItfReq+0x26>
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d852      	bhi.n	8006d7c <USBD_StdItfReq+0xc4>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <USBD_StdItfReq+0x26>
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d14e      	bne.n	8006d7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d840      	bhi.n	8006d6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	889b      	ldrh	r3, [r3, #4]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d836      	bhi.n	8006d64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	889b      	ldrh	r3, [r3, #4]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fed9 	bl	8006ab6 <USBD_CoreFindIF>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2bff      	cmp	r3, #255	; 0xff
 8006d0c:	d01d      	beq.n	8006d4a <USBD_StdItfReq+0x92>
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11a      	bne.n	8006d4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d14:	7bba      	ldrb	r2, [r7, #14]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32ae      	adds	r2, #174	; 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00f      	beq.n	8006d44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d24:	7bba      	ldrb	r2, [r7, #14]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d2c:	7bba      	ldrb	r2, [r7, #14]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	; 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d42:	e004      	b.n	8006d4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d48:	e001      	b.n	8006d4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d110      	bne.n	8006d78 <USBD_StdItfReq+0xc0>
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fdc7 	bl	80078f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d62:	e009      	b.n	8006d78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fcf7 	bl	800775a <USBD_CtlError>
          break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fcf2 	bl	800775a <USBD_CtlError>
          break;
 8006d76:	e000      	b.n	8006d7a <USBD_StdItfReq+0xc2>
          break;
 8006d78:	bf00      	nop
      }
      break;
 8006d7a:	e004      	b.n	8006d86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fceb 	bl	800775a <USBD_CtlError>
      break;
 8006d84:	bf00      	nop
  }

  return ret;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	889b      	ldrh	r3, [r3, #4]
 8006da2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	d007      	beq.n	8006dc0 <USBD_StdEPReq+0x30>
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	f200 817f 	bhi.w	80070b4 <USBD_StdEPReq+0x324>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d02a      	beq.n	8006e10 <USBD_StdEPReq+0x80>
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	f040 817a 	bne.w	80070b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fe83 	bl	8006ad0 <USBD_CoreFindEP>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dce:	7b7b      	ldrb	r3, [r7, #13]
 8006dd0:	2bff      	cmp	r3, #255	; 0xff
 8006dd2:	f000 8174 	beq.w	80070be <USBD_StdEPReq+0x32e>
 8006dd6:	7b7b      	ldrb	r3, [r7, #13]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8170 	bne.w	80070be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006dde:	7b7a      	ldrb	r2, [r7, #13]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006de6:	7b7a      	ldrb	r2, [r7, #13]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32ae      	adds	r2, #174	; 0xae
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8163 	beq.w	80070be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006df8:	7b7a      	ldrb	r2, [r7, #13]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32ae      	adds	r2, #174	; 0xae
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e0e:	e156      	b.n	80070be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d008      	beq.n	8006e2a <USBD_StdEPReq+0x9a>
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	f300 8145 	bgt.w	80070a8 <USBD_StdEPReq+0x318>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 809b 	beq.w	8006f5a <USBD_StdEPReq+0x1ca>
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d03c      	beq.n	8006ea2 <USBD_StdEPReq+0x112>
 8006e28:	e13e      	b.n	80070a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d002      	beq.n	8006e3c <USBD_StdEPReq+0xac>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d016      	beq.n	8006e68 <USBD_StdEPReq+0xd8>
 8006e3a:	e02c      	b.n	8006e96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <USBD_StdEPReq+0xce>
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d00a      	beq.n	8006e5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f99d 	bl	800818c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e52:	2180      	movs	r1, #128	; 0x80
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f999 	bl	800818c <USBD_LL_StallEP>
 8006e5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e5c:	e020      	b.n	8006ea0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fc7a 	bl	800775a <USBD_CtlError>
              break;
 8006e66:	e01b      	b.n	8006ea0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	885b      	ldrh	r3, [r3, #2]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10e      	bne.n	8006e8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <USBD_StdEPReq+0xfe>
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d008      	beq.n	8006e8e <USBD_StdEPReq+0xfe>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	88db      	ldrh	r3, [r3, #6]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f97f 	bl	800818c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fd2e 	bl	80078f0 <USBD_CtlSendStatus>

              break;
 8006e94:	e004      	b.n	8006ea0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fc5e 	bl	800775a <USBD_CtlError>
              break;
 8006e9e:	bf00      	nop
          }
          break;
 8006ea0:	e107      	b.n	80070b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d002      	beq.n	8006eb4 <USBD_StdEPReq+0x124>
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d016      	beq.n	8006ee0 <USBD_StdEPReq+0x150>
 8006eb2:	e04b      	b.n	8006f4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00d      	beq.n	8006ed6 <USBD_StdEPReq+0x146>
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b80      	cmp	r3, #128	; 0x80
 8006ebe:	d00a      	beq.n	8006ed6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f961 	bl	800818c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eca:	2180      	movs	r1, #128	; 0x80
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f95d 	bl	800818c <USBD_LL_StallEP>
 8006ed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ed4:	e040      	b.n	8006f58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fc3e 	bl	800775a <USBD_CtlError>
              break;
 8006ede:	e03b      	b.n	8006f58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	885b      	ldrh	r3, [r3, #2]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d136      	bne.n	8006f56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f967 	bl	80081ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fcf7 	bl	80078f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fde2 	bl	8006ad0 <USBD_CoreFindEP>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f10:	7b7b      	ldrb	r3, [r7, #13]
 8006f12:	2bff      	cmp	r3, #255	; 0xff
 8006f14:	d01f      	beq.n	8006f56 <USBD_StdEPReq+0x1c6>
 8006f16:	7b7b      	ldrb	r3, [r7, #13]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d11c      	bne.n	8006f56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f1c:	7b7a      	ldrb	r2, [r7, #13]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f24:	7b7a      	ldrb	r2, [r7, #13]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	; 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d010      	beq.n	8006f56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f34:	7b7a      	ldrb	r2, [r7, #13]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	32ae      	adds	r2, #174	; 0xae
 8006f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f4a:	e004      	b.n	8006f56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fc03 	bl	800775a <USBD_CtlError>
              break;
 8006f54:	e000      	b.n	8006f58 <USBD_StdEPReq+0x1c8>
              break;
 8006f56:	bf00      	nop
          }
          break;
 8006f58:	e0ab      	b.n	80070b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d002      	beq.n	8006f6c <USBD_StdEPReq+0x1dc>
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d032      	beq.n	8006fd0 <USBD_StdEPReq+0x240>
 8006f6a:	e097      	b.n	800709c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <USBD_StdEPReq+0x1f2>
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	2b80      	cmp	r3, #128	; 0x80
 8006f76:	d004      	beq.n	8006f82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fbed 	bl	800775a <USBD_CtlError>
                break;
 8006f80:	e091      	b.n	80070a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da0b      	bge.n	8006fa2 <USBD_StdEPReq+0x212>
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	3310      	adds	r3, #16
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	e00b      	b.n	8006fba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3304      	adds	r3, #4
 8006fba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fc37 	bl	800783c <USBD_CtlSendData>
              break;
 8006fce:	e06a      	b.n	80070a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da11      	bge.n	8006ffc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	f003 020f 	and.w	r2, r3, #15
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d117      	bne.n	8007022 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fbb0 	bl	800775a <USBD_CtlError>
                  break;
 8006ffa:	e054      	b.n	80070a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	f003 020f 	and.w	r2, r3, #15
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fb9d 	bl	800775a <USBD_CtlError>
                  break;
 8007020:	e041      	b.n	80070a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da0b      	bge.n	8007042 <USBD_StdEPReq+0x2b2>
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	3310      	adds	r3, #16
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	3304      	adds	r3, #4
 8007040:	e00b      	b.n	800705a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <USBD_StdEPReq+0x2d8>
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b80      	cmp	r3, #128	; 0x80
 8007066:	d103      	bne.n	8007070 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e00e      	b.n	800708e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f8c7 	bl	8008208 <USBD_LL_IsStallEP>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2201      	movs	r2, #1
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e002      	b.n	800708e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2202      	movs	r2, #2
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fbd1 	bl	800783c <USBD_CtlSendData>
              break;
 800709a:	e004      	b.n	80070a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fb5b 	bl	800775a <USBD_CtlError>
              break;
 80070a4:	bf00      	nop
          }
          break;
 80070a6:	e004      	b.n	80070b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb55 	bl	800775a <USBD_CtlError>
          break;
 80070b0:	bf00      	nop
      }
      break;
 80070b2:	e005      	b.n	80070c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fb4f 	bl	800775a <USBD_CtlError>
      break;
 80070bc:	e000      	b.n	80070c0 <USBD_StdEPReq+0x330>
      break;
 80070be:	bf00      	nop
  }

  return ret;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	2b06      	cmp	r3, #6
 80070ee:	f200 8128 	bhi.w	8007342 <USBD_GetDescriptor+0x276>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <USBD_GetDescriptor+0x2c>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007115 	.word	0x08007115
 80070fc:	0800712d 	.word	0x0800712d
 8007100:	0800716d 	.word	0x0800716d
 8007104:	08007343 	.word	0x08007343
 8007108:	08007343 	.word	0x08007343
 800710c:	080072e3 	.word	0x080072e3
 8007110:	0800730f 	.word	0x0800730f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	7c12      	ldrb	r2, [r2, #16]
 8007120:	f107 0108 	add.w	r1, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
      break;
 800712a:	e112      	b.n	8007352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7c1b      	ldrb	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10d      	bne.n	8007150 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	f107 0208 	add.w	r2, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	2202      	movs	r2, #2
 800714c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800714e:	e100      	b.n	8007352 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	f107 0208 	add.w	r2, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	2202      	movs	r2, #2
 8007168:	701a      	strb	r2, [r3, #0]
      break;
 800716a:	e0f2      	b.n	8007352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	885b      	ldrh	r3, [r3, #2]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b05      	cmp	r3, #5
 8007174:	f200 80ac 	bhi.w	80072d0 <USBD_GetDescriptor+0x204>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <USBD_GetDescriptor+0xb4>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	08007199 	.word	0x08007199
 8007184:	080071cd 	.word	0x080071cd
 8007188:	08007201 	.word	0x08007201
 800718c:	08007235 	.word	0x08007235
 8007190:	08007269 	.word	0x08007269
 8007194:	0800729d 	.word	0x0800729d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ba:	e091      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 facb 	bl	800775a <USBD_CtlError>
            err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ca:	e089      	b.n	80072e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ee:	e077      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fab1 	bl	800775a <USBD_CtlError>
            err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
          break;
 80071fe:	e06f      	b.n	80072e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	7c12      	ldrb	r2, [r2, #16]
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007222:	e05d      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa97 	bl	800775a <USBD_CtlError>
            err++;
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	3301      	adds	r3, #1
 8007230:	72fb      	strb	r3, [r7, #11]
          break;
 8007232:	e055      	b.n	80072e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 0108 	add.w	r1, r7, #8
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007256:	e043      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa7d 	bl	800775a <USBD_CtlError>
            err++;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	3301      	adds	r3, #1
 8007264:	72fb      	strb	r3, [r7, #11]
          break;
 8007266:	e03b      	b.n	80072e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	7c12      	ldrb	r2, [r2, #16]
 8007280:	f107 0108 	add.w	r1, r7, #8
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728a:	e029      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa63 	bl	800775a <USBD_CtlError>
            err++;
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	3301      	adds	r3, #1
 8007298:	72fb      	strb	r3, [r7, #11]
          break;
 800729a:	e021      	b.n	80072e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e00f      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa49 	bl	800775a <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e007      	b.n	80072e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa41 	bl	800775a <USBD_CtlError>
          err++;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	3301      	adds	r3, #1
 80072dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80072de:	bf00      	nop
      }
      break;
 80072e0:	e037      	b.n	8007352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7c1b      	ldrb	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	f107 0208 	add.w	r2, r7, #8
 80072f6:	4610      	mov	r0, r2
 80072f8:	4798      	blx	r3
 80072fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072fc:	e029      	b.n	8007352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fa2a 	bl	800775a <USBD_CtlError>
        err++;
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	3301      	adds	r3, #1
 800730a:	72fb      	strb	r3, [r7, #11]
      break;
 800730c:	e021      	b.n	8007352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7c1b      	ldrb	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10d      	bne.n	8007332 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	f107 0208 	add.w	r2, r7, #8
 8007322:	4610      	mov	r0, r2
 8007324:	4798      	blx	r3
 8007326:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3301      	adds	r3, #1
 800732c:	2207      	movs	r2, #7
 800732e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007330:	e00f      	b.n	8007352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa10 	bl	800775a <USBD_CtlError>
        err++;
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	3301      	adds	r3, #1
 800733e:	72fb      	strb	r3, [r7, #11]
      break;
 8007340:	e007      	b.n	8007352 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa08 	bl	800775a <USBD_CtlError>
      err++;
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	3301      	adds	r3, #1
 800734e:	72fb      	strb	r3, [r7, #11]
      break;
 8007350:	bf00      	nop
  }

  if (err != 0U)
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11e      	bne.n	8007396 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	88db      	ldrh	r3, [r3, #6]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d016      	beq.n	800738e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007360:	893b      	ldrh	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00e      	beq.n	8007384 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88da      	ldrh	r2, [r3, #6]
 800736a:	893b      	ldrh	r3, [r7, #8]
 800736c:	4293      	cmp	r3, r2
 800736e:	bf28      	it	cs
 8007370:	4613      	movcs	r3, r2
 8007372:	b29b      	uxth	r3, r3
 8007374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007376:	893b      	ldrh	r3, [r7, #8]
 8007378:	461a      	mov	r2, r3
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa5d 	bl	800783c <USBD_CtlSendData>
 8007382:	e009      	b.n	8007398 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9e7 	bl	800775a <USBD_CtlError>
 800738c:	e004      	b.n	8007398 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 faae 	bl	80078f0 <USBD_CtlSendStatus>
 8007394:	e000      	b.n	8007398 <USBD_GetDescriptor+0x2cc>
    return;
 8007396:	bf00      	nop
  }
}
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	889b      	ldrh	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d131      	bne.n	8007416 <USBD_SetAddress+0x76>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	88db      	ldrh	r3, [r3, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d12d      	bne.n	8007416 <USBD_SetAddress+0x76>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	885b      	ldrh	r3, [r3, #2]
 80073be:	2b7f      	cmp	r3, #127	; 0x7f
 80073c0:	d829      	bhi.n	8007416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d104      	bne.n	80073e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9bc 	bl	800775a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e2:	e01d      	b.n	8007420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7bfa      	ldrb	r2, [r7, #15]
 80073e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 ff35 	bl	8008260 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa7a 	bl	80078f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740a:	e009      	b.n	8007420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007414:	e004      	b.n	8007420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f99e 	bl	800775a <USBD_CtlError>
  }
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	885b      	ldrh	r3, [r3, #2]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	4b4e      	ldr	r3, [pc, #312]	; (8007578 <USBD_SetConfig+0x150>)
 800743e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007440:	4b4d      	ldr	r3, [pc, #308]	; (8007578 <USBD_SetConfig+0x150>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d905      	bls.n	8007454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f985 	bl	800775a <USBD_CtlError>
    return USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	e08c      	b.n	800756e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d002      	beq.n	8007466 <USBD_SetConfig+0x3e>
 8007460:	2b03      	cmp	r3, #3
 8007462:	d029      	beq.n	80074b8 <USBD_SetConfig+0x90>
 8007464:	e075      	b.n	8007552 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007466:	4b44      	ldr	r3, [pc, #272]	; (8007578 <USBD_SetConfig+0x150>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d020      	beq.n	80074b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800746e:	4b42      	ldr	r3, [pc, #264]	; (8007578 <USBD_SetConfig+0x150>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007478:	4b3f      	ldr	r3, [pc, #252]	; (8007578 <USBD_SetConfig+0x150>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fe ffe7 	bl	8006452 <USBD_SetClassConfig>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d008      	beq.n	80074a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f962 	bl	800775a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2202      	movs	r2, #2
 800749a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800749e:	e065      	b.n	800756c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa25 	bl	80078f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2203      	movs	r2, #3
 80074aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074ae:	e05d      	b.n	800756c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa1d 	bl	80078f0 <USBD_CtlSendStatus>
      break;
 80074b6:	e059      	b.n	800756c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074b8:	4b2f      	ldr	r3, [pc, #188]	; (8007578 <USBD_SetConfig+0x150>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d112      	bne.n	80074e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074c8:	4b2b      	ldr	r3, [pc, #172]	; (8007578 <USBD_SetConfig+0x150>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074d2:	4b29      	ldr	r3, [pc, #164]	; (8007578 <USBD_SetConfig+0x150>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe ffd6 	bl	800648a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa06 	bl	80078f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074e4:	e042      	b.n	800756c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80074e6:	4b24      	ldr	r3, [pc, #144]	; (8007578 <USBD_SetConfig+0x150>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d02a      	beq.n	800754a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fe ffc4 	bl	800648a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007502:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <USBD_SetConfig+0x150>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <USBD_SetConfig+0x150>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fe ff9d 	bl	8006452 <USBD_SetClassConfig>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00f      	beq.n	8007542 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f918 	bl	800775a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fe ffa9 	bl	800648a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007540:	e014      	b.n	800756c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9d4 	bl	80078f0 <USBD_CtlSendStatus>
      break;
 8007548:	e010      	b.n	800756c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9d0 	bl	80078f0 <USBD_CtlSendStatus>
      break;
 8007550:	e00c      	b.n	800756c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f900 	bl	800775a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800755a:	4b07      	ldr	r3, [pc, #28]	; (8007578 <USBD_SetConfig+0x150>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7fe ff92 	bl	800648a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007566:	2303      	movs	r3, #3
 8007568:	73fb      	strb	r3, [r7, #15]
      break;
 800756a:	bf00      	nop
  }

  return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	200001e8 	.word	0x200001e8

0800757c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	88db      	ldrh	r3, [r3, #6]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d004      	beq.n	8007598 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f8e2 	bl	800775a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007596:	e023      	b.n	80075e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	dc02      	bgt.n	80075aa <USBD_GetConfig+0x2e>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dc03      	bgt.n	80075b0 <USBD_GetConfig+0x34>
 80075a8:	e015      	b.n	80075d6 <USBD_GetConfig+0x5a>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d00b      	beq.n	80075c6 <USBD_GetConfig+0x4a>
 80075ae:	e012      	b.n	80075d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3308      	adds	r3, #8
 80075ba:	2201      	movs	r2, #1
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f93c 	bl	800783c <USBD_CtlSendData>
        break;
 80075c4:	e00c      	b.n	80075e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3304      	adds	r3, #4
 80075ca:	2201      	movs	r2, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f934 	bl	800783c <USBD_CtlSendData>
        break;
 80075d4:	e004      	b.n	80075e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f8be 	bl	800775a <USBD_CtlError>
        break;
 80075de:	bf00      	nop
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d81e      	bhi.n	800763e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	88db      	ldrh	r3, [r3, #6]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d004      	beq.n	8007612 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f8a5 	bl	800775a <USBD_CtlError>
        break;
 8007610:	e01a      	b.n	8007648 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f043 0202 	orr.w	r2, r3, #2
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	330c      	adds	r3, #12
 8007632:	2202      	movs	r2, #2
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f900 	bl	800783c <USBD_CtlSendData>
      break;
 800763c:	e004      	b.n	8007648 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f88a 	bl	800775a <USBD_CtlError>
      break;
 8007646:	bf00      	nop
  }
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d107      	bne.n	8007672 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f940 	bl	80078f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007670:	e013      	b.n	800769a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d10b      	bne.n	8007692 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	889b      	ldrh	r3, [r3, #4]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	b2da      	uxtb	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f930 	bl	80078f0 <USBD_CtlSendStatus>
}
 8007690:	e003      	b.n	800769a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f860 	bl	800775a <USBD_CtlError>
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d80b      	bhi.n	80076d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10c      	bne.n	80076dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f910 	bl	80078f0 <USBD_CtlSendStatus>
      }
      break;
 80076d0:	e004      	b.n	80076dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f840 	bl	800775a <USBD_CtlError>
      break;
 80076da:	e000      	b.n	80076de <USBD_ClrFeature+0x3c>
      break;
 80076dc:	bf00      	nop
  }
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3301      	adds	r3, #1
 800770e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff fa41 	bl	8006b98 <SWAPBYTE>
 8007716:	4603      	mov	r3, r0
 8007718:	461a      	mov	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fa34 	bl	8006b98 <SWAPBYTE>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fa27 	bl	8006b98 <SWAPBYTE>
 800774a:	4603      	mov	r3, r0
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	80da      	strh	r2, [r3, #6]
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fd10 	bl	800818c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fd0c 	bl	800818c <USBD_LL_StallEP>
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d036      	beq.n	8007800 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007796:	6938      	ldr	r0, [r7, #16]
 8007798:	f000 f836 	bl	8007808 <USBD_GetLen>
 800779c:	4603      	mov	r3, r0
 800779e:	3301      	adds	r3, #1
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4413      	add	r3, r2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	3301      	adds	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	2203      	movs	r2, #3
 80077c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	3301      	adds	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077cc:	e013      	b.n	80077f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	4413      	add	r3, r2
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	7812      	ldrb	r2, [r2, #0]
 80077d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3301      	adds	r3, #1
 80077de:	613b      	str	r3, [r7, #16]
    idx++;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	3301      	adds	r3, #1
 80077e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	4413      	add	r3, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	3301      	adds	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e7      	bne.n	80077ce <USBD_GetString+0x52>
 80077fe:	e000      	b.n	8007802 <USBD_GetString+0x86>
    return;
 8007800:	bf00      	nop
  }
}
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007818:	e005      	b.n	8007826 <USBD_GetLen+0x1e>
  {
    len++;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	3301      	adds	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3301      	adds	r3, #1
 8007824:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f5      	bne.n	800781a <USBD_GetLen+0x12>
  }

  return len;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2202      	movs	r2, #2
 800784c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fd1b 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	2100      	movs	r1, #0
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fd0a 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2203      	movs	r2, #3
 80078a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	2100      	movs	r1, #0
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fd0e 	bl	80082e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fcfd 	bl	80082e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2204      	movs	r2, #4
 80078fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007900:	2300      	movs	r3, #0
 8007902:	2200      	movs	r2, #0
 8007904:	2100      	movs	r1, #0
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fcc9 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2205      	movs	r2, #5
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007926:	2300      	movs	r3, #0
 8007928:	2200      	movs	r2, #0
 800792a:	2100      	movs	r1, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fcd7 	bl	80082e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007940:	2200      	movs	r2, #0
 8007942:	4912      	ldr	r1, [pc, #72]	; (800798c <MX_USB_DEVICE_Init+0x50>)
 8007944:	4812      	ldr	r0, [pc, #72]	; (8007990 <MX_USB_DEVICE_Init+0x54>)
 8007946:	f7fe fd07 	bl	8006358 <USBD_Init>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007950:	f7f9 f91e 	bl	8000b90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007954:	490f      	ldr	r1, [pc, #60]	; (8007994 <MX_USB_DEVICE_Init+0x58>)
 8007956:	480e      	ldr	r0, [pc, #56]	; (8007990 <MX_USB_DEVICE_Init+0x54>)
 8007958:	f7fe fd2e 	bl	80063b8 <USBD_RegisterClass>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007962:	f7f9 f915 	bl	8000b90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007966:	490c      	ldr	r1, [pc, #48]	; (8007998 <MX_USB_DEVICE_Init+0x5c>)
 8007968:	4809      	ldr	r0, [pc, #36]	; (8007990 <MX_USB_DEVICE_Init+0x54>)
 800796a:	f7fe fc1f 	bl	80061ac <USBD_CDC_RegisterInterface>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007974:	f7f9 f90c 	bl	8000b90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007978:	4805      	ldr	r0, [pc, #20]	; (8007990 <MX_USB_DEVICE_Init+0x54>)
 800797a:	f7fe fd53 	bl	8006424 <USBD_Start>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007984:	f7f9 f904 	bl	8000b90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007988:	bf00      	nop
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200000ac 	.word	0x200000ac
 8007990:	200001ec 	.word	0x200001ec
 8007994:	20000018 	.word	0x20000018
 8007998:	20000098 	.word	0x20000098

0800799c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079a0:	2200      	movs	r2, #0
 80079a2:	4905      	ldr	r1, [pc, #20]	; (80079b8 <CDC_Init_FS+0x1c>)
 80079a4:	4805      	ldr	r0, [pc, #20]	; (80079bc <CDC_Init_FS+0x20>)
 80079a6:	f7fe fc1b 	bl	80061e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079aa:	4905      	ldr	r1, [pc, #20]	; (80079c0 <CDC_Init_FS+0x24>)
 80079ac:	4803      	ldr	r0, [pc, #12]	; (80079bc <CDC_Init_FS+0x20>)
 80079ae:	f7fe fc39 	bl	8006224 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	20000cc8 	.word	0x20000cc8
 80079bc:	200001ec 	.word	0x200001ec
 80079c0:	200004c8 	.word	0x200004c8

080079c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	6039      	str	r1, [r7, #0]
 80079de:	71fb      	strb	r3, [r7, #7]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	2b23      	cmp	r3, #35	; 0x23
 80079e8:	d84a      	bhi.n	8007a80 <CDC_Control_FS+0xac>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <CDC_Control_FS+0x1c>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a81 	.word	0x08007a81
 80079f4:	08007a81 	.word	0x08007a81
 80079f8:	08007a81 	.word	0x08007a81
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007a81 	.word	0x08007a81
 8007a04:	08007a81 	.word	0x08007a81
 8007a08:	08007a81 	.word	0x08007a81
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007a81 	.word	0x08007a81
 8007a14:	08007a81 	.word	0x08007a81
 8007a18:	08007a81 	.word	0x08007a81
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a81 	.word	0x08007a81
 8007a24:	08007a81 	.word	0x08007a81
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a81 	.word	0x08007a81
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	08007a81 	.word	0x08007a81
 8007a38:	08007a81 	.word	0x08007a81
 8007a3c:	08007a81 	.word	0x08007a81
 8007a40:	08007a81 	.word	0x08007a81
 8007a44:	08007a81 	.word	0x08007a81
 8007a48:	08007a81 	.word	0x08007a81
 8007a4c:	08007a81 	.word	0x08007a81
 8007a50:	08007a81 	.word	0x08007a81
 8007a54:	08007a81 	.word	0x08007a81
 8007a58:	08007a81 	.word	0x08007a81
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a81 	.word	0x08007a81
 8007a64:	08007a81 	.word	0x08007a81
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007a81 	.word	0x08007a81
 8007a74:	08007a81 	.word	0x08007a81
 8007a78:	08007a81 	.word	0x08007a81
 8007a7c:	08007a81 	.word	0x08007a81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a80:	bf00      	nop
  }

  return (USBD_OK);
 8007a82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4813      	ldr	r0, [pc, #76]	; (8007aec <CDC_Receive_FS+0x5c>)
 8007a9e:	f7fe fbc1 	bl	8006224 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007aa2:	4812      	ldr	r0, [pc, #72]	; (8007aec <CDC_Receive_FS+0x5c>)
 8007aa4:	f7fe fc22 	bl	80062ec <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f81f 	bl	8007af4 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b31      	cmp	r3, #49	; 0x31
 8007abc:	d106      	bne.n	8007acc <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ac4:	480a      	ldr	r0, [pc, #40]	; (8007af0 <CDC_Receive_FS+0x60>)
 8007ac6:	f7fa fc1d 	bl	8002304 <HAL_GPIO_WritePin>
 8007aca:	e009      	b.n	8007ae0 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b30      	cmp	r3, #48	; 0x30
 8007ad2:	d105      	bne.n	8007ae0 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <CDC_Receive_FS+0x60>)
 8007adc:	f7fa fc12 	bl	8002304 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8007ae0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	200001ec 	.word	0x200001ec
 8007af0:	40020c00 	.word	0x40020c00

08007af4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b04:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <CDC_Transmit_FS+0x48>)
 8007b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e00b      	b.n	8007b32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b1a:	887b      	ldrh	r3, [r7, #2]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4806      	ldr	r0, [pc, #24]	; (8007b3c <CDC_Transmit_FS+0x48>)
 8007b22:	f7fe fb5d 	bl	80061e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <CDC_Transmit_FS+0x48>)
 8007b28:	f7fe fb9a 	bl	8006260 <USBD_CDC_TransmitPacket>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200001ec 	.word	0x200001ec

08007b40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2212      	movs	r2, #18
 8007b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b76:	4b03      	ldr	r3, [pc, #12]	; (8007b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	200000c8 	.word	0x200000c8

08007b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2204      	movs	r2, #4
 8007b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	200000dc 	.word	0x200000dc

08007bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4907      	ldr	r1, [pc, #28]	; (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bc2:	4808      	ldr	r0, [pc, #32]	; (8007be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bc4:	f7ff fdda 	bl	800777c <USBD_GetString>
 8007bc8:	e004      	b.n	8007bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bce:	4805      	ldr	r0, [pc, #20]	; (8007be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd0:	f7ff fdd4 	bl	800777c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200014c8 	.word	0x200014c8
 8007be4:	08008e70 	.word	0x08008e70

08007be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	4904      	ldr	r1, [pc, #16]	; (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bf8:	4804      	ldr	r0, [pc, #16]	; (8007c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bfa:	f7ff fdbf 	bl	800777c <USBD_GetString>
  return USBD_StrDesc;
 8007bfe:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200014c8 	.word	0x200014c8
 8007c0c:	08008e88 	.word	0x08008e88

08007c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	221a      	movs	r2, #26
 8007c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c22:	f000 f843 	bl	8007cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c26:	4b02      	ldr	r3, [pc, #8]	; (8007c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	200000e0 	.word	0x200000e0

08007c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4907      	ldr	r1, [pc, #28]	; (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c4a:	4808      	ldr	r0, [pc, #32]	; (8007c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c4c:	f7ff fd96 	bl	800777c <USBD_GetString>
 8007c50:	e004      	b.n	8007c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4904      	ldr	r1, [pc, #16]	; (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c56:	4805      	ldr	r0, [pc, #20]	; (8007c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c58:	f7ff fd90 	bl	800777c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200014c8 	.word	0x200014c8
 8007c6c:	08008e9c 	.word	0x08008e9c

08007c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4907      	ldr	r1, [pc, #28]	; (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c86:	4808      	ldr	r0, [pc, #32]	; (8007ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c88:	f7ff fd78 	bl	800777c <USBD_GetString>
 8007c8c:	e004      	b.n	8007c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c94:	f7ff fd72 	bl	800777c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200014c8 	.word	0x200014c8
 8007ca8:	08008ea8 	.word	0x08008ea8

08007cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <Get_SerialNum+0x44>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <Get_SerialNum+0x48>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <Get_SerialNum+0x4c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4413      	add	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	4909      	ldr	r1, [pc, #36]	; (8007cfc <Get_SerialNum+0x50>)
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f814 	bl	8007d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cdc:	2204      	movs	r2, #4
 8007cde:	4908      	ldr	r1, [pc, #32]	; (8007d00 <Get_SerialNum+0x54>)
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f000 f80f 	bl	8007d04 <IntToUnicode>
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	1fff7a10 	.word	0x1fff7a10
 8007cf4:	1fff7a14 	.word	0x1fff7a14
 8007cf8:	1fff7a18 	.word	0x1fff7a18
 8007cfc:	200000e2 	.word	0x200000e2
 8007d00:	200000f2 	.word	0x200000f2

08007d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
 8007d1a:	e027      	b.n	8007d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	2b09      	cmp	r3, #9
 8007d22:	d80b      	bhi.n	8007d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	0f1b      	lsrs	r3, r3, #28
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	440b      	add	r3, r1
 8007d34:	3230      	adds	r2, #48	; 0x30
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e00a      	b.n	8007d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	0f1b      	lsrs	r3, r3, #28
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4619      	mov	r1, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3237      	adds	r2, #55	; 0x37
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
 8007d6c:	7dfa      	ldrb	r2, [r7, #23]
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3d3      	bcc.n	8007d1c <IntToUnicode+0x18>
  }
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	; 0x28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d8c:	f107 0314 	add.w	r3, r7, #20
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007da4:	d14b      	bne.n	8007e3e <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	4b27      	ldr	r3, [pc, #156]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	4a26      	ldr	r2, [pc, #152]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007db0:	f043 0301 	orr.w	r3, r3, #1
 8007db4:	6313      	str	r3, [r2, #48]	; 0x30
 8007db6:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dd4:	230a      	movs	r3, #10
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	4619      	mov	r1, r3
 8007dde:	481b      	ldr	r0, [pc, #108]	; (8007e4c <HAL_PCD_MspInit+0xc8>)
 8007de0:	f7fa f8dc 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dea:	2302      	movs	r3, #2
 8007dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dee:	2301      	movs	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df2:	2300      	movs	r3, #0
 8007df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007df6:	230a      	movs	r3, #10
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4812      	ldr	r0, [pc, #72]	; (8007e4c <HAL_PCD_MspInit+0xc8>)
 8007e02:	f7fa f8cb 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e10:	6353      	str	r3, [r2, #52]	; 0x34
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	4a0b      	ldr	r2, [pc, #44]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e20:	6453      	str	r3, [r2, #68]	; 0x44
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_PCD_MspInit+0xc4>)
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	2043      	movs	r0, #67	; 0x43
 8007e34:	f7fa f87b 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e38:	2043      	movs	r0, #67	; 0x43
 8007e3a:	f7fa f894 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e3e:	bf00      	nop
 8007e40:	3728      	adds	r7, #40	; 0x28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40020000 	.word	0x40020000

08007e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe fb29 	bl	80064be <USBD_LL_SetupStage>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7fe fb63 	bl	8006568 <USBD_LL_DataOutStage>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	334c      	adds	r3, #76	; 0x4c
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f7fe fbfc 	bl	80066ce <USBD_LL_DataInStage>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fd30 	bl	8006952 <USBD_LL_SOF>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e008      	b.n	8007f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d102      	bne.n	8007f22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
 8007f20:	e001      	b.n	8007f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f22:	f7f8 fe35 	bl	8000b90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f2c:	7bfa      	ldrb	r2, [r7, #15]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fcd0 	bl	80068d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fc78 	bl	8006832 <USBD_LL_Reset>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fccb 	bl	80068f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <HAL_PCD_SuspendCallback+0x48>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	4a03      	ldr	r2, [pc, #12]	; (8007f94 <HAL_PCD_SuspendCallback+0x48>)
 8007f86:	f043 0306 	orr.w	r3, r3, #6
 8007f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed00 	.word	0xe000ed00

08007f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fcbb 	bl	8006922 <USBD_LL_Resume>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fd13 	bl	80069f6 <USBD_LL_IsoOUTIncomplete>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fccf 	bl	8006992 <USBD_LL_IsoINIncomplete>
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fd25 	bl	8006a5a <USBD_LL_DevConnected>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fd22 	bl	8006a70 <USBD_LL_DevDisconnected>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d13c      	bne.n	80080be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008044:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <USBD_LL_Init+0x94>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <USBD_LL_Init+0x94>)
 8008050:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008054:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <USBD_LL_Init+0x94>)
 8008056:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800805a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <USBD_LL_Init+0x94>)
 800805e:	2204      	movs	r2, #4
 8008060:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008062:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <USBD_LL_Init+0x94>)
 8008064:	2202      	movs	r2, #2
 8008066:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008068:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <USBD_LL_Init+0x94>)
 800806a:	2200      	movs	r2, #0
 800806c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <USBD_LL_Init+0x94>)
 8008070:	2202      	movs	r2, #2
 8008072:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008074:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <USBD_LL_Init+0x94>)
 8008076:	2200      	movs	r2, #0
 8008078:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800807a:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <USBD_LL_Init+0x94>)
 800807c:	2200      	movs	r2, #0
 800807e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <USBD_LL_Init+0x94>)
 8008082:	2200      	movs	r2, #0
 8008084:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <USBD_LL_Init+0x94>)
 8008088:	2200      	movs	r2, #0
 800808a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800808c:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <USBD_LL_Init+0x94>)
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008092:	480d      	ldr	r0, [pc, #52]	; (80080c8 <USBD_LL_Init+0x94>)
 8008094:	f7fa f94f 	bl	8002336 <HAL_PCD_Init>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800809e:	f7f8 fd77 	bl	8000b90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	4808      	ldr	r0, [pc, #32]	; (80080c8 <USBD_LL_Init+0x94>)
 80080a6:	f7fb fba6 	bl	80037f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080aa:	2240      	movs	r2, #64	; 0x40
 80080ac:	2100      	movs	r1, #0
 80080ae:	4806      	ldr	r0, [pc, #24]	; (80080c8 <USBD_LL_Init+0x94>)
 80080b0:	f7fb fb5a 	bl	8003768 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080b4:	2280      	movs	r2, #128	; 0x80
 80080b6:	2101      	movs	r1, #1
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <USBD_LL_Init+0x94>)
 80080ba:	f7fb fb55 	bl	8003768 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200016c8 	.word	0x200016c8

080080cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fa fa44 	bl	8002570 <HAL_PCD_Start>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 f942 	bl	8008378 <USBD_Get_USB_Status>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	4603      	mov	r3, r0
 8008112:	70fb      	strb	r3, [r7, #3]
 8008114:	460b      	mov	r3, r1
 8008116:	70bb      	strb	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800812a:	78bb      	ldrb	r3, [r7, #2]
 800812c:	883a      	ldrh	r2, [r7, #0]
 800812e:	78f9      	ldrb	r1, [r7, #3]
 8008130:	f7fa ff15 	bl	8002f5e <HAL_PCD_EP_Open>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f91c 	bl	8008378 <USBD_Get_USB_Status>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008144:	7bbb      	ldrb	r3, [r7, #14]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7fa ff5e 	bl	800302e <HAL_PCD_EP_Close>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f8fd 	bl	8008378 <USBD_Get_USB_Status>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008182:	7bbb      	ldrb	r3, [r7, #14]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fb f836 	bl	800321c <HAL_PCD_EP_SetStall>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f8de 	bl	8008378 <USBD_Get_USB_Status>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fb f87b 	bl	80032e4 <HAL_PCD_EP_ClrStall>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f8bf 	bl	8008378 <USBD_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800821a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800821c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da0b      	bge.n	800823c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	333e      	adds	r3, #62	; 0x3e
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	e00b      	b.n	8008254 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fa fe48 	bl	8002f14 <HAL_PCD_SetAddress>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f874 	bl	8008378 <USBD_Get_USB_Status>
 8008290:	4603      	mov	r3, r0
 8008292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008294:	7bbb      	ldrb	r3, [r7, #14]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
 80082aa:	460b      	mov	r3, r1
 80082ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082bc:	7af9      	ldrb	r1, [r7, #11]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f7fa ff61 	bl	8003188 <HAL_PCD_EP_Transmit>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f853 	bl	8008378 <USBD_Get_USB_Status>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	460b      	mov	r3, r1
 80082ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082fe:	7af9      	ldrb	r1, [r7, #11]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f7fa fedd 	bl	80030c2 <HAL_PCD_EP_Receive>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f832 	bl	8008378 <USBD_Get_USB_Status>
 8008314:	4603      	mov	r3, r0
 8008316:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008318:	7dbb      	ldrb	r3, [r7, #22]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f7fa ff0d 	bl	8003158 <HAL_PCD_EP_GetRxCount>
 800833e:	4603      	mov	r3, r0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <USBD_static_malloc+0x18>)
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20001bd4 	.word	0x20001bd4

08008364 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d817      	bhi.n	80083bc <USBD_Get_USB_Status+0x44>
 800838c:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <USBD_Get_USB_Status+0x1c>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083ab 	.word	0x080083ab
 800839c:	080083b1 	.word	0x080083b1
 80083a0:	080083b7 	.word	0x080083b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e00b      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e008      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	e005      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ba:	e002      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	73fb      	strb	r3, [r7, #15]
    break;
 80083c0:	bf00      	nop
  }
  return usb_status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <siprintf>:
 80083d0:	b40e      	push	{r1, r2, r3}
 80083d2:	b500      	push	{lr}
 80083d4:	b09c      	sub	sp, #112	; 0x70
 80083d6:	ab1d      	add	r3, sp, #116	; 0x74
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e0:	4809      	ldr	r0, [pc, #36]	; (8008408 <siprintf+0x38>)
 80083e2:	9107      	str	r1, [sp, #28]
 80083e4:	9104      	str	r1, [sp, #16]
 80083e6:	4909      	ldr	r1, [pc, #36]	; (800840c <siprintf+0x3c>)
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	9105      	str	r1, [sp, #20]
 80083ee:	6800      	ldr	r0, [r0, #0]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	a902      	add	r1, sp, #8
 80083f4:	f000 f992 	bl	800871c <_svfiprintf_r>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	b01c      	add	sp, #112	; 0x70
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	b003      	add	sp, #12
 8008406:	4770      	bx	lr
 8008408:	20000148 	.word	0x20000148
 800840c:	ffff0208 	.word	0xffff0208

08008410 <memset>:
 8008410:	4402      	add	r2, r0
 8008412:	4603      	mov	r3, r0
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <__errno>:
 8008420:	4b01      	ldr	r3, [pc, #4]	; (8008428 <__errno+0x8>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000148 	.word	0x20000148

0800842c <__libc_init_array>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4d0d      	ldr	r5, [pc, #52]	; (8008464 <__libc_init_array+0x38>)
 8008430:	4c0d      	ldr	r4, [pc, #52]	; (8008468 <__libc_init_array+0x3c>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	2600      	movs	r6, #0
 8008438:	42a6      	cmp	r6, r4
 800843a:	d109      	bne.n	8008450 <__libc_init_array+0x24>
 800843c:	4d0b      	ldr	r5, [pc, #44]	; (800846c <__libc_init_array+0x40>)
 800843e:	4c0c      	ldr	r4, [pc, #48]	; (8008470 <__libc_init_array+0x44>)
 8008440:	f000 fc6a 	bl	8008d18 <_init>
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	2600      	movs	r6, #0
 800844a:	42a6      	cmp	r6, r4
 800844c:	d105      	bne.n	800845a <__libc_init_array+0x2e>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	f855 3b04 	ldr.w	r3, [r5], #4
 8008454:	4798      	blx	r3
 8008456:	3601      	adds	r6, #1
 8008458:	e7ee      	b.n	8008438 <__libc_init_array+0xc>
 800845a:	f855 3b04 	ldr.w	r3, [r5], #4
 800845e:	4798      	blx	r3
 8008460:	3601      	adds	r6, #1
 8008462:	e7f2      	b.n	800844a <__libc_init_array+0x1e>
 8008464:	08008f04 	.word	0x08008f04
 8008468:	08008f04 	.word	0x08008f04
 800846c:	08008f04 	.word	0x08008f04
 8008470:	08008f08 	.word	0x08008f08

08008474 <__retarget_lock_acquire_recursive>:
 8008474:	4770      	bx	lr

08008476 <__retarget_lock_release_recursive>:
 8008476:	4770      	bx	lr

08008478 <_free_r>:
 8008478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800847a:	2900      	cmp	r1, #0
 800847c:	d044      	beq.n	8008508 <_free_r+0x90>
 800847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008482:	9001      	str	r0, [sp, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f1a1 0404 	sub.w	r4, r1, #4
 800848a:	bfb8      	it	lt
 800848c:	18e4      	addlt	r4, r4, r3
 800848e:	f000 f8df 	bl	8008650 <__malloc_lock>
 8008492:	4a1e      	ldr	r2, [pc, #120]	; (800850c <_free_r+0x94>)
 8008494:	9801      	ldr	r0, [sp, #4]
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	b933      	cbnz	r3, 80084a8 <_free_r+0x30>
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	6014      	str	r4, [r2, #0]
 800849e:	b003      	add	sp, #12
 80084a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a4:	f000 b8da 	b.w	800865c <__malloc_unlock>
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	d908      	bls.n	80084be <_free_r+0x46>
 80084ac:	6825      	ldr	r5, [r4, #0]
 80084ae:	1961      	adds	r1, r4, r5
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf01      	itttt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	1949      	addeq	r1, r1, r5
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	e7ed      	b.n	800849a <_free_r+0x22>
 80084be:	461a      	mov	r2, r3
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	b10b      	cbz	r3, 80084c8 <_free_r+0x50>
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d9fa      	bls.n	80084be <_free_r+0x46>
 80084c8:	6811      	ldr	r1, [r2, #0]
 80084ca:	1855      	adds	r5, r2, r1
 80084cc:	42a5      	cmp	r5, r4
 80084ce:	d10b      	bne.n	80084e8 <_free_r+0x70>
 80084d0:	6824      	ldr	r4, [r4, #0]
 80084d2:	4421      	add	r1, r4
 80084d4:	1854      	adds	r4, r2, r1
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	6011      	str	r1, [r2, #0]
 80084da:	d1e0      	bne.n	800849e <_free_r+0x26>
 80084dc:	681c      	ldr	r4, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	6053      	str	r3, [r2, #4]
 80084e2:	440c      	add	r4, r1
 80084e4:	6014      	str	r4, [r2, #0]
 80084e6:	e7da      	b.n	800849e <_free_r+0x26>
 80084e8:	d902      	bls.n	80084f0 <_free_r+0x78>
 80084ea:	230c      	movs	r3, #12
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	e7d6      	b.n	800849e <_free_r+0x26>
 80084f0:	6825      	ldr	r5, [r4, #0]
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	428b      	cmp	r3, r1
 80084f6:	bf04      	itt	eq
 80084f8:	6819      	ldreq	r1, [r3, #0]
 80084fa:	685b      	ldreq	r3, [r3, #4]
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	bf04      	itt	eq
 8008500:	1949      	addeq	r1, r1, r5
 8008502:	6021      	streq	r1, [r4, #0]
 8008504:	6054      	str	r4, [r2, #4]
 8008506:	e7ca      	b.n	800849e <_free_r+0x26>
 8008508:	b003      	add	sp, #12
 800850a:	bd30      	pop	{r4, r5, pc}
 800850c:	20001f34 	.word	0x20001f34

08008510 <sbrk_aligned>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	4e0e      	ldr	r6, [pc, #56]	; (800854c <sbrk_aligned+0x3c>)
 8008514:	460c      	mov	r4, r1
 8008516:	6831      	ldr	r1, [r6, #0]
 8008518:	4605      	mov	r5, r0
 800851a:	b911      	cbnz	r1, 8008522 <sbrk_aligned+0x12>
 800851c:	f000 fba6 	bl	8008c6c <_sbrk_r>
 8008520:	6030      	str	r0, [r6, #0]
 8008522:	4621      	mov	r1, r4
 8008524:	4628      	mov	r0, r5
 8008526:	f000 fba1 	bl	8008c6c <_sbrk_r>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	d00a      	beq.n	8008544 <sbrk_aligned+0x34>
 800852e:	1cc4      	adds	r4, r0, #3
 8008530:	f024 0403 	bic.w	r4, r4, #3
 8008534:	42a0      	cmp	r0, r4
 8008536:	d007      	beq.n	8008548 <sbrk_aligned+0x38>
 8008538:	1a21      	subs	r1, r4, r0
 800853a:	4628      	mov	r0, r5
 800853c:	f000 fb96 	bl	8008c6c <_sbrk_r>
 8008540:	3001      	adds	r0, #1
 8008542:	d101      	bne.n	8008548 <sbrk_aligned+0x38>
 8008544:	f04f 34ff 	mov.w	r4, #4294967295
 8008548:	4620      	mov	r0, r4
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	20001f38 	.word	0x20001f38

08008550 <_malloc_r>:
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	1ccd      	adds	r5, r1, #3
 8008556:	f025 0503 	bic.w	r5, r5, #3
 800855a:	3508      	adds	r5, #8
 800855c:	2d0c      	cmp	r5, #12
 800855e:	bf38      	it	cc
 8008560:	250c      	movcc	r5, #12
 8008562:	2d00      	cmp	r5, #0
 8008564:	4607      	mov	r7, r0
 8008566:	db01      	blt.n	800856c <_malloc_r+0x1c>
 8008568:	42a9      	cmp	r1, r5
 800856a:	d905      	bls.n	8008578 <_malloc_r+0x28>
 800856c:	230c      	movs	r3, #12
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	2600      	movs	r6, #0
 8008572:	4630      	mov	r0, r6
 8008574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800864c <_malloc_r+0xfc>
 800857c:	f000 f868 	bl	8008650 <__malloc_lock>
 8008580:	f8d8 3000 	ldr.w	r3, [r8]
 8008584:	461c      	mov	r4, r3
 8008586:	bb5c      	cbnz	r4, 80085e0 <_malloc_r+0x90>
 8008588:	4629      	mov	r1, r5
 800858a:	4638      	mov	r0, r7
 800858c:	f7ff ffc0 	bl	8008510 <sbrk_aligned>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	4604      	mov	r4, r0
 8008594:	d155      	bne.n	8008642 <_malloc_r+0xf2>
 8008596:	f8d8 4000 	ldr.w	r4, [r8]
 800859a:	4626      	mov	r6, r4
 800859c:	2e00      	cmp	r6, #0
 800859e:	d145      	bne.n	800862c <_malloc_r+0xdc>
 80085a0:	2c00      	cmp	r4, #0
 80085a2:	d048      	beq.n	8008636 <_malloc_r+0xe6>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	4631      	mov	r1, r6
 80085a8:	4638      	mov	r0, r7
 80085aa:	eb04 0903 	add.w	r9, r4, r3
 80085ae:	f000 fb5d 	bl	8008c6c <_sbrk_r>
 80085b2:	4581      	cmp	r9, r0
 80085b4:	d13f      	bne.n	8008636 <_malloc_r+0xe6>
 80085b6:	6821      	ldr	r1, [r4, #0]
 80085b8:	1a6d      	subs	r5, r5, r1
 80085ba:	4629      	mov	r1, r5
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ffa7 	bl	8008510 <sbrk_aligned>
 80085c2:	3001      	adds	r0, #1
 80085c4:	d037      	beq.n	8008636 <_malloc_r+0xe6>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	442b      	add	r3, r5
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	f8d8 3000 	ldr.w	r3, [r8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d038      	beq.n	8008646 <_malloc_r+0xf6>
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	42a2      	cmp	r2, r4
 80085d8:	d12b      	bne.n	8008632 <_malloc_r+0xe2>
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	e00f      	b.n	8008600 <_malloc_r+0xb0>
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	1b52      	subs	r2, r2, r5
 80085e4:	d41f      	bmi.n	8008626 <_malloc_r+0xd6>
 80085e6:	2a0b      	cmp	r2, #11
 80085e8:	d917      	bls.n	800861a <_malloc_r+0xca>
 80085ea:	1961      	adds	r1, r4, r5
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	6025      	str	r5, [r4, #0]
 80085f0:	bf18      	it	ne
 80085f2:	6059      	strne	r1, [r3, #4]
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	bf08      	it	eq
 80085f8:	f8c8 1000 	streq.w	r1, [r8]
 80085fc:	5162      	str	r2, [r4, r5]
 80085fe:	604b      	str	r3, [r1, #4]
 8008600:	4638      	mov	r0, r7
 8008602:	f104 060b 	add.w	r6, r4, #11
 8008606:	f000 f829 	bl	800865c <__malloc_unlock>
 800860a:	f026 0607 	bic.w	r6, r6, #7
 800860e:	1d23      	adds	r3, r4, #4
 8008610:	1af2      	subs	r2, r6, r3
 8008612:	d0ae      	beq.n	8008572 <_malloc_r+0x22>
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	50a3      	str	r3, [r4, r2]
 8008618:	e7ab      	b.n	8008572 <_malloc_r+0x22>
 800861a:	42a3      	cmp	r3, r4
 800861c:	6862      	ldr	r2, [r4, #4]
 800861e:	d1dd      	bne.n	80085dc <_malloc_r+0x8c>
 8008620:	f8c8 2000 	str.w	r2, [r8]
 8008624:	e7ec      	b.n	8008600 <_malloc_r+0xb0>
 8008626:	4623      	mov	r3, r4
 8008628:	6864      	ldr	r4, [r4, #4]
 800862a:	e7ac      	b.n	8008586 <_malloc_r+0x36>
 800862c:	4634      	mov	r4, r6
 800862e:	6876      	ldr	r6, [r6, #4]
 8008630:	e7b4      	b.n	800859c <_malloc_r+0x4c>
 8008632:	4613      	mov	r3, r2
 8008634:	e7cc      	b.n	80085d0 <_malloc_r+0x80>
 8008636:	230c      	movs	r3, #12
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	4638      	mov	r0, r7
 800863c:	f000 f80e 	bl	800865c <__malloc_unlock>
 8008640:	e797      	b.n	8008572 <_malloc_r+0x22>
 8008642:	6025      	str	r5, [r4, #0]
 8008644:	e7dc      	b.n	8008600 <_malloc_r+0xb0>
 8008646:	605b      	str	r3, [r3, #4]
 8008648:	deff      	udf	#255	; 0xff
 800864a:	bf00      	nop
 800864c:	20001f34 	.word	0x20001f34

08008650 <__malloc_lock>:
 8008650:	4801      	ldr	r0, [pc, #4]	; (8008658 <__malloc_lock+0x8>)
 8008652:	f7ff bf0f 	b.w	8008474 <__retarget_lock_acquire_recursive>
 8008656:	bf00      	nop
 8008658:	20001f30 	.word	0x20001f30

0800865c <__malloc_unlock>:
 800865c:	4801      	ldr	r0, [pc, #4]	; (8008664 <__malloc_unlock+0x8>)
 800865e:	f7ff bf0a 	b.w	8008476 <__retarget_lock_release_recursive>
 8008662:	bf00      	nop
 8008664:	20001f30 	.word	0x20001f30

08008668 <__ssputs_r>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	688e      	ldr	r6, [r1, #8]
 800866e:	461f      	mov	r7, r3
 8008670:	42be      	cmp	r6, r7
 8008672:	680b      	ldr	r3, [r1, #0]
 8008674:	4682      	mov	sl, r0
 8008676:	460c      	mov	r4, r1
 8008678:	4690      	mov	r8, r2
 800867a:	d82c      	bhi.n	80086d6 <__ssputs_r+0x6e>
 800867c:	898a      	ldrh	r2, [r1, #12]
 800867e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008682:	d026      	beq.n	80086d2 <__ssputs_r+0x6a>
 8008684:	6965      	ldr	r5, [r4, #20]
 8008686:	6909      	ldr	r1, [r1, #16]
 8008688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800868c:	eba3 0901 	sub.w	r9, r3, r1
 8008690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008694:	1c7b      	adds	r3, r7, #1
 8008696:	444b      	add	r3, r9
 8008698:	106d      	asrs	r5, r5, #1
 800869a:	429d      	cmp	r5, r3
 800869c:	bf38      	it	cc
 800869e:	461d      	movcc	r5, r3
 80086a0:	0553      	lsls	r3, r2, #21
 80086a2:	d527      	bpl.n	80086f4 <__ssputs_r+0x8c>
 80086a4:	4629      	mov	r1, r5
 80086a6:	f7ff ff53 	bl	8008550 <_malloc_r>
 80086aa:	4606      	mov	r6, r0
 80086ac:	b360      	cbz	r0, 8008708 <__ssputs_r+0xa0>
 80086ae:	6921      	ldr	r1, [r4, #16]
 80086b0:	464a      	mov	r2, r9
 80086b2:	f000 faeb 	bl	8008c8c <memcpy>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	6126      	str	r6, [r4, #16]
 80086c4:	6165      	str	r5, [r4, #20]
 80086c6:	444e      	add	r6, r9
 80086c8:	eba5 0509 	sub.w	r5, r5, r9
 80086cc:	6026      	str	r6, [r4, #0]
 80086ce:	60a5      	str	r5, [r4, #8]
 80086d0:	463e      	mov	r6, r7
 80086d2:	42be      	cmp	r6, r7
 80086d4:	d900      	bls.n	80086d8 <__ssputs_r+0x70>
 80086d6:	463e      	mov	r6, r7
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	4632      	mov	r2, r6
 80086dc:	4641      	mov	r1, r8
 80086de:	f000 faab 	bl	8008c38 <memmove>
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	1b9b      	subs	r3, r3, r6
 80086e6:	60a3      	str	r3, [r4, #8]
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	4433      	add	r3, r6
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	2000      	movs	r0, #0
 80086f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f4:	462a      	mov	r2, r5
 80086f6:	f000 fad7 	bl	8008ca8 <_realloc_r>
 80086fa:	4606      	mov	r6, r0
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d1e0      	bne.n	80086c2 <__ssputs_r+0x5a>
 8008700:	6921      	ldr	r1, [r4, #16]
 8008702:	4650      	mov	r0, sl
 8008704:	f7ff feb8 	bl	8008478 <_free_r>
 8008708:	230c      	movs	r3, #12
 800870a:	f8ca 3000 	str.w	r3, [sl]
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	e7e9      	b.n	80086f0 <__ssputs_r+0x88>

0800871c <_svfiprintf_r>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	4698      	mov	r8, r3
 8008722:	898b      	ldrh	r3, [r1, #12]
 8008724:	061b      	lsls	r3, r3, #24
 8008726:	b09d      	sub	sp, #116	; 0x74
 8008728:	4607      	mov	r7, r0
 800872a:	460d      	mov	r5, r1
 800872c:	4614      	mov	r4, r2
 800872e:	d50e      	bpl.n	800874e <_svfiprintf_r+0x32>
 8008730:	690b      	ldr	r3, [r1, #16]
 8008732:	b963      	cbnz	r3, 800874e <_svfiprintf_r+0x32>
 8008734:	2140      	movs	r1, #64	; 0x40
 8008736:	f7ff ff0b 	bl	8008550 <_malloc_r>
 800873a:	6028      	str	r0, [r5, #0]
 800873c:	6128      	str	r0, [r5, #16]
 800873e:	b920      	cbnz	r0, 800874a <_svfiprintf_r+0x2e>
 8008740:	230c      	movs	r3, #12
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	e0d0      	b.n	80088ec <_svfiprintf_r+0x1d0>
 800874a:	2340      	movs	r3, #64	; 0x40
 800874c:	616b      	str	r3, [r5, #20]
 800874e:	2300      	movs	r3, #0
 8008750:	9309      	str	r3, [sp, #36]	; 0x24
 8008752:	2320      	movs	r3, #32
 8008754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008758:	f8cd 800c 	str.w	r8, [sp, #12]
 800875c:	2330      	movs	r3, #48	; 0x30
 800875e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008904 <_svfiprintf_r+0x1e8>
 8008762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008766:	f04f 0901 	mov.w	r9, #1
 800876a:	4623      	mov	r3, r4
 800876c:	469a      	mov	sl, r3
 800876e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008772:	b10a      	cbz	r2, 8008778 <_svfiprintf_r+0x5c>
 8008774:	2a25      	cmp	r2, #37	; 0x25
 8008776:	d1f9      	bne.n	800876c <_svfiprintf_r+0x50>
 8008778:	ebba 0b04 	subs.w	fp, sl, r4
 800877c:	d00b      	beq.n	8008796 <_svfiprintf_r+0x7a>
 800877e:	465b      	mov	r3, fp
 8008780:	4622      	mov	r2, r4
 8008782:	4629      	mov	r1, r5
 8008784:	4638      	mov	r0, r7
 8008786:	f7ff ff6f 	bl	8008668 <__ssputs_r>
 800878a:	3001      	adds	r0, #1
 800878c:	f000 80a9 	beq.w	80088e2 <_svfiprintf_r+0x1c6>
 8008790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008792:	445a      	add	r2, fp
 8008794:	9209      	str	r2, [sp, #36]	; 0x24
 8008796:	f89a 3000 	ldrb.w	r3, [sl]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 80a1 	beq.w	80088e2 <_svfiprintf_r+0x1c6>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087aa:	f10a 0a01 	add.w	sl, sl, #1
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	9307      	str	r3, [sp, #28]
 80087b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087b6:	931a      	str	r3, [sp, #104]	; 0x68
 80087b8:	4654      	mov	r4, sl
 80087ba:	2205      	movs	r2, #5
 80087bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c0:	4850      	ldr	r0, [pc, #320]	; (8008904 <_svfiprintf_r+0x1e8>)
 80087c2:	f7f7 fd0d 	bl	80001e0 <memchr>
 80087c6:	9a04      	ldr	r2, [sp, #16]
 80087c8:	b9d8      	cbnz	r0, 8008802 <_svfiprintf_r+0xe6>
 80087ca:	06d0      	lsls	r0, r2, #27
 80087cc:	bf44      	itt	mi
 80087ce:	2320      	movmi	r3, #32
 80087d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d4:	0711      	lsls	r1, r2, #28
 80087d6:	bf44      	itt	mi
 80087d8:	232b      	movmi	r3, #43	; 0x2b
 80087da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087de:	f89a 3000 	ldrb.w	r3, [sl]
 80087e2:	2b2a      	cmp	r3, #42	; 0x2a
 80087e4:	d015      	beq.n	8008812 <_svfiprintf_r+0xf6>
 80087e6:	9a07      	ldr	r2, [sp, #28]
 80087e8:	4654      	mov	r4, sl
 80087ea:	2000      	movs	r0, #0
 80087ec:	f04f 0c0a 	mov.w	ip, #10
 80087f0:	4621      	mov	r1, r4
 80087f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f6:	3b30      	subs	r3, #48	; 0x30
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d94d      	bls.n	8008898 <_svfiprintf_r+0x17c>
 80087fc:	b1b0      	cbz	r0, 800882c <_svfiprintf_r+0x110>
 80087fe:	9207      	str	r2, [sp, #28]
 8008800:	e014      	b.n	800882c <_svfiprintf_r+0x110>
 8008802:	eba0 0308 	sub.w	r3, r0, r8
 8008806:	fa09 f303 	lsl.w	r3, r9, r3
 800880a:	4313      	orrs	r3, r2
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	46a2      	mov	sl, r4
 8008810:	e7d2      	b.n	80087b8 <_svfiprintf_r+0x9c>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	1d19      	adds	r1, r3, #4
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	9103      	str	r1, [sp, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	bfbb      	ittet	lt
 800881e:	425b      	neglt	r3, r3
 8008820:	f042 0202 	orrlt.w	r2, r2, #2
 8008824:	9307      	strge	r3, [sp, #28]
 8008826:	9307      	strlt	r3, [sp, #28]
 8008828:	bfb8      	it	lt
 800882a:	9204      	strlt	r2, [sp, #16]
 800882c:	7823      	ldrb	r3, [r4, #0]
 800882e:	2b2e      	cmp	r3, #46	; 0x2e
 8008830:	d10c      	bne.n	800884c <_svfiprintf_r+0x130>
 8008832:	7863      	ldrb	r3, [r4, #1]
 8008834:	2b2a      	cmp	r3, #42	; 0x2a
 8008836:	d134      	bne.n	80088a2 <_svfiprintf_r+0x186>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	9203      	str	r2, [sp, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	bfb8      	it	lt
 8008844:	f04f 33ff 	movlt.w	r3, #4294967295
 8008848:	3402      	adds	r4, #2
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008914 <_svfiprintf_r+0x1f8>
 8008850:	7821      	ldrb	r1, [r4, #0]
 8008852:	2203      	movs	r2, #3
 8008854:	4650      	mov	r0, sl
 8008856:	f7f7 fcc3 	bl	80001e0 <memchr>
 800885a:	b138      	cbz	r0, 800886c <_svfiprintf_r+0x150>
 800885c:	9b04      	ldr	r3, [sp, #16]
 800885e:	eba0 000a 	sub.w	r0, r0, sl
 8008862:	2240      	movs	r2, #64	; 0x40
 8008864:	4082      	lsls	r2, r0
 8008866:	4313      	orrs	r3, r2
 8008868:	3401      	adds	r4, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008870:	4825      	ldr	r0, [pc, #148]	; (8008908 <_svfiprintf_r+0x1ec>)
 8008872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008876:	2206      	movs	r2, #6
 8008878:	f7f7 fcb2 	bl	80001e0 <memchr>
 800887c:	2800      	cmp	r0, #0
 800887e:	d038      	beq.n	80088f2 <_svfiprintf_r+0x1d6>
 8008880:	4b22      	ldr	r3, [pc, #136]	; (800890c <_svfiprintf_r+0x1f0>)
 8008882:	bb1b      	cbnz	r3, 80088cc <_svfiprintf_r+0x1b0>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	3307      	adds	r3, #7
 8008888:	f023 0307 	bic.w	r3, r3, #7
 800888c:	3308      	adds	r3, #8
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008892:	4433      	add	r3, r6
 8008894:	9309      	str	r3, [sp, #36]	; 0x24
 8008896:	e768      	b.n	800876a <_svfiprintf_r+0x4e>
 8008898:	fb0c 3202 	mla	r2, ip, r2, r3
 800889c:	460c      	mov	r4, r1
 800889e:	2001      	movs	r0, #1
 80088a0:	e7a6      	b.n	80087f0 <_svfiprintf_r+0xd4>
 80088a2:	2300      	movs	r3, #0
 80088a4:	3401      	adds	r4, #1
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	4619      	mov	r1, r3
 80088aa:	f04f 0c0a 	mov.w	ip, #10
 80088ae:	4620      	mov	r0, r4
 80088b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b4:	3a30      	subs	r2, #48	; 0x30
 80088b6:	2a09      	cmp	r2, #9
 80088b8:	d903      	bls.n	80088c2 <_svfiprintf_r+0x1a6>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0c6      	beq.n	800884c <_svfiprintf_r+0x130>
 80088be:	9105      	str	r1, [sp, #20]
 80088c0:	e7c4      	b.n	800884c <_svfiprintf_r+0x130>
 80088c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c6:	4604      	mov	r4, r0
 80088c8:	2301      	movs	r3, #1
 80088ca:	e7f0      	b.n	80088ae <_svfiprintf_r+0x192>
 80088cc:	ab03      	add	r3, sp, #12
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	462a      	mov	r2, r5
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <_svfiprintf_r+0x1f4>)
 80088d4:	a904      	add	r1, sp, #16
 80088d6:	4638      	mov	r0, r7
 80088d8:	f3af 8000 	nop.w
 80088dc:	1c42      	adds	r2, r0, #1
 80088de:	4606      	mov	r6, r0
 80088e0:	d1d6      	bne.n	8008890 <_svfiprintf_r+0x174>
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	065b      	lsls	r3, r3, #25
 80088e6:	f53f af2d 	bmi.w	8008744 <_svfiprintf_r+0x28>
 80088ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ec:	b01d      	add	sp, #116	; 0x74
 80088ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	462a      	mov	r2, r5
 80088f8:	4b05      	ldr	r3, [pc, #20]	; (8008910 <_svfiprintf_r+0x1f4>)
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	4638      	mov	r0, r7
 80088fe:	f000 f879 	bl	80089f4 <_printf_i>
 8008902:	e7eb      	b.n	80088dc <_svfiprintf_r+0x1c0>
 8008904:	08008ec8 	.word	0x08008ec8
 8008908:	08008ed2 	.word	0x08008ed2
 800890c:	00000000 	.word	0x00000000
 8008910:	08008669 	.word	0x08008669
 8008914:	08008ece 	.word	0x08008ece

08008918 <_printf_common>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	4616      	mov	r6, r2
 800891e:	4699      	mov	r9, r3
 8008920:	688a      	ldr	r2, [r1, #8]
 8008922:	690b      	ldr	r3, [r1, #16]
 8008924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008928:	4293      	cmp	r3, r2
 800892a:	bfb8      	it	lt
 800892c:	4613      	movlt	r3, r2
 800892e:	6033      	str	r3, [r6, #0]
 8008930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008934:	4607      	mov	r7, r0
 8008936:	460c      	mov	r4, r1
 8008938:	b10a      	cbz	r2, 800893e <_printf_common+0x26>
 800893a:	3301      	adds	r3, #1
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	0699      	lsls	r1, r3, #26
 8008942:	bf42      	ittt	mi
 8008944:	6833      	ldrmi	r3, [r6, #0]
 8008946:	3302      	addmi	r3, #2
 8008948:	6033      	strmi	r3, [r6, #0]
 800894a:	6825      	ldr	r5, [r4, #0]
 800894c:	f015 0506 	ands.w	r5, r5, #6
 8008950:	d106      	bne.n	8008960 <_printf_common+0x48>
 8008952:	f104 0a19 	add.w	sl, r4, #25
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	6832      	ldr	r2, [r6, #0]
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	42ab      	cmp	r3, r5
 800895e:	dc26      	bgt.n	80089ae <_printf_common+0x96>
 8008960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008964:	1e13      	subs	r3, r2, #0
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	bf18      	it	ne
 800896a:	2301      	movne	r3, #1
 800896c:	0692      	lsls	r2, r2, #26
 800896e:	d42b      	bmi.n	80089c8 <_printf_common+0xb0>
 8008970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008974:	4649      	mov	r1, r9
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d01e      	beq.n	80089bc <_printf_common+0xa4>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	6922      	ldr	r2, [r4, #16]
 8008982:	f003 0306 	and.w	r3, r3, #6
 8008986:	2b04      	cmp	r3, #4
 8008988:	bf02      	ittt	eq
 800898a:	68e5      	ldreq	r5, [r4, #12]
 800898c:	6833      	ldreq	r3, [r6, #0]
 800898e:	1aed      	subeq	r5, r5, r3
 8008990:	68a3      	ldr	r3, [r4, #8]
 8008992:	bf0c      	ite	eq
 8008994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008998:	2500      	movne	r5, #0
 800899a:	4293      	cmp	r3, r2
 800899c:	bfc4      	itt	gt
 800899e:	1a9b      	subgt	r3, r3, r2
 80089a0:	18ed      	addgt	r5, r5, r3
 80089a2:	2600      	movs	r6, #0
 80089a4:	341a      	adds	r4, #26
 80089a6:	42b5      	cmp	r5, r6
 80089a8:	d11a      	bne.n	80089e0 <_printf_common+0xc8>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e008      	b.n	80089c0 <_printf_common+0xa8>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4652      	mov	r2, sl
 80089b2:	4649      	mov	r1, r9
 80089b4:	4638      	mov	r0, r7
 80089b6:	47c0      	blx	r8
 80089b8:	3001      	adds	r0, #1
 80089ba:	d103      	bne.n	80089c4 <_printf_common+0xac>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c4:	3501      	adds	r5, #1
 80089c6:	e7c6      	b.n	8008956 <_printf_common+0x3e>
 80089c8:	18e1      	adds	r1, r4, r3
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	2030      	movs	r0, #48	; 0x30
 80089ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089d2:	4422      	add	r2, r4
 80089d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089dc:	3302      	adds	r3, #2
 80089de:	e7c7      	b.n	8008970 <_printf_common+0x58>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4622      	mov	r2, r4
 80089e4:	4649      	mov	r1, r9
 80089e6:	4638      	mov	r0, r7
 80089e8:	47c0      	blx	r8
 80089ea:	3001      	adds	r0, #1
 80089ec:	d0e6      	beq.n	80089bc <_printf_common+0xa4>
 80089ee:	3601      	adds	r6, #1
 80089f0:	e7d9      	b.n	80089a6 <_printf_common+0x8e>
	...

080089f4 <_printf_i>:
 80089f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	7e0f      	ldrb	r7, [r1, #24]
 80089fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089fc:	2f78      	cmp	r7, #120	; 0x78
 80089fe:	4691      	mov	r9, r2
 8008a00:	4680      	mov	r8, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	469a      	mov	sl, r3
 8008a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a0a:	d807      	bhi.n	8008a1c <_printf_i+0x28>
 8008a0c:	2f62      	cmp	r7, #98	; 0x62
 8008a0e:	d80a      	bhi.n	8008a26 <_printf_i+0x32>
 8008a10:	2f00      	cmp	r7, #0
 8008a12:	f000 80d4 	beq.w	8008bbe <_printf_i+0x1ca>
 8008a16:	2f58      	cmp	r7, #88	; 0x58
 8008a18:	f000 80c0 	beq.w	8008b9c <_printf_i+0x1a8>
 8008a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a24:	e03a      	b.n	8008a9c <_printf_i+0xa8>
 8008a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a2a:	2b15      	cmp	r3, #21
 8008a2c:	d8f6      	bhi.n	8008a1c <_printf_i+0x28>
 8008a2e:	a101      	add	r1, pc, #4	; (adr r1, 8008a34 <_printf_i+0x40>)
 8008a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008a1d 	.word	0x08008a1d
 8008a40:	08008a1d 	.word	0x08008a1d
 8008a44:	08008a1d 	.word	0x08008a1d
 8008a48:	08008a1d 	.word	0x08008a1d
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008a1d 	.word	0x08008a1d
 8008a54:	08008a1d 	.word	0x08008a1d
 8008a58:	08008a1d 	.word	0x08008a1d
 8008a5c:	08008a1d 	.word	0x08008a1d
 8008a60:	08008ba5 	.word	0x08008ba5
 8008a64:	08008acd 	.word	0x08008acd
 8008a68:	08008b5f 	.word	0x08008b5f
 8008a6c:	08008a1d 	.word	0x08008a1d
 8008a70:	08008a1d 	.word	0x08008a1d
 8008a74:	08008bc7 	.word	0x08008bc7
 8008a78:	08008a1d 	.word	0x08008a1d
 8008a7c:	08008acd 	.word	0x08008acd
 8008a80:	08008a1d 	.word	0x08008a1d
 8008a84:	08008a1d 	.word	0x08008a1d
 8008a88:	08008b67 	.word	0x08008b67
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	1d1a      	adds	r2, r3, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	602a      	str	r2, [r5, #0]
 8008a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e09f      	b.n	8008be0 <_printf_i+0x1ec>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	0607      	lsls	r7, r0, #24
 8008aa6:	f103 0104 	add.w	r1, r3, #4
 8008aaa:	6029      	str	r1, [r5, #0]
 8008aac:	d501      	bpl.n	8008ab2 <_printf_i+0xbe>
 8008aae:	681e      	ldr	r6, [r3, #0]
 8008ab0:	e003      	b.n	8008aba <_printf_i+0xc6>
 8008ab2:	0646      	lsls	r6, r0, #25
 8008ab4:	d5fb      	bpl.n	8008aae <_printf_i+0xba>
 8008ab6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	da03      	bge.n	8008ac6 <_printf_i+0xd2>
 8008abe:	232d      	movs	r3, #45	; 0x2d
 8008ac0:	4276      	negs	r6, r6
 8008ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac6:	485a      	ldr	r0, [pc, #360]	; (8008c30 <_printf_i+0x23c>)
 8008ac8:	230a      	movs	r3, #10
 8008aca:	e012      	b.n	8008af2 <_printf_i+0xfe>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	6820      	ldr	r0, [r4, #0]
 8008ad0:	1d19      	adds	r1, r3, #4
 8008ad2:	6029      	str	r1, [r5, #0]
 8008ad4:	0605      	lsls	r5, r0, #24
 8008ad6:	d501      	bpl.n	8008adc <_printf_i+0xe8>
 8008ad8:	681e      	ldr	r6, [r3, #0]
 8008ada:	e002      	b.n	8008ae2 <_printf_i+0xee>
 8008adc:	0641      	lsls	r1, r0, #25
 8008ade:	d5fb      	bpl.n	8008ad8 <_printf_i+0xe4>
 8008ae0:	881e      	ldrh	r6, [r3, #0]
 8008ae2:	4853      	ldr	r0, [pc, #332]	; (8008c30 <_printf_i+0x23c>)
 8008ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2308      	moveq	r3, #8
 8008aea:	230a      	movne	r3, #10
 8008aec:	2100      	movs	r1, #0
 8008aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008af2:	6865      	ldr	r5, [r4, #4]
 8008af4:	60a5      	str	r5, [r4, #8]
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	bfa2      	ittt	ge
 8008afa:	6821      	ldrge	r1, [r4, #0]
 8008afc:	f021 0104 	bicge.w	r1, r1, #4
 8008b00:	6021      	strge	r1, [r4, #0]
 8008b02:	b90e      	cbnz	r6, 8008b08 <_printf_i+0x114>
 8008b04:	2d00      	cmp	r5, #0
 8008b06:	d04b      	beq.n	8008ba0 <_printf_i+0x1ac>
 8008b08:	4615      	mov	r5, r2
 8008b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b12:	5dc7      	ldrb	r7, [r0, r7]
 8008b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b18:	4637      	mov	r7, r6
 8008b1a:	42bb      	cmp	r3, r7
 8008b1c:	460e      	mov	r6, r1
 8008b1e:	d9f4      	bls.n	8008b0a <_printf_i+0x116>
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d10b      	bne.n	8008b3c <_printf_i+0x148>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	07de      	lsls	r6, r3, #31
 8008b28:	d508      	bpl.n	8008b3c <_printf_i+0x148>
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	6861      	ldr	r1, [r4, #4]
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	bfde      	ittt	le
 8008b32:	2330      	movle	r3, #48	; 0x30
 8008b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b3c:	1b52      	subs	r2, r2, r5
 8008b3e:	6122      	str	r2, [r4, #16]
 8008b40:	f8cd a000 	str.w	sl, [sp]
 8008b44:	464b      	mov	r3, r9
 8008b46:	aa03      	add	r2, sp, #12
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	f7ff fee4 	bl	8008918 <_printf_common>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d14a      	bne.n	8008bea <_printf_i+0x1f6>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	b004      	add	sp, #16
 8008b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	f043 0320 	orr.w	r3, r3, #32
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	4833      	ldr	r0, [pc, #204]	; (8008c34 <_printf_i+0x240>)
 8008b68:	2778      	movs	r7, #120	; 0x78
 8008b6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	6829      	ldr	r1, [r5, #0]
 8008b72:	061f      	lsls	r7, r3, #24
 8008b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b78:	d402      	bmi.n	8008b80 <_printf_i+0x18c>
 8008b7a:	065f      	lsls	r7, r3, #25
 8008b7c:	bf48      	it	mi
 8008b7e:	b2b6      	uxthmi	r6, r6
 8008b80:	07df      	lsls	r7, r3, #31
 8008b82:	bf48      	it	mi
 8008b84:	f043 0320 	orrmi.w	r3, r3, #32
 8008b88:	6029      	str	r1, [r5, #0]
 8008b8a:	bf48      	it	mi
 8008b8c:	6023      	strmi	r3, [r4, #0]
 8008b8e:	b91e      	cbnz	r6, 8008b98 <_printf_i+0x1a4>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	f023 0320 	bic.w	r3, r3, #32
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	2310      	movs	r3, #16
 8008b9a:	e7a7      	b.n	8008aec <_printf_i+0xf8>
 8008b9c:	4824      	ldr	r0, [pc, #144]	; (8008c30 <_printf_i+0x23c>)
 8008b9e:	e7e4      	b.n	8008b6a <_printf_i+0x176>
 8008ba0:	4615      	mov	r5, r2
 8008ba2:	e7bd      	b.n	8008b20 <_printf_i+0x12c>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	6826      	ldr	r6, [r4, #0]
 8008ba8:	6961      	ldr	r1, [r4, #20]
 8008baa:	1d18      	adds	r0, r3, #4
 8008bac:	6028      	str	r0, [r5, #0]
 8008bae:	0635      	lsls	r5, r6, #24
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	d501      	bpl.n	8008bb8 <_printf_i+0x1c4>
 8008bb4:	6019      	str	r1, [r3, #0]
 8008bb6:	e002      	b.n	8008bbe <_printf_i+0x1ca>
 8008bb8:	0670      	lsls	r0, r6, #25
 8008bba:	d5fb      	bpl.n	8008bb4 <_printf_i+0x1c0>
 8008bbc:	8019      	strh	r1, [r3, #0]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6123      	str	r3, [r4, #16]
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	e7bc      	b.n	8008b40 <_printf_i+0x14c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	1d1a      	adds	r2, r3, #4
 8008bca:	602a      	str	r2, [r5, #0]
 8008bcc:	681d      	ldr	r5, [r3, #0]
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f7f7 fb04 	bl	80001e0 <memchr>
 8008bd8:	b108      	cbz	r0, 8008bde <_printf_i+0x1ea>
 8008bda:	1b40      	subs	r0, r0, r5
 8008bdc:	6060      	str	r0, [r4, #4]
 8008bde:	6863      	ldr	r3, [r4, #4]
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	2300      	movs	r3, #0
 8008be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be8:	e7aa      	b.n	8008b40 <_printf_i+0x14c>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	462a      	mov	r2, r5
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	47d0      	blx	sl
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d0ad      	beq.n	8008b54 <_printf_i+0x160>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	079b      	lsls	r3, r3, #30
 8008bfc:	d413      	bmi.n	8008c26 <_printf_i+0x232>
 8008bfe:	68e0      	ldr	r0, [r4, #12]
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	4298      	cmp	r0, r3
 8008c04:	bfb8      	it	lt
 8008c06:	4618      	movlt	r0, r3
 8008c08:	e7a6      	b.n	8008b58 <_printf_i+0x164>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4632      	mov	r2, r6
 8008c0e:	4649      	mov	r1, r9
 8008c10:	4640      	mov	r0, r8
 8008c12:	47d0      	blx	sl
 8008c14:	3001      	adds	r0, #1
 8008c16:	d09d      	beq.n	8008b54 <_printf_i+0x160>
 8008c18:	3501      	adds	r5, #1
 8008c1a:	68e3      	ldr	r3, [r4, #12]
 8008c1c:	9903      	ldr	r1, [sp, #12]
 8008c1e:	1a5b      	subs	r3, r3, r1
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	dcf2      	bgt.n	8008c0a <_printf_i+0x216>
 8008c24:	e7eb      	b.n	8008bfe <_printf_i+0x20a>
 8008c26:	2500      	movs	r5, #0
 8008c28:	f104 0619 	add.w	r6, r4, #25
 8008c2c:	e7f5      	b.n	8008c1a <_printf_i+0x226>
 8008c2e:	bf00      	nop
 8008c30:	08008ed9 	.word	0x08008ed9
 8008c34:	08008eea 	.word	0x08008eea

08008c38 <memmove>:
 8008c38:	4288      	cmp	r0, r1
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	eb01 0402 	add.w	r4, r1, r2
 8008c40:	d902      	bls.n	8008c48 <memmove+0x10>
 8008c42:	4284      	cmp	r4, r0
 8008c44:	4623      	mov	r3, r4
 8008c46:	d807      	bhi.n	8008c58 <memmove+0x20>
 8008c48:	1e43      	subs	r3, r0, #1
 8008c4a:	42a1      	cmp	r1, r4
 8008c4c:	d008      	beq.n	8008c60 <memmove+0x28>
 8008c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c56:	e7f8      	b.n	8008c4a <memmove+0x12>
 8008c58:	4402      	add	r2, r0
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	428a      	cmp	r2, r1
 8008c5e:	d100      	bne.n	8008c62 <memmove+0x2a>
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c6a:	e7f7      	b.n	8008c5c <memmove+0x24>

08008c6c <_sbrk_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d06      	ldr	r5, [pc, #24]	; (8008c88 <_sbrk_r+0x1c>)
 8008c70:	2300      	movs	r3, #0
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	f7f8 f8ca 	bl	8000e10 <_sbrk>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_sbrk_r+0x1a>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_sbrk_r+0x1a>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20001f2c 	.word	0x20001f2c

08008c8c <memcpy>:
 8008c8c:	440a      	add	r2, r1
 8008c8e:	4291      	cmp	r1, r2
 8008c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c94:	d100      	bne.n	8008c98 <memcpy+0xc>
 8008c96:	4770      	bx	lr
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca2:	4291      	cmp	r1, r2
 8008ca4:	d1f9      	bne.n	8008c9a <memcpy+0xe>
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <_realloc_r>:
 8008ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cac:	4680      	mov	r8, r0
 8008cae:	4614      	mov	r4, r2
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	b921      	cbnz	r1, 8008cbe <_realloc_r+0x16>
 8008cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	4611      	mov	r1, r2
 8008cba:	f7ff bc49 	b.w	8008550 <_malloc_r>
 8008cbe:	b92a      	cbnz	r2, 8008ccc <_realloc_r+0x24>
 8008cc0:	f7ff fbda 	bl	8008478 <_free_r>
 8008cc4:	4625      	mov	r5, r4
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ccc:	f000 f81b 	bl	8008d06 <_malloc_usable_size_r>
 8008cd0:	4284      	cmp	r4, r0
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	d802      	bhi.n	8008cdc <_realloc_r+0x34>
 8008cd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cda:	d812      	bhi.n	8008d02 <_realloc_r+0x5a>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4640      	mov	r0, r8
 8008ce0:	f7ff fc36 	bl	8008550 <_malloc_r>
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d0ed      	beq.n	8008cc6 <_realloc_r+0x1e>
 8008cea:	42bc      	cmp	r4, r7
 8008cec:	4622      	mov	r2, r4
 8008cee:	4631      	mov	r1, r6
 8008cf0:	bf28      	it	cs
 8008cf2:	463a      	movcs	r2, r7
 8008cf4:	f7ff ffca 	bl	8008c8c <memcpy>
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7ff fbbc 	bl	8008478 <_free_r>
 8008d00:	e7e1      	b.n	8008cc6 <_realloc_r+0x1e>
 8008d02:	4635      	mov	r5, r6
 8008d04:	e7df      	b.n	8008cc6 <_realloc_r+0x1e>

08008d06 <_malloc_usable_size_r>:
 8008d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d0a:	1f18      	subs	r0, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfbc      	itt	lt
 8008d10:	580b      	ldrlt	r3, [r1, r0]
 8008d12:	18c0      	addlt	r0, r0, r3
 8008d14:	4770      	bx	lr
	...

08008d18 <_init>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr

08008d24 <_fini>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	bf00      	nop
 8008d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	469e      	mov	lr, r3
 8008d2e:	4770      	bx	lr
