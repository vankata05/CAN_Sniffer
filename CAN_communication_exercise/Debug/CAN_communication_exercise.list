
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e4  0800a4e4  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4ec  0800a4ec  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f0  0800a4f0  0001a4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001e7c  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001fd8  20001fd8  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000149e3  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036fc  00000000  00000000  00034bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe8  00000000  00000000  000382b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c06  00000000  00000000  00039298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c92  00000000  00000000  00039e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001581f  00000000  00000000  0005db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c92f9  00000000  00000000  0007334f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004668  00000000  00000000  0013c648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00140cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1f8 	.word	0x0800a1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800a1f8 	.word	0x0800a1f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d141      	bne.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80005ac:	f001 f8ed 	bl	800178a <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80005b6:	d102      	bne.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	469c      	mov	ip, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461e      	mov	r6, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	9305      	str	r3, [sp, #20]
 80005f4:	9604      	str	r6, [sp, #16]
 80005f6:	9503      	str	r5, [sp, #12]
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000604:	f009 f954 	bl	80098b0 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8000612:	bf00      	nop
 8000614:	372c      	adds	r7, #44	; 0x2c
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	20000273 	.word	0x20000273
 8000620:	20000178 	.word	0x20000178
 8000624:	200001c0 	.word	0x200001c0
 8000628:	20000272 	.word	0x20000272
 800062c:	0800a210 	.word	0x0800a210
 8000630:	20000180 	.word	0x20000180
 8000634:	20000274 	.word	0x20000274

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800063e:	f000 fda5 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 fa0d 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 fb45 	bl	8000cd4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800064a:	f008 fb57 	bl	8008cfc <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800064e:	f000 fb17 	bl	8000c80 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000652:	f000 faeb 	bl	8000c2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8000656:	f000 f84f 	bl	80006f8 <HODL_Till_BTN>

  Auto_Baudrate_Setup(PRE);
 800065a:	4823      	ldr	r0, [pc, #140]	; (80006e8 <main+0xb0>)
 800065c:	f000 f868 	bl	8000730 <Auto_Baudrate_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t tick = HAL_GetTick();

  uint8_t data[64] = {0};
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	223c      	movs	r2, #60	; 0x3c
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f009 f93f 	bl	80098f0 <memset>
  double coords[2] = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	220a      	movs	r2, #10
 8000684:	4919      	ldr	r1, [pc, #100]	; (80006ec <main+0xb4>)
 8000686:	481a      	ldr	r0, [pc, #104]	; (80006f0 <main+0xb8>)
 8000688:	f003 feb9 	bl	80043fe <HAL_UART_Transmit>
  HAL_Delay(10000);
 800068c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000690:	f000 fdee 	bl	8001270 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 8000694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000698:	220a      	movs	r2, #10
 800069a:	4914      	ldr	r1, [pc, #80]	; (80006ec <main+0xb4>)
 800069c:	4814      	ldr	r0, [pc, #80]	; (80006f0 <main+0xb8>)
 800069e:	f003 feae 	bl	80043fe <HAL_UART_Transmit>
  HAL_Delay(10000);
 80006a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80006a6:	f000 fde3 	bl	8001270 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	220a      	movs	r2, #10
 80006b0:	490e      	ldr	r1, [pc, #56]	; (80006ec <main+0xb4>)
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <main+0xb8>)
 80006b4:	f003 fea3 	bl	80043fe <HAL_UART_Transmit>
  HAL_Delay(10000);
 80006b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80006bc:	f000 fdd8 	bl	8001270 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	220a      	movs	r2, #10
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <main+0xb4>)
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <main+0xb8>)
 80006ca:	f003 fe98 	bl	80043fe <HAL_UART_Transmit>
  HAL_Delay(10000);
 80006ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80006d2:	f000 fdcd 	bl	8001270 <HAL_Delay>


  while (1)
  {
	  GNSS_Get_Coords(&huart3, data, 64, coords);
 80006d6:	463b      	mov	r3, r7
 80006d8:	f107 0110 	add.w	r1, r7, #16
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0xbc>)
 80006e0:	f000 f8e2 	bl	80008a8 <GNSS_Get_Coords>
 80006e4:	e7f7      	b.n	80006d6 <main+0x9e>
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	0800a2e8 	.word	0x0800a2e8
 80006f0:	200001e8 	.word	0x200001e8
 80006f4:	2000022c 	.word	0x2000022c

080006f8 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006fc:	e005      	b.n	800070a <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <HODL_Till_BTN+0x30>)
 8000706:	f001 feff 	bl	8002508 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800070a:	2101      	movs	r1, #1
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <HODL_Till_BTN+0x34>)
 800070e:	f001 fee3 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f2      	beq.n	80006fe <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071e:	4802      	ldr	r0, [pc, #8]	; (8000728 <HODL_Till_BTN+0x30>)
 8000720:	f001 fef2 	bl	8002508 <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40020000 	.word	0x40020000

08000730 <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 4; i++){
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800073e:	e034      	b.n	80007aa <Auto_Baudrate_Setup+0x7a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000740:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <Auto_Baudrate_Setup+0x110>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d133      	bne.n	80007b2 <Auto_Baudrate_Setup+0x82>
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <Auto_Baudrate_Setup+0x114>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d12e      	bne.n	80007b2 <Auto_Baudrate_Setup+0x82>
		  if(i == 0){
 8000754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10d      	bne.n	8000778 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fa13 	bl	8000b90 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800076a:	4837      	ldr	r0, [pc, #220]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 800076c:	f000 ff80 	bl	8001670 <HAL_CAN_Start>
			  HAL_Delay(100);
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f000 fd7d 	bl	8001270 <HAL_Delay>
 8000776:	e013      	b.n	80007a0 <Auto_Baudrate_Setup+0x70>
		  }else{
			  HAL_CAN_Stop(&hcan1);
 8000778:	4833      	ldr	r0, [pc, #204]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 800077a:	f000 ffbd 	bl	80016f8 <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800077e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f9fe 	bl	8000b90 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000794:	482c      	ldr	r0, [pc, #176]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 8000796:	f000 ff6b 	bl	8001670 <HAL_CAN_Start>
			  HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f000 fd68 	bl	8001270 <HAL_Delay>
  for(i = 0; i < 4; i++){
 80007a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007a4:	3301      	adds	r3, #1
 80007a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d9c6      	bls.n	8000740 <Auto_Baudrate_Setup+0x10>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <Auto_Baudrate_Setup+0x110>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d104      	bne.n	80007c6 <Auto_Baudrate_Setup+0x96>
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <Auto_Baudrate_Setup+0x114>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d029      	beq.n	800081a <Auto_Baudrate_Setup+0xea>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 80007c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007ce:	3b01      	subs	r3, #1
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	491b      	ldr	r1, [pc, #108]	; (800084c <Auto_Baudrate_Setup+0x11c>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 f866 	bl	80098b0 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcf1 	bl	80001d0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f008 fb5b 	bl	8008eb4 <CDC_Transmit_FS>
	  HAL_CAN_Stop(&hcan1);
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 8000800:	f000 ff7a 	bl	80016f8 <HAL_CAN_Stop>
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(&hcan1);
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 800080c:	f000 fd54 	bl	80012b8 <HAL_CAN_Init>
	  CAN1_Filter_Config();
 8000810:	f000 f990 	bl	8000b34 <CAN1_Filter_Config>
	  HAL_CAN_Start(&hcan1);
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <Auto_Baudrate_Setup+0x118>)
 8000816:	f000 ff2b 	bl	8001670 <HAL_CAN_Start>
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <Auto_Baudrate_Setup+0x110>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <Auto_Baudrate_Setup+0x106>
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <Auto_Baudrate_Setup+0x114>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d103      	bne.n	8000836 <Auto_Baudrate_Setup+0x106>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 800082e:	2118      	movs	r1, #24
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <Auto_Baudrate_Setup+0x120>)
 8000832:	f008 fb3f 	bl	8008eb4 <CDC_Transmit_FS>
//	  Error_Handler();
  }
}
 8000836:	bf00      	nop
 8000838:	3738      	adds	r7, #56	; 0x38
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000271 	.word	0x20000271
 8000844:	20000270 	.word	0x20000270
 8000848:	200001c0 	.word	0x200001c0
 800084c:	0800a2f4 	.word	0x0800a2f4
 8000850:	0800a320 	.word	0x0800a320

08000854 <Rem_Char>:

	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);

}

static void Rem_Char(uint8_t* data, uint8_t ch){
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	uint8_t *pr = data, *pw = data;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 8000868:	e011      	b.n	800088e <Rem_Char+0x3a>
        *pw = *pr++;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	60fa      	str	r2, [r7, #12]
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	701a      	strb	r2, [r3, #0]
        pw += (*pw != ch);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4413      	add	r3, r2
 800088c:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1e9      	bne.n	800086a <Rem_Char+0x16>
    }
    *pw = '\0';
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <GNSS_Get_Coords>:

static void GNSS_Get_Coords(UART_HandleTypeDef *huart, uint8_t* data, uint8_t size, double* Coords){
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b099      	sub	sp, #100	; 0x64
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Receive_STR(huart, data, size, 50);
	  while(1){
		  HAL_UART_Receive_STR(huart, data, size, 50);
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	2332      	movs	r3, #50	; 0x32
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f000 f89e 	bl	8000a00 <HAL_UART_Receive_STR>
//		  							4240.0922,N,02322.4681,E,06380
//		                            4240.092202322.4681
//		                            42400922023224681

//		  Rem_Char(data, '$');
		  if(data[3] == (uint8_t)'G' && data[4] == (uint8_t)'L' && data[5] == (uint8_t)'L'){
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	3303      	adds	r3, #3
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b47      	cmp	r3, #71	; 0x47
 80008cc:	d1f4      	bne.n	80008b8 <GNSS_Get_Coords+0x10>
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	3304      	adds	r3, #4
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b4c      	cmp	r3, #76	; 0x4c
 80008d6:	d1ef      	bne.n	80008b8 <GNSS_Get_Coords+0x10>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	3305      	adds	r3, #5
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b4c      	cmp	r3, #76	; 0x4c
 80008e0:	d000      	beq.n	80008e4 <GNSS_Get_Coords+0x3c>
		  HAL_UART_Receive_STR(huart, data, size, 50);
 80008e2:	e7e9      	b.n	80008b8 <GNSS_Get_Coords+0x10>
			  break;
 80008e4:	bf00      	nop
		  }
	  }

//	**znam che moje sus strtok, narochno ne e taka**
	  for(int i = 0; i < size && data[i] != 0; i++){
 80008e6:	2300      	movs	r3, #0
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008ea:	e02a      	b.n	8000942 <GNSS_Get_Coords+0x9a>
		  if(i < 18){
 80008ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	dc16      	bgt.n	8000920 <GNSS_Get_Coords+0x78>
			  if(i > 8)
 80008f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	dd09      	ble.n	800090c <GNSS_Get_Coords+0x64>
				  data[i] = data[i+11];
 80008f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008fa:	330b      	adds	r3, #11
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	441a      	add	r2, r3
 8000900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	440b      	add	r3, r1
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	701a      	strb	r2, [r3, #0]
 800090a:	e017      	b.n	800093c <GNSS_Get_Coords+0x94>
			  else
				  data[i] = data[i+7];
 800090c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800090e:	3307      	adds	r3, #7
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	441a      	add	r2, r3
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	440b      	add	r3, r1
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e00d      	b.n	800093c <GNSS_Get_Coords+0x94>
		  }else if(i == 18){
 8000920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000922:	2b12      	cmp	r3, #18
 8000924:	d105      	bne.n	8000932 <GNSS_Get_Coords+0x8a>
			  data[i] = '\n';
 8000926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	4413      	add	r3, r2
 800092c:	220a      	movs	r2, #10
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e004      	b.n	800093c <GNSS_Get_Coords+0x94>
		  }else{
			  data[i] = 0;
 8000932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	4413      	add	r3, r2
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < size && data[i] != 0; i++){
 800093c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800093e:	3301      	adds	r3, #1
 8000940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000946:	429a      	cmp	r2, r3
 8000948:	da05      	bge.n	8000956 <GNSS_Get_Coords+0xae>
 800094a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1ca      	bne.n	80008ec <GNSS_Get_Coords+0x44>
		  }
	  }

	  Rem_Char(data, '.');
 8000956:	212e      	movs	r1, #46	; 0x2e
 8000958:	68b8      	ldr	r0, [r7, #8]
 800095a:	f7ff ff7b 	bl	8000854 <Rem_Char>

	  uint8_t lat[9] = {0};
 800095e:	2300      	movs	r3, #0
 8000960:	653b      	str	r3, [r7, #80]	; 0x50
 8000962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	711a      	strb	r2, [r3, #4]
	  memcpy(&lat, data, 8);
 800096c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000970:	2208      	movs	r2, #8
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	4618      	mov	r0, r3
 8000976:	f008 ffef 	bl	8009958 <memcpy>
	  lat[8] = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	  data += 8;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3308      	adds	r3, #8
 8000984:	60bb      	str	r3, [r7, #8]

	  char msg[64] = {0};
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	223c      	movs	r2, #60	; 0x3c
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f008 ffac 	bl	80098f0 <memset>

	  sprintf(msg, "AT+SEND=1:0:%x%x\n", atoi((char*)lat), atoi((char*)data));
 8000998:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800099c:	4618      	mov	r0, r3
 800099e:	f008 fef7 	bl	8009790 <atoi>
 80009a2:	4604      	mov	r4, r0
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f008 fef3 	bl	8009790 <atoi>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f107 0010 	add.w	r0, r7, #16
 80009b0:	4622      	mov	r2, r4
 80009b2:	4911      	ldr	r1, [pc, #68]	; (80009f8 <GNSS_Get_Coords+0x150>)
 80009b4:	f008 ff7c 	bl	80098b0 <siprintf>
//	  strcat(msg, (uint8_t*)atoi((char*)lat));
//	  strcat(msg, (uint8_t*)atoi((char*)data));

	  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc07 	bl	80001d0 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f008 fa71 	bl	8008eb4 <CDC_Transmit_FS>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fbfa 	bl	80001d0 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f107 0110 	add.w	r1, r7, #16
 80009e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <GNSS_Get_Coords+0x154>)
 80009ea:	f003 fd08 	bl	80043fe <HAL_UART_Transmit>
}
 80009ee:	bf00      	nop
 80009f0:	3764      	adds	r7, #100	; 0x64
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	0800a33c 	.word	0x0800a33c
 80009fc:	200001e8 	.word	0x200001e8

08000a00 <HAL_UART_Receive_STR>:

static void HAL_UART_Receive_STR(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size, uint32_t Timeout){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	71fb      	strb	r3, [r7, #7]
	memset(pData, 0, Size);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	461a      	mov	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	68b8      	ldr	r0, [r7, #8]
 8000a18:	f008 ff6a 	bl	80098f0 <memset>
	uint8_t buff[2] = {0};
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	75fb      	strb	r3, [r7, #23]
 8000a24:	e011      	b.n	8000a4a <HAL_UART_Receive_STR+0x4a>
		HAL_UART_Receive(&huart3, buff, 1, Timeout);
 8000a26:	f107 0114 	add.w	r1, r7, #20
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_UART_Receive_STR+0x5c>)
 8000a30:	f003 fd77 	bl	8004522 <HAL_UART_Receive>
		pData[Size - i] = buff[0];
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4413      	add	r3, r2
 8000a40:	7d3a      	ldrb	r2, [r7, #20]
 8000a42:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	75fb      	strb	r3, [r7, #23]
 8000a4a:	7d3b      	ldrb	r3, [r7, #20]
 8000a4c:	2b0a      	cmp	r3, #10
 8000a4e:	d1ea      	bne.n	8000a26 <HAL_UART_Receive_STR+0x26>
	}
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000022c 	.word	0x2000022c

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f008 ff3e 	bl	80098f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <SystemClock_Config+0xd0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <SystemClock_Config+0xd0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 ffa4 	bl	8003a34 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000af2:	f000 f94f 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2105      	movs	r1, #5
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fa05 	bl	8003f24 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b20:	f000 f938 	bl	8000d94 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	; 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2228      	movs	r2, #40	; 0x28
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 fed5 	bl	80098f0 <memset>

  filters.FilterActivation = ENABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 8000b5a:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000b5e:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8000b64:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8000b68:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <CAN1_Filter_Config+0x58>)
 8000b74:	f000 fc9c 	bl	80014b0 <HAL_CAN_ConfigFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 8000b7e:	f000 f909 	bl	8000d94 <Error_Handler>
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001c0 	.word	0x200001c0

08000b90 <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MX_CAN1_Init+0x98>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000ba0:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000be6:	f000 fb67 	bl	80012b8 <HAL_CAN_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000bf0:	f000 f8d0 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000bfa:	f000 fed8 	bl	80019ae <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 fe72 	bl	80098f0 <memset>
  filters.FilterActivation = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4619      	mov	r1, r3
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_CAN1_Init+0x94>)
 8000c18:	f000 fc4a 	bl	80014b0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	; 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001c0 	.word	0x200001c0
 8000c28:	40006400 	.word	0x40006400

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_USART2_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f003 fb7e 	bl	8004364 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f891 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001e8 	.word	0x200001e8
 8000c7c:	40004400 	.word	0x40004400

08000c80 <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART3_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000c8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART3_UART_Init+0x4c>)
 8000cb8:	f003 fb54 	bl	8004364 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f867 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000022c 	.word	0x2000022c
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a25      	ldr	r2, [pc, #148]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_GPIO_Init+0xb4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_GPIO_Init+0xb8>)
 8000d46:	f001 fbdf 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d5e:	f001 fa1f 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0xb8>)
 8000d7c:	f001 fa10 	bl	80021a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	40020000 	.word	0x40020000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <HAL_CAN_MspInit+0xb4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d143      	bne.n	8000e9a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_CAN_MspInit+0xb8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_CAN_MspInit+0xb8>)
 8000e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_CAN_MspInit+0xb8>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_CAN_MspInit+0xb8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_CAN_MspInit+0xb8>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_CAN_MspInit+0xb8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e5a:	2309      	movs	r3, #9
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <HAL_CAN_MspInit+0xbc>)
 8000e66:	f001 f99b 	bl	80021a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2013      	movs	r0, #19
 8000e70:	f001 f8cd 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e74:	2013      	movs	r0, #19
 8000e76:	f001 f8e6 	bl	8002046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f001 f8c5 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e84:	2014      	movs	r0, #20
 8000e86:	f001 f8de 	bl	8002046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2015      	movs	r0, #21
 8000e90:	f001 f8bd 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e94:	2015      	movs	r0, #21
 8000e96:	f001 f8d6 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40006400 	.word	0x40006400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <HAL_UART_MspInit+0x108>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d134      	bne.n	8000f3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a38      	ldr	r2, [pc, #224]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <HAL_UART_MspInit+0x110>)
 8000f26:	f001 f93b 	bl	80021a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2026      	movs	r0, #38	; 0x26
 8000f30:	f001 f86d 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f34:	2026      	movs	r0, #38	; 0x26
 8000f36:	f001 f886 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f3a:	e039      	b.n	8000fb0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d134      	bne.n	8000fb0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0x10c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f90:	2307      	movs	r3, #7
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <HAL_UART_MspInit+0x118>)
 8000f9c:	f001 f900 	bl	80021a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2027      	movs	r0, #39	; 0x27
 8000fa6:	f001 f832 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000faa:	2027      	movs	r0, #39	; 0x27
 8000fac:	f001 f84b 	bl	8002046 <HAL_NVIC_EnableIRQ>
}
 8000fb0:	bf00      	nop
 8000fb2:	3730      	adds	r7, #48	; 0x30
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40004800 	.word	0x40004800
 8000fc8:	40020400 	.word	0x40020400

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f90a 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <CAN1_TX_IRQHandler+0x10>)
 8001026:	f000 fce8 	bl	80019fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001c0 	.word	0x200001c0

08001034 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <CAN1_RX0_IRQHandler+0x14>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <CAN1_RX0_IRQHandler+0x18>)
 8001040:	f000 fcdb 	bl	80019fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000270 	.word	0x20000270
 800104c:	200001c0 	.word	0x200001c0

08001050 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <CAN1_RX1_IRQHandler+0x14>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <CAN1_RX1_IRQHandler+0x18>)
 800105c:	f000 fccd 	bl	80019fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000271 	.word	0x20000271
 8001068:	200001c0 	.word	0x200001c0

0800106c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <USART2_IRQHandler+0x10>)
 8001072:	f003 faf9 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001e8 	.word	0x200001e8

08001080 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART3_IRQHandler+0x10>)
 8001086:	f003 faef 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000022c 	.word	0x2000022c

08001094 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <OTG_FS_IRQHandler+0x10>)
 800109a:	f001 fb9e 	bl	80027da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20001764 	.word	0x20001764

080010a8 <_sbrk>:
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
 80010d8:	f008 fc12 	bl	8009900 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20020000 	.word	0x20020000
 8001108:	00000400 	.word	0x00000400
 800110c:	2000027c 	.word	0x2000027c
 8001110:	20001fd8 	.word	0x20001fd8

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001170 <LoopFillZerobss+0x12>
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
 800113e:	490e      	ldr	r1, [pc, #56]	; (8001178 <LoopFillZerobss+0x1a>)
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <LoopFillZerobss+0x1e>)
 8001142:	2300      	movs	r3, #0
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:
 8001146:	58d4      	ldr	r4, [r2, r3]
 8001148:	50c4      	str	r4, [r0, r3]
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:
 800114c:	18c4      	adds	r4, r0, r3
 800114e:	428c      	cmp	r4, r1
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZerobss+0x22>)
 8001154:	4c0b      	ldr	r4, [pc, #44]	; (8001184 <LoopFillZerobss+0x26>)
 8001156:	2300      	movs	r3, #0
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:
 800115e:	42a2      	cmp	r2, r4
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
 8001162:	f7ff ffd7 	bl	8001114 <SystemInit>
 8001166:	f008 fbd1 	bl	800990c <__libc_init_array>
 800116a:	f7ff fa65 	bl	8000638 <main>
 800116e:	4770      	bx	lr
 8001170:	20020000 	.word	0x20020000
 8001174:	20000000 	.word	0x20000000
 8001178:	2000015c 	.word	0x2000015c
 800117c:	0800a4f4 	.word	0x0800a4f4
 8001180:	2000015c 	.word	0x2000015c
 8001184:	20001fd8 	.word	0x20001fd8

08001188 <ADC_IRQHandler>:
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_Init+0x40>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_Init+0x40>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x40>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 ff1f 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fdee 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ff37 	bl	8002062 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 feff 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	20000018 	.word	0x20000018
 800122c:	20000014 	.word	0x20000014

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000018 	.word	0x20000018
 8001254:	20000280 	.word	0x20000280

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000280 	.word	0x20000280

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000018 	.word	0x20000018

080012b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0ed      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fd8a 	bl	8000df0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ec:	f7ff ffb4 	bl	8001258 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012f2:	e012      	b.n	800131a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f4:	f7ff ffb0 	bl	8001258 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d90b      	bls.n	800131a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0c5      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0e5      	beq.n	80012f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0202 	bic.w	r2, r2, #2
 8001336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff ff8e 	bl	8001258 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800133e:	e012      	b.n	8001366 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001340:	f7ff ff8a 	bl	8001258 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d90b      	bls.n	8001366 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e09f      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e5      	bne.n	8001340 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7e1b      	ldrb	r3, [r3, #24]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d108      	bne.n	800138e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e007      	b.n	800139e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7e5b      	ldrb	r3, [r3, #25]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d108      	bne.n	80013b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e9b      	ldrb	r3, [r3, #26]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0220 	bic.w	r2, r2, #32
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7edb      	ldrb	r3, [r3, #27]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d108      	bne.n	800140c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0210 	bic.w	r2, r2, #16
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e007      	b.n	800141c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0210 	orr.w	r2, r2, #16
 800141a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7f1b      	ldrb	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0208 	orr.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e007      	b.n	8001446 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7f5b      	ldrb	r3, [r3, #29]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0204 	orr.w	r2, r2, #4
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e007      	b.n	8001470 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0204 	bic.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	ea42 0103 	orr.w	r1, r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014c8:	7cfb      	ldrb	r3, [r7, #19]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d003      	beq.n	80014d6 <HAL_CAN_ConfigFilter+0x26>
 80014ce:	7cfb      	ldrb	r3, [r7, #19]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	f040 80be 	bne.w	8001652 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_CAN_ConfigFilter+0x1bc>)
 80014d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2201      	movs	r2, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d123      	bne.n	8001580 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800155a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3248      	adds	r2, #72	; 0x48
 8001560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001576:	6979      	ldr	r1, [r7, #20]
 8001578:	3348      	adds	r3, #72	; 0x48
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d122      	bne.n	80015ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3248      	adds	r2, #72	; 0x48
 80015ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c4:	6979      	ldr	r1, [r7, #20]
 80015c6:	3348      	adds	r3, #72	; 0x48
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015e8:	e007      	b.n	80015fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001614:	e007      	b.n	8001626 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	431a      	orrs	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001644:	f023 0201 	bic.w	r2, r3, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e006      	b.n	8001660 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40006400 	.word	0x40006400

08001670 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d12e      	bne.n	80016e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fddc 	bl	8001258 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a4:	f7ff fdd8 	bl	8001258 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90b      	bls.n	80016ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2205      	movs	r2, #5
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e012      	b.n	80016f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e006      	b.n	80016f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d133      	bne.n	8001774 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff fd9c 	bl	8001258 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001722:	e012      	b.n	800174a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001724:	f7ff fd98 	bl	8001258 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d90b      	bls.n	800174a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e01b      	b.n	8001782 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0e5      	beq.n	8001724 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0202 	bic.w	r2, r2, #2
 8001766:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e006      	b.n	8001782 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
  }
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800178a:	b480      	push	{r7}
 800178c:	b087      	sub	sp, #28
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_GetRxMessage+0x24>
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f040 80f3 	bne.w	8001994 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10e      	bne.n	80017d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e7      	b.n	80019a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0d8      	b.n	80019a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	331b      	adds	r3, #27
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0204 	and.w	r2, r3, #4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	331b      	adds	r3, #27
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0d5b      	lsrs	r3, r3, #21
 800181e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00b      	b.n	8001840 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	331b      	adds	r3, #27
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	331b      	adds	r3, #27
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0202 	and.w	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	331b      	adds	r3, #27
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 020f 	and.w	r2, r3, #15
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	331b      	adds	r3, #27
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b2da      	uxtb	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	331b      	adds	r3, #27
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0a1a      	lsrs	r2, r3, #8
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0c1a      	lsrs	r2, r3, #16
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3302      	adds	r3, #2
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e1a      	lsrs	r2, r3, #24
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3303      	adds	r3, #3
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3304      	adds	r3, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0a1a      	lsrs	r2, r3, #8
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	3305      	adds	r3, #5
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0c1a      	lsrs	r2, r3, #16
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3306      	adds	r3, #6
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e1a      	lsrs	r2, r3, #24
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	3307      	adds	r3, #7
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0220 	orr.w	r2, r2, #32
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	e007      	b.n	8001990 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e006      	b.n	80019a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
  }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d002      	beq.n	80019cc <HAL_CAN_ActivateNotification+0x1e>
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d109      	bne.n	80019e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6959      	ldr	r1, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e006      	b.n	80019ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b08a      	sub	sp, #40	; 0x28
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d07c      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d023      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f983 	bl	8001d68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a62:	e016      	b.n	8001a92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e00c      	b.n	8001a92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e002      	b.n	8001a92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f989 	bl	8001da4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d024      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f963 	bl	8001d7c <HAL_CAN_TxMailbox1CompleteCallback>
 8001ab6:	e016      	b.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e00c      	b.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e002      	b.n	8001ae6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f969 	bl	8001db8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d024      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f943 	bl	8001d90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b0a:	e016      	b.n	8001b3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	e00c      	b.n	8001b3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e002      	b.n	8001b3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f949 	bl	8001dcc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2208      	movs	r2, #8
 8001b78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f930 	bl	8001de0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fcef 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2208      	movs	r2, #8
 8001bdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f912 	bl	8001e08 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8f9 	bl	8001df4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8fc 	bl	8001e1c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8f5 	bl	8001e30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d07b      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d072      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d043      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03e      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cc8:	2b60      	cmp	r3, #96	; 0x60
 8001cca:	d02b      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x32a>
 8001ccc:	2b60      	cmp	r3, #96	; 0x60
 8001cce:	d82e      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001cd0:	2b50      	cmp	r3, #80	; 0x50
 8001cd2:	d022      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x320>
 8001cd4:	2b50      	cmp	r3, #80	; 0x50
 8001cd6:	d82a      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001cd8:	2b40      	cmp	r3, #64	; 0x40
 8001cda:	d019      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x316>
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d826      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001ce0:	2b30      	cmp	r3, #48	; 0x30
 8001ce2:	d010      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x30c>
 8001ce4:	2b30      	cmp	r3, #48	; 0x30
 8001ce6:	d822      	bhi.n	8001d2e <HAL_CAN_IRQHandler+0x334>
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d002      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x2f8>
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d005      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cf0:	e01d      	b.n	8001d2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfa:	e019      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d04:	e014      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d0e:	e00f      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d18:	e00a      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d22:	e005      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d2c:	e000      	b.n	8001d30 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f872 	bl	8001e44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff8e 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff29 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff3e 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff8e 	bl	8001f4c <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5d 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff31 	bl	8001ebc <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa2 	bl	8001fb4 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff f8e6 	bl	8001258 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d008      	beq.n	80020ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e052      	b.n	8002152 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0216 	bic.w	r2, r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <HAL_DMA_Abort+0x62>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0208 	bic.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fc:	e013      	b.n	8002126 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020fe:	f7ff f8ab 	bl	8001258 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b05      	cmp	r3, #5
 800210a:	d90c      	bls.n	8002126 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e015      	b.n	8002152 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e4      	bne.n	80020fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	223f      	movs	r2, #63	; 0x3f
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e00c      	b.n	8002192 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2205      	movs	r2, #5
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e16b      	b.n	8002494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 815a 	bne.w	800248e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_GPIO_Init+0x30c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5b      	ldr	r2, [pc, #364]	; (80024b0 <HAL_GPIO_Init+0x310>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_GPIO_Init+0x314>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_GPIO_Init+0x318>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_GPIO_Init+0x31c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <HAL_GPIO_Init+0x320>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4d      	ldr	r2, [pc, #308]	; (80024c8 <HAL_GPIO_Init+0x328>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x32c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_GPIO_Init+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20a>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <HAL_GPIO_Init+0x310>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_GPIO_Init+0x334>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae90 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40021400 	.word	0x40021400
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40021c00 	.word	0x40021c00
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e001      	b.n	80024fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002524:	e003      	b.n	800252e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800253a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253c:	b08f      	sub	sp, #60	; 0x3c
 800253e:	af0a      	add	r7, sp, #40	; 0x28
 8002540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e10f      	b.n	800276c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f006 fdec 	bl	8009144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f8b5 	bl	80056fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	687e      	ldr	r6, [r7, #4]
 8002598:	466d      	mov	r5, sp
 800259a:	f106 0410 	add.w	r4, r6, #16
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ae:	1d33      	adds	r3, r6, #4
 80025b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f002 ff8c 	bl	80054d0 <USB_CoreInit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0d0      	b.n	800276c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f8a3 	bl	800571c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e04a      	b.n	8002672 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	333d      	adds	r3, #61	; 0x3d
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	333c      	adds	r3, #60	; 0x3c
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	b298      	uxth	r0, r3
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3344      	adds	r3, #68	; 0x44
 8002618:	4602      	mov	r2, r0
 800261a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3340      	adds	r3, #64	; 0x40
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3348      	adds	r3, #72	; 0x48
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334c      	adds	r3, #76	; 0x4c
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3354      	adds	r3, #84	; 0x54
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	3301      	adds	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	d3af      	bcc.n	80025dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e044      	b.n	800270c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	3301      	adds	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d3b5      	bcc.n	8002682 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	687e      	ldr	r6, [r7, #4]
 800271e:	466d      	mov	r5, sp
 8002720:	f106 0410 	add.w	r4, r6, #16
 8002724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800272c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002730:	e885 0003 	stmia.w	r5, {r0, r1}
 8002734:	1d33      	adds	r3, r6, #4
 8002736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	f003 f83b 	bl	80057b4 <USB_DevInit>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00d      	b.n	800276c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f004 f98a 	bl	8006a7e <USB_DevDisconnect>

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_PCD_Start+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e020      	b.n	80027d2 <HAL_PCD_Start+0x5e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b01      	cmp	r3, #1
 800279e:	d109      	bne.n	80027b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d005      	beq.n	80027b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 ff8d 	bl	80056d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 f93a 	bl	8006a3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b08d      	sub	sp, #52	; 0x34
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 f9f8 	bl	8006be6 <USB_GetMode>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 848a 	bne.w	8003112 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 f95c 	bl	8006ac0 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8480 	beq.w	8003110 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f004 f949 	bl	8006ac0 <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b02      	cmp	r3, #2
 8002836:	d107      	bne.n	8002848 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f002 0202 	and.w	r2, r2, #2
 8002846:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 f937 	bl	8006ac0 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b10      	cmp	r3, #16
 800285a:	d161      	bne.n	8002920 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0210 	bic.w	r2, r2, #16
 800286a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	0c5b      	lsrs	r3, r3, #17
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	2b02      	cmp	r3, #2
 8002896:	d124      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d035      	beq.n	8002910 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6a38      	ldr	r0, [r7, #32]
 80028b8:	f003 ff6e 	bl	8006798 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c8:	441a      	add	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028da:	441a      	add	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	621a      	str	r2, [r3, #32]
 80028e0:	e016      	b.n	8002910 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	0c5b      	lsrs	r3, r3, #17
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d110      	bne.n	8002910 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028f4:	2208      	movs	r2, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	6a38      	ldr	r0, [r7, #32]
 80028fa:	f003 ff4d 	bl	8006798 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	6a1a      	ldr	r2, [r3, #32]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290a:	441a      	add	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0210 	orr.w	r2, r2, #16
 800291e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f004 f8cb 	bl	8006ac0 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002934:	f040 80a7 	bne.w	8002a86 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f004 f8d0 	bl	8006ae6 <USB_ReadDevAllOutEpInterrupt>
 8002946:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002948:	e099      	b.n	8002a7e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 808e 	beq.w	8002a72 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f004 f8f4 	bl	8006b4e <USB_ReadDevOutEPInterrupt>
 8002966:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	461a      	mov	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fec2 	bl	8003710 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a2:	461a      	mov	r2, r3
 80029a4:	2308      	movs	r3, #8
 80029a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 ff98 	bl	80038e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c6:	461a      	mov	r2, r3
 80029c8:	2310      	movs	r3, #16
 80029ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d030      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b80      	cmp	r3, #128	; 0x80
 80029e0:	d109      	bne.n	80029f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	78db      	ldrb	r3, [r3, #3]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d108      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2200      	movs	r2, #0
 8002a18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f006 fca7 	bl	8009374 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a32:	461a      	mov	r2, r3
 8002a34:	2302      	movs	r3, #2
 8002a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2320      	movs	r3, #32
 8002a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f af62 	bne.w	800294a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 f818 	bl	8006ac0 <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a9a:	f040 80db 	bne.w	8002c54 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f839 	bl	8006b1a <USB_ReadDevAllInEpInterrupt>
 8002aa8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002aae:	e0cd      	b.n	8002c4c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80c2 	beq.w	8002c40 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 f85f 	bl	8006b8a <USB_ReadDevInEPInterrupt>
 8002acc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d057      	beq.n	8002b88 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	2201      	movs	r2, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69f9      	ldr	r1, [r7, #28]
 8002af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002af8:	4013      	ands	r3, r2
 8002afa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d132      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	334c      	adds	r3, #76	; 0x4c
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4403      	add	r3, r0
 8002b36:	3348      	adds	r3, #72	; 0x48
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4419      	add	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4403      	add	r3, r0
 8002b4a:	334c      	adds	r3, #76	; 0x4c
 8002b4c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d113      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x3a2>
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3354      	adds	r3, #84	; 0x54
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b74:	461a      	mov	r2, r3
 8002b76:	2101      	movs	r1, #1
 8002b78:	f004 f866 	bl	8006c48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f006 fb71 	bl	800926a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2340      	movs	r3, #64	; 0x40
 8002bda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d023      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002be8:	6a38      	ldr	r0, [r7, #32]
 8002bea:	f002 ff47 	bl	8005a7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	3338      	adds	r3, #56	; 0x38
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	78db      	ldrb	r3, [r3, #3]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f006 fbbe 	bl	8009398 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fcdb 	bl	80035f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	3301      	adds	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f47f af2e 	bne.w	8002ab0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 ff31 	bl	8006ac0 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c68:	d122      	bne.n	8002cb0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c90:	2100      	movs	r1, #0
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fec2 	bl	8003a1c <HAL_PCDEx_LPM_Callback>
 8002c98:	e002      	b.n	8002ca0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f006 fb5c 	bl	8009358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 ff03 	bl	8006ac0 <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc4:	d112      	bne.n	8002cec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f006 fb18 	bl	800930c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fee5 	bl	8006ac0 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d00:	f040 80b7 	bne.w	8002e72 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 feac 	bl	8005a7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d28:	e046      	b.n	8002db8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d36:	461a      	mov	r2, r3
 8002d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4e:	0151      	lsls	r1, r2, #5
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	440a      	add	r2, r1
 8002d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d82:	0151      	lsls	r1, r2, #5
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	440a      	add	r2, r1
 8002d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da2:	0151      	lsls	r1, r2, #5
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	440a      	add	r2, r1
 8002da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002db0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	3301      	adds	r3, #1
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3b3      	bcc.n	8002d2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dee:	f043 030b 	orr.w	r3, r3, #11
 8002df2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e04:	f043 030b 	orr.w	r3, r3, #11
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	e015      	b.n	8002e38 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e32:	f043 030b 	orr.w	r3, r3, #11
 8002e36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f003 fef3 	bl	8006c48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fe22 	bl	8006ac0 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	d124      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 feb8 	bl	8006c02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 fe6d 	bl	8005b76 <USB_GetDevSpeed>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681c      	ldr	r4, [r3, #0]
 8002ea8:	f001 fa28 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8002eac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f002 fb6c 	bl	8005594 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f006 f9fc 	bl	80092ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fdf2 	bl	8006ac0 <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d10a      	bne.n	8002efc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f006 f9d9 	bl	800929e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f002 0208 	and.w	r2, r2, #8
 8002efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 fddd 	bl	8006ac0 <USB_ReadInterrupts>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b80      	cmp	r3, #128	; 0x80
 8002f0e:	d122      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f20:	e014      	b.n	8002f4c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb27 	bl	8003594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3e5      	bcc.n	8002f22 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fdb0 	bl	8006ac0 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f6a:	d13b      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e02b      	b.n	8002fca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3340      	adds	r3, #64	; 0x40
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d115      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da12      	bge.n	8002fc4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	333f      	adds	r3, #63	; 0x3f
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fae8 	bl	8003594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3ce      	bcc.n	8002f72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fd69 	bl	8006ac0 <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff8:	d155      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	e045      	b.n	800308c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d12e      	bne.n	8003086 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003028:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800302a:	2b00      	cmp	r3, #0
 800302c:	da2b      	bge.n	8003086 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800303a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800303e:	429a      	cmp	r2, r3
 8003040:	d121      	bne.n	8003086 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6053      	str	r3, [r2, #4]
            break;
 8003084:	e007      	b.n	8003096 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	3301      	adds	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	429a      	cmp	r2, r3
 8003094:	d3b4      	bcc.n	8003000 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fd08 	bl	8006ac0 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d10a      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f006 f97d 	bl	80093bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fcf2 	bl	8006ac0 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d115      	bne.n	8003112 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f006 f96d 	bl	80093d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	e000      	b.n	8003112 <HAL_PCD_IRQHandler+0x938>
      return;
 8003110:	bf00      	nop
    }
  }
}
 8003112:	3734      	adds	r7, #52	; 0x34
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_SetAddress+0x1a>
 800312e:	2302      	movs	r3, #2
 8003130:	e013      	b.n	800315a <HAL_PCD_SetAddress+0x42>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fc50 	bl	80069f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	4608      	mov	r0, r1
 800316c:	4611      	mov	r1, r2
 800316e:	461a      	mov	r2, r3
 8003170:	4603      	mov	r3, r0
 8003172:	70fb      	strb	r3, [r7, #3]
 8003174:	460b      	mov	r3, r1
 8003176:	803b      	strh	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	da0f      	bge.n	80031a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3338      	adds	r3, #56	; 0x38
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00f      	b.n	80031c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031d4:	883a      	ldrh	r2, [r7, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	78ba      	ldrb	r2, [r7, #2]
 80031de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031f2:	78bb      	ldrb	r3, [r7, #2]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d102      	bne.n	80031fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_PCD_EP_Open+0xaa>
 8003208:	2302      	movs	r3, #2
 800320a:	e00e      	b.n	800322a <HAL_PCD_EP_Open+0xc8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68f9      	ldr	r1, [r7, #12]
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fcd0 	bl	8005bc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003228:	7afb      	ldrb	r3, [r7, #11]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da0f      	bge.n	8003266 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	3338      	adds	r3, #56	; 0x38
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	705a      	strb	r2, [r3, #1]
 8003264:	e00f      	b.n	8003286 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_PCD_EP_Close+0x6e>
 800329c:	2302      	movs	r3, #2
 800329e:	e00e      	b.n	80032be <HAL_PCD_EP_Close+0x8c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68f9      	ldr	r1, [r7, #12]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f002 fd0e 	bl	8005cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	460b      	mov	r3, r1
 80032d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	7afb      	ldrb	r3, [r7, #11]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	b2da      	uxtb	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	f002 ffed 	bl	8006318 <USB_EP0StartXfer>
 800333e:	e008      	b.n	8003352 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	f002 fd9b 	bl	8005e88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3338      	adds	r3, #56	; 0x38
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2201      	movs	r2, #1
 80033ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033cc:	7afb      	ldrb	r3, [r7, #11]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	6979      	ldr	r1, [r7, #20]
 80033fe:	f002 ff8b 	bl	8006318 <USB_EP0StartXfer>
 8003402:	e008      	b.n	8003416 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	6979      	ldr	r1, [r7, #20]
 8003412:	f002 fd39 	bl	8005e88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	d901      	bls.n	800343e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e050      	b.n	80034e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800343e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	da0f      	bge.n	8003466 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3338      	adds	r3, #56	; 0x38
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	3304      	adds	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	705a      	strb	r2, [r3, #1]
 8003464:	e00d      	b.n	8003482 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_PCD_EP_SetStall+0x82>
 800349e:	2302      	movs	r3, #2
 80034a0:	e01e      	b.n	80034e0 <HAL_PCD_EP_SetStall+0xc0>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f9c9 	bl	8006848 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	b2d9      	uxtb	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034d0:	461a      	mov	r2, r3
 80034d2:	f003 fbb9 	bl	8006c48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 020f 	and.w	r2, r3, #15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d901      	bls.n	8003506 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800350a:	2b00      	cmp	r3, #0
 800350c:	da0f      	bge.n	800352e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	3338      	adds	r3, #56	; 0x38
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	3304      	adds	r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	705a      	strb	r2, [r3, #1]
 800352c:	e00f      	b.n	800354e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 020f 	and.w	r2, r3, #15
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_PCD_EP_ClrStall+0x86>
 800356a:	2302      	movs	r3, #2
 800356c:	e00e      	b.n	800358c <HAL_PCD_EP_ClrStall+0xa4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 f9d1 	bl	8006924 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da0c      	bge.n	80035c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	f003 020f 	and.w	r2, r3, #15
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3338      	adds	r3, #56	; 0x38
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e00c      	b.n	80035dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 fff0 	bl	80065c8 <USB_EPStopXfer>
 80035e8:	4603      	mov	r3, r0
 80035ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b08a      	sub	sp, #40	; 0x28
 80035fa:	af02      	add	r7, sp, #8
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3338      	adds	r3, #56	; 0x38
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	429a      	cmp	r2, r3
 8003628:	d901      	bls.n	800362e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06c      	b.n	8003708 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3303      	adds	r3, #3
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003652:	e02b      	b.n	80036ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	429a      	cmp	r2, r3
 8003668:	d902      	bls.n	8003670 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3303      	adds	r3, #3
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6919      	ldr	r1, [r3, #16]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003688:	b2db      	uxtb	r3, r3
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4603      	mov	r3, r0
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f003 f844 	bl	800671c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	441a      	add	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1a      	ldr	r2, [r3, #32]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	441a      	add	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d809      	bhi.n	80036d6 <PCD_WriteEmptyTxFifo+0xe0>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d203      	bcs.n	80036d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1be      	bne.n	8003654 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d811      	bhi.n	8003706 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	2201      	movs	r2, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	6939      	ldr	r1, [r7, #16]
 80036fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003702:	4013      	ands	r3, r2
 8003704:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	333c      	adds	r3, #60	; 0x3c
 8003728:	3304      	adds	r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d17b      	bne.n	800383e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4a61      	ldr	r2, [pc, #388]	; (80038d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	f240 80b9 	bls.w	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80b3 	beq.w	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003772:	461a      	mov	r2, r3
 8003774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003778:	6093      	str	r3, [r2, #8]
 800377a:	e0a7      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	2320      	movs	r3, #32
 8003796:	6093      	str	r3, [r2, #8]
 8003798:	e098      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f040 8093 	bne.w	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d90f      	bls.n	80037ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ca:	6093      	str	r3, [r2, #8]
 80037cc:	e07e      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	3304      	adds	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d114      	bne.n	8003830 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003818:	461a      	mov	r2, r3
 800381a:	2101      	movs	r1, #1
 800381c:	f003 fa14 	bl	8006c48 <USB_EP0_OutStart>
 8003820:	e006      	b.n	8003830 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	441a      	add	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f005 fcfc 	bl	8009234 <HAL_PCD_DataOutStageCallback>
 800383c:	e046      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d124      	bne.n	8003890 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	e032      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387c:	461a      	mov	r2, r3
 800387e:	2320      	movs	r3, #32
 8003880:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f005 fcd3 	bl	8009234 <HAL_PCD_DataOutStageCallback>
 800388e:	e01d      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d114      	bne.n	80038c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038b8:	461a      	mov	r2, r3
 80038ba:	2100      	movs	r1, #0
 80038bc:	f003 f9c4 	bl	8006c48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f005 fcb4 	bl	8009234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	4f54300a 	.word	0x4f54300a
 80038dc:	4f54310a 	.word	0x4f54310a

080038e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	333c      	adds	r3, #60	; 0x3c
 80038f8:	3304      	adds	r3, #4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a15      	ldr	r2, [pc, #84]	; (8003968 <PCD_EP_OutSetupPacket_int+0x88>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d90e      	bls.n	8003934 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003932:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f005 fc6b 	bl	8009210 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <PCD_EP_OutSetupPacket_int+0x88>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d90c      	bls.n	800395c <PCD_EP_OutSetupPacket_int+0x7c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d108      	bne.n	800395c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003954:	461a      	mov	r2, r3
 8003956:	2101      	movs	r1, #1
 8003958:	f003 f976 	bl	8006c48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	4f54300a 	.word	0x4f54300a

0800396c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
 8003978:	4613      	mov	r3, r2
 800397a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800398a:	883b      	ldrh	r3, [r7, #0]
 800398c:	0419      	lsls	r1, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	430a      	orrs	r2, r1
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
 8003998:	e028      	b.n	80039ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4413      	add	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e00d      	b.n	80039ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3340      	adds	r3, #64	; 0x40
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4413      	add	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	3301      	adds	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3ec      	bcc.n	80039ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039d4:	883b      	ldrh	r3, [r7, #0]
 80039d6:	0418      	lsls	r0, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6819      	ldr	r1, [r3, #0]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	3b01      	subs	r3, #1
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4302      	orrs	r2, r0
 80039e4:	3340      	adds	r3, #64	; 0x40
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e267      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d075      	beq.n	8003b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a52:	4b88      	ldr	r3, [pc, #544]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b82      	ldr	r3, [pc, #520]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b7e      	ldr	r3, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x108>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d157      	bne.n	8003b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e242      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x74>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e01d      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x98>
 8003ab2:	4b70      	ldr	r3, [pc, #448]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b6d      	ldr	r3, [pc, #436]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6c      	ldr	r2, [pc, #432]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003acc:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a68      	ldr	r2, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fbb4 	bl	8001258 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fd fbb0 	bl	8001258 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e207      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xc0>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fd fba0 	bl	8001258 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fb9c 	bl	8001258 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1f3      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0xe8>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d11c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1c7      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4937      	ldr	r1, [pc, #220]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	e03a      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fb55 	bl	8001258 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fd fb51 	bl	8001258 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1a8      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4925      	ldr	r1, [pc, #148]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fb34 	bl	8001258 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fd fb30 	bl	8001258 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e187      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d036      	beq.n	8003c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd fb14 	bl	8001258 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fd fb10 	bl	8001258 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e167      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x200>
 8003c52:	e01b      	b.n	8003c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fafd 	bl	8001258 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00e      	b.n	8003c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fd faf9 	bl	8001258 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d907      	bls.n	8003c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e150      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470000 	.word	0x42470000
 8003c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ea      	bne.n	8003c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8097 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b81      	ldr	r3, [pc, #516]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b7d      	ldr	r3, [pc, #500]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b77      	ldr	r3, [pc, #476]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd6:	4b74      	ldr	r3, [pc, #464]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fd fab9 	bl	8001258 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fd fab5 	bl	8001258 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e10c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2ea>
 8003d10:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a63      	ldr	r2, [pc, #396]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x30c>
 8003d26:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a5b      	ldr	r2, [pc, #364]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d40:	4b58      	ldr	r3, [pc, #352]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a57      	ldr	r2, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a54      	ldr	r2, [pc, #336]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd fa7a 	bl	8001258 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd fa76 	bl	8001258 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0cb      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RCC_OscConfig+0x334>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fa64 	bl	8001258 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fd fa60 	bl	8001258 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0b5      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ee      	bne.n	8003d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a1 	beq.w	8003f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd2:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d05c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d141      	bne.n	8003e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCC_OscConfig+0x478>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd fa34 	bl	8001258 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd fa30 	bl	8001258 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e087      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fd fa09 	bl	8001258 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fd fa05 	bl	8001258 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e05c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x416>
 8003e68:	e054      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fd f9f2 	bl	8001258 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fd f9ee 	bl	8001258 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e045      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x444>
 8003e96:	e03d      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e038      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d121      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11a      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800

08003f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0cc      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b68      	ldr	r3, [pc, #416]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d90c      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d044      	beq.n	8004044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d119      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e067      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4934      	ldr	r1, [pc, #208]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fd f920 	bl	8001258 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fd f91c 	bl	8001258 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e04f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d20c      	bcs.n	800406c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	; (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd f880 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	0800a398 	.word	0x0800a398
 80040e8:	20000010 	.word	0x20000010
 80040ec:	20000014 	.word	0x20000014

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b094      	sub	sp, #80	; 0x50
 80040f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	647b      	str	r3, [r7, #68]	; 0x44
 80040fc:	2300      	movs	r3, #0
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004100:	2300      	movs	r3, #0
 8004102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004108:	4b79      	ldr	r3, [pc, #484]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d00d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x40>
 8004114:	2b08      	cmp	r3, #8
 8004116:	f200 80e1 	bhi.w	80042dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x3a>
 8004122:	e0db      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b73      	ldr	r3, [pc, #460]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004128:	e0db      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800412a:	4b73      	ldr	r3, [pc, #460]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800412c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800412e:	e0d8      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004130:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d063      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b6a      	ldr	r3, [pc, #424]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
 800415e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004162:	4622      	mov	r2, r4
 8004164:	462b      	mov	r3, r5
 8004166:	f04f 0000 	mov.w	r0, #0
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	0159      	lsls	r1, r3, #5
 8004170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004174:	0150      	lsls	r0, r2, #5
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4621      	mov	r1, r4
 800417c:	1a51      	subs	r1, r2, r1
 800417e:	6139      	str	r1, [r7, #16]
 8004180:	4629      	mov	r1, r5
 8004182:	eb63 0301 	sbc.w	r3, r3, r1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004194:	4659      	mov	r1, fp
 8004196:	018b      	lsls	r3, r1, #6
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800419e:	4651      	mov	r1, sl
 80041a0:	018a      	lsls	r2, r1, #6
 80041a2:	4651      	mov	r1, sl
 80041a4:	ebb2 0801 	subs.w	r8, r2, r1
 80041a8:	4659      	mov	r1, fp
 80041aa:	eb63 0901 	sbc.w	r9, r3, r1
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c2:	4690      	mov	r8, r2
 80041c4:	4699      	mov	r9, r3
 80041c6:	4623      	mov	r3, r4
 80041c8:	eb18 0303 	adds.w	r3, r8, r3
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	462b      	mov	r3, r5
 80041d0:	eb49 0303 	adc.w	r3, r9, r3
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041e2:	4629      	mov	r1, r5
 80041e4:	024b      	lsls	r3, r1, #9
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ec:	4621      	mov	r1, r4
 80041ee:	024a      	lsls	r2, r1, #9
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f6:	2200      	movs	r2, #0
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004200:	f7fc f83e 	bl	8000280 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	e058      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	4618      	mov	r0, r3
 8004218:	4611      	mov	r1, r2
 800421a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800421e:	623b      	str	r3, [r7, #32]
 8004220:	2300      	movs	r3, #0
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
 8004224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	f04f 0000 	mov.w	r0, #0
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	0159      	lsls	r1, r3, #5
 8004236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423a:	0150      	lsls	r0, r2, #5
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4641      	mov	r1, r8
 8004242:	ebb2 0a01 	subs.w	sl, r2, r1
 8004246:	4649      	mov	r1, r9
 8004248:	eb63 0b01 	sbc.w	fp, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800425c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004260:	ebb2 040a 	subs.w	r4, r2, sl
 8004264:	eb63 050b 	sbc.w	r5, r3, fp
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	00eb      	lsls	r3, r5, #3
 8004272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004276:	00e2      	lsls	r2, r4, #3
 8004278:	4614      	mov	r4, r2
 800427a:	461d      	mov	r5, r3
 800427c:	4643      	mov	r3, r8
 800427e:	18e3      	adds	r3, r4, r3
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	464b      	mov	r3, r9
 8004284:	eb45 0303 	adc.w	r3, r5, r3
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004296:	4629      	mov	r1, r5
 8004298:	028b      	lsls	r3, r1, #10
 800429a:	4621      	mov	r1, r4
 800429c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a0:	4621      	mov	r1, r4
 80042a2:	028a      	lsls	r2, r1, #10
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	2200      	movs	r2, #0
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	61fa      	str	r2, [r7, #28]
 80042b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b4:	f7fb ffe4 	bl	8000280 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4613      	mov	r3, r2
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3750      	adds	r7, #80	; 0x50
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	007a1200 	.word	0x007a1200

080042fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000010 	.word	0x20000010

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	0800a3a8 	.word	0x0800a3a8

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004340:	f7ff ffdc 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4903      	ldr	r1, [pc, #12]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	0800a3a8 	.word	0x0800a3a8

08004364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e03f      	b.n	80043f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fd90 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fe1d 	bl	8004fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af02      	add	r7, sp, #8
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b20      	cmp	r3, #32
 800441c:	d17c      	bne.n	8004518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Transmit+0x2c>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e075      	b.n	800451a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x3e>
 8004438:	2302      	movs	r3, #2
 800443a:	e06e      	b.n	800451a <HAL_UART_Transmit+0x11c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	; 0x21
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fc ff01 	bl	8001258 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d108      	bne.n	8004480 <HAL_UART_Transmit+0x82>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e003      	b.n	8004488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004490:	e02a      	b.n	80044e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fb9b 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e036      	b.n	800451a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	3302      	adds	r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e007      	b.n	80044da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cf      	bne.n	8004492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fb6b 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e006      	b.n	800451a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08a      	sub	sp, #40	; 0x28
 8004526:	af02      	add	r7, sp, #8
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	f040 808c 	bne.w	800465c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Receive+0x2e>
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e084      	b.n	800465e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_UART_Receive+0x40>
 800455e:	2302      	movs	r3, #2
 8004560:	e07d      	b.n	800465e <HAL_UART_Receive+0x13c>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2222      	movs	r2, #34	; 0x22
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800457e:	f7fc fe6b 	bl	8001258 <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004598:	d108      	bne.n	80045ac <HAL_UART_Receive+0x8a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	e003      	b.n	80045b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80045bc:	e043      	b.n	8004646 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2120      	movs	r1, #32
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fb05 	bl	8004bd8 <UART_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e042      	b.n	800465e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	3302      	adds	r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e01f      	b.n	8004638 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004600:	d007      	beq.n	8004612 <HAL_UART_Receive+0xf0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <HAL_UART_Receive+0xfe>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e008      	b.n	8004632 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462c:	b2da      	uxtb	r2, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1b6      	bne.n	80045be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ba      	sub	sp, #232	; 0xe8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fbd3 	bl	8004e72 <UART_Receive_IT>
      return;
 80046cc:	e256      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80de 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80d1 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f043 0202 	orr.w	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 81ed 	beq.w	8004b72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fb5e 	bl	8004e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_UART_IRQHandler+0x17a>
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04f      	beq.n	8004882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa66 	bl	8004cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d141      	bne.n	800487a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800482e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800483a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1d9      	bne.n	80047f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_UART_IRQHandler+0x3dc>)
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fc7f 	bl	800215a <HAL_DMA_Abort_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00e      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f99a 	bl	8004bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00a      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f996 	bl	8004bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e006      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f992 	bl	8004bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800488e:	e170      	b.n	8004b72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	bf00      	nop
    return;
 8004892:	e16e      	b.n	8004b72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 814a 	bne.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8143 	beq.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 813c 	beq.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	f040 80b4 	bne.w	8004a48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8140 	beq.w	8004b76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048fe:	429a      	cmp	r2, r3
 8004900:	f080 8139 	bcs.w	8004b76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	f000 8088 	beq.w	8004a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800495e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1d9      	bne.n	800491a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800498a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800498e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800499c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e1      	bne.n	8004966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e3      	bne.n	80049e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd fb28 	bl	800207a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8c0 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a40:	e099      	b.n	8004b76 <HAL_UART_IRQHandler+0x50e>
 8004a42:	bf00      	nop
 8004a44:	08004d7b 	.word	0x08004d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 808b 	beq.w	8004b7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8086 	beq.w	8004b7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a92:	647a      	str	r2, [r7, #68]	; 0x44
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aca:	633a      	str	r2, [r7, #48]	; 0x30
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b10:	61fa      	str	r2, [r7, #28]
 8004b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	69b9      	ldr	r1, [r7, #24]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e3      	bne.n	8004aec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f848 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b30:	e023      	b.n	8004b7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_UART_IRQHandler+0x4ea>
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f929 	bl	8004da2 <UART_Transmit_IT>
    return;
 8004b50:	e014      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <HAL_UART_IRQHandler+0x514>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f969 	bl	8004e42 <UART_EndTransmit_IT>
    return;
 8004b70:	e004      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
    return;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
      return;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
      return;
 8004b7a:	bf00      	nop
  }
}
 8004b7c:	37e8      	adds	r7, #232	; 0xe8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop

08004b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b090      	sub	sp, #64	; 0x40
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be8:	e050      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d04c      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bf8:	f7fc fb2e 	bl	8001258 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d241      	bcs.n	8004c8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c28:	637a      	str	r2, [r7, #52]	; 0x34
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c5c:	623a      	str	r2, [r7, #32]
 8004c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	69f9      	ldr	r1, [r7, #28]
 8004c62:	6a3a      	ldr	r2, [r7, #32]
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e00f      	b.n	8004cac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d09f      	beq.n	8004bea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3740      	adds	r7, #64	; 0x40
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b095      	sub	sp, #84	; 0x54
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e5      	bne.n	8004cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d119      	bne.n	8004d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f023 0310 	bic.w	r3, r3, #16
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4c:	61ba      	str	r2, [r7, #24]
 8004d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6979      	ldr	r1, [r7, #20]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d6e:	bf00      	nop
 8004d70:	3754      	adds	r7, #84	; 0x54
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff ff09 	bl	8004bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b21      	cmp	r3, #33	; 0x21
 8004db4:	d13e      	bne.n	8004e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbe:	d114      	bne.n	8004dea <UART_Transmit_IT+0x48>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d110      	bne.n	8004dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e008      	b.n	8004dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6211      	str	r1, [r2, #32]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10f      	bne.n	8004e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fe8e 	bl	8004b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b08c      	sub	sp, #48	; 0x30
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b22      	cmp	r3, #34	; 0x22
 8004e84:	f040 80ab 	bne.w	8004fde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d117      	bne.n	8004ec2 <UART_Receive_IT+0x50>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d113      	bne.n	8004ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	1c9a      	adds	r2, r3, #2
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec0:	e026      	b.n	8004f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d007      	beq.n	8004ee6 <UART_Receive_IT+0x74>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <UART_Receive_IT+0x82>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e008      	b.n	8004f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d15a      	bne.n	8004fda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0220 	bic.w	r2, r2, #32
 8004f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d135      	bne.n	8004fd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8a:	623a      	str	r2, [r7, #32]
 8004f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	69f9      	ldr	r1, [r7, #28]
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d10a      	bne.n	8004fc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fdf9 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
 8004fce:	e002      	b.n	8004fd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fde1 	bl	8004b98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e002      	b.n	8004fe0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3730      	adds	r7, #48	; 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fec:	b0c0      	sub	sp, #256	; 0x100
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	68d9      	ldr	r1, [r3, #12]
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	ea40 0301 	orr.w	r3, r0, r1
 8005010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	431a      	orrs	r2, r3
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005040:	f021 010c 	bic.w	r1, r1, #12
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800504e:	430b      	orrs	r3, r1
 8005050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005062:	6999      	ldr	r1, [r3, #24]
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	ea40 0301 	orr.w	r3, r0, r1
 800506e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b8f      	ldr	r3, [pc, #572]	; (80052b4 <UART_SetConfig+0x2cc>)
 8005078:	429a      	cmp	r2, r3
 800507a:	d005      	beq.n	8005088 <UART_SetConfig+0xa0>
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b8d      	ldr	r3, [pc, #564]	; (80052b8 <UART_SetConfig+0x2d0>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d104      	bne.n	8005092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7ff f958 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 800508c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005090:	e003      	b.n	800509a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005092:	f7ff f93f 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005096:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a4:	f040 810c 	bne.w	80052c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050ba:	4622      	mov	r2, r4
 80050bc:	462b      	mov	r3, r5
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050c2:	415b      	adcs	r3, r3
 80050c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ca:	4621      	mov	r1, r4
 80050cc:	eb12 0801 	adds.w	r8, r2, r1
 80050d0:	4629      	mov	r1, r5
 80050d2:	eb43 0901 	adc.w	r9, r3, r1
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ea:	4690      	mov	r8, r2
 80050ec:	4699      	mov	r9, r3
 80050ee:	4623      	mov	r3, r4
 80050f0:	eb18 0303 	adds.w	r3, r8, r3
 80050f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050f8:	462b      	mov	r3, r5
 80050fa:	eb49 0303 	adc.w	r3, r9, r3
 80050fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800510e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005116:	460b      	mov	r3, r1
 8005118:	18db      	adds	r3, r3, r3
 800511a:	653b      	str	r3, [r7, #80]	; 0x50
 800511c:	4613      	mov	r3, r2
 800511e:	eb42 0303 	adc.w	r3, r2, r3
 8005122:	657b      	str	r3, [r7, #84]	; 0x54
 8005124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800512c:	f7fb f8a8 	bl	8000280 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4b61      	ldr	r3, [pc, #388]	; (80052bc <UART_SetConfig+0x2d4>)
 8005136:	fba3 2302 	umull	r2, r3, r3, r2
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	011c      	lsls	r4, r3, #4
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005148:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800514c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	1891      	adds	r1, r2, r2
 8005156:	64b9      	str	r1, [r7, #72]	; 0x48
 8005158:	415b      	adcs	r3, r3
 800515a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800515c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005160:	4641      	mov	r1, r8
 8005162:	eb12 0a01 	adds.w	sl, r2, r1
 8005166:	4649      	mov	r1, r9
 8005168:	eb43 0b01 	adc.w	fp, r3, r1
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800517c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005180:	4692      	mov	sl, r2
 8005182:	469b      	mov	fp, r3
 8005184:	4643      	mov	r3, r8
 8005186:	eb1a 0303 	adds.w	r3, sl, r3
 800518a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800518e:	464b      	mov	r3, r9
 8005190:	eb4b 0303 	adc.w	r3, fp, r3
 8005194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051ac:	460b      	mov	r3, r1
 80051ae:	18db      	adds	r3, r3, r3
 80051b0:	643b      	str	r3, [r7, #64]	; 0x40
 80051b2:	4613      	mov	r3, r2
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051c2:	f7fb f85d 	bl	8000280 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	4b3b      	ldr	r3, [pc, #236]	; (80052bc <UART_SetConfig+0x2d4>)
 80051ce:	fba3 2301 	umull	r2, r3, r3, r1
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2264      	movs	r2, #100	; 0x64
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	1acb      	subs	r3, r1, r3
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <UART_SetConfig+0x2d4>)
 80051e4:	fba3 2302 	umull	r2, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f0:	441c      	add	r4, r3
 80051f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	1891      	adds	r1, r2, r2
 800520a:	63b9      	str	r1, [r7, #56]	; 0x38
 800520c:	415b      	adcs	r3, r3
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005214:	4641      	mov	r1, r8
 8005216:	1851      	adds	r1, r2, r1
 8005218:	6339      	str	r1, [r7, #48]	; 0x30
 800521a:	4649      	mov	r1, r9
 800521c:	414b      	adcs	r3, r1
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800522c:	4659      	mov	r1, fp
 800522e:	00cb      	lsls	r3, r1, #3
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005236:	4651      	mov	r1, sl
 8005238:	00ca      	lsls	r2, r1, #3
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	4603      	mov	r3, r0
 8005240:	4642      	mov	r2, r8
 8005242:	189b      	adds	r3, r3, r2
 8005244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005248:	464b      	mov	r3, r9
 800524a:	460a      	mov	r2, r1
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005260:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005268:	460b      	mov	r3, r1
 800526a:	18db      	adds	r3, r3, r3
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
 800526e:	4613      	mov	r3, r2
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800527a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800527e:	f7fa ffff 	bl	8000280 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <UART_SetConfig+0x2d4>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	2164      	movs	r1, #100	; 0x64
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	3332      	adds	r3, #50	; 0x32
 800529a:	4a08      	ldr	r2, [pc, #32]	; (80052bc <UART_SetConfig+0x2d4>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	f003 0207 	and.w	r2, r3, #7
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4422      	add	r2, r4
 80052ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b0:	e106      	b.n	80054c0 <UART_SetConfig+0x4d8>
 80052b2:	bf00      	nop
 80052b4:	40011000 	.word	0x40011000
 80052b8:	40011400 	.word	0x40011400
 80052bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052d2:	4642      	mov	r2, r8
 80052d4:	464b      	mov	r3, r9
 80052d6:	1891      	adds	r1, r2, r2
 80052d8:	6239      	str	r1, [r7, #32]
 80052da:	415b      	adcs	r3, r3
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052e2:	4641      	mov	r1, r8
 80052e4:	1854      	adds	r4, r2, r1
 80052e6:	4649      	mov	r1, r9
 80052e8:	eb43 0501 	adc.w	r5, r3, r1
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	00eb      	lsls	r3, r5, #3
 80052f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052fa:	00e2      	lsls	r2, r4, #3
 80052fc:	4614      	mov	r4, r2
 80052fe:	461d      	mov	r5, r3
 8005300:	4643      	mov	r3, r8
 8005302:	18e3      	adds	r3, r4, r3
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005308:	464b      	mov	r3, r9
 800530a:	eb45 0303 	adc.w	r3, r5, r3
 800530e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800531e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800532e:	4629      	mov	r1, r5
 8005330:	008b      	lsls	r3, r1, #2
 8005332:	4621      	mov	r1, r4
 8005334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005338:	4621      	mov	r1, r4
 800533a:	008a      	lsls	r2, r1, #2
 800533c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005340:	f7fa ff9e 	bl	8000280 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4b60      	ldr	r3, [pc, #384]	; (80054cc <UART_SetConfig+0x4e4>)
 800534a:	fba3 2302 	umull	r2, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	011c      	lsls	r4, r3, #4
 8005352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800535c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	61b9      	str	r1, [r7, #24]
 800536c:	415b      	adcs	r3, r3
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005374:	4641      	mov	r1, r8
 8005376:	1851      	adds	r1, r2, r1
 8005378:	6139      	str	r1, [r7, #16]
 800537a:	4649      	mov	r1, r9
 800537c:	414b      	adcs	r3, r1
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800538c:	4659      	mov	r1, fp
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4651      	mov	r1, sl
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4642      	mov	r2, r8
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a8:	464b      	mov	r3, r9
 80053aa:	460a      	mov	r2, r1
 80053ac:	eb42 0303 	adc.w	r3, r2, r3
 80053b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053cc:	4649      	mov	r1, r9
 80053ce:	008b      	lsls	r3, r1, #2
 80053d0:	4641      	mov	r1, r8
 80053d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d6:	4641      	mov	r1, r8
 80053d8:	008a      	lsls	r2, r1, #2
 80053da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053de:	f7fa ff4f 	bl	8000280 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	4b38      	ldr	r3, [pc, #224]	; (80054cc <UART_SetConfig+0x4e4>)
 80053ea:	fba3 2301 	umull	r2, r3, r3, r1
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2264      	movs	r2, #100	; 0x64
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	1acb      	subs	r3, r1, r3
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	3332      	adds	r3, #50	; 0x32
 80053fc:	4a33      	ldr	r2, [pc, #204]	; (80054cc <UART_SetConfig+0x4e4>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005408:	441c      	add	r4, r3
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540e:	2200      	movs	r2, #0
 8005410:	673b      	str	r3, [r7, #112]	; 0x70
 8005412:	677a      	str	r2, [r7, #116]	; 0x74
 8005414:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	1891      	adds	r1, r2, r2
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	415b      	adcs	r3, r3
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005428:	4641      	mov	r1, r8
 800542a:	1851      	adds	r1, r2, r1
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	4649      	mov	r1, r9
 8005430:	414b      	adcs	r3, r1
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005440:	4659      	mov	r1, fp
 8005442:	00cb      	lsls	r3, r1, #3
 8005444:	4651      	mov	r1, sl
 8005446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544a:	4651      	mov	r1, sl
 800544c:	00ca      	lsls	r2, r1, #3
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	4603      	mov	r3, r0
 8005454:	4642      	mov	r2, r8
 8005456:	189b      	adds	r3, r3, r2
 8005458:	66bb      	str	r3, [r7, #104]	; 0x68
 800545a:	464b      	mov	r3, r9
 800545c:	460a      	mov	r2, r1
 800545e:	eb42 0303 	adc.w	r3, r2, r3
 8005462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	663b      	str	r3, [r7, #96]	; 0x60
 800546e:	667a      	str	r2, [r7, #100]	; 0x64
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800547c:	4649      	mov	r1, r9
 800547e:	008b      	lsls	r3, r1, #2
 8005480:	4641      	mov	r1, r8
 8005482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005486:	4641      	mov	r1, r8
 8005488:	008a      	lsls	r2, r1, #2
 800548a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800548e:	f7fa fef7 	bl	8000280 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <UART_SetConfig+0x4e4>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	2164      	movs	r1, #100	; 0x64
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	3332      	adds	r3, #50	; 0x32
 80054aa:	4a08      	ldr	r2, [pc, #32]	; (80054cc <UART_SetConfig+0x4e4>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f003 020f 	and.w	r2, r3, #15
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4422      	add	r2, r4
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054c6:	46bd      	mov	sp, r7
 80054c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054cc:	51eb851f 	.word	0x51eb851f

080054d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d0:	b084      	sub	sp, #16
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	f107 001c 	add.w	r0, r7, #28
 80054de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d122      	bne.n	800552e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 fbee 	bl	8006d04 <USB_CoreReset>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e01a      	b.n	8005564 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fbe2 	bl	8006d04 <USB_CoreReset>
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
 8005556:	e005      	b.n	8005564 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b01      	cmp	r3, #1
 8005568:	d10b      	bne.n	8005582 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f043 0206 	orr.w	r2, r3, #6
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f043 0220 	orr.w	r2, r3, #32
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800558e:	b004      	add	sp, #16
 8005590:	4770      	bx	lr
	...

08005594 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d165      	bne.n	8005674 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a41      	ldr	r2, [pc, #260]	; (80056b0 <USB_SetTurnaroundTime+0x11c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d906      	bls.n	80055be <USB_SetTurnaroundTime+0x2a>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4a40      	ldr	r2, [pc, #256]	; (80056b4 <USB_SetTurnaroundTime+0x120>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d202      	bcs.n	80055be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055b8:	230f      	movs	r3, #15
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e062      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4a3c      	ldr	r2, [pc, #240]	; (80056b4 <USB_SetTurnaroundTime+0x120>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d306      	bcc.n	80055d4 <USB_SetTurnaroundTime+0x40>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4a3b      	ldr	r2, [pc, #236]	; (80056b8 <USB_SetTurnaroundTime+0x124>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d202      	bcs.n	80055d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055ce:	230e      	movs	r3, #14
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e057      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a38      	ldr	r2, [pc, #224]	; (80056b8 <USB_SetTurnaroundTime+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d306      	bcc.n	80055ea <USB_SetTurnaroundTime+0x56>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a37      	ldr	r2, [pc, #220]	; (80056bc <USB_SetTurnaroundTime+0x128>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d202      	bcs.n	80055ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055e4:	230d      	movs	r3, #13
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e04c      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a33      	ldr	r2, [pc, #204]	; (80056bc <USB_SetTurnaroundTime+0x128>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d306      	bcc.n	8005600 <USB_SetTurnaroundTime+0x6c>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a32      	ldr	r2, [pc, #200]	; (80056c0 <USB_SetTurnaroundTime+0x12c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d802      	bhi.n	8005600 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055fa:	230c      	movs	r3, #12
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e041      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <USB_SetTurnaroundTime+0x12c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d906      	bls.n	8005616 <USB_SetTurnaroundTime+0x82>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a2e      	ldr	r2, [pc, #184]	; (80056c4 <USB_SetTurnaroundTime+0x130>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d802      	bhi.n	8005616 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005610:	230b      	movs	r3, #11
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e036      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <USB_SetTurnaroundTime+0x130>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d906      	bls.n	800562c <USB_SetTurnaroundTime+0x98>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a29      	ldr	r2, [pc, #164]	; (80056c8 <USB_SetTurnaroundTime+0x134>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d802      	bhi.n	800562c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005626:	230a      	movs	r3, #10
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e02b      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <USB_SetTurnaroundTime+0x134>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d906      	bls.n	8005642 <USB_SetTurnaroundTime+0xae>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a25      	ldr	r2, [pc, #148]	; (80056cc <USB_SetTurnaroundTime+0x138>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d202      	bcs.n	8005642 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800563c:	2309      	movs	r3, #9
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e020      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a21      	ldr	r2, [pc, #132]	; (80056cc <USB_SetTurnaroundTime+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d306      	bcc.n	8005658 <USB_SetTurnaroundTime+0xc4>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <USB_SetTurnaroundTime+0x13c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d802      	bhi.n	8005658 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005652:	2308      	movs	r3, #8
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e015      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <USB_SetTurnaroundTime+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d906      	bls.n	800566e <USB_SetTurnaroundTime+0xda>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <USB_SetTurnaroundTime+0x140>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d202      	bcs.n	800566e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005668:	2307      	movs	r3, #7
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e00a      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800566e:	2306      	movs	r3, #6
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e007      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800567a:	2309      	movs	r3, #9
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	e001      	b.n	8005684 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005680:	2309      	movs	r3, #9
 8005682:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	00d8acbf 	.word	0x00d8acbf
 80056b4:	00e4e1c0 	.word	0x00e4e1c0
 80056b8:	00f42400 	.word	0x00f42400
 80056bc:	01067380 	.word	0x01067380
 80056c0:	011a499f 	.word	0x011a499f
 80056c4:	01312cff 	.word	0x01312cff
 80056c8:	014ca43f 	.word	0x014ca43f
 80056cc:	016e3600 	.word	0x016e3600
 80056d0:	01a6ab1f 	.word	0x01a6ab1f
 80056d4:	01e84800 	.word	0x01e84800

080056d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f043 0201 	orr.w	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d115      	bne.n	800576a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800574a:	2001      	movs	r0, #1
 800574c:	f7fb fd90 	bl	8001270 <HAL_Delay>
      ms++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fa45 	bl	8006be6 <USB_GetMode>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d01e      	beq.n	80057a0 <USB_SetCurrentMode+0x84>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b31      	cmp	r3, #49	; 0x31
 8005766:	d9f0      	bls.n	800574a <USB_SetCurrentMode+0x2e>
 8005768:	e01a      	b.n	80057a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d115      	bne.n	800579c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800577c:	2001      	movs	r0, #1
 800577e:	f7fb fd77 	bl	8001270 <HAL_Delay>
      ms++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fa2c 	bl	8006be6 <USB_GetMode>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <USB_SetCurrentMode+0x84>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b31      	cmp	r3, #49	; 0x31
 8005798:	d9f0      	bls.n	800577c <USB_SetCurrentMode+0x60>
 800579a:	e001      	b.n	80057a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e005      	b.n	80057ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b32      	cmp	r3, #50	; 0x32
 80057a4:	d101      	bne.n	80057aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b4:	b084      	sub	sp, #16
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	e009      	b.n	80057e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3340      	adds	r3, #64	; 0x40
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3301      	adds	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b0e      	cmp	r3, #14
 80057ec:	d9f2      	bls.n	80057d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11c      	bne.n	800582e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
 800582c:	e00b      	b.n	8005846 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	4619      	mov	r1, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	461a      	mov	r2, r3
 8005862:	680b      	ldr	r3, [r1, #0]
 8005864:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	2b01      	cmp	r3, #1
 800586a:	d10c      	bne.n	8005886 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005872:	2100      	movs	r1, #0
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f965 	bl	8005b44 <USB_SetDevSpeed>
 800587a:	e008      	b.n	800588e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800587c:	2101      	movs	r1, #1
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f960 	bl	8005b44 <USB_SetDevSpeed>
 8005884:	e003      	b.n	800588e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005886:	2103      	movs	r1, #3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f95b 	bl	8005b44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800588e:	2110      	movs	r1, #16
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f8f3 	bl	8005a7c <USB_FlushTxFifo>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f91f 	bl	8005ae4 <USB_FlushRxFifo>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	461a      	mov	r2, r3
 80058b8:	2300      	movs	r3, #0
 80058ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c2:	461a      	mov	r2, r3
 80058c4:	2300      	movs	r3, #0
 80058c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	461a      	mov	r2, r3
 80058d0:	2300      	movs	r3, #0
 80058d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	e043      	b.n	8005962 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f0:	d118      	bne.n	8005924 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	461a      	mov	r2, r3
 8005906:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e013      	b.n	8005936 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	461a      	mov	r2, r3
 800591c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e008      	b.n	8005936 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	2300      	movs	r3, #0
 8005934:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	461a      	mov	r2, r3
 8005944:	2300      	movs	r3, #0
 8005946:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	461a      	mov	r2, r3
 8005956:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800595a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3301      	adds	r3, #1
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	429a      	cmp	r2, r3
 8005968:	d3b7      	bcc.n	80058da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	e043      	b.n	80059f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005986:	d118      	bne.n	80059ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	461a      	mov	r2, r3
 800599c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e013      	b.n	80059cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e008      	b.n	80059cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	461a      	mov	r2, r3
 80059c8:	2300      	movs	r3, #0
 80059ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	461a      	mov	r2, r3
 80059da:	2300      	movs	r3, #0
 80059dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3301      	adds	r3, #1
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d3b7      	bcc.n	8005970 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f043 0210 	orr.w	r2, r3, #16
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <USB_DevInit+0x2c4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f043 0208 	orr.w	r2, r3, #8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a60:	f043 0304 	orr.w	r3, r3, #4
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a74:	b004      	add	sp, #16
 8005a76:	4770      	bx	lr
 8005a78:	803c3800 	.word	0x803c3800

08005a7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <USB_FlushTxFifo+0x64>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e01b      	b.n	8005ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	daf2      	bge.n	8005a8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	019b      	lsls	r3, r3, #6
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <USB_FlushTxFifo+0x64>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e006      	b.n	8005ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d0f0      	beq.n	8005ab4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	00030d40 	.word	0x00030d40

08005ae4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a11      	ldr	r2, [pc, #68]	; (8005b40 <USB_FlushRxFifo+0x5c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e018      	b.n	8005b34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	daf2      	bge.n	8005af0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2210      	movs	r2, #16
 8005b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <USB_FlushRxFifo+0x5c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e006      	b.n	8005b34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d0f0      	beq.n	8005b14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	00030d40 	.word	0x00030d40

08005b44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b64:	4313      	orrs	r3, r2
 8005b66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b087      	sub	sp, #28
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0306 	and.w	r3, r3, #6
 8005b8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
 8005b9a:	e00a      	b.n	8005bb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d002      	beq.n	8005ba8 <USB_GetDevSpeed+0x32>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d102      	bne.n	8005bae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	75fb      	strb	r3, [r7, #23]
 8005bac:	e001      	b.n	8005bb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bae:	230f      	movs	r3, #15
 8005bb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	371c      	adds	r7, #28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d13a      	bne.n	8005c52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d155      	bne.n	8005cc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	791b      	ldrb	r3, [r3, #4]
 8005c2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e036      	b.n	8005cc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11a      	bne.n	8005cc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d161      	bne.n	8005db0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d02:	d11f      	bne.n	8005d44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	2101      	movs	r1, #1
 8005d56:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d64:	4013      	ands	r3, r2
 8005d66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	2101      	movs	r1, #1
 8005d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	0159      	lsls	r1, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	440b      	add	r3, r1
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	4619      	mov	r1, r3
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <USB_DeactivateEndpoint+0x1b0>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]
 8005dae:	e060      	b.n	8005e72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc6:	d11f      	bne.n	8005e08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005de6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	43db      	mvns	r3, r3
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e28:	4013      	ands	r3, r2
 8005e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	43db      	mvns	r3, r3
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	0159      	lsls	r1, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	440b      	add	r3, r1
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <USB_DeactivateEndpoint+0x1b4>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	ec337800 	.word	0xec337800
 8005e84:	eff37800 	.word	0xeff37800

08005e88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	f040 815c 	bne.w	8006162 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d132      	bne.n	8005f18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ecc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ed0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	0cdb      	lsrs	r3, r3, #19
 8005f12:	04db      	lsls	r3, r3, #19
 8005f14:	6113      	str	r3, [r2, #16]
 8005f16:	e074      	b.n	8006002 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f32:	0cdb      	lsrs	r3, r3, #19
 8005f34:	04db      	lsls	r3, r3, #19
 8005f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6999      	ldr	r1, [r3, #24]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	440b      	add	r3, r1
 8005f74:	1e59      	subs	r1, r3, #1
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f80:	4b9d      	ldr	r3, [pc, #628]	; (80061f8 <USB_EPStartXfer+0x370>)
 8005f82:	400b      	ands	r3, r1
 8005f84:	69b9      	ldr	r1, [r7, #24]
 8005f86:	0148      	lsls	r0, r1, #5
 8005f88:	69f9      	ldr	r1, [r7, #28]
 8005f8a:	4401      	add	r1, r0
 8005f8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f90:	4313      	orrs	r3, r2
 8005f92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005faa:	69b9      	ldr	r1, [r7, #24]
 8005fac:	0148      	lsls	r0, r1, #5
 8005fae:	69f9      	ldr	r1, [r7, #28]
 8005fb0:	4401      	add	r1, r0
 8005fb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	791b      	ldrb	r3, [r3, #4]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d11f      	bne.n	8006002 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005fe0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006000:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d14b      	bne.n	80060a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	461a      	mov	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	791b      	ldrb	r3, [r3, #4]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d128      	bne.n	800607e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d110      	bne.n	800605e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	e00f      	b.n	800607e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006098:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e133      	b.n	8006308 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d015      	beq.n	80060f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 811b 	beq.w	8006308 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	2101      	movs	r1, #1
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ee:	4313      	orrs	r3, r2
 80060f0:	634b      	str	r3, [r1, #52]	; 0x34
 80060f2:	e109      	b.n	8006308 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d110      	bne.n	8006126 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e00f      	b.n	8006146 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006144:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6919      	ldr	r1, [r3, #16]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	b298      	uxth	r0, r3
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	4603      	mov	r3, r0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fade 	bl	800671c <USB_WritePacket>
 8006160:	e0d2      	b.n	8006308 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617c:	0cdb      	lsrs	r3, r3, #19
 800617e:	04db      	lsls	r3, r3, #19
 8006180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d126      	bne.n	80061fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	0148      	lsls	r0, r1, #5
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	4401      	add	r1, r0
 80061cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061d0:	4313      	orrs	r3, r2
 80061d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f2:	6113      	str	r3, [r2, #16]
 80061f4:	e03a      	b.n	800626c <USB_EPStartXfer+0x3e4>
 80061f6:	bf00      	nop
 80061f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4413      	add	r3, r2
 8006206:	1e5a      	subs	r2, r3, #1
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	8afa      	ldrh	r2, [r7, #22]
 8006218:	fb03 f202 	mul.w	r2, r3, r2
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	8afb      	ldrh	r3, [r7, #22]
 8006230:	04d9      	lsls	r1, r3, #19
 8006232:	4b38      	ldr	r3, [pc, #224]	; (8006314 <USB_EPStartXfer+0x48c>)
 8006234:	400b      	ands	r3, r1
 8006236:	69b9      	ldr	r1, [r7, #24]
 8006238:	0148      	lsls	r0, r1, #5
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	4401      	add	r1, r0
 800623e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006242:	4313      	orrs	r3, r2
 8006244:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	0148      	lsls	r0, r1, #5
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	4401      	add	r1, r0
 8006264:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006268:	4313      	orrs	r3, r2
 800626a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10d      	bne.n	800628e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6919      	ldr	r1, [r3, #16]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	460a      	mov	r2, r1
 800628c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d128      	bne.n	80062e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d110      	bne.n	80062c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e00f      	b.n	80062e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006302:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	1ff80000 	.word	0x1ff80000

08006318 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	f040 80ce 	bne.w	80064d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d132      	bne.n	80063a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006360:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006384:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	440a      	add	r2, r1
 800639c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a0:	0cdb      	lsrs	r3, r3, #19
 80063a2:	04db      	lsls	r3, r3, #19
 80063a4:	6113      	str	r3, [r2, #16]
 80063a6:	e04e      	b.n	8006446 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c2:	0cdb      	lsrs	r3, r3, #19
 80063c4:	04db      	lsls	r3, r3, #19
 80063c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d903      	bls.n	8006400 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800641e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006436:	6939      	ldr	r1, [r7, #16]
 8006438:	0148      	lsls	r0, r1, #5
 800643a:	6979      	ldr	r1, [r7, #20]
 800643c:	4401      	add	r1, r0
 800643e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006442:	4313      	orrs	r3, r2
 8006444:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d11e      	bne.n	800648a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	461a      	mov	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e097      	b.n	80065ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8083 	beq.w	80065ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d0:	4313      	orrs	r3, r2
 80064d2:	634b      	str	r3, [r1, #52]	; 0x34
 80064d4:	e071      	b.n	80065ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	0cdb      	lsrs	r3, r3, #19
 80064f2:	04db      	lsls	r3, r3, #19
 80064f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006518:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006550:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006568:	6939      	ldr	r1, [r7, #16]
 800656a:	0148      	lsls	r0, r1, #5
 800656c:	6979      	ldr	r1, [r7, #20]
 800656e:	4401      	add	r1, r0
 8006570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006574:	4313      	orrs	r3, r2
 8006576:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d10d      	bne.n	800659a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6919      	ldr	r1, [r3, #16]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	460a      	mov	r2, r1
 8006598:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d14a      	bne.n	800667c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fe:	f040 8086 	bne.w	800670e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006624:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006648:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f242 7210 	movw	r2, #10000	; 0x2710
 8006656:	4293      	cmp	r3, r2
 8006658:	d902      	bls.n	8006660 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
          break;
 800665e:	e056      	b.n	800670e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006678:	d0e7      	beq.n	800664a <USB_EPStopXfer+0x82>
 800667a:	e048      	b.n	800670e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006694:	d13b      	bne.n	800670e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	7812      	ldrb	r2, [r2, #0]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	7812      	ldrb	r2, [r2, #0]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d902      	bls.n	80066f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]
          break;
 80066f2:	e00c      	b.n	800670e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800670c:	d0e7      	beq.n	80066de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800671c:	b480      	push	{r7}
 800671e:	b089      	sub	sp, #36	; 0x24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	460b      	mov	r3, r1
 800672c:	71fb      	strb	r3, [r7, #7]
 800672e:	4613      	mov	r3, r2
 8006730:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800673a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d123      	bne.n	800678a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006742:	88bb      	ldrh	r3, [r7, #4]
 8006744:	3303      	adds	r3, #3
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e018      	b.n	8006782 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	031a      	lsls	r2, r3, #12
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	4413      	add	r3, r2
 8006758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800675c:	461a      	mov	r2, r3
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3301      	adds	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3301      	adds	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	3301      	adds	r3, #1
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	429a      	cmp	r2, r3
 8006788:	d3e2      	bcc.n	8006750 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006798:	b480      	push	{r7}
 800679a:	b08b      	sub	sp, #44	; 0x2c
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	089b      	lsrs	r3, r3, #2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	e014      	b.n	80067ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	3301      	adds	r3, #1
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	3301      	adds	r3, #1
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	3301      	adds	r3, #1
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	3301      	adds	r3, #1
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	3301      	adds	r3, #1
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d3e6      	bcc.n	80067c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067f6:	8bfb      	ldrh	r3, [r7, #30]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01e      	beq.n	800683a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006806:	461a      	mov	r2, r3
 8006808:	f107 0310 	add.w	r3, r7, #16
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
 800681c:	b2da      	uxtb	r2, r3
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	701a      	strb	r2, [r3, #0]
      i++;
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	3301      	adds	r3, #1
 8006826:	623b      	str	r3, [r7, #32]
      pDest++;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800682e:	8bfb      	ldrh	r3, [r7, #30]
 8006830:	3b01      	subs	r3, #1
 8006832:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006834:	8bfb      	ldrh	r3, [r7, #30]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1ea      	bne.n	8006810 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800683c:	4618      	mov	r0, r3
 800683e:	372c      	adds	r7, #44	; 0x2c
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d12c      	bne.n	80068be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	db12      	blt.n	800689c <USB_EPSetStall+0x54>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00f      	beq.n	800689c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800689a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e02b      	b.n	8006916 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	db12      	blt.n	80068f6 <USB_EPSetStall+0xae>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00f      	beq.n	80068f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006914:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d128      	bne.n	8006992 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800695e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	791b      	ldrb	r3, [r3, #4]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d003      	beq.n	8006970 <USB_EPClearStall+0x4c>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	791b      	ldrb	r3, [r3, #4]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d138      	bne.n	80069e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e027      	b.n	80069e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	791b      	ldrb	r3, [r3, #4]
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d003      	beq.n	80069c2 <USB_EPClearStall+0x9e>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	791b      	ldrb	r3, [r3, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d10f      	bne.n	80069e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a6a:	f023 0302 	bic.w	r3, r3, #2
 8006a6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aac:	f043 0302 	orr.w	r3, r3, #2
 8006ab0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	b29b      	uxth	r3, r3
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b087      	sub	sp, #28
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bba:	01db      	lsls	r3, r3, #7
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	460b      	mov	r3, r1
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	333c      	adds	r3, #60	; 0x3c
 8006c5e:	3304      	adds	r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <USB_EP0_OutStart+0xb8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d90a      	bls.n	8006c82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c7c:	d101      	bne.n	8006c82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e037      	b.n	8006cf2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb0:	f043 0318 	orr.w	r3, r3, #24
 8006cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006cc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d10f      	bne.n	8006cf0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006cee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	4f54300a 	.word	0x4f54300a

08006d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <USB_CoreReset+0x64>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d901      	bls.n	8006d22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e01b      	b.n	8006d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	daf2      	bge.n	8006d10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f043 0201 	orr.w	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <USB_CoreReset+0x64>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e006      	b.n	8006d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d0f0      	beq.n	8006d3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	00030d40 	.word	0x00030d40

08006d6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d7c:	f002 fcc4 	bl	8009708 <USBD_static_malloc>
 8006d80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32b0      	adds	r2, #176	; 0xb0
 8006d92:	2100      	movs	r1, #0
 8006d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e0d4      	b.n	8006f46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006da0:	2100      	movs	r1, #0
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f002 fda4 	bl	80098f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32b0      	adds	r2, #176	; 0xb0
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	32b0      	adds	r2, #176	; 0xb0
 8006dc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	7c1b      	ldrb	r3, [r3, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d138      	bne.n	8006e46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dd4:	4b5e      	ldr	r3, [pc, #376]	; (8006f50 <USBD_CDC_Init+0x1e4>)
 8006dd6:	7819      	ldrb	r1, [r3, #0]
 8006dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ddc:	2202      	movs	r2, #2
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f002 fb6f 	bl	80094c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006de4:	4b5a      	ldr	r3, [pc, #360]	; (8006f50 <USBD_CDC_Init+0x1e4>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f003 020f 	and.w	r2, r3, #15
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	3324      	adds	r3, #36	; 0x24
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dfe:	4b55      	ldr	r3, [pc, #340]	; (8006f54 <USBD_CDC_Init+0x1e8>)
 8006e00:	7819      	ldrb	r1, [r3, #0]
 8006e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e06:	2202      	movs	r2, #2
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 fb5a 	bl	80094c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e0e:	4b51      	ldr	r3, [pc, #324]	; (8006f54 <USBD_CDC_Init+0x1e8>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 020f 	and.w	r2, r3, #15
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e26:	2201      	movs	r2, #1
 8006e28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e2a:	4b4b      	ldr	r3, [pc, #300]	; (8006f58 <USBD_CDC_Init+0x1ec>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	3326      	adds	r3, #38	; 0x26
 8006e40:	2210      	movs	r2, #16
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e035      	b.n	8006eb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e46:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <USBD_CDC_Init+0x1e4>)
 8006e48:	7819      	ldrb	r1, [r3, #0]
 8006e4a:	2340      	movs	r3, #64	; 0x40
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f002 fb37 	bl	80094c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e54:	4b3e      	ldr	r3, [pc, #248]	; (8006f50 <USBD_CDC_Init+0x1e4>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e6e:	4b39      	ldr	r3, [pc, #228]	; (8006f54 <USBD_CDC_Init+0x1e8>)
 8006e70:	7819      	ldrb	r1, [r3, #0]
 8006e72:	2340      	movs	r3, #64	; 0x40
 8006e74:	2202      	movs	r2, #2
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f002 fb23 	bl	80094c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e7c:	4b35      	ldr	r3, [pc, #212]	; (8006f54 <USBD_CDC_Init+0x1e8>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e94:	2201      	movs	r2, #1
 8006e96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e98:	4b2f      	ldr	r3, [pc, #188]	; (8006f58 <USBD_CDC_Init+0x1ec>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3326      	adds	r3, #38	; 0x26
 8006eae:	2210      	movs	r2, #16
 8006eb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eb2:	4b29      	ldr	r3, [pc, #164]	; (8006f58 <USBD_CDC_Init+0x1ec>)
 8006eb4:	7819      	ldrb	r1, [r3, #0]
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	2203      	movs	r2, #3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f002 fb01 	bl	80094c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ec0:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <USBD_CDC_Init+0x1ec>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 020f 	and.w	r2, r3, #15
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3324      	adds	r3, #36	; 0x24
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	33b0      	adds	r3, #176	; 0xb0
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f10:	2302      	movs	r3, #2
 8006f12:	e018      	b.n	8006f46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7c1b      	ldrb	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <USBD_CDC_Init+0x1e8>)
 8006f1e:	7819      	ldrb	r1, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f002 fbb8 	bl	80096a0 <USBD_LL_PrepareReceive>
 8006f30:	e008      	b.n	8006f44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <USBD_CDC_Init+0x1e8>)
 8006f34:	7819      	ldrb	r1, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 fbae 	bl	80096a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200000a3 	.word	0x200000a3
 8006f54:	200000a4 	.word	0x200000a4
 8006f58:	200000a5 	.word	0x200000a5

08006f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f68:	4b3a      	ldr	r3, [pc, #232]	; (8007054 <USBD_CDC_DeInit+0xf8>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f002 facd 	bl	800950e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f74:	4b37      	ldr	r3, [pc, #220]	; (8007054 <USBD_CDC_DeInit+0xf8>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	3324      	adds	r3, #36	; 0x24
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f8e:	4b32      	ldr	r3, [pc, #200]	; (8007058 <USBD_CDC_DeInit+0xfc>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f002 faba 	bl	800950e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f9a:	4b2f      	ldr	r3, [pc, #188]	; (8007058 <USBD_CDC_DeInit+0xfc>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f003 020f 	and.w	r2, r3, #15
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fb6:	4b29      	ldr	r3, [pc, #164]	; (800705c <USBD_CDC_DeInit+0x100>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f002 faa6 	bl	800950e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fc2:	4b26      	ldr	r3, [pc, #152]	; (800705c <USBD_CDC_DeInit+0x100>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	f003 020f 	and.w	r2, r3, #15
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	2200      	movs	r2, #0
 8006fda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fdc:	4b1f      	ldr	r3, [pc, #124]	; (800705c <USBD_CDC_DeInit+0x100>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3326      	adds	r3, #38	; 0x26
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	32b0      	adds	r2, #176	; 0xb0
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01f      	beq.n	8007048 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	33b0      	adds	r3, #176	; 0xb0
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32b0      	adds	r2, #176	; 0xb0
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	4618      	mov	r0, r3
 800702c:	f002 fb7a 	bl	8009724 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	32b0      	adds	r2, #176	; 0xb0
 800703a:	2100      	movs	r1, #0
 800703c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200000a3 	.word	0x200000a3
 8007058:	200000a4 	.word	0x200000a4
 800705c:	200000a5 	.word	0x200000a5

08007060 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	32b0      	adds	r2, #176	; 0xb0
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800708c:	2303      	movs	r3, #3
 800708e:	e0bf      	b.n	8007210 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007098:	2b00      	cmp	r3, #0
 800709a:	d050      	beq.n	800713e <USBD_CDC_Setup+0xde>
 800709c:	2b20      	cmp	r3, #32
 800709e:	f040 80af 	bne.w	8007200 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d03a      	beq.n	8007120 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da1b      	bge.n	80070ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	33b0      	adds	r3, #176	; 0xb0
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	88d2      	ldrh	r2, [r2, #6]
 80070d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b07      	cmp	r3, #7
 80070d8:	bf28      	it	cs
 80070da:	2307      	movcs	r3, #7
 80070dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	89fa      	ldrh	r2, [r7, #14]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fd89 	bl	8008bfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070ea:	e090      	b.n	800720e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	785a      	ldrb	r2, [r3, #1]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	88db      	ldrh	r3, [r3, #6]
 80070fa:	2b3f      	cmp	r3, #63	; 0x3f
 80070fc:	d803      	bhi.n	8007106 <USBD_CDC_Setup+0xa6>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	88db      	ldrh	r3, [r3, #6]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	e000      	b.n	8007108 <USBD_CDC_Setup+0xa8>
 8007106:	2240      	movs	r2, #64	; 0x40
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800710e:	6939      	ldr	r1, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007116:	461a      	mov	r2, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 fd9b 	bl	8008c54 <USBD_CtlPrepareRx>
      break;
 800711e:	e076      	b.n	800720e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	33b0      	adds	r3, #176	; 0xb0
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	7850      	ldrb	r0, [r2, #1]
 8007136:	2200      	movs	r2, #0
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	4798      	blx	r3
      break;
 800713c:	e067      	b.n	800720e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b0b      	cmp	r3, #11
 8007144:	d851      	bhi.n	80071ea <USBD_CDC_Setup+0x18a>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USBD_CDC_Setup+0xec>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	0800717d 	.word	0x0800717d
 8007150:	080071f9 	.word	0x080071f9
 8007154:	080071eb 	.word	0x080071eb
 8007158:	080071eb 	.word	0x080071eb
 800715c:	080071eb 	.word	0x080071eb
 8007160:	080071eb 	.word	0x080071eb
 8007164:	080071eb 	.word	0x080071eb
 8007168:	080071eb 	.word	0x080071eb
 800716c:	080071eb 	.word	0x080071eb
 8007170:	080071eb 	.word	0x080071eb
 8007174:	080071a7 	.word	0x080071a7
 8007178:	080071d1 	.word	0x080071d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b03      	cmp	r3, #3
 8007186:	d107      	bne.n	8007198 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007188:	f107 030a 	add.w	r3, r7, #10
 800718c:	2202      	movs	r2, #2
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 fd33 	bl	8008bfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007196:	e032      	b.n	80071fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fcbd 	bl	8008b1a <USBD_CtlError>
            ret = USBD_FAIL;
 80071a0:	2303      	movs	r3, #3
 80071a2:	75fb      	strb	r3, [r7, #23]
          break;
 80071a4:	e02b      	b.n	80071fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d107      	bne.n	80071c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071b2:	f107 030d 	add.w	r3, r7, #13
 80071b6:	2201      	movs	r2, #1
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fd1e 	bl	8008bfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c0:	e01d      	b.n	80071fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fca8 	bl	8008b1a <USBD_CtlError>
            ret = USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	75fb      	strb	r3, [r7, #23]
          break;
 80071ce:	e016      	b.n	80071fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d00f      	beq.n	80071fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 fc9b 	bl	8008b1a <USBD_CtlError>
            ret = USBD_FAIL;
 80071e4:	2303      	movs	r3, #3
 80071e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071e8:	e008      	b.n	80071fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fc94 	bl	8008b1a <USBD_CtlError>
          ret = USBD_FAIL;
 80071f2:	2303      	movs	r3, #3
 80071f4:	75fb      	strb	r3, [r7, #23]
          break;
 80071f6:	e002      	b.n	80071fe <USBD_CDC_Setup+0x19e>
          break;
 80071f8:	bf00      	nop
 80071fa:	e008      	b.n	800720e <USBD_CDC_Setup+0x1ae>
          break;
 80071fc:	bf00      	nop
      }
      break;
 80071fe:	e006      	b.n	800720e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fc89 	bl	8008b1a <USBD_CtlError>
      ret = USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	75fb      	strb	r3, [r7, #23]
      break;
 800720c:	bf00      	nop
  }

  return (uint8_t)ret;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800722a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32b0      	adds	r2, #176	; 0xb0
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800723e:	2303      	movs	r3, #3
 8007240:	e065      	b.n	800730e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	32b0      	adds	r2, #176	; 0xb0
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	3318      	adds	r3, #24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d02f      	beq.n	80072cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	f003 020f 	and.w	r2, r3, #15
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	3318      	adds	r3, #24
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	f003 010f 	and.w	r1, r3, #15
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	460b      	mov	r3, r1
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	440b      	add	r3, r1
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4403      	add	r3, r0
 8007294:	3348      	adds	r3, #72	; 0x48
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	fbb2 f1f3 	udiv	r1, r2, r3
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d112      	bne.n	80072cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	f003 020f 	and.w	r2, r3, #15
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	3318      	adds	r3, #24
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072be:	78f9      	ldrb	r1, [r7, #3]
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f002 f9ca 	bl	800965e <USBD_LL_Transmit>
 80072ca:	e01f      	b.n	800730c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	33b0      	adds	r3, #176	; 0xb0
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d010      	beq.n	800730c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	33b0      	adds	r3, #176	; 0xb0
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	32b0      	adds	r2, #176	; 0xb0
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	32b0      	adds	r2, #176	; 0xb0
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007344:	2303      	movs	r3, #3
 8007346:	e01a      	b.n	800737e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f002 f9c8 	bl	80096e2 <USBD_LL_GetRxDataSize>
 8007352:	4602      	mov	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	33b0      	adds	r3, #176	; 0xb0
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007378:	4611      	mov	r1, r2
 800737a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	32b0      	adds	r2, #176	; 0xb0
 8007398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e025      	b.n	80073f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	33b0      	adds	r3, #176	; 0xb0
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01a      	beq.n	80073f2 <USBD_CDC_EP0_RxReady+0x6c>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073c2:	2bff      	cmp	r3, #255	; 0xff
 80073c4:	d015      	beq.n	80073f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	33b0      	adds	r3, #176	; 0xb0
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80073de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073e6:	b292      	uxth	r2, r2
 80073e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	22ff      	movs	r2, #255	; 0xff
 80073ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007404:	2182      	movs	r1, #130	; 0x82
 8007406:	4818      	ldr	r0, [pc, #96]	; (8007468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007408:	f000 fd4f 	bl	8007eaa <USBD_GetEpDesc>
 800740c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800740e:	2101      	movs	r1, #1
 8007410:	4815      	ldr	r0, [pc, #84]	; (8007468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007412:	f000 fd4a 	bl	8007eaa <USBD_GetEpDesc>
 8007416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007418:	2181      	movs	r1, #129	; 0x81
 800741a:	4813      	ldr	r0, [pc, #76]	; (8007468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800741c:	f000 fd45 	bl	8007eaa <USBD_GetEpDesc>
 8007420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2210      	movs	r2, #16
 800742c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d006      	beq.n	8007442 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2200      	movs	r2, #0
 8007438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800743c:	711a      	strb	r2, [r3, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d006      	beq.n	8007456 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007450:	711a      	strb	r2, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2243      	movs	r2, #67	; 0x43
 800745a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800745c:	4b02      	ldr	r3, [pc, #8]	; (8007468 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000060 	.word	0x20000060

0800746c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007474:	2182      	movs	r1, #130	; 0x82
 8007476:	4818      	ldr	r0, [pc, #96]	; (80074d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007478:	f000 fd17 	bl	8007eaa <USBD_GetEpDesc>
 800747c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800747e:	2101      	movs	r1, #1
 8007480:	4815      	ldr	r0, [pc, #84]	; (80074d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007482:	f000 fd12 	bl	8007eaa <USBD_GetEpDesc>
 8007486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007488:	2181      	movs	r1, #129	; 0x81
 800748a:	4813      	ldr	r0, [pc, #76]	; (80074d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800748c:	f000 fd0d 	bl	8007eaa <USBD_GetEpDesc>
 8007490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2210      	movs	r2, #16
 800749c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d006      	beq.n	80074b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2200      	movs	r2, #0
 80074a8:	711a      	strb	r2, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f042 0202 	orr.w	r2, r2, #2
 80074b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	711a      	strb	r2, [r3, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f042 0202 	orr.w	r2, r2, #2
 80074c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2243      	movs	r2, #67	; 0x43
 80074ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000060 	.word	0x20000060

080074dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074e4:	2182      	movs	r1, #130	; 0x82
 80074e6:	4818      	ldr	r0, [pc, #96]	; (8007548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074e8:	f000 fcdf 	bl	8007eaa <USBD_GetEpDesc>
 80074ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074ee:	2101      	movs	r1, #1
 80074f0:	4815      	ldr	r0, [pc, #84]	; (8007548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074f2:	f000 fcda 	bl	8007eaa <USBD_GetEpDesc>
 80074f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074f8:	2181      	movs	r1, #129	; 0x81
 80074fa:	4813      	ldr	r0, [pc, #76]	; (8007548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074fc:	f000 fcd5 	bl	8007eaa <USBD_GetEpDesc>
 8007500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2210      	movs	r2, #16
 800750c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d006      	beq.n	8007522 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	2200      	movs	r2, #0
 8007518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751c:	711a      	strb	r2, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d006      	beq.n	8007536 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007530:	711a      	strb	r2, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2243      	movs	r2, #67	; 0x43
 800753a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000060 	.word	0x20000060

0800754c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	220a      	movs	r2, #10
 8007558:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800755a:	4b03      	ldr	r3, [pc, #12]	; (8007568 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	2000001c 	.word	0x2000001c

0800756c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	e009      	b.n	8007594 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	33b0      	adds	r3, #176	; 0xb0
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	32b0      	adds	r2, #176	; 0xb0
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e008      	b.n	80075d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	32b0      	adds	r2, #176	; 0xb0
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007604:	2303      	movs	r3, #3
 8007606:	e004      	b.n	8007612 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	32b0      	adds	r2, #176	; 0xb0
 8007632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007636:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007638:	2301      	movs	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32b0      	adds	r2, #176	; 0xb0
 8007646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	e025      	b.n	800769e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007658:	2b00      	cmp	r3, #0
 800765a:	d11f      	bne.n	800769c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2201      	movs	r2, #1
 8007660:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007664:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <USBD_CDC_TransmitPacket+0x88>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f003 020f 	and.w	r2, r3, #15
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4403      	add	r3, r0
 800767e:	3318      	adds	r3, #24
 8007680:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007682:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <USBD_CDC_TransmitPacket+0x88>)
 8007684:	7819      	ldrb	r1, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 ffe3 	bl	800965e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200000a3 	.word	0x200000a3

080076ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	32b0      	adds	r2, #176	; 0xb0
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32b0      	adds	r2, #176	; 0xb0
 80076ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e018      	b.n	800770c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c1b      	ldrb	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <USBD_CDC_ReceivePacket+0x68>)
 80076e4:	7819      	ldrb	r1, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 ffd5 	bl	80096a0 <USBD_LL_PrepareReceive>
 80076f6:	e008      	b.n	800770a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <USBD_CDC_ReceivePacket+0x68>)
 80076fa:	7819      	ldrb	r1, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007702:	2340      	movs	r3, #64	; 0x40
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 ffcb 	bl	80096a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	200000a4 	.word	0x200000a4

08007718 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800772c:	2303      	movs	r3, #3
 800772e:	e01f      	b.n	8007770 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	79fa      	ldrb	r2, [r7, #7]
 8007762:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f001 fe45 	bl	80093f4 <USBD_LL_Init>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800778c:	2303      	movs	r3, #3
 800778e:	e025      	b.n	80077dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	32ae      	adds	r2, #174	; 0xae
 80077a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00f      	beq.n	80077cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	32ae      	adds	r2, #174	; 0xae
 80077b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	f107 020e 	add.w	r2, r7, #14
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	4602      	mov	r2, r0
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fe4d 	bl	800948c <USBD_LL_Start>
 80077f2:	4603      	mov	r3, r0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	4611      	mov	r1, r2
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	78fa      	ldrb	r2, [r7, #3]
 8007864:	4611      	mov	r1, r2
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007870:	2303      	movs	r3, #3
 8007872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f908 	bl	8008aa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078a4:	461a      	mov	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d01a      	beq.n	80078f0 <USBD_LL_SetupStage+0x72>
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d822      	bhi.n	8007904 <USBD_LL_SetupStage+0x86>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <USBD_LL_SetupStage+0x4a>
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d00a      	beq.n	80078dc <USBD_LL_SetupStage+0x5e>
 80078c6:	e01d      	b.n	8007904 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb5f 	bl	8007f94 <USBD_StdDevReq>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
      break;
 80078da:	e020      	b.n	800791e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fbc7 	bl	8008078 <USBD_StdItfReq>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
      break;
 80078ee:	e016      	b.n	800791e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc29 	bl	8008150 <USBD_StdEPReq>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]
      break;
 8007902:	e00c      	b.n	800791e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800790a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fe1a 	bl	800954c <USBD_LL_StallEP>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	bf00      	nop
  }

  return ret;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	460b      	mov	r3, r1
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d16e      	bne.n	8007a1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007946:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800794e:	2b03      	cmp	r3, #3
 8007950:	f040 8098 	bne.w	8007a84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	429a      	cmp	r2, r3
 800795e:	d913      	bls.n	8007988 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	1ad2      	subs	r2, r2, r3
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4293      	cmp	r3, r2
 8007978:	bf28      	it	cs
 800797a:	4613      	movcs	r3, r2
 800797c:	461a      	mov	r2, r3
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f001 f984 	bl	8008c8e <USBD_CtlContinueRx>
 8007986:	e07d      	b.n	8007a84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	2b02      	cmp	r3, #2
 8007994:	d014      	beq.n	80079c0 <USBD_LL_DataOutStage+0x98>
 8007996:	2b02      	cmp	r3, #2
 8007998:	d81d      	bhi.n	80079d6 <USBD_LL_DataOutStage+0xae>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <USBD_LL_DataOutStage+0x7c>
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d003      	beq.n	80079aa <USBD_LL_DataOutStage+0x82>
 80079a2:	e018      	b.n	80079d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	75bb      	strb	r3, [r7, #22]
            break;
 80079a8:	e018      	b.n	80079dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 fa5e 	bl	8007e76 <USBD_CoreFindIF>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75bb      	strb	r3, [r7, #22]
            break;
 80079be:	e00d      	b.n	80079dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	4619      	mov	r1, r3
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fa60 	bl	8007e90 <USBD_CoreFindEP>
 80079d0:	4603      	mov	r3, r0
 80079d2:	75bb      	strb	r3, [r7, #22]
            break;
 80079d4:	e002      	b.n	80079dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75bb      	strb	r3, [r7, #22]
            break;
 80079da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079dc:	7dbb      	ldrb	r3, [r7, #22]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d119      	bne.n	8007a16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d113      	bne.n	8007a16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079ee:	7dba      	ldrb	r2, [r7, #22]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	32ae      	adds	r2, #174	; 0xae
 80079f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80079fe:	7dba      	ldrb	r2, [r7, #22]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a06:	7dba      	ldrb	r2, [r7, #22]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	32ae      	adds	r2, #174	; 0xae
 8007a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f001 f94a 	bl	8008cb0 <USBD_CtlSendStatus>
 8007a1c:	e032      	b.n	8007a84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	4619      	mov	r1, r3
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 fa31 	bl	8007e90 <USBD_CoreFindEP>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a32:	7dbb      	ldrb	r3, [r7, #22]
 8007a34:	2bff      	cmp	r3, #255	; 0xff
 8007a36:	d025      	beq.n	8007a84 <USBD_LL_DataOutStage+0x15c>
 8007a38:	7dbb      	ldrb	r3, [r7, #22]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d122      	bne.n	8007a84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d117      	bne.n	8007a7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a4a:	7dba      	ldrb	r2, [r7, #22]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	32ae      	adds	r2, #174	; 0xae
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00f      	beq.n	8007a7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a5a:	7dba      	ldrb	r2, [r7, #22]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a62:	7dba      	ldrb	r2, [r7, #22]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	32ae      	adds	r2, #174	; 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	7afa      	ldrb	r2, [r7, #11]
 8007a70:	4611      	mov	r1, r2
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	e000      	b.n	8007a86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b086      	sub	sp, #24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	460b      	mov	r3, r1
 8007a98:	607a      	str	r2, [r7, #4]
 8007a9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d16f      	bne.n	8007b82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d15a      	bne.n	8007b68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d914      	bls.n	8007ae8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f001 f8ac 	bl	8008c32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ada:	2300      	movs	r3, #0
 8007adc:	2200      	movs	r2, #0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f001 fddd 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007ae6:	e03f      	b.n	8007b68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d11c      	bne.n	8007b2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d316      	bcc.n	8007b2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d20f      	bcs.n	8007b2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2100      	movs	r1, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f001 f88d 	bl	8008c32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b20:	2300      	movs	r3, #0
 8007b22:	2200      	movs	r2, #0
 8007b24:	2100      	movs	r1, #0
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f001 fdba 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007b2c:	e01c      	b.n	8007b68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d10f      	bne.n	8007b5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b5a:	2180      	movs	r1, #128	; 0x80
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f001 fcf5 	bl	800954c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f001 f8b7 	bl	8008cd6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d03a      	beq.n	8007be8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7ff fe42 	bl	80077fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b80:	e032      	b.n	8007be8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 f97f 	bl	8007e90 <USBD_CoreFindEP>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	2bff      	cmp	r3, #255	; 0xff
 8007b9a:	d025      	beq.n	8007be8 <USBD_LL_DataInStage+0x15a>
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d122      	bne.n	8007be8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d11c      	bne.n	8007be8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bae:	7dfa      	ldrb	r2, [r7, #23]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	32ae      	adds	r2, #174	; 0xae
 8007bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d014      	beq.n	8007be8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bbe:	7dfa      	ldrb	r2, [r7, #23]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bc6:	7dfa      	ldrb	r2, [r7, #23]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	32ae      	adds	r2, #174	; 0xae
 8007bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	7afa      	ldrb	r2, [r7, #11]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	4798      	blx	r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bde:	7dbb      	ldrb	r3, [r7, #22]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007be4:	7dbb      	ldrb	r3, [r7, #22]
 8007be6:	e000      	b.n	8007bea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d014      	beq.n	8007c58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6852      	ldr	r2, [r2, #4]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fc2f 	bl	80094c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2240      	movs	r2, #64	; 0x40
 8007c70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c74:	2340      	movs	r3, #64	; 0x40
 8007c76:	2200      	movs	r2, #0
 8007c78:	2180      	movs	r1, #128	; 0x80
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fc21 	bl	80094c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2240      	movs	r2, #64	; 0x40
 8007c8a:	621a      	str	r2, [r3, #32]

  return ret;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2204      	movs	r2, #4
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d106      	bne.n	8007d04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d110      	bne.n	8007d48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	32ae      	adds	r2, #174	; 0xae
 8007d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e01c      	b.n	8007dae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d115      	bne.n	8007dac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32ae      	adds	r2, #174	; 0xae
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32ae      	adds	r2, #174	; 0xae
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	78fa      	ldrb	r2, [r7, #3]
 8007da6:	4611      	mov	r1, r2
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	32ae      	adds	r2, #174	; 0xae
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e01c      	b.n	8007e12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d115      	bne.n	8007e10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	32ae      	adds	r2, #174	; 0xae
 8007dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	32ae      	adds	r2, #174	; 0xae
 8007e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	78fa      	ldrb	r2, [r7, #3]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00e      	beq.n	8007e6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6852      	ldr	r2, [r2, #4]
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	885b      	ldrh	r3, [r3, #2]
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d920      	bls.n	8007f14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007eda:	e013      	b.n	8007f04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007edc:	f107 030a 	add.w	r3, r7, #10
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6978      	ldr	r0, [r7, #20]
 8007ee4:	f000 f81b 	bl	8007f1e <USBD_GetNextDesc>
 8007ee8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d108      	bne.n	8007f04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d008      	beq.n	8007f12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	885b      	ldrh	r3, [r3, #2]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	897b      	ldrh	r3, [r7, #10]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d8e5      	bhi.n	8007edc <USBD_GetEpDesc+0x32>
 8007f10:	e000      	b.n	8007f14 <USBD_GetEpDesc+0x6a>
          break;
 8007f12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f14:	693b      	ldr	r3, [r7, #16]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	881a      	ldrh	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4413      	add	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f76:	8a3b      	ldrh	r3, [r7, #16]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b21a      	sxth	r2, r3
 8007f7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	b21b      	sxth	r3, r3
 8007f84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f86:	89fb      	ldrh	r3, [r7, #14]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	371c      	adds	r7, #28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007faa:	2b40      	cmp	r3, #64	; 0x40
 8007fac:	d005      	beq.n	8007fba <USBD_StdDevReq+0x26>
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d857      	bhi.n	8008062 <USBD_StdDevReq+0xce>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00f      	beq.n	8007fd6 <USBD_StdDevReq+0x42>
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d153      	bne.n	8008062 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	32ae      	adds	r2, #174	; 0xae
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd4:	e04a      	b.n	800806c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d83b      	bhi.n	8008056 <USBD_StdDevReq+0xc2>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <USBD_StdDevReq+0x50>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008039 	.word	0x08008039
 8007fe8:	0800804d 	.word	0x0800804d
 8007fec:	08008057 	.word	0x08008057
 8007ff0:	08008043 	.word	0x08008043
 8007ff4:	08008057 	.word	0x08008057
 8007ff8:	08008017 	.word	0x08008017
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	08008057 	.word	0x08008057
 8008004:	0800802f 	.word	0x0800802f
 8008008:	08008021 	.word	0x08008021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa3c 	bl	800848c <USBD_GetDescriptor>
          break;
 8008014:	e024      	b.n	8008060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fba1 	bl	8008760 <USBD_SetAddress>
          break;
 800801e:	e01f      	b.n	8008060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fbe0 	bl	80087e8 <USBD_SetConfig>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
          break;
 800802c:	e018      	b.n	8008060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc83 	bl	800893c <USBD_GetConfig>
          break;
 8008036:	e013      	b.n	8008060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fcb4 	bl	80089a8 <USBD_GetStatus>
          break;
 8008040:	e00e      	b.n	8008060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fce3 	bl	8008a10 <USBD_SetFeature>
          break;
 800804a:	e009      	b.n	8008060 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fd07 	bl	8008a62 <USBD_ClrFeature>
          break;
 8008054:	e004      	b.n	8008060 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fd5e 	bl	8008b1a <USBD_CtlError>
          break;
 800805e:	bf00      	nop
      }
      break;
 8008060:	e004      	b.n	800806c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fd58 	bl	8008b1a <USBD_CtlError>
      break;
 800806a:	bf00      	nop
  }

  return ret;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop

08008078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d005      	beq.n	800809e <USBD_StdItfReq+0x26>
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d852      	bhi.n	800813c <USBD_StdItfReq+0xc4>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <USBD_StdItfReq+0x26>
 800809a:	2b20      	cmp	r3, #32
 800809c:	d14e      	bne.n	800813c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d840      	bhi.n	800812e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	889b      	ldrh	r3, [r3, #4]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d836      	bhi.n	8008124 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	889b      	ldrh	r3, [r3, #4]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fed9 	bl	8007e76 <USBD_CoreFindIF>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2bff      	cmp	r3, #255	; 0xff
 80080cc:	d01d      	beq.n	800810a <USBD_StdItfReq+0x92>
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11a      	bne.n	800810a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080d4:	7bba      	ldrb	r2, [r7, #14]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32ae      	adds	r2, #174	; 0xae
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00f      	beq.n	8008104 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080e4:	7bba      	ldrb	r2, [r7, #14]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080ec:	7bba      	ldrb	r2, [r7, #14]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32ae      	adds	r2, #174	; 0xae
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008102:	e004      	b.n	800810e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008108:	e001      	b.n	800810e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d110      	bne.n	8008138 <USBD_StdItfReq+0xc0>
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10d      	bne.n	8008138 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fdc7 	bl	8008cb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008122:	e009      	b.n	8008138 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fcf7 	bl	8008b1a <USBD_CtlError>
          break;
 800812c:	e004      	b.n	8008138 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fcf2 	bl	8008b1a <USBD_CtlError>
          break;
 8008136:	e000      	b.n	800813a <USBD_StdItfReq+0xc2>
          break;
 8008138:	bf00      	nop
      }
      break;
 800813a:	e004      	b.n	8008146 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fceb 	bl	8008b1a <USBD_CtlError>
      break;
 8008144:	bf00      	nop
  }

  return ret;
 8008146:	7bfb      	ldrb	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	889b      	ldrh	r3, [r3, #4]
 8008162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d007      	beq.n	8008180 <USBD_StdEPReq+0x30>
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	f200 817f 	bhi.w	8008474 <USBD_StdEPReq+0x324>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02a      	beq.n	80081d0 <USBD_StdEPReq+0x80>
 800817a:	2b20      	cmp	r3, #32
 800817c:	f040 817a 	bne.w	8008474 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fe83 	bl	8007e90 <USBD_CoreFindEP>
 800818a:	4603      	mov	r3, r0
 800818c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800818e:	7b7b      	ldrb	r3, [r7, #13]
 8008190:	2bff      	cmp	r3, #255	; 0xff
 8008192:	f000 8174 	beq.w	800847e <USBD_StdEPReq+0x32e>
 8008196:	7b7b      	ldrb	r3, [r7, #13]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8170 	bne.w	800847e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800819e:	7b7a      	ldrb	r2, [r7, #13]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081a6:	7b7a      	ldrb	r2, [r7, #13]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32ae      	adds	r2, #174	; 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8163 	beq.w	800847e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081b8:	7b7a      	ldrb	r2, [r7, #13]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	; 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ce:	e156      	b.n	800847e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	785b      	ldrb	r3, [r3, #1]
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d008      	beq.n	80081ea <USBD_StdEPReq+0x9a>
 80081d8:	2b03      	cmp	r3, #3
 80081da:	f300 8145 	bgt.w	8008468 <USBD_StdEPReq+0x318>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 809b 	beq.w	800831a <USBD_StdEPReq+0x1ca>
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d03c      	beq.n	8008262 <USBD_StdEPReq+0x112>
 80081e8:	e13e      	b.n	8008468 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d002      	beq.n	80081fc <USBD_StdEPReq+0xac>
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d016      	beq.n	8008228 <USBD_StdEPReq+0xd8>
 80081fa:	e02c      	b.n	8008256 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00d      	beq.n	800821e <USBD_StdEPReq+0xce>
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b80      	cmp	r3, #128	; 0x80
 8008206:	d00a      	beq.n	800821e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f99d 	bl	800954c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f999 	bl	800954c <USBD_LL_StallEP>
 800821a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800821c:	e020      	b.n	8008260 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fc7a 	bl	8008b1a <USBD_CtlError>
              break;
 8008226:	e01b      	b.n	8008260 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	885b      	ldrh	r3, [r3, #2]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10e      	bne.n	800824e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <USBD_StdEPReq+0xfe>
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b80      	cmp	r3, #128	; 0x80
 800823a:	d008      	beq.n	800824e <USBD_StdEPReq+0xfe>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	88db      	ldrh	r3, [r3, #6]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f97f 	bl	800954c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fd2e 	bl	8008cb0 <USBD_CtlSendStatus>

              break;
 8008254:	e004      	b.n	8008260 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fc5e 	bl	8008b1a <USBD_CtlError>
              break;
 800825e:	bf00      	nop
          }
          break;
 8008260:	e107      	b.n	8008472 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d002      	beq.n	8008274 <USBD_StdEPReq+0x124>
 800826e:	2b03      	cmp	r3, #3
 8008270:	d016      	beq.n	80082a0 <USBD_StdEPReq+0x150>
 8008272:	e04b      	b.n	800830c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <USBD_StdEPReq+0x146>
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	2b80      	cmp	r3, #128	; 0x80
 800827e:	d00a      	beq.n	8008296 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f961 	bl	800954c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800828a:	2180      	movs	r1, #128	; 0x80
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 f95d 	bl	800954c <USBD_LL_StallEP>
 8008292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008294:	e040      	b.n	8008318 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc3e 	bl	8008b1a <USBD_CtlError>
              break;
 800829e:	e03b      	b.n	8008318 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	885b      	ldrh	r3, [r3, #2]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d136      	bne.n	8008316 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f967 	bl	800958a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fcf7 	bl	8008cb0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff fde2 	bl	8007e90 <USBD_CoreFindEP>
 80082cc:	4603      	mov	r3, r0
 80082ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082d0:	7b7b      	ldrb	r3, [r7, #13]
 80082d2:	2bff      	cmp	r3, #255	; 0xff
 80082d4:	d01f      	beq.n	8008316 <USBD_StdEPReq+0x1c6>
 80082d6:	7b7b      	ldrb	r3, [r7, #13]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11c      	bne.n	8008316 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082dc:	7b7a      	ldrb	r2, [r7, #13]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082e4:	7b7a      	ldrb	r2, [r7, #13]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	32ae      	adds	r2, #174	; 0xae
 80082ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d010      	beq.n	8008316 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082f4:	7b7a      	ldrb	r2, [r7, #13]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32ae      	adds	r2, #174	; 0xae
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800830a:	e004      	b.n	8008316 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fc03 	bl	8008b1a <USBD_CtlError>
              break;
 8008314:	e000      	b.n	8008318 <USBD_StdEPReq+0x1c8>
              break;
 8008316:	bf00      	nop
          }
          break;
 8008318:	e0ab      	b.n	8008472 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d002      	beq.n	800832c <USBD_StdEPReq+0x1dc>
 8008326:	2b03      	cmp	r3, #3
 8008328:	d032      	beq.n	8008390 <USBD_StdEPReq+0x240>
 800832a:	e097      	b.n	800845c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <USBD_StdEPReq+0x1f2>
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b80      	cmp	r3, #128	; 0x80
 8008336:	d004      	beq.n	8008342 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fbed 	bl	8008b1a <USBD_CtlError>
                break;
 8008340:	e091      	b.n	8008466 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	da0b      	bge.n	8008362 <USBD_StdEPReq+0x212>
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	3310      	adds	r3, #16
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	3304      	adds	r3, #4
 8008360:	e00b      	b.n	800837a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4413      	add	r3, r2
 8008378:	3304      	adds	r3, #4
 800837a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2202      	movs	r2, #2
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc37 	bl	8008bfc <USBD_CtlSendData>
              break;
 800838e:	e06a      	b.n	8008466 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	da11      	bge.n	80083bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 020f 	and.w	r2, r3, #15
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	3324      	adds	r3, #36	; 0x24
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d117      	bne.n	80083e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fbb0 	bl	8008b1a <USBD_CtlError>
                  break;
 80083ba:	e054      	b.n	8008466 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	f003 020f 	and.w	r2, r3, #15
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fb9d 	bl	8008b1a <USBD_CtlError>
                  break;
 80083e0:	e041      	b.n	8008466 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da0b      	bge.n	8008402 <USBD_StdEPReq+0x2b2>
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	3310      	adds	r3, #16
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	3304      	adds	r3, #4
 8008400:	e00b      	b.n	800841a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4413      	add	r3, r2
 8008418:	3304      	adds	r3, #4
 800841a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <USBD_StdEPReq+0x2d8>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d103      	bne.n	8008430 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	e00e      	b.n	800844e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f8c7 	bl	80095c8 <USBD_LL_IsStallEP>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e002      	b.n	800844e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2202      	movs	r2, #2
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fbd1 	bl	8008bfc <USBD_CtlSendData>
              break;
 800845a:	e004      	b.n	8008466 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fb5b 	bl	8008b1a <USBD_CtlError>
              break;
 8008464:	bf00      	nop
          }
          break;
 8008466:	e004      	b.n	8008472 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fb55 	bl	8008b1a <USBD_CtlError>
          break;
 8008470:	bf00      	nop
      }
      break;
 8008472:	e005      	b.n	8008480 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fb4f 	bl	8008b1a <USBD_CtlError>
      break;
 800847c:	e000      	b.n	8008480 <USBD_StdEPReq+0x330>
      break;
 800847e:	bf00      	nop
  }

  return ret;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	885b      	ldrh	r3, [r3, #2]
 80084a6:	0a1b      	lsrs	r3, r3, #8
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	2b06      	cmp	r3, #6
 80084ae:	f200 8128 	bhi.w	8008702 <USBD_GetDescriptor+0x276>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <USBD_GetDescriptor+0x2c>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	080084ed 	.word	0x080084ed
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	08008703 	.word	0x08008703
 80084c8:	08008703 	.word	0x08008703
 80084cc:	080086a3 	.word	0x080086a3
 80084d0:	080086cf 	.word	0x080086cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
      break;
 80084ea:	e112      	b.n	8008712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	7c1b      	ldrb	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10d      	bne.n	8008510 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fc:	f107 0208 	add.w	r2, r7, #8
 8008500:	4610      	mov	r0, r2
 8008502:	4798      	blx	r3
 8008504:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3301      	adds	r3, #1
 800850a:	2202      	movs	r2, #2
 800850c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800850e:	e100      	b.n	8008712 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	f107 0208 	add.w	r2, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	2202      	movs	r2, #2
 8008528:	701a      	strb	r2, [r3, #0]
      break;
 800852a:	e0f2      	b.n	8008712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	885b      	ldrh	r3, [r3, #2]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b05      	cmp	r3, #5
 8008534:	f200 80ac 	bhi.w	8008690 <USBD_GetDescriptor+0x204>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <USBD_GetDescriptor+0xb4>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008559 	.word	0x08008559
 8008544:	0800858d 	.word	0x0800858d
 8008548:	080085c1 	.word	0x080085c1
 800854c:	080085f5 	.word	0x080085f5
 8008550:	08008629 	.word	0x08008629
 8008554:	0800865d 	.word	0x0800865d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	7c12      	ldrb	r2, [r2, #16]
 8008570:	f107 0108 	add.w	r1, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800857a:	e091      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 facb 	bl	8008b1a <USBD_CtlError>
            err++;
 8008584:	7afb      	ldrb	r3, [r7, #11]
 8008586:	3301      	adds	r3, #1
 8008588:	72fb      	strb	r3, [r7, #11]
          break;
 800858a:	e089      	b.n	80086a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	7c12      	ldrb	r2, [r2, #16]
 80085a4:	f107 0108 	add.w	r1, r7, #8
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
 80085ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ae:	e077      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fab1 	bl	8008b1a <USBD_CtlError>
            err++;
 80085b8:	7afb      	ldrb	r3, [r7, #11]
 80085ba:	3301      	adds	r3, #1
 80085bc:	72fb      	strb	r3, [r7, #11]
          break;
 80085be:	e06f      	b.n	80086a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	7c12      	ldrb	r2, [r2, #16]
 80085d8:	f107 0108 	add.w	r1, r7, #8
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
 80085e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e2:	e05d      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fa97 	bl	8008b1a <USBD_CtlError>
            err++;
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	3301      	adds	r3, #1
 80085f0:	72fb      	strb	r3, [r7, #11]
          break;
 80085f2:	e055      	b.n	80086a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	7c12      	ldrb	r2, [r2, #16]
 800860c:	f107 0108 	add.w	r1, r7, #8
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
 8008614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008616:	e043      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa7d 	bl	8008b1a <USBD_CtlError>
            err++;
 8008620:	7afb      	ldrb	r3, [r7, #11]
 8008622:	3301      	adds	r3, #1
 8008624:	72fb      	strb	r3, [r7, #11]
          break;
 8008626:	e03b      	b.n	80086a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7c12      	ldrb	r2, [r2, #16]
 8008640:	f107 0108 	add.w	r1, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864a:	e029      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa63 	bl	8008b1a <USBD_CtlError>
            err++;
 8008654:	7afb      	ldrb	r3, [r7, #11]
 8008656:	3301      	adds	r3, #1
 8008658:	72fb      	strb	r3, [r7, #11]
          break;
 800865a:	e021      	b.n	80086a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867e:	e00f      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa49 	bl	8008b1a <USBD_CtlError>
            err++;
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	3301      	adds	r3, #1
 800868c:	72fb      	strb	r3, [r7, #11]
          break;
 800868e:	e007      	b.n	80086a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa41 	bl	8008b1a <USBD_CtlError>
          err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800869e:	bf00      	nop
      }
      break;
 80086a0:	e037      	b.n	8008712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7c1b      	ldrb	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	f107 0208 	add.w	r2, r7, #8
 80086b6:	4610      	mov	r0, r2
 80086b8:	4798      	blx	r3
 80086ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086bc:	e029      	b.n	8008712 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fa2a 	bl	8008b1a <USBD_CtlError>
        err++;
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	3301      	adds	r3, #1
 80086ca:	72fb      	strb	r3, [r7, #11]
      break;
 80086cc:	e021      	b.n	8008712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7c1b      	ldrb	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10d      	bne.n	80086f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	f107 0208 	add.w	r2, r7, #8
 80086e2:	4610      	mov	r0, r2
 80086e4:	4798      	blx	r3
 80086e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3301      	adds	r3, #1
 80086ec:	2207      	movs	r2, #7
 80086ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086f0:	e00f      	b.n	8008712 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fa10 	bl	8008b1a <USBD_CtlError>
        err++;
 80086fa:	7afb      	ldrb	r3, [r7, #11]
 80086fc:	3301      	adds	r3, #1
 80086fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008700:	e007      	b.n	8008712 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fa08 	bl	8008b1a <USBD_CtlError>
      err++;
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	3301      	adds	r3, #1
 800870e:	72fb      	strb	r3, [r7, #11]
      break;
 8008710:	bf00      	nop
  }

  if (err != 0U)
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11e      	bne.n	8008756 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	88db      	ldrh	r3, [r3, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d016      	beq.n	800874e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008720:	893b      	ldrh	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00e      	beq.n	8008744 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	88da      	ldrh	r2, [r3, #6]
 800872a:	893b      	ldrh	r3, [r7, #8]
 800872c:	4293      	cmp	r3, r2
 800872e:	bf28      	it	cs
 8008730:	4613      	movcs	r3, r2
 8008732:	b29b      	uxth	r3, r3
 8008734:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008736:	893b      	ldrh	r3, [r7, #8]
 8008738:	461a      	mov	r2, r3
 800873a:	68f9      	ldr	r1, [r7, #12]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fa5d 	bl	8008bfc <USBD_CtlSendData>
 8008742:	e009      	b.n	8008758 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9e7 	bl	8008b1a <USBD_CtlError>
 800874c:	e004      	b.n	8008758 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 faae 	bl	8008cb0 <USBD_CtlSendStatus>
 8008754:	e000      	b.n	8008758 <USBD_GetDescriptor+0x2cc>
    return;
 8008756:	bf00      	nop
  }
}
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop

08008760 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d131      	bne.n	80087d6 <USBD_SetAddress+0x76>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d12d      	bne.n	80087d6 <USBD_SetAddress+0x76>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	2b7f      	cmp	r3, #127	; 0x7f
 8008780:	d829      	bhi.n	80087d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	885b      	ldrh	r3, [r3, #2]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d104      	bne.n	80087a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9bc 	bl	8008b1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a2:	e01d      	b.n	80087e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7bfa      	ldrb	r2, [r7, #15]
 80087a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 ff35 	bl	8009620 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa7a 	bl	8008cb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2202      	movs	r2, #2
 80087c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ca:	e009      	b.n	80087e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d4:	e004      	b.n	80087e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f99e 	bl	8008b1a <USBD_CtlError>
  }
}
 80087de:	bf00      	nop
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	885b      	ldrh	r3, [r3, #2]
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	4b4e      	ldr	r3, [pc, #312]	; (8008938 <USBD_SetConfig+0x150>)
 80087fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008800:	4b4d      	ldr	r3, [pc, #308]	; (8008938 <USBD_SetConfig+0x150>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d905      	bls.n	8008814 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f985 	bl	8008b1a <USBD_CtlError>
    return USBD_FAIL;
 8008810:	2303      	movs	r3, #3
 8008812:	e08c      	b.n	800892e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d002      	beq.n	8008826 <USBD_SetConfig+0x3e>
 8008820:	2b03      	cmp	r3, #3
 8008822:	d029      	beq.n	8008878 <USBD_SetConfig+0x90>
 8008824:	e075      	b.n	8008912 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008826:	4b44      	ldr	r3, [pc, #272]	; (8008938 <USBD_SetConfig+0x150>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d020      	beq.n	8008870 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800882e:	4b42      	ldr	r3, [pc, #264]	; (8008938 <USBD_SetConfig+0x150>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008838:	4b3f      	ldr	r3, [pc, #252]	; (8008938 <USBD_SetConfig+0x150>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fe ffe7 	bl	8007812 <USBD_SetClassConfig>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d008      	beq.n	8008860 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f962 	bl	8008b1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800885e:	e065      	b.n	800892c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fa25 	bl	8008cb0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2203      	movs	r2, #3
 800886a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800886e:	e05d      	b.n	800892c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fa1d 	bl	8008cb0 <USBD_CtlSendStatus>
      break;
 8008876:	e059      	b.n	800892c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008878:	4b2f      	ldr	r3, [pc, #188]	; (8008938 <USBD_SetConfig+0x150>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d112      	bne.n	80088a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008888:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <USBD_SetConfig+0x150>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008892:	4b29      	ldr	r3, [pc, #164]	; (8008938 <USBD_SetConfig+0x150>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fe ffd6 	bl	800784a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fa06 	bl	8008cb0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088a4:	e042      	b.n	800892c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088a6:	4b24      	ldr	r3, [pc, #144]	; (8008938 <USBD_SetConfig+0x150>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d02a      	beq.n	800890a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7fe ffc4 	bl	800784a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088c2:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <USBD_SetConfig+0x150>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088cc:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <USBD_SetConfig+0x150>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7fe ff9d 	bl	8007812 <USBD_SetClassConfig>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00f      	beq.n	8008902 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f918 	bl	8008b1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7fe ffa9 	bl	800784a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008900:	e014      	b.n	800892c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f9d4 	bl	8008cb0 <USBD_CtlSendStatus>
      break;
 8008908:	e010      	b.n	800892c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9d0 	bl	8008cb0 <USBD_CtlSendStatus>
      break;
 8008910:	e00c      	b.n	800892c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f900 	bl	8008b1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800891a:	4b07      	ldr	r3, [pc, #28]	; (8008938 <USBD_SetConfig+0x150>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7fe ff92 	bl	800784a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008926:	2303      	movs	r3, #3
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	bf00      	nop
  }

  return ret;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000284 	.word	0x20000284

0800893c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d004      	beq.n	8008958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8e2 	bl	8008b1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008956:	e023      	b.n	80089a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	dc02      	bgt.n	800896a <USBD_GetConfig+0x2e>
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc03      	bgt.n	8008970 <USBD_GetConfig+0x34>
 8008968:	e015      	b.n	8008996 <USBD_GetConfig+0x5a>
 800896a:	2b03      	cmp	r3, #3
 800896c:	d00b      	beq.n	8008986 <USBD_GetConfig+0x4a>
 800896e:	e012      	b.n	8008996 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3308      	adds	r3, #8
 800897a:	2201      	movs	r2, #1
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f93c 	bl	8008bfc <USBD_CtlSendData>
        break;
 8008984:	e00c      	b.n	80089a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3304      	adds	r3, #4
 800898a:	2201      	movs	r2, #1
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f934 	bl	8008bfc <USBD_CtlSendData>
        break;
 8008994:	e004      	b.n	80089a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f8be 	bl	8008b1a <USBD_CtlError>
        break;
 800899e:	bf00      	nop
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d81e      	bhi.n	80089fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	88db      	ldrh	r3, [r3, #6]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d004      	beq.n	80089d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f8a5 	bl	8008b1a <USBD_CtlError>
        break;
 80089d0:	e01a      	b.n	8008a08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f043 0202 	orr.w	r2, r3, #2
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	330c      	adds	r3, #12
 80089f2:	2202      	movs	r2, #2
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f900 	bl	8008bfc <USBD_CtlSendData>
      break;
 80089fc:	e004      	b.n	8008a08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f88a 	bl	8008b1a <USBD_CtlError>
      break;
 8008a06:	bf00      	nop
  }
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	885b      	ldrh	r3, [r3, #2]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d107      	bne.n	8008a32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f940 	bl	8008cb0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a30:	e013      	b.n	8008a5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	885b      	ldrh	r3, [r3, #2]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d10b      	bne.n	8008a52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	889b      	ldrh	r3, [r3, #4]
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f930 	bl	8008cb0 <USBD_CtlSendStatus>
}
 8008a50:	e003      	b.n	8008a5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f860 	bl	8008b1a <USBD_CtlError>
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d80b      	bhi.n	8008a92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d10c      	bne.n	8008a9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f910 	bl	8008cb0 <USBD_CtlSendStatus>
      }
      break;
 8008a90:	e004      	b.n	8008a9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f840 	bl	8008b1a <USBD_CtlError>
      break;
 8008a9a:	e000      	b.n	8008a9e <USBD_ClrFeature+0x3c>
      break;
 8008a9c:	bf00      	nop
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fa41 	bl	8007f58 <SWAPBYTE>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	461a      	mov	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7ff fa34 	bl	8007f58 <SWAPBYTE>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff fa27 	bl	8007f58 <SWAPBYTE>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	80da      	strh	r2, [r3, #6]
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b24:	2180      	movs	r1, #128	; 0x80
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fd10 	bl	800954c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fd0c 	bl	800954c <USBD_LL_StallEP>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d036      	beq.n	8008bc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b56:	6938      	ldr	r0, [r7, #16]
 8008b58:	f000 f836 	bl	8008bc8 <USBD_GetLen>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	4413      	add	r3, r2
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7812      	ldrb	r2, [r2, #0]
 8008b74:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4413      	add	r3, r2
 8008b82:	2203      	movs	r2, #3
 8008b84:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b8c:	e013      	b.n	8008bb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	4413      	add	r3, r2
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	7812      	ldrb	r2, [r2, #0]
 8008b98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	613b      	str	r3, [r7, #16]
    idx++;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	4413      	add	r3, r2
 8008bac:	2200      	movs	r2, #0
 8008bae:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e7      	bne.n	8008b8e <USBD_GetString+0x52>
 8008bbe:	e000      	b.n	8008bc2 <USBD_GetString+0x86>
    return;
 8008bc0:	bf00      	nop
  }
}
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bd8:	e005      	b.n	8008be6 <USBD_GetLen+0x1e>
  {
    len++;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1f5      	bne.n	8008bda <USBD_GetLen+0x12>
  }

  return len;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	2100      	movs	r1, #0
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fd1b 	bl	800965e <USBD_LL_Transmit>

  return USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	2100      	movs	r1, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 fd0a 	bl	800965e <USBD_LL_Transmit>

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2203      	movs	r2, #3
 8008c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fd0e 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fcfd 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2204      	movs	r2, #4
 8008cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fcc9 	bl	800965e <USBD_LL_Transmit>

  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2205      	movs	r2, #5
 8008ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fcd7 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d00:	2200      	movs	r2, #0
 8008d02:	4912      	ldr	r1, [pc, #72]	; (8008d4c <MX_USB_DEVICE_Init+0x50>)
 8008d04:	4812      	ldr	r0, [pc, #72]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d06:	f7fe fd07 	bl	8007718 <USBD_Init>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d10:	f7f8 f840 	bl	8000d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d14:	490f      	ldr	r1, [pc, #60]	; (8008d54 <MX_USB_DEVICE_Init+0x58>)
 8008d16:	480e      	ldr	r0, [pc, #56]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d18:	f7fe fd2e 	bl	8007778 <USBD_RegisterClass>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d22:	f7f8 f837 	bl	8000d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d26:	490c      	ldr	r1, [pc, #48]	; (8008d58 <MX_USB_DEVICE_Init+0x5c>)
 8008d28:	4809      	ldr	r0, [pc, #36]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d2a:	f7fe fc1f 	bl	800756c <USBD_CDC_RegisterInterface>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d34:	f7f8 f82e 	bl	8000d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d38:	4805      	ldr	r0, [pc, #20]	; (8008d50 <MX_USB_DEVICE_Init+0x54>)
 8008d3a:	f7fe fd53 	bl	80077e4 <USBD_Start>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d44:	f7f8 f826 	bl	8000d94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d48:	bf00      	nop
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200000bc 	.word	0x200000bc
 8008d50:	20000288 	.word	0x20000288
 8008d54:	20000028 	.word	0x20000028
 8008d58:	200000a8 	.word	0x200000a8

08008d5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d60:	2200      	movs	r2, #0
 8008d62:	4905      	ldr	r1, [pc, #20]	; (8008d78 <CDC_Init_FS+0x1c>)
 8008d64:	4805      	ldr	r0, [pc, #20]	; (8008d7c <CDC_Init_FS+0x20>)
 8008d66:	f7fe fc1b 	bl	80075a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d6a:	4905      	ldr	r1, [pc, #20]	; (8008d80 <CDC_Init_FS+0x24>)
 8008d6c:	4803      	ldr	r0, [pc, #12]	; (8008d7c <CDC_Init_FS+0x20>)
 8008d6e:	f7fe fc39 	bl	80075e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000d64 	.word	0x20000d64
 8008d7c:	20000288 	.word	0x20000288
 8008d80:	20000564 	.word	0x20000564

08008d84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
 8008da0:	4613      	mov	r3, r2
 8008da2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b23      	cmp	r3, #35	; 0x23
 8008da8:	d84a      	bhi.n	8008e40 <CDC_Control_FS+0xac>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <CDC_Control_FS+0x1c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e41 	.word	0x08008e41
 8008db4:	08008e41 	.word	0x08008e41
 8008db8:	08008e41 	.word	0x08008e41
 8008dbc:	08008e41 	.word	0x08008e41
 8008dc0:	08008e41 	.word	0x08008e41
 8008dc4:	08008e41 	.word	0x08008e41
 8008dc8:	08008e41 	.word	0x08008e41
 8008dcc:	08008e41 	.word	0x08008e41
 8008dd0:	08008e41 	.word	0x08008e41
 8008dd4:	08008e41 	.word	0x08008e41
 8008dd8:	08008e41 	.word	0x08008e41
 8008ddc:	08008e41 	.word	0x08008e41
 8008de0:	08008e41 	.word	0x08008e41
 8008de4:	08008e41 	.word	0x08008e41
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008e41 	.word	0x08008e41
 8008df4:	08008e41 	.word	0x08008e41
 8008df8:	08008e41 	.word	0x08008e41
 8008dfc:	08008e41 	.word	0x08008e41
 8008e00:	08008e41 	.word	0x08008e41
 8008e04:	08008e41 	.word	0x08008e41
 8008e08:	08008e41 	.word	0x08008e41
 8008e0c:	08008e41 	.word	0x08008e41
 8008e10:	08008e41 	.word	0x08008e41
 8008e14:	08008e41 	.word	0x08008e41
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	08008e41 	.word	0x08008e41
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008e41 	.word	0x08008e41
 8008e38:	08008e41 	.word	0x08008e41
 8008e3c:	08008e41 	.word	0x08008e41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e40:	bf00      	nop
  }

  return (USBD_OK);
 8008e42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4813      	ldr	r0, [pc, #76]	; (8008eac <CDC_Receive_FS+0x5c>)
 8008e5e:	f7fe fbc1 	bl	80075e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e62:	4812      	ldr	r0, [pc, #72]	; (8008eac <CDC_Receive_FS+0x5c>)
 8008e64:	f7fe fc22 	bl	80076ac <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f81f 	bl	8008eb4 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b31      	cmp	r3, #49	; 0x31
 8008e7c:	d106      	bne.n	8008e8c <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e84:	480a      	ldr	r0, [pc, #40]	; (8008eb0 <CDC_Receive_FS+0x60>)
 8008e86:	f7f9 fb3f 	bl	8002508 <HAL_GPIO_WritePin>
 8008e8a:	e009      	b.n	8008ea0 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b30      	cmp	r3, #48	; 0x30
 8008e92:	d105      	bne.n	8008ea0 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008e94:	2200      	movs	r2, #0
 8008e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e9a:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <CDC_Receive_FS+0x60>)
 8008e9c:	f7f9 fb34 	bl	8002508 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8008ea0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000288 	.word	0x20000288
 8008eb0:	40020c00 	.word	0x40020c00

08008eb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <CDC_Transmit_FS+0x48>)
 8008ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e00b      	b.n	8008ef2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008eda:	887b      	ldrh	r3, [r7, #2]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	4806      	ldr	r0, [pc, #24]	; (8008efc <CDC_Transmit_FS+0x48>)
 8008ee2:	f7fe fb5d 	bl	80075a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ee6:	4805      	ldr	r0, [pc, #20]	; (8008efc <CDC_Transmit_FS+0x48>)
 8008ee8:	f7fe fb9a 	bl	8007620 <USBD_CDC_TransmitPacket>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000288 	.word	0x20000288

08008f00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2212      	movs	r2, #18
 8008f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f36:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	200000d8 	.word	0x200000d8

08008f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2204      	movs	r2, #4
 8008f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	200000ec 	.word	0x200000ec

08008f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d105      	bne.n	8008f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	4907      	ldr	r1, [pc, #28]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f82:	4808      	ldr	r0, [pc, #32]	; (8008fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f84:	f7ff fdda 	bl	8008b3c <USBD_GetString>
 8008f88:	e004      	b.n	8008f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	4904      	ldr	r1, [pc, #16]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f8e:	4805      	ldr	r0, [pc, #20]	; (8008fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f90:	f7ff fdd4 	bl	8008b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001564 	.word	0x20001564
 8008fa4:	0800a350 	.word	0x0800a350

08008fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	6039      	str	r1, [r7, #0]
 8008fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	4904      	ldr	r1, [pc, #16]	; (8008fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fb8:	4804      	ldr	r0, [pc, #16]	; (8008fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fba:	f7ff fdbf 	bl	8008b3c <USBD_GetString>
  return USBD_StrDesc;
 8008fbe:	4b02      	ldr	r3, [pc, #8]	; (8008fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20001564 	.word	0x20001564
 8008fcc:	0800a368 	.word	0x0800a368

08008fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	221a      	movs	r2, #26
 8008fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fe2:	f000 f843 	bl	800906c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fe6:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	200000f0 	.word	0x200000f0

08008ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4907      	ldr	r1, [pc, #28]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800900a:	4808      	ldr	r0, [pc, #32]	; (800902c <USBD_FS_ConfigStrDescriptor+0x38>)
 800900c:	f7ff fd96 	bl	8008b3c <USBD_GetString>
 8009010:	e004      	b.n	800901c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4904      	ldr	r1, [pc, #16]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009016:	4805      	ldr	r0, [pc, #20]	; (800902c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009018:	f7ff fd90 	bl	8008b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20001564 	.word	0x20001564
 800902c:	0800a37c 	.word	0x0800a37c

08009030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d105      	bne.n	800904e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	4907      	ldr	r1, [pc, #28]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009046:	4808      	ldr	r0, [pc, #32]	; (8009068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009048:	f7ff fd78 	bl	8008b3c <USBD_GetString>
 800904c:	e004      	b.n	8009058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4904      	ldr	r1, [pc, #16]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009054:	f7ff fd72 	bl	8008b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20001564 	.word	0x20001564
 8009068:	0800a388 	.word	0x0800a388

0800906c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <Get_SerialNum+0x44>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009078:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <Get_SerialNum+0x48>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800907e:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <Get_SerialNum+0x4c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d009      	beq.n	80090a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009092:	2208      	movs	r2, #8
 8009094:	4909      	ldr	r1, [pc, #36]	; (80090bc <Get_SerialNum+0x50>)
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 f814 	bl	80090c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800909c:	2204      	movs	r2, #4
 800909e:	4908      	ldr	r1, [pc, #32]	; (80090c0 <Get_SerialNum+0x54>)
 80090a0:	68b8      	ldr	r0, [r7, #8]
 80090a2:	f000 f80f 	bl	80090c4 <IntToUnicode>
  }
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	1fff7a10 	.word	0x1fff7a10
 80090b4:	1fff7a14 	.word	0x1fff7a14
 80090b8:	1fff7a18 	.word	0x1fff7a18
 80090bc:	200000f2 	.word	0x200000f2
 80090c0:	20000102 	.word	0x20000102

080090c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]
 80090da:	e027      	b.n	800912c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	0f1b      	lsrs	r3, r3, #28
 80090e0:	2b09      	cmp	r3, #9
 80090e2:	d80b      	bhi.n	80090fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	0f1b      	lsrs	r3, r3, #28
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	4619      	mov	r1, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	440b      	add	r3, r1
 80090f4:	3230      	adds	r2, #48	; 0x30
 80090f6:	b2d2      	uxtb	r2, r2
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	e00a      	b.n	8009112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	0f1b      	lsrs	r3, r3, #28
 8009100:	b2da      	uxtb	r2, r3
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	4619      	mov	r1, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	440b      	add	r3, r1
 800910c:	3237      	adds	r2, #55	; 0x37
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	3301      	adds	r3, #1
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	4413      	add	r3, r2
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	3301      	adds	r3, #1
 800912a:	75fb      	strb	r3, [r7, #23]
 800912c:	7dfa      	ldrb	r2, [r7, #23]
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	429a      	cmp	r2, r3
 8009132:	d3d3      	bcc.n	80090dc <IntToUnicode+0x18>
  }
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
	...

08009144 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	609a      	str	r2, [r3, #8]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009164:	d14b      	bne.n	80091fe <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	4b27      	ldr	r3, [pc, #156]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	4a26      	ldr	r2, [pc, #152]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 8009170:	f043 0301 	orr.w	r3, r3, #1
 8009174:	6313      	str	r3, [r2, #48]	; 0x30
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009188:	2302      	movs	r3, #2
 800918a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918c:	2300      	movs	r3, #0
 800918e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009190:	2300      	movs	r3, #0
 8009192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009194:	230a      	movs	r3, #10
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009198:	f107 0314 	add.w	r3, r7, #20
 800919c:	4619      	mov	r1, r3
 800919e:	481b      	ldr	r0, [pc, #108]	; (800920c <HAL_PCD_MspInit+0xc8>)
 80091a0:	f7f8 fffe 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80091a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091aa:	2302      	movs	r3, #2
 80091ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091ae:	2301      	movs	r3, #1
 80091b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091b2:	2300      	movs	r3, #0
 80091b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091b6:	230a      	movs	r3, #10
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	4619      	mov	r1, r3
 80091c0:	4812      	ldr	r0, [pc, #72]	; (800920c <HAL_PCD_MspInit+0xc8>)
 80091c2:	f7f8 ffed 	bl	80021a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 80091c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ca:	4a0f      	ldr	r2, [pc, #60]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	6353      	str	r3, [r2, #52]	; 0x34
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 80091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091da:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 80091dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e0:	6453      	str	r3, [r2, #68]	; 0x44
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <HAL_PCD_MspInit+0xc4>)
 80091e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	2043      	movs	r0, #67	; 0x43
 80091f4:	f7f8 ff0b 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091f8:	2043      	movs	r0, #67	; 0x43
 80091fa:	f7f8 ff24 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091fe:	bf00      	nop
 8009200:	3728      	adds	r7, #40	; 0x28
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	40023800 	.word	0x40023800
 800920c:	40020000 	.word	0x40020000

08009210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f7fe fb29 	bl	800787e <USBD_LL_SetupStage>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	4413      	add	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	4619      	mov	r1, r3
 800925e:	f7fe fb63 	bl	8007928 <USBD_LL_DataOutStage>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	334c      	adds	r3, #76	; 0x4c
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	4619      	mov	r1, r3
 8009292:	f7fe fbfc 	bl	8007a8e <USBD_LL_DataInStage>
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fd30 	bl	8007d12 <USBD_LL_SOF>
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092c2:	2301      	movs	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	e008      	b.n	80092e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d102      	bne.n	80092e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	e001      	b.n	80092e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092e2:	f7f7 fd57 	bl	8000d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092ec:	7bfa      	ldrb	r2, [r7, #15]
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fcd0 	bl	8007c96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fc78 	bl	8007bf2 <USBD_LL_Reset>
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fccb 	bl	8007cb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a1b      	ldr	r3, [r3, #32]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <HAL_PCD_SuspendCallback+0x48>)
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	4a03      	ldr	r2, [pc, #12]	; (8009354 <HAL_PCD_SuspendCallback+0x48>)
 8009346:	f043 0306 	orr.w	r3, r3, #6
 800934a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	e000ed00 	.word	0xe000ed00

08009358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fcbb 	bl	8007ce2 <USBD_LL_Resume>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fd13 	bl	8007db6 <USBD_LL_IsoOUTIncomplete>
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	4611      	mov	r1, r2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fccf 	bl	8007d52 <USBD_LL_IsoINIncomplete>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fd25 	bl	8007e1a <USBD_LL_DevConnected>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fd22 	bl	8007e30 <USBD_LL_DevDisconnected>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d13c      	bne.n	800947e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009404:	4a20      	ldr	r2, [pc, #128]	; (8009488 <USBD_LL_Init+0x94>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <USBD_LL_Init+0x94>)
 8009410:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009414:	4b1c      	ldr	r3, [pc, #112]	; (8009488 <USBD_LL_Init+0x94>)
 8009416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800941a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <USBD_LL_Init+0x94>)
 800941e:	2204      	movs	r2, #4
 8009420:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009422:	4b19      	ldr	r3, [pc, #100]	; (8009488 <USBD_LL_Init+0x94>)
 8009424:	2202      	movs	r2, #2
 8009426:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009428:	4b17      	ldr	r3, [pc, #92]	; (8009488 <USBD_LL_Init+0x94>)
 800942a:	2200      	movs	r2, #0
 800942c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800942e:	4b16      	ldr	r3, [pc, #88]	; (8009488 <USBD_LL_Init+0x94>)
 8009430:	2202      	movs	r2, #2
 8009432:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009434:	4b14      	ldr	r3, [pc, #80]	; (8009488 <USBD_LL_Init+0x94>)
 8009436:	2200      	movs	r2, #0
 8009438:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800943a:	4b13      	ldr	r3, [pc, #76]	; (8009488 <USBD_LL_Init+0x94>)
 800943c:	2200      	movs	r2, #0
 800943e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009440:	4b11      	ldr	r3, [pc, #68]	; (8009488 <USBD_LL_Init+0x94>)
 8009442:	2200      	movs	r2, #0
 8009444:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009446:	4b10      	ldr	r3, [pc, #64]	; (8009488 <USBD_LL_Init+0x94>)
 8009448:	2200      	movs	r2, #0
 800944a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <USBD_LL_Init+0x94>)
 800944e:	2200      	movs	r2, #0
 8009450:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009452:	480d      	ldr	r0, [pc, #52]	; (8009488 <USBD_LL_Init+0x94>)
 8009454:	f7f9 f871 	bl	800253a <HAL_PCD_Init>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800945e:	f7f7 fc99 	bl	8000d94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009462:	2180      	movs	r1, #128	; 0x80
 8009464:	4808      	ldr	r0, [pc, #32]	; (8009488 <USBD_LL_Init+0x94>)
 8009466:	f7fa fac8 	bl	80039fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800946a:	2240      	movs	r2, #64	; 0x40
 800946c:	2100      	movs	r1, #0
 800946e:	4806      	ldr	r0, [pc, #24]	; (8009488 <USBD_LL_Init+0x94>)
 8009470:	f7fa fa7c 	bl	800396c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	2101      	movs	r1, #1
 8009478:	4803      	ldr	r0, [pc, #12]	; (8009488 <USBD_LL_Init+0x94>)
 800947a:	f7fa fa77 	bl	800396c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20001764 	.word	0x20001764

0800948c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f9 f966 	bl	8002774 <HAL_PCD_Start>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 f942 	bl	8009738 <USBD_Get_USB_Status>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	4608      	mov	r0, r1
 80094cc:	4611      	mov	r1, r2
 80094ce:	461a      	mov	r2, r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	70fb      	strb	r3, [r7, #3]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70bb      	strb	r3, [r7, #2]
 80094d8:	4613      	mov	r3, r2
 80094da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094ea:	78bb      	ldrb	r3, [r7, #2]
 80094ec:	883a      	ldrh	r2, [r7, #0]
 80094ee:	78f9      	ldrb	r1, [r7, #3]
 80094f0:	f7f9 fe37 	bl	8003162 <HAL_PCD_EP_Open>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f91c 	bl	8009738 <USBD_Get_USB_Status>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009504:	7bbb      	ldrb	r3, [r7, #14]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009528:	78fa      	ldrb	r2, [r7, #3]
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f7f9 fe80 	bl	8003232 <HAL_PCD_EP_Close>
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 f8fd 	bl	8009738 <USBD_Get_USB_Status>
 800953e:	4603      	mov	r3, r0
 8009540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009542:	7bbb      	ldrb	r3, [r7, #14]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f7f9 ff58 	bl	8003420 <HAL_PCD_EP_SetStall>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f8de 	bl	8009738 <USBD_Get_USB_Status>
 800957c:	4603      	mov	r3, r0
 800957e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009580:	7bbb      	ldrb	r3, [r7, #14]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7f9 ff9d 	bl	80034e8 <HAL_PCD_EP_ClrStall>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 f8bf 	bl	8009738 <USBD_Get_USB_Status>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095be:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	da0b      	bge.n	80095fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	333e      	adds	r3, #62	; 0x3e
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	e00b      	b.n	8009614 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	4613      	mov	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009612:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f7f9 fd6a 	bl	8003118 <HAL_PCD_SetAddress>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 f874 	bl	8009738 <USBD_Get_USB_Status>
 8009650:	4603      	mov	r3, r0
 8009652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009654:	7bbb      	ldrb	r3, [r7, #14]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b086      	sub	sp, #24
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	460b      	mov	r3, r1
 800966c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800967c:	7af9      	ldrb	r1, [r7, #11]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f7f9 fe83 	bl	800338c <HAL_PCD_EP_Transmit>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f853 	bl	8009738 <USBD_Get_USB_Status>
 8009692:	4603      	mov	r3, r0
 8009694:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009696:	7dbb      	ldrb	r3, [r7, #22]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096be:	7af9      	ldrb	r1, [r7, #11]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	f7f9 fdff 	bl	80032c6 <HAL_PCD_EP_Receive>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f832 	bl	8009738 <USBD_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f9 fe2f 	bl	800335c <HAL_PCD_EP_GetRxCount>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009710:	4b03      	ldr	r3, [pc, #12]	; (8009720 <USBD_static_malloc+0x18>)
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	20001c70 	.word	0x20001c70

08009724 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	2b03      	cmp	r3, #3
 800974a:	d817      	bhi.n	800977c <USBD_Get_USB_Status+0x44>
 800974c:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <USBD_Get_USB_Status+0x1c>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	08009765 	.word	0x08009765
 8009758:	0800976b 	.word	0x0800976b
 800975c:	08009771 	.word	0x08009771
 8009760:	08009777 	.word	0x08009777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
    break;
 8009768:	e00b      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800976a:	2303      	movs	r3, #3
 800976c:	73fb      	strb	r3, [r7, #15]
    break;
 800976e:	e008      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009770:	2301      	movs	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]
    break;
 8009774:	e005      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009776:	2303      	movs	r3, #3
 8009778:	73fb      	strb	r3, [r7, #15]
    break;
 800977a:	e002      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800977c:	2303      	movs	r3, #3
 800977e:	73fb      	strb	r3, [r7, #15]
    break;
 8009780:	bf00      	nop
  }
  return usb_status;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <atoi>:
 8009790:	220a      	movs	r2, #10
 8009792:	2100      	movs	r1, #0
 8009794:	f000 b882 	b.w	800989c <strtol>

08009798 <_strtol_l.constprop.0>:
 8009798:	2b01      	cmp	r3, #1
 800979a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800979e:	d001      	beq.n	80097a4 <_strtol_l.constprop.0+0xc>
 80097a0:	2b24      	cmp	r3, #36	; 0x24
 80097a2:	d906      	bls.n	80097b2 <_strtol_l.constprop.0+0x1a>
 80097a4:	f000 f8ac 	bl	8009900 <__errno>
 80097a8:	2316      	movs	r3, #22
 80097aa:	6003      	str	r3, [r0, #0]
 80097ac:	2000      	movs	r0, #0
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009898 <_strtol_l.constprop.0+0x100>
 80097b6:	460d      	mov	r5, r1
 80097b8:	462e      	mov	r6, r5
 80097ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80097c2:	f017 0708 	ands.w	r7, r7, #8
 80097c6:	d1f7      	bne.n	80097b8 <_strtol_l.constprop.0+0x20>
 80097c8:	2c2d      	cmp	r4, #45	; 0x2d
 80097ca:	d132      	bne.n	8009832 <_strtol_l.constprop.0+0x9a>
 80097cc:	782c      	ldrb	r4, [r5, #0]
 80097ce:	2701      	movs	r7, #1
 80097d0:	1cb5      	adds	r5, r6, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d05b      	beq.n	800988e <_strtol_l.constprop.0+0xf6>
 80097d6:	2b10      	cmp	r3, #16
 80097d8:	d109      	bne.n	80097ee <_strtol_l.constprop.0+0x56>
 80097da:	2c30      	cmp	r4, #48	; 0x30
 80097dc:	d107      	bne.n	80097ee <_strtol_l.constprop.0+0x56>
 80097de:	782c      	ldrb	r4, [r5, #0]
 80097e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80097e4:	2c58      	cmp	r4, #88	; 0x58
 80097e6:	d14d      	bne.n	8009884 <_strtol_l.constprop.0+0xec>
 80097e8:	786c      	ldrb	r4, [r5, #1]
 80097ea:	2310      	movs	r3, #16
 80097ec:	3502      	adds	r5, #2
 80097ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80097f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80097f6:	f04f 0e00 	mov.w	lr, #0
 80097fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80097fe:	4676      	mov	r6, lr
 8009800:	fb03 8a19 	mls	sl, r3, r9, r8
 8009804:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009808:	f1bc 0f09 	cmp.w	ip, #9
 800980c:	d816      	bhi.n	800983c <_strtol_l.constprop.0+0xa4>
 800980e:	4664      	mov	r4, ip
 8009810:	42a3      	cmp	r3, r4
 8009812:	dd24      	ble.n	800985e <_strtol_l.constprop.0+0xc6>
 8009814:	f1be 3fff 	cmp.w	lr, #4294967295
 8009818:	d008      	beq.n	800982c <_strtol_l.constprop.0+0x94>
 800981a:	45b1      	cmp	r9, r6
 800981c:	d31c      	bcc.n	8009858 <_strtol_l.constprop.0+0xc0>
 800981e:	d101      	bne.n	8009824 <_strtol_l.constprop.0+0x8c>
 8009820:	45a2      	cmp	sl, r4
 8009822:	db19      	blt.n	8009858 <_strtol_l.constprop.0+0xc0>
 8009824:	fb06 4603 	mla	r6, r6, r3, r4
 8009828:	f04f 0e01 	mov.w	lr, #1
 800982c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009830:	e7e8      	b.n	8009804 <_strtol_l.constprop.0+0x6c>
 8009832:	2c2b      	cmp	r4, #43	; 0x2b
 8009834:	bf04      	itt	eq
 8009836:	782c      	ldrbeq	r4, [r5, #0]
 8009838:	1cb5      	addeq	r5, r6, #2
 800983a:	e7ca      	b.n	80097d2 <_strtol_l.constprop.0+0x3a>
 800983c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009840:	f1bc 0f19 	cmp.w	ip, #25
 8009844:	d801      	bhi.n	800984a <_strtol_l.constprop.0+0xb2>
 8009846:	3c37      	subs	r4, #55	; 0x37
 8009848:	e7e2      	b.n	8009810 <_strtol_l.constprop.0+0x78>
 800984a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800984e:	f1bc 0f19 	cmp.w	ip, #25
 8009852:	d804      	bhi.n	800985e <_strtol_l.constprop.0+0xc6>
 8009854:	3c57      	subs	r4, #87	; 0x57
 8009856:	e7db      	b.n	8009810 <_strtol_l.constprop.0+0x78>
 8009858:	f04f 3eff 	mov.w	lr, #4294967295
 800985c:	e7e6      	b.n	800982c <_strtol_l.constprop.0+0x94>
 800985e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009862:	d105      	bne.n	8009870 <_strtol_l.constprop.0+0xd8>
 8009864:	2322      	movs	r3, #34	; 0x22
 8009866:	6003      	str	r3, [r0, #0]
 8009868:	4646      	mov	r6, r8
 800986a:	b942      	cbnz	r2, 800987e <_strtol_l.constprop.0+0xe6>
 800986c:	4630      	mov	r0, r6
 800986e:	e79e      	b.n	80097ae <_strtol_l.constprop.0+0x16>
 8009870:	b107      	cbz	r7, 8009874 <_strtol_l.constprop.0+0xdc>
 8009872:	4276      	negs	r6, r6
 8009874:	2a00      	cmp	r2, #0
 8009876:	d0f9      	beq.n	800986c <_strtol_l.constprop.0+0xd4>
 8009878:	f1be 0f00 	cmp.w	lr, #0
 800987c:	d000      	beq.n	8009880 <_strtol_l.constprop.0+0xe8>
 800987e:	1e69      	subs	r1, r5, #1
 8009880:	6011      	str	r1, [r2, #0]
 8009882:	e7f3      	b.n	800986c <_strtol_l.constprop.0+0xd4>
 8009884:	2430      	movs	r4, #48	; 0x30
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1b1      	bne.n	80097ee <_strtol_l.constprop.0+0x56>
 800988a:	2308      	movs	r3, #8
 800988c:	e7af      	b.n	80097ee <_strtol_l.constprop.0+0x56>
 800988e:	2c30      	cmp	r4, #48	; 0x30
 8009890:	d0a5      	beq.n	80097de <_strtol_l.constprop.0+0x46>
 8009892:	230a      	movs	r3, #10
 8009894:	e7ab      	b.n	80097ee <_strtol_l.constprop.0+0x56>
 8009896:	bf00      	nop
 8009898:	0800a3b1 	.word	0x0800a3b1

0800989c <strtol>:
 800989c:	4613      	mov	r3, r2
 800989e:	460a      	mov	r2, r1
 80098a0:	4601      	mov	r1, r0
 80098a2:	4802      	ldr	r0, [pc, #8]	; (80098ac <strtol+0x10>)
 80098a4:	6800      	ldr	r0, [r0, #0]
 80098a6:	f7ff bf77 	b.w	8009798 <_strtol_l.constprop.0>
 80098aa:	bf00      	nop
 80098ac:	20000158 	.word	0x20000158

080098b0 <siprintf>:
 80098b0:	b40e      	push	{r1, r2, r3}
 80098b2:	b500      	push	{lr}
 80098b4:	b09c      	sub	sp, #112	; 0x70
 80098b6:	ab1d      	add	r3, sp, #116	; 0x74
 80098b8:	9002      	str	r0, [sp, #8]
 80098ba:	9006      	str	r0, [sp, #24]
 80098bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098c0:	4809      	ldr	r0, [pc, #36]	; (80098e8 <siprintf+0x38>)
 80098c2:	9107      	str	r1, [sp, #28]
 80098c4:	9104      	str	r1, [sp, #16]
 80098c6:	4909      	ldr	r1, [pc, #36]	; (80098ec <siprintf+0x3c>)
 80098c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098cc:	9105      	str	r1, [sp, #20]
 80098ce:	6800      	ldr	r0, [r0, #0]
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	a902      	add	r1, sp, #8
 80098d4:	f000 f9a0 	bl	8009c18 <_svfiprintf_r>
 80098d8:	9b02      	ldr	r3, [sp, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	b01c      	add	sp, #112	; 0x70
 80098e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e4:	b003      	add	sp, #12
 80098e6:	4770      	bx	lr
 80098e8:	20000158 	.word	0x20000158
 80098ec:	ffff0208 	.word	0xffff0208

080098f0 <memset>:
 80098f0:	4402      	add	r2, r0
 80098f2:	4603      	mov	r3, r0
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d100      	bne.n	80098fa <memset+0xa>
 80098f8:	4770      	bx	lr
 80098fa:	f803 1b01 	strb.w	r1, [r3], #1
 80098fe:	e7f9      	b.n	80098f4 <memset+0x4>

08009900 <__errno>:
 8009900:	4b01      	ldr	r3, [pc, #4]	; (8009908 <__errno+0x8>)
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	20000158 	.word	0x20000158

0800990c <__libc_init_array>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	4d0d      	ldr	r5, [pc, #52]	; (8009944 <__libc_init_array+0x38>)
 8009910:	4c0d      	ldr	r4, [pc, #52]	; (8009948 <__libc_init_array+0x3c>)
 8009912:	1b64      	subs	r4, r4, r5
 8009914:	10a4      	asrs	r4, r4, #2
 8009916:	2600      	movs	r6, #0
 8009918:	42a6      	cmp	r6, r4
 800991a:	d109      	bne.n	8009930 <__libc_init_array+0x24>
 800991c:	4d0b      	ldr	r5, [pc, #44]	; (800994c <__libc_init_array+0x40>)
 800991e:	4c0c      	ldr	r4, [pc, #48]	; (8009950 <__libc_init_array+0x44>)
 8009920:	f000 fc6a 	bl	800a1f8 <_init>
 8009924:	1b64      	subs	r4, r4, r5
 8009926:	10a4      	asrs	r4, r4, #2
 8009928:	2600      	movs	r6, #0
 800992a:	42a6      	cmp	r6, r4
 800992c:	d105      	bne.n	800993a <__libc_init_array+0x2e>
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	f855 3b04 	ldr.w	r3, [r5], #4
 8009934:	4798      	blx	r3
 8009936:	3601      	adds	r6, #1
 8009938:	e7ee      	b.n	8009918 <__libc_init_array+0xc>
 800993a:	f855 3b04 	ldr.w	r3, [r5], #4
 800993e:	4798      	blx	r3
 8009940:	3601      	adds	r6, #1
 8009942:	e7f2      	b.n	800992a <__libc_init_array+0x1e>
 8009944:	0800a4ec 	.word	0x0800a4ec
 8009948:	0800a4ec 	.word	0x0800a4ec
 800994c:	0800a4ec 	.word	0x0800a4ec
 8009950:	0800a4f0 	.word	0x0800a4f0

08009954 <__retarget_lock_acquire_recursive>:
 8009954:	4770      	bx	lr

08009956 <__retarget_lock_release_recursive>:
 8009956:	4770      	bx	lr

08009958 <memcpy>:
 8009958:	440a      	add	r2, r1
 800995a:	4291      	cmp	r1, r2
 800995c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009960:	d100      	bne.n	8009964 <memcpy+0xc>
 8009962:	4770      	bx	lr
 8009964:	b510      	push	{r4, lr}
 8009966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800996a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800996e:	4291      	cmp	r1, r2
 8009970:	d1f9      	bne.n	8009966 <memcpy+0xe>
 8009972:	bd10      	pop	{r4, pc}

08009974 <_free_r>:
 8009974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009976:	2900      	cmp	r1, #0
 8009978:	d044      	beq.n	8009a04 <_free_r+0x90>
 800997a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800997e:	9001      	str	r0, [sp, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f1a1 0404 	sub.w	r4, r1, #4
 8009986:	bfb8      	it	lt
 8009988:	18e4      	addlt	r4, r4, r3
 800998a:	f000 f8df 	bl	8009b4c <__malloc_lock>
 800998e:	4a1e      	ldr	r2, [pc, #120]	; (8009a08 <_free_r+0x94>)
 8009990:	9801      	ldr	r0, [sp, #4]
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	b933      	cbnz	r3, 80099a4 <_free_r+0x30>
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	b003      	add	sp, #12
 800999c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099a0:	f000 b8da 	b.w	8009b58 <__malloc_unlock>
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d908      	bls.n	80099ba <_free_r+0x46>
 80099a8:	6825      	ldr	r5, [r4, #0]
 80099aa:	1961      	adds	r1, r4, r5
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf01      	itttt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	1949      	addeq	r1, r1, r5
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	e7ed      	b.n	8009996 <_free_r+0x22>
 80099ba:	461a      	mov	r2, r3
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b10b      	cbz	r3, 80099c4 <_free_r+0x50>
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x46>
 80099c4:	6811      	ldr	r1, [r2, #0]
 80099c6:	1855      	adds	r5, r2, r1
 80099c8:	42a5      	cmp	r5, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x70>
 80099cc:	6824      	ldr	r4, [r4, #0]
 80099ce:	4421      	add	r1, r4
 80099d0:	1854      	adds	r4, r2, r1
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	d1e0      	bne.n	800999a <_free_r+0x26>
 80099d8:	681c      	ldr	r4, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	6053      	str	r3, [r2, #4]
 80099de:	440c      	add	r4, r1
 80099e0:	6014      	str	r4, [r2, #0]
 80099e2:	e7da      	b.n	800999a <_free_r+0x26>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x78>
 80099e6:	230c      	movs	r3, #12
 80099e8:	6003      	str	r3, [r0, #0]
 80099ea:	e7d6      	b.n	800999a <_free_r+0x26>
 80099ec:	6825      	ldr	r5, [r4, #0]
 80099ee:	1961      	adds	r1, r4, r5
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf04      	itt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	bf04      	itt	eq
 80099fc:	1949      	addeq	r1, r1, r5
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	6054      	str	r4, [r2, #4]
 8009a02:	e7ca      	b.n	800999a <_free_r+0x26>
 8009a04:	b003      	add	sp, #12
 8009a06:	bd30      	pop	{r4, r5, pc}
 8009a08:	20001fd0 	.word	0x20001fd0

08009a0c <sbrk_aligned>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	4e0e      	ldr	r6, [pc, #56]	; (8009a48 <sbrk_aligned+0x3c>)
 8009a10:	460c      	mov	r4, r1
 8009a12:	6831      	ldr	r1, [r6, #0]
 8009a14:	4605      	mov	r5, r0
 8009a16:	b911      	cbnz	r1, 8009a1e <sbrk_aligned+0x12>
 8009a18:	f000 fba6 	bl	800a168 <_sbrk_r>
 8009a1c:	6030      	str	r0, [r6, #0]
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 fba1 	bl	800a168 <_sbrk_r>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d00a      	beq.n	8009a40 <sbrk_aligned+0x34>
 8009a2a:	1cc4      	adds	r4, r0, #3
 8009a2c:	f024 0403 	bic.w	r4, r4, #3
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d007      	beq.n	8009a44 <sbrk_aligned+0x38>
 8009a34:	1a21      	subs	r1, r4, r0
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 fb96 	bl	800a168 <_sbrk_r>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d101      	bne.n	8009a44 <sbrk_aligned+0x38>
 8009a40:	f04f 34ff 	mov.w	r4, #4294967295
 8009a44:	4620      	mov	r0, r4
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	20001fd4 	.word	0x20001fd4

08009a4c <_malloc_r>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	1ccd      	adds	r5, r1, #3
 8009a52:	f025 0503 	bic.w	r5, r5, #3
 8009a56:	3508      	adds	r5, #8
 8009a58:	2d0c      	cmp	r5, #12
 8009a5a:	bf38      	it	cc
 8009a5c:	250c      	movcc	r5, #12
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	4607      	mov	r7, r0
 8009a62:	db01      	blt.n	8009a68 <_malloc_r+0x1c>
 8009a64:	42a9      	cmp	r1, r5
 8009a66:	d905      	bls.n	8009a74 <_malloc_r+0x28>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	2600      	movs	r6, #0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b48 <_malloc_r+0xfc>
 8009a78:	f000 f868 	bl	8009b4c <__malloc_lock>
 8009a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a80:	461c      	mov	r4, r3
 8009a82:	bb5c      	cbnz	r4, 8009adc <_malloc_r+0x90>
 8009a84:	4629      	mov	r1, r5
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7ff ffc0 	bl	8009a0c <sbrk_aligned>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	4604      	mov	r4, r0
 8009a90:	d155      	bne.n	8009b3e <_malloc_r+0xf2>
 8009a92:	f8d8 4000 	ldr.w	r4, [r8]
 8009a96:	4626      	mov	r6, r4
 8009a98:	2e00      	cmp	r6, #0
 8009a9a:	d145      	bne.n	8009b28 <_malloc_r+0xdc>
 8009a9c:	2c00      	cmp	r4, #0
 8009a9e:	d048      	beq.n	8009b32 <_malloc_r+0xe6>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	eb04 0903 	add.w	r9, r4, r3
 8009aaa:	f000 fb5d 	bl	800a168 <_sbrk_r>
 8009aae:	4581      	cmp	r9, r0
 8009ab0:	d13f      	bne.n	8009b32 <_malloc_r+0xe6>
 8009ab2:	6821      	ldr	r1, [r4, #0]
 8009ab4:	1a6d      	subs	r5, r5, r1
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7ff ffa7 	bl	8009a0c <sbrk_aligned>
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d037      	beq.n	8009b32 <_malloc_r+0xe6>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	442b      	add	r3, r5
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d038      	beq.n	8009b42 <_malloc_r+0xf6>
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	42a2      	cmp	r2, r4
 8009ad4:	d12b      	bne.n	8009b2e <_malloc_r+0xe2>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	605a      	str	r2, [r3, #4]
 8009ada:	e00f      	b.n	8009afc <_malloc_r+0xb0>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	1b52      	subs	r2, r2, r5
 8009ae0:	d41f      	bmi.n	8009b22 <_malloc_r+0xd6>
 8009ae2:	2a0b      	cmp	r2, #11
 8009ae4:	d917      	bls.n	8009b16 <_malloc_r+0xca>
 8009ae6:	1961      	adds	r1, r4, r5
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	6025      	str	r5, [r4, #0]
 8009aec:	bf18      	it	ne
 8009aee:	6059      	strne	r1, [r3, #4]
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	bf08      	it	eq
 8009af4:	f8c8 1000 	streq.w	r1, [r8]
 8009af8:	5162      	str	r2, [r4, r5]
 8009afa:	604b      	str	r3, [r1, #4]
 8009afc:	4638      	mov	r0, r7
 8009afe:	f104 060b 	add.w	r6, r4, #11
 8009b02:	f000 f829 	bl	8009b58 <__malloc_unlock>
 8009b06:	f026 0607 	bic.w	r6, r6, #7
 8009b0a:	1d23      	adds	r3, r4, #4
 8009b0c:	1af2      	subs	r2, r6, r3
 8009b0e:	d0ae      	beq.n	8009a6e <_malloc_r+0x22>
 8009b10:	1b9b      	subs	r3, r3, r6
 8009b12:	50a3      	str	r3, [r4, r2]
 8009b14:	e7ab      	b.n	8009a6e <_malloc_r+0x22>
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	6862      	ldr	r2, [r4, #4]
 8009b1a:	d1dd      	bne.n	8009ad8 <_malloc_r+0x8c>
 8009b1c:	f8c8 2000 	str.w	r2, [r8]
 8009b20:	e7ec      	b.n	8009afc <_malloc_r+0xb0>
 8009b22:	4623      	mov	r3, r4
 8009b24:	6864      	ldr	r4, [r4, #4]
 8009b26:	e7ac      	b.n	8009a82 <_malloc_r+0x36>
 8009b28:	4634      	mov	r4, r6
 8009b2a:	6876      	ldr	r6, [r6, #4]
 8009b2c:	e7b4      	b.n	8009a98 <_malloc_r+0x4c>
 8009b2e:	4613      	mov	r3, r2
 8009b30:	e7cc      	b.n	8009acc <_malloc_r+0x80>
 8009b32:	230c      	movs	r3, #12
 8009b34:	603b      	str	r3, [r7, #0]
 8009b36:	4638      	mov	r0, r7
 8009b38:	f000 f80e 	bl	8009b58 <__malloc_unlock>
 8009b3c:	e797      	b.n	8009a6e <_malloc_r+0x22>
 8009b3e:	6025      	str	r5, [r4, #0]
 8009b40:	e7dc      	b.n	8009afc <_malloc_r+0xb0>
 8009b42:	605b      	str	r3, [r3, #4]
 8009b44:	deff      	udf	#255	; 0xff
 8009b46:	bf00      	nop
 8009b48:	20001fd0 	.word	0x20001fd0

08009b4c <__malloc_lock>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	; (8009b54 <__malloc_lock+0x8>)
 8009b4e:	f7ff bf01 	b.w	8009954 <__retarget_lock_acquire_recursive>
 8009b52:	bf00      	nop
 8009b54:	20001fcc 	.word	0x20001fcc

08009b58 <__malloc_unlock>:
 8009b58:	4801      	ldr	r0, [pc, #4]	; (8009b60 <__malloc_unlock+0x8>)
 8009b5a:	f7ff befc 	b.w	8009956 <__retarget_lock_release_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20001fcc 	.word	0x20001fcc

08009b64 <__ssputs_r>:
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	688e      	ldr	r6, [r1, #8]
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	42be      	cmp	r6, r7
 8009b6e:	680b      	ldr	r3, [r1, #0]
 8009b70:	4682      	mov	sl, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	4690      	mov	r8, r2
 8009b76:	d82c      	bhi.n	8009bd2 <__ssputs_r+0x6e>
 8009b78:	898a      	ldrh	r2, [r1, #12]
 8009b7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b7e:	d026      	beq.n	8009bce <__ssputs_r+0x6a>
 8009b80:	6965      	ldr	r5, [r4, #20]
 8009b82:	6909      	ldr	r1, [r1, #16]
 8009b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b88:	eba3 0901 	sub.w	r9, r3, r1
 8009b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b90:	1c7b      	adds	r3, r7, #1
 8009b92:	444b      	add	r3, r9
 8009b94:	106d      	asrs	r5, r5, #1
 8009b96:	429d      	cmp	r5, r3
 8009b98:	bf38      	it	cc
 8009b9a:	461d      	movcc	r5, r3
 8009b9c:	0553      	lsls	r3, r2, #21
 8009b9e:	d527      	bpl.n	8009bf0 <__ssputs_r+0x8c>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7ff ff53 	bl	8009a4c <_malloc_r>
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	b360      	cbz	r0, 8009c04 <__ssputs_r+0xa0>
 8009baa:	6921      	ldr	r1, [r4, #16]
 8009bac:	464a      	mov	r2, r9
 8009bae:	f7ff fed3 	bl	8009958 <memcpy>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	6126      	str	r6, [r4, #16]
 8009bc0:	6165      	str	r5, [r4, #20]
 8009bc2:	444e      	add	r6, r9
 8009bc4:	eba5 0509 	sub.w	r5, r5, r9
 8009bc8:	6026      	str	r6, [r4, #0]
 8009bca:	60a5      	str	r5, [r4, #8]
 8009bcc:	463e      	mov	r6, r7
 8009bce:	42be      	cmp	r6, r7
 8009bd0:	d900      	bls.n	8009bd4 <__ssputs_r+0x70>
 8009bd2:	463e      	mov	r6, r7
 8009bd4:	6820      	ldr	r0, [r4, #0]
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	4641      	mov	r1, r8
 8009bda:	f000 faab 	bl	800a134 <memmove>
 8009bde:	68a3      	ldr	r3, [r4, #8]
 8009be0:	1b9b      	subs	r3, r3, r6
 8009be2:	60a3      	str	r3, [r4, #8]
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	4433      	add	r3, r6
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	2000      	movs	r0, #0
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	f000 fac9 	bl	800a188 <_realloc_r>
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d1e0      	bne.n	8009bbe <__ssputs_r+0x5a>
 8009bfc:	6921      	ldr	r1, [r4, #16]
 8009bfe:	4650      	mov	r0, sl
 8009c00:	f7ff feb8 	bl	8009974 <_free_r>
 8009c04:	230c      	movs	r3, #12
 8009c06:	f8ca 3000 	str.w	r3, [sl]
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	f04f 30ff 	mov.w	r0, #4294967295
 8009c16:	e7e9      	b.n	8009bec <__ssputs_r+0x88>

08009c18 <_svfiprintf_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	4698      	mov	r8, r3
 8009c1e:	898b      	ldrh	r3, [r1, #12]
 8009c20:	061b      	lsls	r3, r3, #24
 8009c22:	b09d      	sub	sp, #116	; 0x74
 8009c24:	4607      	mov	r7, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	4614      	mov	r4, r2
 8009c2a:	d50e      	bpl.n	8009c4a <_svfiprintf_r+0x32>
 8009c2c:	690b      	ldr	r3, [r1, #16]
 8009c2e:	b963      	cbnz	r3, 8009c4a <_svfiprintf_r+0x32>
 8009c30:	2140      	movs	r1, #64	; 0x40
 8009c32:	f7ff ff0b 	bl	8009a4c <_malloc_r>
 8009c36:	6028      	str	r0, [r5, #0]
 8009c38:	6128      	str	r0, [r5, #16]
 8009c3a:	b920      	cbnz	r0, 8009c46 <_svfiprintf_r+0x2e>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	e0d0      	b.n	8009de8 <_svfiprintf_r+0x1d0>
 8009c46:	2340      	movs	r3, #64	; 0x40
 8009c48:	616b      	str	r3, [r5, #20]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4e:	2320      	movs	r3, #32
 8009c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c58:	2330      	movs	r3, #48	; 0x30
 8009c5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e00 <_svfiprintf_r+0x1e8>
 8009c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c62:	f04f 0901 	mov.w	r9, #1
 8009c66:	4623      	mov	r3, r4
 8009c68:	469a      	mov	sl, r3
 8009c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6e:	b10a      	cbz	r2, 8009c74 <_svfiprintf_r+0x5c>
 8009c70:	2a25      	cmp	r2, #37	; 0x25
 8009c72:	d1f9      	bne.n	8009c68 <_svfiprintf_r+0x50>
 8009c74:	ebba 0b04 	subs.w	fp, sl, r4
 8009c78:	d00b      	beq.n	8009c92 <_svfiprintf_r+0x7a>
 8009c7a:	465b      	mov	r3, fp
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ff6f 	bl	8009b64 <__ssputs_r>
 8009c86:	3001      	adds	r0, #1
 8009c88:	f000 80a9 	beq.w	8009dde <_svfiprintf_r+0x1c6>
 8009c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8e:	445a      	add	r2, fp
 8009c90:	9209      	str	r2, [sp, #36]	; 0x24
 8009c92:	f89a 3000 	ldrb.w	r3, [sl]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 80a1 	beq.w	8009dde <_svfiprintf_r+0x1c6>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca6:	f10a 0a01 	add.w	sl, sl, #1
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	9307      	str	r3, [sp, #28]
 8009cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb4:	4654      	mov	r4, sl
 8009cb6:	2205      	movs	r2, #5
 8009cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbc:	4850      	ldr	r0, [pc, #320]	; (8009e00 <_svfiprintf_r+0x1e8>)
 8009cbe:	f7f6 fa8f 	bl	80001e0 <memchr>
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	b9d8      	cbnz	r0, 8009cfe <_svfiprintf_r+0xe6>
 8009cc6:	06d0      	lsls	r0, r2, #27
 8009cc8:	bf44      	itt	mi
 8009cca:	2320      	movmi	r3, #32
 8009ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd0:	0711      	lsls	r1, r2, #28
 8009cd2:	bf44      	itt	mi
 8009cd4:	232b      	movmi	r3, #43	; 0x2b
 8009cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cda:	f89a 3000 	ldrb.w	r3, [sl]
 8009cde:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce0:	d015      	beq.n	8009d0e <_svfiprintf_r+0xf6>
 8009ce2:	9a07      	ldr	r2, [sp, #28]
 8009ce4:	4654      	mov	r4, sl
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	f04f 0c0a 	mov.w	ip, #10
 8009cec:	4621      	mov	r1, r4
 8009cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cf2:	3b30      	subs	r3, #48	; 0x30
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d94d      	bls.n	8009d94 <_svfiprintf_r+0x17c>
 8009cf8:	b1b0      	cbz	r0, 8009d28 <_svfiprintf_r+0x110>
 8009cfa:	9207      	str	r2, [sp, #28]
 8009cfc:	e014      	b.n	8009d28 <_svfiprintf_r+0x110>
 8009cfe:	eba0 0308 	sub.w	r3, r0, r8
 8009d02:	fa09 f303 	lsl.w	r3, r9, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	46a2      	mov	sl, r4
 8009d0c:	e7d2      	b.n	8009cb4 <_svfiprintf_r+0x9c>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d19      	adds	r1, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9103      	str	r1, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfbb      	ittet	lt
 8009d1a:	425b      	neglt	r3, r3
 8009d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d20:	9307      	strge	r3, [sp, #28]
 8009d22:	9307      	strlt	r3, [sp, #28]
 8009d24:	bfb8      	it	lt
 8009d26:	9204      	strlt	r2, [sp, #16]
 8009d28:	7823      	ldrb	r3, [r4, #0]
 8009d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d2c:	d10c      	bne.n	8009d48 <_svfiprintf_r+0x130>
 8009d2e:	7863      	ldrb	r3, [r4, #1]
 8009d30:	2b2a      	cmp	r3, #42	; 0x2a
 8009d32:	d134      	bne.n	8009d9e <_svfiprintf_r+0x186>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	9203      	str	r2, [sp, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfb8      	it	lt
 8009d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d44:	3402      	adds	r4, #2
 8009d46:	9305      	str	r3, [sp, #20]
 8009d48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e10 <_svfiprintf_r+0x1f8>
 8009d4c:	7821      	ldrb	r1, [r4, #0]
 8009d4e:	2203      	movs	r2, #3
 8009d50:	4650      	mov	r0, sl
 8009d52:	f7f6 fa45 	bl	80001e0 <memchr>
 8009d56:	b138      	cbz	r0, 8009d68 <_svfiprintf_r+0x150>
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	eba0 000a 	sub.w	r0, r0, sl
 8009d5e:	2240      	movs	r2, #64	; 0x40
 8009d60:	4082      	lsls	r2, r0
 8009d62:	4313      	orrs	r3, r2
 8009d64:	3401      	adds	r4, #1
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6c:	4825      	ldr	r0, [pc, #148]	; (8009e04 <_svfiprintf_r+0x1ec>)
 8009d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d72:	2206      	movs	r2, #6
 8009d74:	f7f6 fa34 	bl	80001e0 <memchr>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d038      	beq.n	8009dee <_svfiprintf_r+0x1d6>
 8009d7c:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <_svfiprintf_r+0x1f0>)
 8009d7e:	bb1b      	cbnz	r3, 8009dc8 <_svfiprintf_r+0x1b0>
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	3307      	adds	r3, #7
 8009d84:	f023 0307 	bic.w	r3, r3, #7
 8009d88:	3308      	adds	r3, #8
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8e:	4433      	add	r3, r6
 8009d90:	9309      	str	r3, [sp, #36]	; 0x24
 8009d92:	e768      	b.n	8009c66 <_svfiprintf_r+0x4e>
 8009d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d98:	460c      	mov	r4, r1
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	e7a6      	b.n	8009cec <_svfiprintf_r+0xd4>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	3401      	adds	r4, #1
 8009da2:	9305      	str	r3, [sp, #20]
 8009da4:	4619      	mov	r1, r3
 8009da6:	f04f 0c0a 	mov.w	ip, #10
 8009daa:	4620      	mov	r0, r4
 8009dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db0:	3a30      	subs	r2, #48	; 0x30
 8009db2:	2a09      	cmp	r2, #9
 8009db4:	d903      	bls.n	8009dbe <_svfiprintf_r+0x1a6>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0c6      	beq.n	8009d48 <_svfiprintf_r+0x130>
 8009dba:	9105      	str	r1, [sp, #20]
 8009dbc:	e7c4      	b.n	8009d48 <_svfiprintf_r+0x130>
 8009dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e7f0      	b.n	8009daa <_svfiprintf_r+0x192>
 8009dc8:	ab03      	add	r3, sp, #12
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4b0f      	ldr	r3, [pc, #60]	; (8009e0c <_svfiprintf_r+0x1f4>)
 8009dd0:	a904      	add	r1, sp, #16
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	1c42      	adds	r2, r0, #1
 8009dda:	4606      	mov	r6, r0
 8009ddc:	d1d6      	bne.n	8009d8c <_svfiprintf_r+0x174>
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	065b      	lsls	r3, r3, #25
 8009de2:	f53f af2d 	bmi.w	8009c40 <_svfiprintf_r+0x28>
 8009de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de8:	b01d      	add	sp, #116	; 0x74
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dee:	ab03      	add	r3, sp, #12
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	462a      	mov	r2, r5
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_svfiprintf_r+0x1f4>)
 8009df6:	a904      	add	r1, sp, #16
 8009df8:	4638      	mov	r0, r7
 8009dfa:	f000 f879 	bl	8009ef0 <_printf_i>
 8009dfe:	e7eb      	b.n	8009dd8 <_svfiprintf_r+0x1c0>
 8009e00:	0800a4b1 	.word	0x0800a4b1
 8009e04:	0800a4bb 	.word	0x0800a4bb
 8009e08:	00000000 	.word	0x00000000
 8009e0c:	08009b65 	.word	0x08009b65
 8009e10:	0800a4b7 	.word	0x0800a4b7

08009e14 <_printf_common>:
 8009e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	4616      	mov	r6, r2
 8009e1a:	4699      	mov	r9, r3
 8009e1c:	688a      	ldr	r2, [r1, #8]
 8009e1e:	690b      	ldr	r3, [r1, #16]
 8009e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bfb8      	it	lt
 8009e28:	4613      	movlt	r3, r2
 8009e2a:	6033      	str	r3, [r6, #0]
 8009e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e30:	4607      	mov	r7, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	b10a      	cbz	r2, 8009e3a <_printf_common+0x26>
 8009e36:	3301      	adds	r3, #1
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	0699      	lsls	r1, r3, #26
 8009e3e:	bf42      	ittt	mi
 8009e40:	6833      	ldrmi	r3, [r6, #0]
 8009e42:	3302      	addmi	r3, #2
 8009e44:	6033      	strmi	r3, [r6, #0]
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	f015 0506 	ands.w	r5, r5, #6
 8009e4c:	d106      	bne.n	8009e5c <_printf_common+0x48>
 8009e4e:	f104 0a19 	add.w	sl, r4, #25
 8009e52:	68e3      	ldr	r3, [r4, #12]
 8009e54:	6832      	ldr	r2, [r6, #0]
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dc26      	bgt.n	8009eaa <_printf_common+0x96>
 8009e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e60:	1e13      	subs	r3, r2, #0
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	bf18      	it	ne
 8009e66:	2301      	movne	r3, #1
 8009e68:	0692      	lsls	r2, r2, #26
 8009e6a:	d42b      	bmi.n	8009ec4 <_printf_common+0xb0>
 8009e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d01e      	beq.n	8009eb8 <_printf_common+0xa4>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	6922      	ldr	r2, [r4, #16]
 8009e7e:	f003 0306 	and.w	r3, r3, #6
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	bf02      	ittt	eq
 8009e86:	68e5      	ldreq	r5, [r4, #12]
 8009e88:	6833      	ldreq	r3, [r6, #0]
 8009e8a:	1aed      	subeq	r5, r5, r3
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	bf0c      	ite	eq
 8009e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e94:	2500      	movne	r5, #0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	bfc4      	itt	gt
 8009e9a:	1a9b      	subgt	r3, r3, r2
 8009e9c:	18ed      	addgt	r5, r5, r3
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	341a      	adds	r4, #26
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	d11a      	bne.n	8009edc <_printf_common+0xc8>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e008      	b.n	8009ebc <_printf_common+0xa8>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4649      	mov	r1, r9
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	47c0      	blx	r8
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d103      	bne.n	8009ec0 <_printf_common+0xac>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	e7c6      	b.n	8009e52 <_printf_common+0x3e>
 8009ec4:	18e1      	adds	r1, r4, r3
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	2030      	movs	r0, #48	; 0x30
 8009eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ece:	4422      	add	r2, r4
 8009ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ed8:	3302      	adds	r3, #2
 8009eda:	e7c7      	b.n	8009e6c <_printf_common+0x58>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0e6      	beq.n	8009eb8 <_printf_common+0xa4>
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7d9      	b.n	8009ea2 <_printf_common+0x8e>
	...

08009ef0 <_printf_i>:
 8009ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	7e0f      	ldrb	r7, [r1, #24]
 8009ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ef8:	2f78      	cmp	r7, #120	; 0x78
 8009efa:	4691      	mov	r9, r2
 8009efc:	4680      	mov	r8, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	469a      	mov	sl, r3
 8009f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f06:	d807      	bhi.n	8009f18 <_printf_i+0x28>
 8009f08:	2f62      	cmp	r7, #98	; 0x62
 8009f0a:	d80a      	bhi.n	8009f22 <_printf_i+0x32>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f000 80d4 	beq.w	800a0ba <_printf_i+0x1ca>
 8009f12:	2f58      	cmp	r7, #88	; 0x58
 8009f14:	f000 80c0 	beq.w	800a098 <_printf_i+0x1a8>
 8009f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f20:	e03a      	b.n	8009f98 <_printf_i+0xa8>
 8009f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f26:	2b15      	cmp	r3, #21
 8009f28:	d8f6      	bhi.n	8009f18 <_printf_i+0x28>
 8009f2a:	a101      	add	r1, pc, #4	; (adr r1, 8009f30 <_printf_i+0x40>)
 8009f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f19 	.word	0x08009f19
 8009f3c:	08009f19 	.word	0x08009f19
 8009f40:	08009f19 	.word	0x08009f19
 8009f44:	08009f19 	.word	0x08009f19
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f19 	.word	0x08009f19
 8009f50:	08009f19 	.word	0x08009f19
 8009f54:	08009f19 	.word	0x08009f19
 8009f58:	08009f19 	.word	0x08009f19
 8009f5c:	0800a0a1 	.word	0x0800a0a1
 8009f60:	08009fc9 	.word	0x08009fc9
 8009f64:	0800a05b 	.word	0x0800a05b
 8009f68:	08009f19 	.word	0x08009f19
 8009f6c:	08009f19 	.word	0x08009f19
 8009f70:	0800a0c3 	.word	0x0800a0c3
 8009f74:	08009f19 	.word	0x08009f19
 8009f78:	08009fc9 	.word	0x08009fc9
 8009f7c:	08009f19 	.word	0x08009f19
 8009f80:	08009f19 	.word	0x08009f19
 8009f84:	0800a063 	.word	0x0800a063
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	602a      	str	r2, [r5, #0]
 8009f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e09f      	b.n	800a0dc <_printf_i+0x1ec>
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	0607      	lsls	r7, r0, #24
 8009fa2:	f103 0104 	add.w	r1, r3, #4
 8009fa6:	6029      	str	r1, [r5, #0]
 8009fa8:	d501      	bpl.n	8009fae <_printf_i+0xbe>
 8009faa:	681e      	ldr	r6, [r3, #0]
 8009fac:	e003      	b.n	8009fb6 <_printf_i+0xc6>
 8009fae:	0646      	lsls	r6, r0, #25
 8009fb0:	d5fb      	bpl.n	8009faa <_printf_i+0xba>
 8009fb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	da03      	bge.n	8009fc2 <_printf_i+0xd2>
 8009fba:	232d      	movs	r3, #45	; 0x2d
 8009fbc:	4276      	negs	r6, r6
 8009fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc2:	485a      	ldr	r0, [pc, #360]	; (800a12c <_printf_i+0x23c>)
 8009fc4:	230a      	movs	r3, #10
 8009fc6:	e012      	b.n	8009fee <_printf_i+0xfe>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	6820      	ldr	r0, [r4, #0]
 8009fcc:	1d19      	adds	r1, r3, #4
 8009fce:	6029      	str	r1, [r5, #0]
 8009fd0:	0605      	lsls	r5, r0, #24
 8009fd2:	d501      	bpl.n	8009fd8 <_printf_i+0xe8>
 8009fd4:	681e      	ldr	r6, [r3, #0]
 8009fd6:	e002      	b.n	8009fde <_printf_i+0xee>
 8009fd8:	0641      	lsls	r1, r0, #25
 8009fda:	d5fb      	bpl.n	8009fd4 <_printf_i+0xe4>
 8009fdc:	881e      	ldrh	r6, [r3, #0]
 8009fde:	4853      	ldr	r0, [pc, #332]	; (800a12c <_printf_i+0x23c>)
 8009fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8009fe2:	bf0c      	ite	eq
 8009fe4:	2308      	moveq	r3, #8
 8009fe6:	230a      	movne	r3, #10
 8009fe8:	2100      	movs	r1, #0
 8009fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fee:	6865      	ldr	r5, [r4, #4]
 8009ff0:	60a5      	str	r5, [r4, #8]
 8009ff2:	2d00      	cmp	r5, #0
 8009ff4:	bfa2      	ittt	ge
 8009ff6:	6821      	ldrge	r1, [r4, #0]
 8009ff8:	f021 0104 	bicge.w	r1, r1, #4
 8009ffc:	6021      	strge	r1, [r4, #0]
 8009ffe:	b90e      	cbnz	r6, 800a004 <_printf_i+0x114>
 800a000:	2d00      	cmp	r5, #0
 800a002:	d04b      	beq.n	800a09c <_printf_i+0x1ac>
 800a004:	4615      	mov	r5, r2
 800a006:	fbb6 f1f3 	udiv	r1, r6, r3
 800a00a:	fb03 6711 	mls	r7, r3, r1, r6
 800a00e:	5dc7      	ldrb	r7, [r0, r7]
 800a010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a014:	4637      	mov	r7, r6
 800a016:	42bb      	cmp	r3, r7
 800a018:	460e      	mov	r6, r1
 800a01a:	d9f4      	bls.n	800a006 <_printf_i+0x116>
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d10b      	bne.n	800a038 <_printf_i+0x148>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	07de      	lsls	r6, r3, #31
 800a024:	d508      	bpl.n	800a038 <_printf_i+0x148>
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	6861      	ldr	r1, [r4, #4]
 800a02a:	4299      	cmp	r1, r3
 800a02c:	bfde      	ittt	le
 800a02e:	2330      	movle	r3, #48	; 0x30
 800a030:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a034:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a038:	1b52      	subs	r2, r2, r5
 800a03a:	6122      	str	r2, [r4, #16]
 800a03c:	f8cd a000 	str.w	sl, [sp]
 800a040:	464b      	mov	r3, r9
 800a042:	aa03      	add	r2, sp, #12
 800a044:	4621      	mov	r1, r4
 800a046:	4640      	mov	r0, r8
 800a048:	f7ff fee4 	bl	8009e14 <_printf_common>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d14a      	bne.n	800a0e6 <_printf_i+0x1f6>
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	b004      	add	sp, #16
 800a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	f043 0320 	orr.w	r3, r3, #32
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	4833      	ldr	r0, [pc, #204]	; (800a130 <_printf_i+0x240>)
 800a064:	2778      	movs	r7, #120	; 0x78
 800a066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	6829      	ldr	r1, [r5, #0]
 800a06e:	061f      	lsls	r7, r3, #24
 800a070:	f851 6b04 	ldr.w	r6, [r1], #4
 800a074:	d402      	bmi.n	800a07c <_printf_i+0x18c>
 800a076:	065f      	lsls	r7, r3, #25
 800a078:	bf48      	it	mi
 800a07a:	b2b6      	uxthmi	r6, r6
 800a07c:	07df      	lsls	r7, r3, #31
 800a07e:	bf48      	it	mi
 800a080:	f043 0320 	orrmi.w	r3, r3, #32
 800a084:	6029      	str	r1, [r5, #0]
 800a086:	bf48      	it	mi
 800a088:	6023      	strmi	r3, [r4, #0]
 800a08a:	b91e      	cbnz	r6, 800a094 <_printf_i+0x1a4>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	f023 0320 	bic.w	r3, r3, #32
 800a092:	6023      	str	r3, [r4, #0]
 800a094:	2310      	movs	r3, #16
 800a096:	e7a7      	b.n	8009fe8 <_printf_i+0xf8>
 800a098:	4824      	ldr	r0, [pc, #144]	; (800a12c <_printf_i+0x23c>)
 800a09a:	e7e4      	b.n	800a066 <_printf_i+0x176>
 800a09c:	4615      	mov	r5, r2
 800a09e:	e7bd      	b.n	800a01c <_printf_i+0x12c>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	6826      	ldr	r6, [r4, #0]
 800a0a4:	6961      	ldr	r1, [r4, #20]
 800a0a6:	1d18      	adds	r0, r3, #4
 800a0a8:	6028      	str	r0, [r5, #0]
 800a0aa:	0635      	lsls	r5, r6, #24
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	d501      	bpl.n	800a0b4 <_printf_i+0x1c4>
 800a0b0:	6019      	str	r1, [r3, #0]
 800a0b2:	e002      	b.n	800a0ba <_printf_i+0x1ca>
 800a0b4:	0670      	lsls	r0, r6, #25
 800a0b6:	d5fb      	bpl.n	800a0b0 <_printf_i+0x1c0>
 800a0b8:	8019      	strh	r1, [r3, #0]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	4615      	mov	r5, r2
 800a0c0:	e7bc      	b.n	800a03c <_printf_i+0x14c>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	1d1a      	adds	r2, r3, #4
 800a0c6:	602a      	str	r2, [r5, #0]
 800a0c8:	681d      	ldr	r5, [r3, #0]
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f7f6 f886 	bl	80001e0 <memchr>
 800a0d4:	b108      	cbz	r0, 800a0da <_printf_i+0x1ea>
 800a0d6:	1b40      	subs	r0, r0, r5
 800a0d8:	6060      	str	r0, [r4, #4]
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e4:	e7aa      	b.n	800a03c <_printf_i+0x14c>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	47d0      	blx	sl
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d0ad      	beq.n	800a050 <_printf_i+0x160>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	079b      	lsls	r3, r3, #30
 800a0f8:	d413      	bmi.n	800a122 <_printf_i+0x232>
 800a0fa:	68e0      	ldr	r0, [r4, #12]
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	4298      	cmp	r0, r3
 800a100:	bfb8      	it	lt
 800a102:	4618      	movlt	r0, r3
 800a104:	e7a6      	b.n	800a054 <_printf_i+0x164>
 800a106:	2301      	movs	r3, #1
 800a108:	4632      	mov	r2, r6
 800a10a:	4649      	mov	r1, r9
 800a10c:	4640      	mov	r0, r8
 800a10e:	47d0      	blx	sl
 800a110:	3001      	adds	r0, #1
 800a112:	d09d      	beq.n	800a050 <_printf_i+0x160>
 800a114:	3501      	adds	r5, #1
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	9903      	ldr	r1, [sp, #12]
 800a11a:	1a5b      	subs	r3, r3, r1
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dcf2      	bgt.n	800a106 <_printf_i+0x216>
 800a120:	e7eb      	b.n	800a0fa <_printf_i+0x20a>
 800a122:	2500      	movs	r5, #0
 800a124:	f104 0619 	add.w	r6, r4, #25
 800a128:	e7f5      	b.n	800a116 <_printf_i+0x226>
 800a12a:	bf00      	nop
 800a12c:	0800a4c2 	.word	0x0800a4c2
 800a130:	0800a4d3 	.word	0x0800a4d3

0800a134 <memmove>:
 800a134:	4288      	cmp	r0, r1
 800a136:	b510      	push	{r4, lr}
 800a138:	eb01 0402 	add.w	r4, r1, r2
 800a13c:	d902      	bls.n	800a144 <memmove+0x10>
 800a13e:	4284      	cmp	r4, r0
 800a140:	4623      	mov	r3, r4
 800a142:	d807      	bhi.n	800a154 <memmove+0x20>
 800a144:	1e43      	subs	r3, r0, #1
 800a146:	42a1      	cmp	r1, r4
 800a148:	d008      	beq.n	800a15c <memmove+0x28>
 800a14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a152:	e7f8      	b.n	800a146 <memmove+0x12>
 800a154:	4402      	add	r2, r0
 800a156:	4601      	mov	r1, r0
 800a158:	428a      	cmp	r2, r1
 800a15a:	d100      	bne.n	800a15e <memmove+0x2a>
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a166:	e7f7      	b.n	800a158 <memmove+0x24>

0800a168 <_sbrk_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d06      	ldr	r5, [pc, #24]	; (800a184 <_sbrk_r+0x1c>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	602b      	str	r3, [r5, #0]
 800a174:	f7f6 ff98 	bl	80010a8 <_sbrk>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_sbrk_r+0x1a>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_sbrk_r+0x1a>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20001fc8 	.word	0x20001fc8

0800a188 <_realloc_r>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	4680      	mov	r8, r0
 800a18e:	4614      	mov	r4, r2
 800a190:	460e      	mov	r6, r1
 800a192:	b921      	cbnz	r1, 800a19e <_realloc_r+0x16>
 800a194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a198:	4611      	mov	r1, r2
 800a19a:	f7ff bc57 	b.w	8009a4c <_malloc_r>
 800a19e:	b92a      	cbnz	r2, 800a1ac <_realloc_r+0x24>
 800a1a0:	f7ff fbe8 	bl	8009974 <_free_r>
 800a1a4:	4625      	mov	r5, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	f000 f81b 	bl	800a1e6 <_malloc_usable_size_r>
 800a1b0:	4284      	cmp	r4, r0
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	d802      	bhi.n	800a1bc <_realloc_r+0x34>
 800a1b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1ba:	d812      	bhi.n	800a1e2 <_realloc_r+0x5a>
 800a1bc:	4621      	mov	r1, r4
 800a1be:	4640      	mov	r0, r8
 800a1c0:	f7ff fc44 	bl	8009a4c <_malloc_r>
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d0ed      	beq.n	800a1a6 <_realloc_r+0x1e>
 800a1ca:	42bc      	cmp	r4, r7
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	bf28      	it	cs
 800a1d2:	463a      	movcs	r2, r7
 800a1d4:	f7ff fbc0 	bl	8009958 <memcpy>
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7ff fbca 	bl	8009974 <_free_r>
 800a1e0:	e7e1      	b.n	800a1a6 <_realloc_r+0x1e>
 800a1e2:	4635      	mov	r5, r6
 800a1e4:	e7df      	b.n	800a1a6 <_realloc_r+0x1e>

0800a1e6 <_malloc_usable_size_r>:
 800a1e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ea:	1f18      	subs	r0, r3, #4
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bfbc      	itt	lt
 800a1f0:	580b      	ldrlt	r3, [r1, r0]
 800a1f2:	18c0      	addlt	r0, r0, r3
 800a1f4:	4770      	bx	lr
	...

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

0800a204 <_fini>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr
