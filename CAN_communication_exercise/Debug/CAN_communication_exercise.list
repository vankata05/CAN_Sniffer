
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009ea0  08009ea0  00019ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a054  0800a054  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a054  0800a054  0001a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a05c  0800a05c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001ea4  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20002000  20002000  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001571a  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003713  00000000  00000000  000358e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001000  00000000  00000000  00039000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c1b  00000000  00000000  0003a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023bc2  00000000  00000000  0003ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015978  00000000  00000000  0005e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c97ce  00000000  00000000  00074155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004670  00000000  00000000  0013d924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00141f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e88 	.word	0x08009e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08009e88 	.word	0x08009e88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d141      	bne.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80005ac:	f000 ffd7 	bl	800155e <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80005b6:	d102      	bne.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	469c      	mov	ip, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461e      	mov	r6, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	9305      	str	r3, [sp, #20]
 80005f4:	9604      	str	r6, [sp, #16]
 80005f6:	9503      	str	r5, [sp, #12]
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000604:	f008 ff9c 	bl	8009540 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8000612:	bf00      	nop
 8000614:	372c      	adds	r7, #44	; 0x2c
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	2000029b 	.word	0x2000029b
 8000620:	20000178 	.word	0x20000178
 8000624:	200001c0 	.word	0x200001c0
 8000628:	2000029a 	.word	0x2000029a
 800062c:	08009ea0 	.word	0x08009ea0
 8000630:	20000180 	.word	0x20000180
 8000634:	2000029c 	.word	0x2000029c

08000638 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	466b      	mov	r3, sp
 8000648:	461e      	mov	r6, r3
	uint8_t pData[Size];
 800064a:	8879      	ldrh	r1, [r7, #2]
 800064c:	460b      	mov	r3, r1
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	b28b      	uxth	r3, r1
 8000654:	2200      	movs	r2, #0
 8000656:	4698      	mov	r8, r3
 8000658:	4691      	mov	r9, r2
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800066a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800066e:	b28b      	uxth	r3, r1
 8000670:	2200      	movs	r2, #0
 8000672:	461c      	mov	r4, r3
 8000674:	4615      	mov	r5, r2
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	00eb      	lsls	r3, r5, #3
 8000680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000684:	00e2      	lsls	r2, r4, #3
 8000686:	460b      	mov	r3, r1
 8000688:	3307      	adds	r3, #7
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	ebad 0d03 	sub.w	sp, sp, r3
 8000692:	466b      	mov	r3, sp
 8000694:	3300      	adds	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]

	HAL_UART_Receive(&huart5, (uint8_t*)pData, Size, 100);
 8000698:	887a      	ldrh	r2, [r7, #2]
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <HAL_UARTEx_RxEventCallback+0x84>)
 80006a0:	f003 fdb2 	bl	8004208 <HAL_UART_Receive>

	CDC_Transmit_FS(pData, Size);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	4619      	mov	r1, r3
 80006a8:	68b8      	ldr	r0, [r7, #8]
 80006aa:	f008 fadb 	bl	8008c64 <CDC_Transmit_FS>
 80006ae:	46b5      	mov	sp, r6
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006ba:	bf00      	nop
 80006bc:	20000224 	.word	0x20000224

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fc02 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f8bc 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f9ca 	bl	8000a64 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006d0:	f008 f9ec 	bl	8008aac <MX_USB_DEVICE_Init>
  MX_UART5_Init();
 80006d4:	f000 f99c 	bl	8000a10 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 80006d8:	f000 f806 	bl	80006e8 <HODL_Till_BTN>

  Auto_Baudrate_Setup(PRE);
 80006dc:	4801      	ldr	r0, [pc, #4]	; (80006e4 <main+0x24>)
 80006de:	f000 f81f 	bl	8000720 <Auto_Baudrate_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x22>
 80006e4:	20000000 	.word	0x20000000

080006e8 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006ec:	e005      	b.n	80006fa <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <HODL_Till_BTN+0x30>)
 80006f6:	f001 fdff 	bl	80022f8 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006fa:	2101      	movs	r1, #1
 80006fc:	4807      	ldr	r0, [pc, #28]	; (800071c <HODL_Till_BTN+0x34>)
 80006fe:	f001 fde3 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f2      	beq.n	80006ee <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <HODL_Till_BTN+0x30>)
 8000710:	f001 fdf2 	bl	80022f8 <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020c00 	.word	0x40020c00
 800071c:	40020000 	.word	0x40020000

08000720 <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	; 0x38
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 4; i++){
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800072e:	e034      	b.n	800079a <Auto_Baudrate_Setup+0x7a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000730:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <Auto_Baudrate_Setup+0x110>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d133      	bne.n	80007a2 <Auto_Baudrate_Setup+0x82>
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <Auto_Baudrate_Setup+0x114>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d12e      	bne.n	80007a2 <Auto_Baudrate_Setup+0x82>
		  if(i == 0){
 8000744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000748:	2b00      	cmp	r3, #0
 800074a:	d10d      	bne.n	8000768 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f90d 	bl	8000974 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800075a:	4837      	ldr	r0, [pc, #220]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 800075c:	f000 fe72 	bl	8001444 <HAL_CAN_Start>
			  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fc25 	bl	8000fb0 <HAL_Delay>
 8000766:	e013      	b.n	8000790 <Auto_Baudrate_Setup+0x70>
		  }else{
			  HAL_CAN_Stop(&hcan1);
 8000768:	4833      	ldr	r0, [pc, #204]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 800076a:	f000 feaf 	bl	80014cc <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800076e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f8f8 	bl	8000974 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 8000786:	f000 fe5d 	bl	8001444 <HAL_CAN_Start>
			  HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f000 fc10 	bl	8000fb0 <HAL_Delay>
  for(i = 0; i < 4; i++){
 8000790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000794:	3301      	adds	r3, #1
 8000796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800079a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d9c6      	bls.n	8000730 <Auto_Baudrate_Setup+0x10>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <Auto_Baudrate_Setup+0x110>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d104      	bne.n	80007b6 <Auto_Baudrate_Setup+0x96>
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <Auto_Baudrate_Setup+0x114>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d029      	beq.n	800080a <Auto_Baudrate_Setup+0xea>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 80007b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007be:	3b01      	subs	r3, #1
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	491b      	ldr	r1, [pc, #108]	; (800083c <Auto_Baudrate_Setup+0x11c>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f008 feb6 	bl	8009540 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fcf9 	bl	80001d0 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f008 fa3b 	bl	8008c64 <CDC_Transmit_FS>
	  HAL_CAN_Stop(&hcan1);
 80007ee:	4812      	ldr	r0, [pc, #72]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 80007f0:	f000 fe6c 	bl	80014cc <HAL_CAN_Stop>
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(&hcan1);
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 80007fc:	f000 fbfc 	bl	8000ff8 <HAL_CAN_Init>
	  CAN1_Filter_Config();
 8000800:	f000 f88a 	bl	8000918 <CAN1_Filter_Config>
	  HAL_CAN_Start(&hcan1);
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <Auto_Baudrate_Setup+0x118>)
 8000806:	f000 fe1d 	bl	8001444 <HAL_CAN_Start>
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Auto_Baudrate_Setup+0x110>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d108      	bne.n	8000826 <Auto_Baudrate_Setup+0x106>
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <Auto_Baudrate_Setup+0x114>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d103      	bne.n	8000826 <Auto_Baudrate_Setup+0x106>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 800081e:	2118      	movs	r1, #24
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <Auto_Baudrate_Setup+0x120>)
 8000822:	f008 fa1f 	bl	8008c64 <CDC_Transmit_FS>
//	  Error_Handler();
  }
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000299 	.word	0x20000299
 8000834:	20000298 	.word	0x20000298
 8000838:	200001c0 	.word	0x200001c0
 800083c:	08009f78 	.word	0x08009f78
 8000840:	08009fa4 	.word	0x08009fa4

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f008 fe94 	bl	8009580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <SystemClock_Config+0xcc>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <SystemClock_Config+0xd0>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b4:	2308      	movs	r3, #8
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c2:	2307      	movs	r3, #7
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 ffaa 	bl	8003824 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008d6:	f000 f925 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2105      	movs	r1, #5
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 fa0b 	bl	8003d14 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000904:	f000 f90e 	bl	8000b24 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	; 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2228      	movs	r2, #40	; 0x28
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f008 fe2b 	bl	8009580 <memset>

  filters.FilterActivation = ENABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 800093e:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000942:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8000948:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 800094c:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <CAN1_Filter_Config+0x58>)
 8000958:	f000 fc94 	bl	8001284 <HAL_CAN_ConfigFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 8000962:	f000 f8df 	bl	8000b24 <Error_Handler>
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200001c0 	.word	0x200001c0

08000974 <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_CAN1_Init+0x94>)
 8000980:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <MX_CAN1_Init+0x98>)
 8000982:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000984:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_CAN1_Init+0x94>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <MX_CAN1_Init+0x94>)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_CAN1_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_CAN1_Init+0x94>)
 8000998:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800099c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009c8:	480f      	ldr	r0, [pc, #60]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009ca:	f000 fb15 	bl	8000ff8 <HAL_CAN_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80009d4:	f000 f8a6 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009de:	f000 fed0 	bl	8001782 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	2228      	movs	r2, #40	; 0x28
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f008 fdc8 	bl	8009580 <memset>
  filters.FilterActivation = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4619      	mov	r1, r3
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_CAN1_Init+0x94>)
 80009fc:	f000 fc42 	bl	8001284 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001c0 	.word	0x200001c0
 8000a0c:	40006400 	.word	0x40006400

08000a10 <MX_UART5_Init>:

static void MX_UART5_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_UART5_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_UART5_Init+0x4c>)
 8000a48:	f003 fb84 	bl	8004154 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f867 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000224 	.word	0x20000224
 8000a60:	40005000 	.word	0x40005000

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_GPIO_Init+0xb4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_GPIO_Init+0xb8>)
 8000ad6:	f001 fc0f 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ada:	2301      	movs	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0xbc>)
 8000aee:	f001 fa4f 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000af2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_GPIO_Init+0xb8>)
 8000b0c:	f001 fa40 	bl	8001f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40020000 	.word	0x40020000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <HAL_CAN_MspInit+0xb4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d143      	bne.n	8000c2a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <HAL_CAN_MspInit+0xb8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <HAL_CAN_MspInit+0xb8>)
 8000bac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_CAN_MspInit+0xb8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_CAN_MspInit+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <HAL_CAN_MspInit+0xb8>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_CAN_MspInit+0xb8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bea:	2309      	movs	r3, #9
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <HAL_CAN_MspInit+0xbc>)
 8000bf6:	f001 f9cb 	bl	8001f90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2013      	movs	r0, #19
 8000c00:	f001 f8fd 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c04:	2013      	movs	r0, #19
 8000c06:	f001 f916 	bl	8001e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2014      	movs	r0, #20
 8000c10:	f001 f8f5 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c14:	2014      	movs	r0, #20
 8000c16:	f001 f90e 	bl	8001e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2015      	movs	r0, #21
 8000c20:	f001 f8ed 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c24:	2015      	movs	r0, #21
 8000c26:	f001 f906 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40006400 	.word	0x40006400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <HAL_UART_MspInit+0xd0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d152      	bne.n	8000d08 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_UART_MspInit+0xd4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <HAL_UART_MspInit+0xd8>)
 8000cd4:	f001 f95c 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480a      	ldr	r0, [pc, #40]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000cf4:	f001 f94c 	bl	8001f90 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2035      	movs	r0, #53	; 0x35
 8000cfe:	f001 f87e 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d02:	2035      	movs	r0, #53	; 0x35
 8000d04:	f001 f897 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40005000 	.word	0x40005000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f900 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <CAN1_TX_IRQHandler+0x10>)
 8000d7a:	f000 fd28 	bl	80017ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001c0 	.word	0x200001c0

08000d88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <CAN1_RX0_IRQHandler+0x14>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <CAN1_RX0_IRQHandler+0x18>)
 8000d94:	f000 fd1b 	bl	80017ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000298 	.word	0x20000298
 8000da0:	200001c0 	.word	0x200001c0

08000da4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <CAN1_RX1_IRQHandler+0x14>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <CAN1_RX1_IRQHandler+0x18>)
 8000db0:	f000 fd0d 	bl	80017ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000299 	.word	0x20000299
 8000dbc:	200001c0 	.word	0x200001c0

08000dc0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <UART5_IRQHandler+0x10>)
 8000dc6:	f003 fac1 	bl	800434c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000224 	.word	0x20000224

08000dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <OTG_FS_IRQHandler+0x10>)
 8000dda:	f001 fbf6 	bl	80025ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000178c 	.word	0x2000178c

08000de8 <_sbrk>:
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
 8000e18:	f008 fbba 	bl	8009590 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	200002a4 	.word	0x200002a4
 8000e50:	20002000 	.word	0x20002000

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0x12>
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1a>)
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1e>)
 8000e82:	2300      	movs	r3, #0
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:
 8000e86:	58d4      	ldr	r4, [r2, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:
 8000e8c:	18c4      	adds	r4, r0, r3
 8000e8e:	428c      	cmp	r4, r1
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x22>)
 8000e94:	4c0b      	ldr	r4, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x26>)
 8000e96:	2300      	movs	r3, #0
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:
 8000e9e:	42a2      	cmp	r2, r4
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>
 8000ea2:	f7ff ffd7 	bl	8000e54 <SystemInit>
 8000ea6:	f008 fb79 	bl	800959c <__libc_init_array>
 8000eaa:	f7ff fc09 	bl	80006c0 <main>
 8000eae:	4770      	bx	lr
 8000eb0:	20020000 	.word	0x20020000
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	2000015c 	.word	0x2000015c
 8000ebc:	0800a064 	.word	0x0800a064
 8000ec0:	2000015c 	.word	0x2000015c
 8000ec4:	20002000 	.word	0x20002000

08000ec8 <ADC_IRQHandler>:
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 ff77 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fe16 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ff8f 	bl	8001e52 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 ff57 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000010 	.word	0x20000010
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	20000014 	.word	0x20000014

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000018 	.word	0x20000018
 8000f94:	200002a8 	.word	0x200002a8

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200002a8 	.word	0x200002a8

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000018 	.word	0x20000018

08000ff8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e11c      	b.n	8001244 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d131      	bne.n	800107a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a8c      	ldr	r2, [pc, #560]	; (800124c <HAL_CAN_Init+0x254>)
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a8c      	ldr	r2, [pc, #560]	; (8001250 <HAL_CAN_Init+0x258>)
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a8b      	ldr	r2, [pc, #556]	; (8001254 <HAL_CAN_Init+0x25c>)
 8001026:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a8b      	ldr	r2, [pc, #556]	; (8001258 <HAL_CAN_Init+0x260>)
 800102c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a8a      	ldr	r2, [pc, #552]	; (800125c <HAL_CAN_Init+0x264>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a8a      	ldr	r2, [pc, #552]	; (8001260 <HAL_CAN_Init+0x268>)
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a89      	ldr	r2, [pc, #548]	; (8001264 <HAL_CAN_Init+0x26c>)
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a89      	ldr	r2, [pc, #548]	; (8001268 <HAL_CAN_Init+0x270>)
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a88      	ldr	r2, [pc, #544]	; (800126c <HAL_CAN_Init+0x274>)
 800104a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a88      	ldr	r2, [pc, #544]	; (8001270 <HAL_CAN_Init+0x278>)
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a87      	ldr	r2, [pc, #540]	; (8001274 <HAL_CAN_Init+0x27c>)
 8001056:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a87      	ldr	r2, [pc, #540]	; (8001278 <HAL_CAN_Init+0x280>)
 800105c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a86      	ldr	r2, [pc, #536]	; (800127c <HAL_CAN_Init+0x284>)
 8001062:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a84      	ldr	r2, [pc, #528]	; (8001280 <HAL_CAN_Init+0x288>)
 8001070:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800108a:	f7ff ff85 	bl	8000f98 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001090:	e012      	b.n	80010b8 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001092:	f7ff ff81 	bl	8000f98 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b0a      	cmp	r3, #10
 800109e:	d90b      	bls.n	80010b8 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2205      	movs	r2, #5
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0c5      	b.n	8001244 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0e5      	beq.n	8001092 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0202 	bic.w	r2, r2, #2
 80010d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d6:	f7ff ff5f 	bl	8000f98 <HAL_GetTick>
 80010da:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010dc:	e012      	b.n	8001104 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010de:	f7ff ff5b 	bl	8000f98 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b0a      	cmp	r3, #10
 80010ea:	d90b      	bls.n	8001104 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2205      	movs	r2, #5
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e09f      	b.n	8001244 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e5      	bne.n	80010de <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7e1b      	ldrb	r3, [r3, #24]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e007      	b.n	800113c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e5b      	ldrb	r3, [r3, #25]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7e9b      	ldrb	r3, [r3, #26]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0220 	orr.w	r2, r2, #32
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e007      	b.n	8001190 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0220 	bic.w	r2, r2, #32
 800118e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7edb      	ldrb	r3, [r3, #27]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0210 	bic.w	r2, r2, #16
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0210 	orr.w	r2, r2, #16
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7f1b      	ldrb	r3, [r3, #28]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0208 	orr.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0208 	bic.w	r2, r2, #8
 80011e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7f5b      	ldrb	r3, [r3, #29]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0204 	orr.w	r2, r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e007      	b.n	800120e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0204 	bic.w	r2, r2, #4
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	ea42 0103 	orr.w	r1, r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	0800057d 	.word	0x0800057d
 8001250:	08001bd1 	.word	0x08001bd1
 8001254:	08001be5 	.word	0x08001be5
 8001258:	08001bf9 	.word	0x08001bf9
 800125c:	08001b59 	.word	0x08001b59
 8001260:	08001b6d 	.word	0x08001b6d
 8001264:	08001b81 	.word	0x08001b81
 8001268:	08001b95 	.word	0x08001b95
 800126c:	08001ba9 	.word	0x08001ba9
 8001270:	08001bbd 	.word	0x08001bbd
 8001274:	08001c0d 	.word	0x08001c0d
 8001278:	08001c21 	.word	0x08001c21
 800127c:	08001c35 	.word	0x08001c35
 8001280:	08000b81 	.word	0x08000b81

08001284 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d003      	beq.n	80012aa <HAL_CAN_ConfigFilter+0x26>
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	f040 80be 	bne.w	8001426 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_CAN_ConfigFilter+0x1bc>)
 80012ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	431a      	orrs	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2201      	movs	r2, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d123      	bne.n	8001354 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800132e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3248      	adds	r2, #72	; 0x48
 8001334:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001348:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	6979      	ldr	r1, [r7, #20]
 800134c:	3348      	adds	r3, #72	; 0x48
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d122      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800137c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3248      	adds	r2, #72	; 0x48
 8001382:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001396:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001398:	6979      	ldr	r1, [r7, #20]
 800139a:	3348      	adds	r3, #72	; 0x48
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	401a      	ands	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013bc:	e007      	b.n	80013ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	401a      	ands	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013e8:	e007      	b.n	80013fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001418:	f023 0201 	bic.w	r2, r3, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e006      	b.n	8001434 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40006400 	.word	0x40006400

08001444 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d12e      	bne.n	80014b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fd92 	bl	8000f98 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001476:	e012      	b.n	800149e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001478:	f7ff fd8e 	bl	8000f98 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d90b      	bls.n	800149e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2205      	movs	r2, #5
 8001496:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e012      	b.n	80014c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e5      	bne.n	8001478 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e006      	b.n	80014c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
  }
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d133      	bne.n	8001548 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014f0:	f7ff fd52 	bl	8000f98 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f6:	e012      	b.n	800151e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f8:	f7ff fd4e 	bl	8000f98 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b0a      	cmp	r3, #10
 8001504:	d90b      	bls.n	800151e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2205      	movs	r2, #5
 8001516:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e01b      	b.n	8001556 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0e5      	beq.n	80014f8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0202 	bic.w	r2, r2, #2
 800153a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	e006      	b.n	8001556 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800155e:	b480      	push	{r7}
 8001560:	b087      	sub	sp, #28
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001572:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d003      	beq.n	8001582 <HAL_CAN_GetRxMessage+0x24>
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	2b02      	cmp	r3, #2
 800157e:	f040 80f3 	bne.w	8001768 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10e      	bne.n	80015a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0e7      	b.n	8001776 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0d8      	b.n	8001776 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	331b      	adds	r3, #27
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0204 	and.w	r2, r3, #4
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	331b      	adds	r3, #27
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0d5b      	lsrs	r3, r3, #21
 80015f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	331b      	adds	r3, #27
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0202 	and.w	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	331b      	adds	r3, #27
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	3304      	adds	r3, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 020f 	and.w	r2, r3, #15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	331b      	adds	r3, #27
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b2da      	uxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	331b      	adds	r3, #27
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0c1b      	lsrs	r3, r3, #16
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4413      	add	r3, r2
 8001692:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0a1a      	lsrs	r2, r3, #8
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	0c1a      	lsrs	r2, r3, #16
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3302      	adds	r3, #2
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0e1a      	lsrs	r2, r3, #24
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3303      	adds	r3, #3
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3304      	adds	r3, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0a1a      	lsrs	r2, r3, #8
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3305      	adds	r3, #5
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0c1a      	lsrs	r2, r3, #16
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3306      	adds	r3, #6
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0e1a      	lsrs	r2, r3, #24
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3307      	adds	r3, #7
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e007      	b.n	8001764 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e006      	b.n	8001776 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d002      	beq.n	80017a0 <HAL_CAN_ActivateNotification+0x1e>
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d109      	bne.n	80017b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6959      	ldr	r1, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e006      	b.n	80017c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b08a      	sub	sp, #40	; 0x28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8083 	beq.w	800191c <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d025      	beq.n	800186c <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e017      	b.n	800186c <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	e00d      	b.n	800186c <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e003      	b.n	800186c <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d026      	beq.n	80018c4 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e017      	b.n	80018c4 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	e00d      	b.n	80018c4 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	e003      	b.n	80018c4 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d026      	beq.n	800191c <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
 80018ea:	e017      	b.n	800191c <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	e00d      	b.n	800191c <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e003      	b.n	800191c <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001936:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2210      	movs	r2, #16
 800193e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2208      	movs	r2, #8
 800195a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2210      	movs	r2, #16
 80019a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2208      	movs	r2, #8
 80019c2:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2210      	movs	r2, #16
 8001a06:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d07b      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d072      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d043      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03e      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab6:	2b60      	cmp	r3, #96	; 0x60
 8001ab8:	d02b      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x344>
 8001aba:	2b60      	cmp	r3, #96	; 0x60
 8001abc:	d82e      	bhi.n	8001b1c <HAL_CAN_IRQHandler+0x34e>
 8001abe:	2b50      	cmp	r3, #80	; 0x50
 8001ac0:	d022      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x33a>
 8001ac2:	2b50      	cmp	r3, #80	; 0x50
 8001ac4:	d82a      	bhi.n	8001b1c <HAL_CAN_IRQHandler+0x34e>
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d019      	beq.n	8001afe <HAL_CAN_IRQHandler+0x330>
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d826      	bhi.n	8001b1c <HAL_CAN_IRQHandler+0x34e>
 8001ace:	2b30      	cmp	r3, #48	; 0x30
 8001ad0:	d010      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x326>
 8001ad2:	2b30      	cmp	r3, #48	; 0x30
 8001ad4:	d822      	bhi.n	8001b1c <HAL_CAN_IRQHandler+0x34e>
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d002      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x312>
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d005      	beq.n	8001aea <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ade:	e01d      	b.n	8001b1c <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ae8:	e019      	b.n	8001b1e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af2:	e014      	b.n	8001b1e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001afc:	e00f      	b.n	8001b1e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b06:	e00a      	b.n	8001b1e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b10:	e005      	b.n	8001b1e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b1a:	e000      	b.n	8001b1e <HAL_CAN_IRQHandler+0x350>
            break;
 8001b1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699a      	ldr	r2, [r3, #24]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2204      	movs	r2, #4
 8001b34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff f88e 	bl	8000f98 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d008      	beq.n	8001e9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e052      	b.n	8001f42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0216 	bic.w	r2, r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <HAL_DMA_Abort+0x62>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0208 	bic.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eec:	e013      	b.n	8001f16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eee:	f7ff f853 	bl	8000f98 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d90c      	bls.n	8001f16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2203      	movs	r2, #3
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e015      	b.n	8001f42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e4      	bne.n	8001eee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	223f      	movs	r2, #63	; 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e00c      	b.n	8001f82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e16b      	b.n	8002284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 815a 	bne.w	800227e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80b4 	beq.w	800227e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b60      	ldr	r3, [pc, #384]	; (800229c <HAL_GPIO_Init+0x30c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_GPIO_Init+0x310>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_GPIO_Init+0x314>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x318>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_GPIO_Init+0x31c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x320>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <HAL_GPIO_Init+0x324>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_GPIO_Init+0x328>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x20a>
 8002196:	2307      	movs	r3, #7
 8002198:	e00e      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219a:	2308      	movs	r3, #8
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	; (80022a0 <HAL_GPIO_Init+0x310>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae90 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40021c00 	.word	0x40021c00
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800232a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232c:	b08f      	sub	sp, #60	; 0x3c
 800232e:	af0a      	add	r7, sp, #40	; 0x28
 8002330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e10f      	b.n	800255c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f006 fdcc 	bl	8008ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 f895 	bl	80054aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	687e      	ldr	r6, [r7, #4]
 8002388:	466d      	mov	r5, sp
 800238a:	f106 0410 	add.w	r4, r6, #16
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239a:	e885 0003 	stmia.w	r5, {r0, r1}
 800239e:	1d33      	adds	r3, r6, #4
 80023a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a2:	6838      	ldr	r0, [r7, #0]
 80023a4:	f002 ff6c 	bl	8005280 <USB_CoreInit>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0d0      	b.n	800255c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 f883 	bl	80054cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e04a      	b.n	8002462 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	333d      	adds	r3, #61	; 0x3d
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	333c      	adds	r3, #60	; 0x3c
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	b298      	uxth	r0, r3
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3344      	adds	r3, #68	; 0x44
 8002408:	4602      	mov	r2, r0
 800240a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3340      	adds	r3, #64	; 0x40
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3348      	adds	r3, #72	; 0x48
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	334c      	adds	r3, #76	; 0x4c
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3354      	adds	r3, #84	; 0x54
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3af      	bcc.n	80023cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e044      	b.n	80024fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	3301      	adds	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d3b5      	bcc.n	8002472 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	687e      	ldr	r6, [r7, #4]
 800250e:	466d      	mov	r5, sp
 8002510:	f106 0410 	add.w	r4, r6, #16
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002520:	e885 0003 	stmia.w	r5, {r0, r1}
 8002524:	1d33      	adds	r3, r6, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f003 f81b 	bl	8005564 <USB_DevInit>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e00d      	b.n	800255c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f96a 	bl	800682e <USB_DevDisconnect>

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002564 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_PCD_Start+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e020      	b.n	80025c2 <HAL_PCD_Start+0x5e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b01      	cmp	r3, #1
 800258e:	d109      	bne.n	80025a4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 ff6d 	bl	8005488 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 f91a 	bl	80067ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b08d      	sub	sp, #52	; 0x34
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 f9d8 	bl	8006996 <USB_GetMode>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 848a 	bne.w	8002f02 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 f93c 	bl	8006870 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8480 	beq.w	8002f00 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f004 f929 	bl	8006870 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d107      	bne.n	8002638 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f002 0202 	and.w	r2, r2, #2
 8002636:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 f917 	bl	8006870 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b10      	cmp	r3, #16
 800264a:	d161      	bne.n	8002710 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0210 	bic.w	r2, r2, #16
 800265a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	0c5b      	lsrs	r3, r3, #17
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	2b02      	cmp	r3, #2
 8002686:	d124      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d035      	beq.n	8002700 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800269e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	6a38      	ldr	r0, [r7, #32]
 80026a8:	f003 ff4e 	bl	8006548 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b8:	441a      	add	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6a1a      	ldr	r2, [r3, #32]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ca:	441a      	add	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	621a      	str	r2, [r3, #32]
 80026d0:	e016      	b.n	8002700 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	0c5b      	lsrs	r3, r3, #17
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d110      	bne.n	8002700 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026e4:	2208      	movs	r2, #8
 80026e6:	4619      	mov	r1, r3
 80026e8:	6a38      	ldr	r0, [r7, #32]
 80026ea:	f003 ff2d 	bl	8006548 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026fa:	441a      	add	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0210 	orr.w	r2, r2, #16
 800270e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f004 f8ab 	bl	8006870 <USB_ReadInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002724:	f040 80a7 	bne.w	8002876 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 f8b0 	bl	8006896 <USB_ReadDevAllOutEpInterrupt>
 8002736:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002738:	e099      	b.n	800286e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 808e 	beq.w	8002862 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f8d4 	bl	80068fe <USB_ReadDevOutEPInterrupt>
 8002756:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276e:	461a      	mov	r2, r3
 8002770:	2301      	movs	r3, #1
 8002772:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fec2 	bl	8003500 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	461a      	mov	r2, r3
 8002794:	2308      	movs	r3, #8
 8002796:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 ff98 	bl	80036d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b6:	461a      	mov	r2, r3
 80027b8:	2310      	movs	r3, #16
 80027ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d030      	beq.n	8002828 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d109      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	78db      	ldrb	r3, [r3, #3]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f006 fc87 	bl	8009124 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002822:	461a      	mov	r2, r3
 8002824:	2302      	movs	r3, #2
 8002826:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	461a      	mov	r2, r3
 8002840:	2320      	movs	r3, #32
 8002842:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002860:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	3301      	adds	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f af62 	bne.w	800273a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fff8 	bl	8006870 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800288a:	f040 80db 	bne.w	8002a44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f004 f819 	bl	80068ca <USB_ReadDevAllInEpInterrupt>
 8002898:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800289e:	e0cd      	b.n	8002a3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80c2 	beq.w	8002a30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 f83f 	bl	800693a <USB_ReadDevInEPInterrupt>
 80028bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d057      	beq.n	8002978 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	2201      	movs	r2, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69f9      	ldr	r1, [r7, #28]
 80028e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028e8:	4013      	ands	r3, r2
 80028ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f8:	461a      	mov	r2, r3
 80028fa:	2301      	movs	r3, #1
 80028fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d132      	bne.n	800296c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	334c      	adds	r3, #76	; 0x4c
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4403      	add	r3, r0
 8002926:	3348      	adds	r3, #72	; 0x48
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4419      	add	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4403      	add	r3, r0
 800293a:	334c      	adds	r3, #76	; 0x4c
 800293c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <HAL_PCD_IRQHandler+0x3a2>
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3354      	adds	r3, #84	; 0x54
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002964:	461a      	mov	r2, r3
 8002966:	2101      	movs	r1, #1
 8002968:	f004 f846 	bl	80069f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f006 fb51 	bl	800901a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298e:	461a      	mov	r2, r3
 8002990:	2308      	movs	r3, #8
 8002992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029aa:	461a      	mov	r2, r3
 80029ac:	2310      	movs	r3, #16
 80029ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c6:	461a      	mov	r2, r3
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d023      	beq.n	8002a1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d8:	6a38      	ldr	r0, [r7, #32]
 80029da:	f002 ff27 	bl	800582c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	3338      	adds	r3, #56	; 0x38
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	78db      	ldrb	r3, [r3, #3]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f006 fb9e 	bl	8009148 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fcdb 	bl	80033e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	3301      	adds	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f af2e 	bne.w	80028a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 ff11 	bl	8006870 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a58:	d122      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a80:	2100      	movs	r1, #0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fec2 	bl	800380c <HAL_PCDEx_LPM_Callback>
 8002a88:	e002      	b.n	8002a90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f006 fb3c 	bl	8009108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fee3 	bl	8006870 <USB_ReadInterrupts>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab4:	d112      	bne.n	8002adc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f006 faf8 	bl	80090bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ada:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 fec5 	bl	8006870 <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	f040 80b7 	bne.w	8002c62 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fe8c 	bl	800582c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b18:	e046      	b.n	8002ba8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b26:	461a      	mov	r2, r3
 8002b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	0151      	lsls	r1, r2, #5
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	440a      	add	r2, r1
 8002b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b92:	0151      	lsls	r1, r2, #5
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	440a      	add	r2, r1
 8002b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ba0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d3b3      	bcc.n	8002b1a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bde:	f043 030b 	orr.w	r3, r3, #11
 8002be2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf4:	f043 030b 	orr.w	r3, r3, #11
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	e015      	b.n	8002c28 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c22:	f043 030b 	orr.w	r3, r3, #11
 8002c26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f003 fed3 	bl	80069f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 fe02 	bl	8006870 <USB_ReadInterrupts>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	d124      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fe98 	bl	80069b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fe4d 	bl	8005926 <USB_GetDevSpeed>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681c      	ldr	r4, [r3, #0]
 8002c98:	f001 fa28 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8002c9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f002 fb4c 	bl	8005344 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f006 f9dc 	bl	800906a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fdd2 	bl	8006870 <USB_ReadInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d10a      	bne.n	8002cec <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f006 f9b9 	bl	800904e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f002 0208 	and.w	r2, r2, #8
 8002cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fdbd 	bl	8006870 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d122      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	e014      	b.n	8002d3c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fb27 	bl	8003384 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	3301      	adds	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3e5      	bcc.n	8002d12 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fd90 	bl	8006870 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5a:	d13b      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	e02b      	b.n	8002dba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d115      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da12      	bge.n	8002db4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	333f      	adds	r3, #63	; 0x3f
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fae8 	bl	8003384 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	3301      	adds	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3ce      	bcc.n	8002d62 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fd49 	bl	8006870 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de8:	d155      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dea:	2301      	movs	r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	e045      	b.n	8002e7c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d12e      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da2b      	bge.n	8002e76 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d121      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e72:	6053      	str	r3, [r2, #4]
            break;
 8002e74:	e007      	b.n	8002e86 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3301      	adds	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3b4      	bcc.n	8002df0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fce8 	bl	8006870 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f006 f95d 	bl	800916c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fcd2 	bl	8006870 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d115      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f006 f94d 	bl	8009188 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e000      	b.n	8002f02 <HAL_PCD_IRQHandler+0x938>
      return;
 8002f00:	bf00      	nop
    }
  }
}
 8002f02:	3734      	adds	r7, #52	; 0x34
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_PCD_SetAddress+0x1a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e013      	b.n	8002f4a <HAL_PCD_SetAddress+0x42>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fc30 	bl	80067a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	4608      	mov	r0, r1
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4603      	mov	r3, r0
 8002f62:	70fb      	strb	r3, [r7, #3]
 8002f64:	460b      	mov	r3, r1
 8002f66:	803b      	strh	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da0f      	bge.n	8002f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	3338      	adds	r3, #56	; 0x38
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	705a      	strb	r2, [r3, #1]
 8002f96:	e00f      	b.n	8002fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fc4:	883a      	ldrh	r2, [r7, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	78ba      	ldrb	r2, [r7, #2]
 8002fce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fe2:	78bb      	ldrb	r3, [r7, #2]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_Open+0xaa>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e00e      	b.n	800301a <HAL_PCD_EP_Open+0xc8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f002 fcb0 	bl	8005970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003018:	7afb      	ldrb	r3, [r7, #11]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da0f      	bge.n	8003056 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3338      	adds	r3, #56	; 0x38
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	705a      	strb	r2, [r3, #1]
 8003054:	e00f      	b.n	8003076 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_PCD_EP_Close+0x6e>
 800308c:	2302      	movs	r3, #2
 800308e:	e00e      	b.n	80030ae <HAL_PCD_EP_Close+0x8c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fcee 	bl	8005a80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	460b      	mov	r3, r1
 80030c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	f002 ffcd 	bl	80060c8 <USB_EP0StartXfer>
 800312e:	e008      	b.n	8003142 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	f002 fd7b 	bl	8005c38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	f002 ff6b 	bl	80060c8 <USB_EP0StartXfer>
 80031f2:	e008      	b.n	8003206 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	f002 fd19 	bl	8005c38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	d901      	bls.n	800322e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e050      	b.n	80032d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800322e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003232:	2b00      	cmp	r3, #0
 8003234:	da0f      	bge.n	8003256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3338      	adds	r3, #56	; 0x38
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	705a      	strb	r2, [r3, #1]
 8003254:	e00d      	b.n	8003272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	3304      	adds	r3, #4
 800326a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_PCD_EP_SetStall+0x82>
 800328e:	2302      	movs	r3, #2
 8003290:	e01e      	b.n	80032d0 <HAL_PCD_EP_SetStall+0xc0>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68f9      	ldr	r1, [r7, #12]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 f9a9 	bl	80065f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	b2d9      	uxtb	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c0:	461a      	mov	r2, r3
 80032c2:	f003 fb99 	bl	80069f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	f003 020f 	and.w	r2, r3, #15
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d901      	bls.n	80032f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e042      	b.n	800337c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da0f      	bge.n	800331e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3338      	adds	r3, #56	; 0x38
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	705a      	strb	r2, [r3, #1]
 800331c:	e00f      	b.n	800333e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_PCD_EP_ClrStall+0x86>
 800335a:	2302      	movs	r3, #2
 800335c:	e00e      	b.n	800337c <HAL_PCD_EP_ClrStall+0xa4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	f003 f9b1 	bl	80066d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da0c      	bge.n	80033b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	3338      	adds	r3, #56	; 0x38
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e00c      	b.n	80033cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	3304      	adds	r3, #4
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 ffd0 	bl	8006378 <USB_EPStopXfer>
 80033d8:	4603      	mov	r3, r0
 80033da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033dc:	7afb      	ldrb	r3, [r7, #11]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	; 0x28
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	3338      	adds	r3, #56	; 0x38
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	3304      	adds	r3, #4
 800340c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	429a      	cmp	r2, r3
 8003418:	d901      	bls.n	800341e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06c      	b.n	80034f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	429a      	cmp	r2, r3
 8003432:	d902      	bls.n	800343a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3303      	adds	r3, #3
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003442:	e02b      	b.n	800349c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	429a      	cmp	r2, r3
 8003458:	d902      	bls.n	8003460 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3303      	adds	r3, #3
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6919      	ldr	r1, [r3, #16]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003478:	b2db      	uxtb	r3, r3
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	4603      	mov	r3, r0
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f003 f824 	bl	80064cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	441a      	add	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d809      	bhi.n	80034c6 <PCD_WriteEmptyTxFifo+0xe0>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d203      	bcs.n	80034c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1be      	bne.n	8003444 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d811      	bhi.n	80034f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	2201      	movs	r2, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f2:	4013      	ands	r3, r2
 80034f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	333c      	adds	r3, #60	; 0x3c
 8003518:	3304      	adds	r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d17b      	bne.n	800362e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4a61      	ldr	r2, [pc, #388]	; (80036c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f240 80b9 	bls.w	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80b3 	beq.w	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003568:	6093      	str	r3, [r2, #8]
 800356a:	e0a7      	b.n	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	461a      	mov	r2, r3
 8003584:	2320      	movs	r3, #32
 8003586:	6093      	str	r3, [r2, #8]
 8003588:	e098      	b.n	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 8093 	bne.w	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	4a4b      	ldr	r2, [pc, #300]	; (80036c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d90f      	bls.n	80035be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ba:	6093      	str	r3, [r2, #8]
 80035bc:	e07e      	b.n	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	440b      	add	r3, r1
 80035e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ea:	1ad2      	subs	r2, r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d114      	bne.n	8003620 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003608:	461a      	mov	r2, r3
 800360a:	2101      	movs	r1, #1
 800360c:	f003 f9f4 	bl	80069f8 <USB_EP0_OutStart>
 8003610:	e006      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	441a      	add	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f005 fcdc 	bl	8008fe4 <HAL_PCD_DataOutStageCallback>
 800362c:	e046      	b.n	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d124      	bne.n	8003680 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003652:	6093      	str	r3, [r2, #8]
 8003654:	e032      	b.n	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366c:	461a      	mov	r2, r3
 800366e:	2320      	movs	r3, #32
 8003670:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f005 fcb3 	bl	8008fe4 <HAL_PCD_DataOutStageCallback>
 800367e:	e01d      	b.n	80036bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d114      	bne.n	80036b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036a8:	461a      	mov	r2, r3
 80036aa:	2100      	movs	r1, #0
 80036ac:	f003 f9a4 	bl	80069f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f005 fc94 	bl	8008fe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	4f54300a 	.word	0x4f54300a
 80036cc:	4f54310a 	.word	0x4f54310a

080036d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	333c      	adds	r3, #60	; 0x3c
 80036e8:	3304      	adds	r3, #4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a15      	ldr	r2, [pc, #84]	; (8003758 <PCD_EP_OutSetupPacket_int+0x88>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d90e      	bls.n	8003724 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	461a      	mov	r2, r3
 800371e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003722:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f005 fc4b 	bl	8008fc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <PCD_EP_OutSetupPacket_int+0x88>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d90c      	bls.n	800374c <PCD_EP_OutSetupPacket_int+0x7c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003744:	461a      	mov	r2, r3
 8003746:	2101      	movs	r1, #1
 8003748:	f003 f956 	bl	80069f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	4f54300a 	.word	0x4f54300a

0800375c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
 8003768:	4613      	mov	r3, r2
 800376a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800377a:	883b      	ldrh	r3, [r7, #0]
 800377c:	0419      	lsls	r1, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	430a      	orrs	r2, r1
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
 8003788:	e028      	b.n	80037dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	4413      	add	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e00d      	b.n	80037ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3340      	adds	r3, #64	; 0x40
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4413      	add	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	3301      	adds	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	3b01      	subs	r3, #1
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d3ec      	bcc.n	800379e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037c4:	883b      	ldrh	r3, [r7, #0]
 80037c6:	0418      	lsls	r0, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4302      	orrs	r2, r0
 80037d4:	3340      	adds	r3, #64	; 0x40
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e267      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d075      	beq.n	800392e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b04      	cmp	r3, #4
 800384c:	d00c      	beq.n	8003868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384e:	4b85      	ldr	r3, [pc, #532]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d112      	bne.n	8003880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b82      	ldr	r3, [pc, #520]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003866:	d10b      	bne.n	8003880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05b      	beq.n	800392c <HAL_RCC_OscConfig+0x108>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d157      	bne.n	800392c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e242      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d106      	bne.n	8003898 <HAL_RCC_OscConfig+0x74>
 800388a:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a75      	ldr	r2, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e01d      	b.n	80038d4 <HAL_RCC_OscConfig+0xb0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x98>
 80038a2:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6f      	ldr	r2, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b6d      	ldr	r3, [pc, #436]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6c      	ldr	r2, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0xb0>
 80038bc:	4b69      	ldr	r3, [pc, #420]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a68      	ldr	r2, [pc, #416]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fd fb5c 	bl	8000f98 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd fb58 	bl	8000f98 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e207      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0xc0>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fd fb48 	bl	8000f98 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390c:	f7fd fb44 	bl	8000f98 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e1f3      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0xe8>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d063      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11c      	bne.n	800398c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b44      	ldr	r3, [pc, #272]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_RCC_OscConfig+0x152>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e1c7      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4937      	ldr	r1, [pc, #220]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	e03a      	b.n	8003a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCC_OscConfig+0x244>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fd fafd 	bl	8000f98 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fd faf9 	bl	8000f98 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1a8      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4925      	ldr	r1, [pc, #148]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	600b      	str	r3, [r1, #0]
 80039d4:	e015      	b.n	8003a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_OscConfig+0x244>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fadc 	bl	8000f98 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fd fad8 	bl	8000f98 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e187      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d036      	beq.n	8003a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_RCC_OscConfig+0x248>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fd fabc 	bl	8000f98 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fd fab8 	bl	8000f98 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e167      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x200>
 8003a42:	e01b      	b.n	8003a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_OscConfig+0x248>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd faa5 	bl	8000f98 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	e00e      	b.n	8003a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a52:	f7fd faa1 	bl	8000f98 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d907      	bls.n	8003a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e150      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
 8003a64:	40023800 	.word	0x40023800
 8003a68:	42470000 	.word	0x42470000
 8003a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	4b88      	ldr	r3, [pc, #544]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ea      	bne.n	8003a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8097 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8e:	4b81      	ldr	r3, [pc, #516]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b7d      	ldr	r3, [pc, #500]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a7c      	ldr	r2, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b77      	ldr	r3, [pc, #476]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d118      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac6:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a73      	ldr	r2, [pc, #460]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad2:	f7fd fa61 	bl	8000f98 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ada:	f7fd fa5d 	bl	8000f98 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e10c      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x2ea>
 8003b00:	4b64      	ldr	r3, [pc, #400]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a63      	ldr	r2, [pc, #396]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCC_OscConfig+0x324>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x30c>
 8003b16:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4a5e      	ldr	r2, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70
 8003b22:	4b5c      	ldr	r3, [pc, #368]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a5b      	ldr	r2, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0x324>
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4a57      	ldr	r2, [pc, #348]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3c:	4b55      	ldr	r3, [pc, #340]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fd fa22 	bl	8000f98 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fd fa1e 	bl	8000f98 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0cb      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6e:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ee      	beq.n	8003b58 <HAL_RCC_OscConfig+0x334>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fa0c 	bl	8000f98 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7fd fa08 	bl	8000f98 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0b5      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a1 	beq.w	8003d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d05c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d141      	bne.n	8003c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd f9dc 	bl	8000f98 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fd f9d8 	bl	8000f98 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e087      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	491b      	ldr	r1, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fd f9b1 	bl	8000f98 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd f9ad 	bl	8000f98 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e05c      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x416>
 8003c58:	e054      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fd f99a 	bl	8000f98 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fd f996 	bl	8000f98 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e045      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x444>
 8003c86:	e03d      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e038      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x4ec>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d028      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d121      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d11a      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0cc      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d90c      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	494d      	ldr	r1, [pc, #308]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d044      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d119      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e067      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4934      	ldr	r1, [pc, #208]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fd f8c8 	bl	8000f98 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd f8c4 	bl	8000f98 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e04f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d20c      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490e      	ldr	r1, [pc, #56]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e9a:	f000 f821 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490a      	ldr	r1, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd f828 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023c00 	.word	0x40023c00
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	0800a008 	.word	0x0800a008
 8003ed8:	20000010 	.word	0x20000010
 8003edc:	20000014 	.word	0x20000014

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b094      	sub	sp, #80	; 0x50
 8003ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	647b      	str	r3, [r7, #68]	; 0x44
 8003eec:	2300      	movs	r3, #0
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef8:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d00d      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x40>
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	f200 80e1 	bhi.w	80040cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f12:	e0db      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f18:	e0db      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1a:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1e:	e0d8      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f20:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d063      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f36:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	099b      	lsrs	r3, r3, #6
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f52:	4622      	mov	r2, r4
 8003f54:	462b      	mov	r3, r5
 8003f56:	f04f 0000 	mov.w	r0, #0
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	0159      	lsls	r1, r3, #5
 8003f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f64:	0150      	lsls	r0, r2, #5
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	1a51      	subs	r1, r2, r1
 8003f6e:	6139      	str	r1, [r7, #16]
 8003f70:	4629      	mov	r1, r5
 8003f72:	eb63 0301 	sbc.w	r3, r3, r1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f84:	4659      	mov	r1, fp
 8003f86:	018b      	lsls	r3, r1, #6
 8003f88:	4651      	mov	r1, sl
 8003f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8e:	4651      	mov	r1, sl
 8003f90:	018a      	lsls	r2, r1, #6
 8003f92:	4651      	mov	r1, sl
 8003f94:	ebb2 0801 	subs.w	r8, r2, r1
 8003f98:	4659      	mov	r1, fp
 8003f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb2:	4690      	mov	r8, r2
 8003fb4:	4699      	mov	r9, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	eb18 0303 	adds.w	r3, r8, r3
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	eb49 0303 	adc.w	r3, r9, r3
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	024b      	lsls	r3, r1, #9
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fdc:	4621      	mov	r1, r4
 8003fde:	024a      	lsls	r2, r1, #9
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff0:	f7fc f946 	bl	8000280 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	e058      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	4618      	mov	r0, r3
 8004008:	4611      	mov	r1, r2
 800400a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
 8004014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	f04f 0000 	mov.w	r0, #0
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	0159      	lsls	r1, r3, #5
 8004026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402a:	0150      	lsls	r0, r2, #5
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4641      	mov	r1, r8
 8004032:	ebb2 0a01 	subs.w	sl, r2, r1
 8004036:	4649      	mov	r1, r9
 8004038:	eb63 0b01 	sbc.w	fp, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800404c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004050:	ebb2 040a 	subs.w	r4, r2, sl
 8004054:	eb63 050b 	sbc.w	r5, r3, fp
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	00eb      	lsls	r3, r5, #3
 8004062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004066:	00e2      	lsls	r2, r4, #3
 8004068:	4614      	mov	r4, r2
 800406a:	461d      	mov	r5, r3
 800406c:	4643      	mov	r3, r8
 800406e:	18e3      	adds	r3, r4, r3
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	464b      	mov	r3, r9
 8004074:	eb45 0303 	adc.w	r3, r5, r3
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004086:	4629      	mov	r1, r5
 8004088:	028b      	lsls	r3, r1, #10
 800408a:	4621      	mov	r1, r4
 800408c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004090:	4621      	mov	r1, r4
 8004092:	028a      	lsls	r2, r1, #10
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409a:	2200      	movs	r2, #0
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	61fa      	str	r2, [r7, #28]
 80040a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a4:	f7fc f8ec 	bl	8000280 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3750      	adds	r7, #80	; 0x50
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	007a1200 	.word	0x007a1200

080040ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000010 	.word	0x20000010

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004108:	f7ff fff0 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0a9b      	lsrs	r3, r3, #10
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40023800 	.word	0x40023800
 8004128:	0800a018 	.word	0x0800a018

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004130:	f7ff ffdc 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0b5b      	lsrs	r3, r3, #13
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40023800 	.word	0x40023800
 8004150:	0800a018 	.word	0x0800a018

08004154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e04a      	b.n	80041fc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d111      	bne.n	8004196 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fbc8 	bl	8004910 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_UART_Init+0xb0>)
 800418c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2224      	movs	r2, #36	; 0x24
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fdf2 	bl	8004d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	08000c41 	.word	0x08000c41

08004208 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b20      	cmp	r3, #32
 8004226:	f040 808c 	bne.w	8004342 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_Receive+0x2e>
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e084      	b.n	8004344 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_UART_Receive+0x40>
 8004244:	2302      	movs	r3, #2
 8004246:	e07d      	b.n	8004344 <HAL_UART_Receive+0x13c>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2222      	movs	r2, #34	; 0x22
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004264:	f7fc fe98 	bl	8000f98 <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d108      	bne.n	8004292 <HAL_UART_Receive+0x8a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e003      	b.n	800429a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042a2:	e043      	b.n	800432c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	2120      	movs	r1, #32
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fb66 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e042      	b.n	8004344 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10c      	bne.n	80042de <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	3302      	adds	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	e01f      	b.n	800431e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	d007      	beq.n	80042f8 <HAL_UART_Receive+0xf0>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <HAL_UART_Receive+0xfe>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e008      	b.n	8004318 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004312:	b2da      	uxtb	r2, r3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1b6      	bne.n	80042a4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0ba      	sub	sp, #232	; 0xe8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800438a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fc37 	bl	8004c1e <UART_Receive_IT>
      return;
 80043b0:	e25b      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80e1 	beq.w	800457e <HAL_UART_IRQHandler+0x232>
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80d4 	beq.w	800457e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
 8004406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d011      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 81f2 	beq.w	8004860 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fbc2 	bl	8004c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_UART_IRQHandler+0x17a>
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d051      	beq.n	800456a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fac8 	bl	8004a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d142      	bne.n	8004560 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	4a7f      	ldr	r2, [pc, #508]	; (8004730 <HAL_UART_IRQHandler+0x3e4>)
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fd05 	bl	8001f4a <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d019      	beq.n	800457a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e011      	b.n	800457a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	e00c      	b.n	800457a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	e007      	b.n	800457a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004578:	e172      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457a:	bf00      	nop
    return;
 800457c:	e170      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	2b01      	cmp	r3, #1
 8004584:	f040 814c 	bne.w	8004820 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8145 	beq.w	8004820 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 813e 	beq.w	8004820 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a4:	2300      	movs	r3, #0
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	f040 80b5 	bne.w	8004734 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8142 	beq.w	8004864 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f080 813b 	bcs.w	8004864 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004600:	f000 8088 	beq.w	8004714 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800461a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800461e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004630:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800463c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1d9      	bne.n	8004604 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3314      	adds	r3, #20
 8004656:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3314      	adds	r3, #20
 8004670:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004674:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004678:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800467c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e1      	bne.n	8004650 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e3      	bne.n	800468c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e3      	bne.n	80046d2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fbab 	bl	8001e6a <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8004720:	b292      	uxth	r2, r2
 8004722:	1a8a      	subs	r2, r1, r2
 8004724:	b292      	uxth	r2, r2
 8004726:	4611      	mov	r1, r2
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800472c:	e09a      	b.n	8004864 <HAL_UART_IRQHandler+0x518>
 800472e:	bf00      	nop
 8004730:	08004b23 	.word	0x08004b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 808c 	beq.w	8004868 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8087 	beq.w	8004868 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800477e:	647a      	str	r2, [r7, #68]	; 0x44
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e3      	bne.n	800475a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	623b      	str	r3, [r7, #32]
   return(result);
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047b6:	633a      	str	r2, [r7, #48]	; 0x30
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e3      	bne.n	8004792 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047fc:	61fa      	str	r2, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	617b      	str	r3, [r7, #20]
   return(result);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e3      	bne.n	80047d8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004814:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004818:	4611      	mov	r1, r2
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800481e:	e023      	b.n	8004868 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_UART_IRQHandler+0x4f4>
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f987 	bl	8004b4c <UART_Transmit_IT>
    return;
 800483e:	e014      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <HAL_UART_IRQHandler+0x51e>
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f9c7 	bl	8004bec <UART_EndTransmit_IT>
    return;
 800485e:	e004      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
    return;
 8004860:	bf00      	nop
 8004862:	e002      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
      return;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
      return;
 8004868:	bf00      	nop
  }
}
 800486a:	37e8      	adds	r7, #232	; 0xe8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a10      	ldr	r2, [pc, #64]	; (800495c <UART_InitCallbacksToDefault+0x4c>)
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <UART_InitCallbacksToDefault+0x50>)
 8004922:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <UART_InitCallbacksToDefault+0x54>)
 8004928:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <UART_InitCallbacksToDefault+0x58>)
 800492e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <UART_InitCallbacksToDefault+0x5c>)
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <UART_InitCallbacksToDefault+0x60>)
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <UART_InitCallbacksToDefault+0x64>)
 8004940:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <UART_InitCallbacksToDefault+0x68>)
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <UART_InitCallbacksToDefault+0x6c>)
 800494c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	08004885 	.word	0x08004885
 8004960:	08004871 	.word	0x08004871
 8004964:	080048ad 	.word	0x080048ad
 8004968:	08004899 	.word	0x08004899
 800496c:	080048c1 	.word	0x080048c1
 8004970:	080048d5 	.word	0x080048d5
 8004974:	080048e9 	.word	0x080048e9
 8004978:	080048fd 	.word	0x080048fd
 800497c:	08000639 	.word	0x08000639

08004980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b090      	sub	sp, #64	; 0x40
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004990:	e050      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d04c      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049a0:	f7fc fafa 	bl	8000f98 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d241      	bcs.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d0:	637a      	str	r2, [r7, #52]	; 0x34
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	613b      	str	r3, [r7, #16]
   return(result);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a04:	623a      	str	r2, [r7, #32]
 8004a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	69f9      	ldr	r1, [r7, #28]
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e5      	bne.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00f      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d09f      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3740      	adds	r7, #64	; 0x40
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b095      	sub	sp, #84	; 0x54
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a84:	643a      	str	r2, [r7, #64]	; 0x40
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d119      	bne.n	8004b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 0310 	bic.w	r3, r3, #16
 8004aea:	647b      	str	r3, [r7, #68]	; 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af4:	61ba      	str	r2, [r7, #24]
 8004af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b16:	bf00      	nop
 8004b18:	3754      	adds	r7, #84	; 0x54
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b21      	cmp	r3, #33	; 0x21
 8004b5e:	d13e      	bne.n	8004bde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b68:	d114      	bne.n	8004b94 <UART_Transmit_IT+0x48>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d110      	bne.n	8004b94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]
 8004b92:	e008      	b.n	8004ba6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	1c59      	adds	r1, r3, #1
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6211      	str	r1, [r2, #32]
 8004b9e:	781a      	ldrb	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b08c      	sub	sp, #48	; 0x30
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b22      	cmp	r3, #34	; 0x22
 8004c30:	f040 80ad 	bne.w	8004d8e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	d117      	bne.n	8004c6e <UART_Receive_IT+0x50>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d113      	bne.n	8004c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c6c:	e026      	b.n	8004cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c80:	d007      	beq.n	8004c92 <UART_Receive_IT+0x74>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <UART_Receive_IT+0x82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e008      	b.n	8004cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d15c      	bne.n	8004d8a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0220 	bic.w	r2, r2, #32
 8004cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d136      	bne.n	8004d7e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	613b      	str	r3, [r7, #16]
   return(result);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f023 0310 	bic.w	r3, r3, #16
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	623a      	str	r2, [r7, #32]
 8004d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	69f9      	ldr	r1, [r7, #28]
 8004d3c:	6a3a      	ldr	r2, [r7, #32]
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d10a      	bne.n	8004d6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004d76:	4611      	mov	r1, r2
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
 8004d7c:	e003      	b.n	8004d86 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e002      	b.n	8004d90 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3730      	adds	r7, #48	; 0x30
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b0c0      	sub	sp, #256	; 0x100
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	ea40 0301 	orr.w	r3, r0, r1
 8004dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004df0:	f021 010c 	bic.w	r1, r1, #12
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	6999      	ldr	r1, [r3, #24]
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	ea40 0301 	orr.w	r3, r0, r1
 8004e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b8f      	ldr	r3, [pc, #572]	; (8005064 <UART_SetConfig+0x2cc>)
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d005      	beq.n	8004e38 <UART_SetConfig+0xa0>
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b8d      	ldr	r3, [pc, #564]	; (8005068 <UART_SetConfig+0x2d0>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d104      	bne.n	8004e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7ff f978 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8004e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e40:	e003      	b.n	8004e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e42:	f7ff f95f 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8004e46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	f040 810c 	bne.w	8005070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e72:	415b      	adcs	r3, r3
 8004e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	eb12 0801 	adds.w	r8, r2, r1
 8004e80:	4629      	mov	r1, r5
 8004e82:	eb43 0901 	adc.w	r9, r3, r1
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e9a:	4690      	mov	r8, r2
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	eb18 0303 	adds.w	r3, r8, r3
 8004ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	eb49 0303 	adc.w	r3, r9, r3
 8004eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	18db      	adds	r3, r3, r3
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	4613      	mov	r3, r2
 8004ece:	eb42 0303 	adc.w	r3, r2, r3
 8004ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004edc:	f7fb f9d0 	bl	8000280 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <UART_SetConfig+0x2d4>)
 8004ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	011c      	lsls	r4, r3, #4
 8004eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	1891      	adds	r1, r2, r2
 8004f06:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f08:	415b      	adcs	r3, r3
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f10:	4641      	mov	r1, r8
 8004f12:	eb12 0a01 	adds.w	sl, r2, r1
 8004f16:	4649      	mov	r1, r9
 8004f18:	eb43 0b01 	adc.w	fp, r3, r1
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f30:	4692      	mov	sl, r2
 8004f32:	469b      	mov	fp, r3
 8004f34:	4643      	mov	r3, r8
 8004f36:	eb1a 0303 	adds.w	r3, sl, r3
 8004f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	eb4b 0303 	adc.w	r3, fp, r3
 8004f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	18db      	adds	r3, r3, r3
 8004f60:	643b      	str	r3, [r7, #64]	; 0x40
 8004f62:	4613      	mov	r3, r2
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f72:	f7fb f985 	bl	8000280 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4b3b      	ldr	r3, [pc, #236]	; (800506c <UART_SetConfig+0x2d4>)
 8004f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	2264      	movs	r2, #100	; 0x64
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	1acb      	subs	r3, r1, r3
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <UART_SetConfig+0x2d4>)
 8004f94:	fba3 2302 	umull	r2, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fa0:	441c      	add	r4, r3
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1851      	adds	r1, r2, r1
 8004fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fca:	4649      	mov	r1, r9
 8004fcc:	414b      	adcs	r3, r1
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fdc:	4659      	mov	r1, fp
 8004fde:	00cb      	lsls	r3, r1, #3
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	00ca      	lsls	r2, r1, #3
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005010:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005018:	460b      	mov	r3, r1
 800501a:	18db      	adds	r3, r3, r3
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
 800501e:	4613      	mov	r3, r2
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800502a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800502e:	f7fb f927 	bl	8000280 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <UART_SetConfig+0x2d4>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2164      	movs	r1, #100	; 0x64
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	3332      	adds	r3, #50	; 0x32
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <UART_SetConfig+0x2d4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 0207 	and.w	r2, r3, #7
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4422      	add	r2, r4
 800505e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005060:	e106      	b.n	8005270 <UART_SetConfig+0x4d8>
 8005062:	bf00      	nop
 8005064:	40011000 	.word	0x40011000
 8005068:	40011400 	.word	0x40011400
 800506c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800507a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800507e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005082:	4642      	mov	r2, r8
 8005084:	464b      	mov	r3, r9
 8005086:	1891      	adds	r1, r2, r2
 8005088:	6239      	str	r1, [r7, #32]
 800508a:	415b      	adcs	r3, r3
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005092:	4641      	mov	r1, r8
 8005094:	1854      	adds	r4, r2, r1
 8005096:	4649      	mov	r1, r9
 8005098:	eb43 0501 	adc.w	r5, r3, r1
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	00eb      	lsls	r3, r5, #3
 80050a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	4643      	mov	r3, r8
 80050b2:	18e3      	adds	r3, r4, r3
 80050b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050b8:	464b      	mov	r3, r9
 80050ba:	eb45 0303 	adc.w	r3, r5, r3
 80050be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050de:	4629      	mov	r1, r5
 80050e0:	008b      	lsls	r3, r1, #2
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e8:	4621      	mov	r1, r4
 80050ea:	008a      	lsls	r2, r1, #2
 80050ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050f0:	f7fb f8c6 	bl	8000280 <__aeabi_uldivmod>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4b60      	ldr	r3, [pc, #384]	; (800527c <UART_SetConfig+0x4e4>)
 80050fa:	fba3 2302 	umull	r2, r3, r3, r2
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	011c      	lsls	r4, r3, #4
 8005102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800510c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	1891      	adds	r1, r2, r2
 800511a:	61b9      	str	r1, [r7, #24]
 800511c:	415b      	adcs	r3, r3
 800511e:	61fb      	str	r3, [r7, #28]
 8005120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005124:	4641      	mov	r1, r8
 8005126:	1851      	adds	r1, r2, r1
 8005128:	6139      	str	r1, [r7, #16]
 800512a:	4649      	mov	r1, r9
 800512c:	414b      	adcs	r3, r1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800513c:	4659      	mov	r1, fp
 800513e:	00cb      	lsls	r3, r1, #3
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005146:	4651      	mov	r1, sl
 8005148:	00ca      	lsls	r2, r1, #3
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	4603      	mov	r3, r0
 8005150:	4642      	mov	r2, r8
 8005152:	189b      	adds	r3, r3, r2
 8005154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005158:	464b      	mov	r3, r9
 800515a:	460a      	mov	r2, r1
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	67bb      	str	r3, [r7, #120]	; 0x78
 800516e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800517c:	4649      	mov	r1, r9
 800517e:	008b      	lsls	r3, r1, #2
 8005180:	4641      	mov	r1, r8
 8005182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005186:	4641      	mov	r1, r8
 8005188:	008a      	lsls	r2, r1, #2
 800518a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800518e:	f7fb f877 	bl	8000280 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4611      	mov	r1, r2
 8005198:	4b38      	ldr	r3, [pc, #224]	; (800527c <UART_SetConfig+0x4e4>)
 800519a:	fba3 2301 	umull	r2, r3, r3, r1
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2264      	movs	r2, #100	; 0x64
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	1acb      	subs	r3, r1, r3
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	3332      	adds	r3, #50	; 0x32
 80051ac:	4a33      	ldr	r2, [pc, #204]	; (800527c <UART_SetConfig+0x4e4>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b8:	441c      	add	r4, r3
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	673b      	str	r3, [r7, #112]	; 0x70
 80051c2:	677a      	str	r2, [r7, #116]	; 0x74
 80051c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	415b      	adcs	r3, r3
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d8:	4641      	mov	r1, r8
 80051da:	1851      	adds	r1, r2, r1
 80051dc:	6039      	str	r1, [r7, #0]
 80051de:	4649      	mov	r1, r9
 80051e0:	414b      	adcs	r3, r1
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051f0:	4659      	mov	r1, fp
 80051f2:	00cb      	lsls	r3, r1, #3
 80051f4:	4651      	mov	r1, sl
 80051f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fa:	4651      	mov	r1, sl
 80051fc:	00ca      	lsls	r2, r1, #3
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	4603      	mov	r3, r0
 8005204:	4642      	mov	r2, r8
 8005206:	189b      	adds	r3, r3, r2
 8005208:	66bb      	str	r3, [r7, #104]	; 0x68
 800520a:	464b      	mov	r3, r9
 800520c:	460a      	mov	r2, r1
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	663b      	str	r3, [r7, #96]	; 0x60
 800521e:	667a      	str	r2, [r7, #100]	; 0x64
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800522c:	4649      	mov	r1, r9
 800522e:	008b      	lsls	r3, r1, #2
 8005230:	4641      	mov	r1, r8
 8005232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005236:	4641      	mov	r1, r8
 8005238:	008a      	lsls	r2, r1, #2
 800523a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800523e:	f7fb f81f 	bl	8000280 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <UART_SetConfig+0x4e4>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	2164      	movs	r1, #100	; 0x64
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	3332      	adds	r3, #50	; 0x32
 800525a:	4a08      	ldr	r2, [pc, #32]	; (800527c <UART_SetConfig+0x4e4>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f003 020f 	and.w	r2, r3, #15
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4422      	add	r2, r4
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005276:	46bd      	mov	sp, r7
 8005278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527c:	51eb851f 	.word	0x51eb851f

08005280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 001c 	add.w	r0, r7, #28
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	d122      	bne.n	80052de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fbee 	bl	8006ab4 <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e01a      	b.n	8005314 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fbe2 	bl	8006ab4 <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
 8005306:	e005      	b.n	8005314 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10b      	bne.n	8005332 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f043 0206 	orr.w	r2, r3, #6
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533e:	b004      	add	sp, #16
 8005340:	4770      	bx	lr
	...

08005344 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d165      	bne.n	8005424 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a41      	ldr	r2, [pc, #260]	; (8005460 <USB_SetTurnaroundTime+0x11c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d906      	bls.n	800536e <USB_SetTurnaroundTime+0x2a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <USB_SetTurnaroundTime+0x120>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d202      	bcs.n	800536e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005368:	230f      	movs	r3, #15
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e062      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <USB_SetTurnaroundTime+0x120>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d306      	bcc.n	8005384 <USB_SetTurnaroundTime+0x40>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <USB_SetTurnaroundTime+0x124>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d202      	bcs.n	8005384 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800537e:	230e      	movs	r3, #14
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e057      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4a38      	ldr	r2, [pc, #224]	; (8005468 <USB_SetTurnaroundTime+0x124>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d306      	bcc.n	800539a <USB_SetTurnaroundTime+0x56>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a37      	ldr	r2, [pc, #220]	; (800546c <USB_SetTurnaroundTime+0x128>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d202      	bcs.n	800539a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005394:	230d      	movs	r3, #13
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e04c      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a33      	ldr	r2, [pc, #204]	; (800546c <USB_SetTurnaroundTime+0x128>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d306      	bcc.n	80053b0 <USB_SetTurnaroundTime+0x6c>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a32      	ldr	r2, [pc, #200]	; (8005470 <USB_SetTurnaroundTime+0x12c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053aa:	230c      	movs	r3, #12
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e041      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <USB_SetTurnaroundTime+0x12c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d906      	bls.n	80053c6 <USB_SetTurnaroundTime+0x82>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a2e      	ldr	r2, [pc, #184]	; (8005474 <USB_SetTurnaroundTime+0x130>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d802      	bhi.n	80053c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053c0:	230b      	movs	r3, #11
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e036      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <USB_SetTurnaroundTime+0x130>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d906      	bls.n	80053dc <USB_SetTurnaroundTime+0x98>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <USB_SetTurnaroundTime+0x134>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d802      	bhi.n	80053dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053d6:	230a      	movs	r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e02b      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4a26      	ldr	r2, [pc, #152]	; (8005478 <USB_SetTurnaroundTime+0x134>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d906      	bls.n	80053f2 <USB_SetTurnaroundTime+0xae>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a25      	ldr	r2, [pc, #148]	; (800547c <USB_SetTurnaroundTime+0x138>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d202      	bcs.n	80053f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053ec:	2309      	movs	r3, #9
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e020      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4a21      	ldr	r2, [pc, #132]	; (800547c <USB_SetTurnaroundTime+0x138>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d306      	bcc.n	8005408 <USB_SetTurnaroundTime+0xc4>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4a20      	ldr	r2, [pc, #128]	; (8005480 <USB_SetTurnaroundTime+0x13c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d802      	bhi.n	8005408 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005402:	2308      	movs	r3, #8
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e015      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <USB_SetTurnaroundTime+0x13c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d906      	bls.n	800541e <USB_SetTurnaroundTime+0xda>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <USB_SetTurnaroundTime+0x140>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d202      	bcs.n	800541e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005418:	2307      	movs	r3, #7
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e00a      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800541e:	2306      	movs	r3, #6
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e007      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800542a:	2309      	movs	r3, #9
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e001      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005430:	2309      	movs	r3, #9
 8005432:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	00d8acbf 	.word	0x00d8acbf
 8005464:	00e4e1c0 	.word	0x00e4e1c0
 8005468:	00f42400 	.word	0x00f42400
 800546c:	01067380 	.word	0x01067380
 8005470:	011a499f 	.word	0x011a499f
 8005474:	01312cff 	.word	0x01312cff
 8005478:	014ca43f 	.word	0x014ca43f
 800547c:	016e3600 	.word	0x016e3600
 8005480:	01a6ab1f 	.word	0x01a6ab1f
 8005484:	01e84800 	.word	0x01e84800

08005488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d115      	bne.n	800551a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7fb fd58 	bl	8000fb0 <HAL_Delay>
      ms++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fa45 	bl	8006996 <USB_GetMode>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d01e      	beq.n	8005550 <USB_SetCurrentMode+0x84>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b31      	cmp	r3, #49	; 0x31
 8005516:	d9f0      	bls.n	80054fa <USB_SetCurrentMode+0x2e>
 8005518:	e01a      	b.n	8005550 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d115      	bne.n	800554c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800552c:	2001      	movs	r0, #1
 800552e:	f7fb fd3f 	bl	8000fb0 <HAL_Delay>
      ms++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 fa2c 	bl	8006996 <USB_GetMode>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <USB_SetCurrentMode+0x84>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b31      	cmp	r3, #49	; 0x31
 8005548:	d9f0      	bls.n	800552c <USB_SetCurrentMode+0x60>
 800554a:	e001      	b.n	8005550 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e005      	b.n	800555c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b32      	cmp	r3, #50	; 0x32
 8005554:	d101      	bne.n	800555a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005564:	b084      	sub	sp, #16
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e009      	b.n	8005598 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3340      	adds	r3, #64	; 0x40
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	2200      	movs	r2, #0
 8005590:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3301      	adds	r3, #1
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b0e      	cmp	r3, #14
 800559c:	d9f2      	bls.n	8005584 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d11c      	bne.n	80055de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f043 0302 	orr.w	r3, r3, #2
 80055b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
 80055dc:	e00b      	b.n	80055f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	4619      	mov	r1, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	461a      	mov	r2, r3
 8005612:	680b      	ldr	r3, [r1, #0]
 8005614:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10c      	bne.n	8005636 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f965 	bl	80058f4 <USB_SetDevSpeed>
 800562a:	e008      	b.n	800563e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800562c:	2101      	movs	r1, #1
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f960 	bl	80058f4 <USB_SetDevSpeed>
 8005634:	e003      	b.n	800563e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005636:	2103      	movs	r1, #3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f95b 	bl	80058f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800563e:	2110      	movs	r1, #16
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8f3 	bl	800582c <USB_FlushTxFifo>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f91f 	bl	8005894 <USB_FlushRxFifo>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	461a      	mov	r2, r3
 8005668:	2300      	movs	r3, #0
 800566a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	461a      	mov	r2, r3
 8005674:	2300      	movs	r3, #0
 8005676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e043      	b.n	8005712 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a0:	d118      	bne.n	80056d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e013      	b.n	80056e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	461a      	mov	r2, r3
 80056cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e008      	b.n	80056e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	461a      	mov	r2, r3
 8005706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800570a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3301      	adds	r3, #1
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d3b7      	bcc.n	800568a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e043      	b.n	80057a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d118      	bne.n	800576a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	461a      	mov	r2, r3
 800574c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e013      	b.n	800577c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e008      	b.n	800577c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	2300      	movs	r3, #0
 800577a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	461a      	mov	r2, r3
 800579c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3301      	adds	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3b7      	bcc.n	8005720 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f043 0210 	orr.w	r2, r3, #16
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <USB_DevInit+0x2c4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f043 0208 	orr.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	803c3800 	.word	0x803c3800

0800582c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <USB_FlushTxFifo+0x64>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e01b      	b.n	8005884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	daf2      	bge.n	800583a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <USB_FlushTxFifo+0x64>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e006      	b.n	8005884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d0f0      	beq.n	8005864 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	00030d40 	.word	0x00030d40

08005894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <USB_FlushRxFifo+0x5c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e018      	b.n	80058e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	daf2      	bge.n	80058a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2210      	movs	r2, #16
 80058c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <USB_FlushRxFifo+0x5c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e006      	b.n	80058e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d0f0      	beq.n	80058c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	00030d40 	.word	0x00030d40

080058f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0306 	and.w	r3, r3, #6
 800593e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e00a      	b.n	8005962 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d002      	beq.n	8005958 <USB_GetDevSpeed+0x32>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d102      	bne.n	800595e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005958:	2302      	movs	r3, #2
 800595a:	75fb      	strb	r3, [r7, #23]
 800595c:	e001      	b.n	8005962 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800595e:	230f      	movs	r3, #15
 8005960:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
}
 8005964:	4618      	mov	r0, r3
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d13a      	bne.n	8005a02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059aa:	4313      	orrs	r3, r2
 80059ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d155      	bne.n	8005a70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	791b      	ldrb	r3, [r3, #4]
 80059de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	059b      	lsls	r3, r3, #22
 80059e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e8:	4313      	orrs	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	e036      	b.n	8005a70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	2101      	movs	r1, #1
 8005a14:	fa01 f303 	lsl.w	r3, r1, r3
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11a      	bne.n	8005a70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a56:	430b      	orrs	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d161      	bne.n	8005b60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab2:	d11f      	bne.n	8005af4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ad2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b14:	4013      	ands	r3, r2
 8005b16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	4619      	mov	r1, r3
 8005b58:	4b35      	ldr	r3, [pc, #212]	; (8005c30 <USB_DeactivateEndpoint+0x1b0>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
 8005b5e:	e060      	b.n	8005c22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b76:	d11f      	bne.n	8005bb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4013      	ands	r3, r2
 8005bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	0159      	lsls	r1, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <USB_DeactivateEndpoint+0x1b4>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	ec337800 	.word	0xec337800
 8005c34:	eff37800 	.word	0xeff37800

08005c38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	f040 815c 	bne.w	8005f12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d132      	bne.n	8005cc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc0:	0cdb      	lsrs	r3, r3, #19
 8005cc2:	04db      	lsls	r3, r3, #19
 8005cc4:	6113      	str	r3, [r2, #16]
 8005cc6:	e074      	b.n	8005db2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce2:	0cdb      	lsrs	r3, r3, #19
 8005ce4:	04db      	lsls	r3, r3, #19
 8005ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	440b      	add	r3, r1
 8005d24:	1e59      	subs	r1, r3, #1
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d30:	4b9d      	ldr	r3, [pc, #628]	; (8005fa8 <USB_EPStartXfer+0x370>)
 8005d32:	400b      	ands	r3, r1
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	0148      	lsls	r0, r1, #5
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	4401      	add	r1, r0
 8005d3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d40:	4313      	orrs	r3, r2
 8005d42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5a:	69b9      	ldr	r1, [r7, #24]
 8005d5c:	0148      	lsls	r0, r1, #5
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	4401      	add	r1, r0
 8005d62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d66:	4313      	orrs	r3, r2
 8005d68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d11f      	bne.n	8005db2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005db0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d14b      	bne.n	8005e50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	791b      	ldrb	r3, [r3, #4]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d128      	bne.n	8005e2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d110      	bne.n	8005e0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e00f      	b.n	8005e2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e133      	b.n	80060b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	791b      	ldrb	r3, [r3, #4]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d015      	beq.n	8005ea4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 811b 	beq.w	80060b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	2101      	movs	r1, #1
 8005e94:	fa01 f303 	lsl.w	r3, r1, r3
 8005e98:	69f9      	ldr	r1, [r7, #28]
 8005e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ea2:	e109      	b.n	80060b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d110      	bne.n	8005ed6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e00f      	b.n	8005ef6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6919      	ldr	r1, [r3, #16]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	b298      	uxth	r0, r3
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4603      	mov	r3, r0
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fade 	bl	80064cc <USB_WritePacket>
 8005f10:	e0d2      	b.n	80060b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	0cdb      	lsrs	r3, r3, #19
 8005f2e:	04db      	lsls	r3, r3, #19
 8005f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d126      	bne.n	8005fac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa2:	6113      	str	r3, [r2, #16]
 8005fa4:	e03a      	b.n	800601c <USB_EPStartXfer+0x3e4>
 8005fa6:	bf00      	nop
 8005fa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	8afa      	ldrh	r2, [r7, #22]
 8005fc8:	fb03 f202 	mul.w	r2, r3, r2
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	8afb      	ldrh	r3, [r7, #22]
 8005fe0:	04d9      	lsls	r1, r3, #19
 8005fe2:	4b38      	ldr	r3, [pc, #224]	; (80060c4 <USB_EPStartXfer+0x48c>)
 8005fe4:	400b      	ands	r3, r1
 8005fe6:	69b9      	ldr	r1, [r7, #24]
 8005fe8:	0148      	lsls	r0, r1, #5
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	4401      	add	r1, r0
 8005fee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	0148      	lsls	r0, r1, #5
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	4401      	add	r1, r0
 8006014:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10d      	bne.n	800603e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6919      	ldr	r1, [r3, #16]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603a:	460a      	mov	r2, r1
 800603c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	791b      	ldrb	r3, [r3, #4]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d128      	bne.n	8006098 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e00f      	b.n	8006098 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006096:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	1ff80000 	.word	0x1ff80000

080060c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f040 80ce 	bne.w	8006286 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d132      	bne.n	8006158 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006150:	0cdb      	lsrs	r3, r3, #19
 8006152:	04db      	lsls	r3, r3, #19
 8006154:	6113      	str	r3, [r2, #16]
 8006156:	e04e      	b.n	80061f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	0cdb      	lsrs	r3, r3, #19
 8006174:	04db      	lsls	r3, r3, #19
 8006176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800619a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d903      	bls.n	80061b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e6:	6939      	ldr	r1, [r7, #16]
 80061e8:	0148      	lsls	r0, r1, #5
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	4401      	add	r1, r0
 80061ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061f2:	4313      	orrs	r3, r2
 80061f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d11e      	bne.n	800623a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	461a      	mov	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	e097      	b.n	800636a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006258:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8083 	beq.w	800636a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	6979      	ldr	r1, [r7, #20]
 800627c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006280:	4313      	orrs	r3, r2
 8006282:	634b      	str	r3, [r1, #52]	; 0x34
 8006284:	e071      	b.n	800636a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	0cdb      	lsrs	r3, r3, #19
 80062a2:	04db      	lsls	r3, r3, #19
 80062a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006318:	6939      	ldr	r1, [r7, #16]
 800631a:	0148      	lsls	r0, r1, #5
 800631c:	6979      	ldr	r1, [r7, #20]
 800631e:	4401      	add	r1, r0
 8006320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006324:	4313      	orrs	r3, r2
 8006326:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d10d      	bne.n	800634a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6919      	ldr	r1, [r3, #16]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	460a      	mov	r2, r1
 8006348:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d14a      	bne.n	800642c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ae:	f040 8086 	bne.w	80064be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f242 7210 	movw	r2, #10000	; 0x2710
 8006406:	4293      	cmp	r3, r2
 8006408:	d902      	bls.n	8006410 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
          break;
 800640e:	e056      	b.n	80064be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006428:	d0e7      	beq.n	80063fa <USB_EPStopXfer+0x82>
 800642a:	e048      	b.n	80064be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006444:	d13b      	bne.n	80064be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006464:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006468:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f242 7210 	movw	r2, #10000	; 0x2710
 800649a:	4293      	cmp	r3, r2
 800649c:	d902      	bls.n	80064a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
          break;
 80064a2:	e00c      	b.n	80064be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064bc:	d0e7      	beq.n	800648e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b089      	sub	sp, #36	; 0x24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4611      	mov	r1, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	460b      	mov	r3, r1
 80064dc:	71fb      	strb	r3, [r7, #7]
 80064de:	4613      	mov	r3, r2
 80064e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d123      	bne.n	800653a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	3303      	adds	r3, #3
 80064f6:	089b      	lsrs	r3, r3, #2
 80064f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e018      	b.n	8006532 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	031a      	lsls	r2, r3, #12
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3301      	adds	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	3301      	adds	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3e2      	bcc.n	8006500 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3724      	adds	r7, #36	; 0x24
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006548:	b480      	push	{r7}
 800654a:	b08b      	sub	sp, #44	; 0x2c
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	089b      	lsrs	r3, r3, #2
 8006562:	b29b      	uxth	r3, r3
 8006564:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	e014      	b.n	800659e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	3301      	adds	r3, #1
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	3301      	adds	r3, #1
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3301      	adds	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	3301      	adds	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	3301      	adds	r3, #1
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d3e6      	bcc.n	8006574 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065a6:	8bfb      	ldrh	r3, [r7, #30]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b6:	461a      	mov	r2, r3
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	701a      	strb	r2, [r3, #0]
      i++;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	3301      	adds	r3, #1
 80065d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	3301      	adds	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065de:	8bfb      	ldrh	r3, [r7, #30]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065e4:	8bfb      	ldrh	r3, [r7, #30]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ea      	bne.n	80065c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	372c      	adds	r7, #44	; 0x2c
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d12c      	bne.n	800666e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	db12      	blt.n	800664c <USB_EPSetStall+0x54>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00f      	beq.n	800664c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800664a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	e02b      	b.n	80066c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db12      	blt.n	80066a6 <USB_EPSetStall+0xae>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d128      	bne.n	8006742 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800670e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d003      	beq.n	8006720 <USB_EPClearStall+0x4c>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	791b      	ldrb	r3, [r3, #4]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d138      	bne.n	8006792 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e027      	b.n	8006792 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006760:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	791b      	ldrb	r3, [r3, #4]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d003      	beq.n	8006772 <USB_EPClearStall+0x9e>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d10f      	bne.n	8006792 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067d4:	68f9      	ldr	r1, [r7, #12]
 80067d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681a:	f023 0302 	bic.w	r3, r3, #2
 800681e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685c:	f043 0302 	orr.w	r3, r3, #2
 8006860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006888:	68fb      	ldr	r3, [r7, #12]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	0c1b      	lsrs	r3, r3, #16
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	4013      	ands	r3, r2
 80068ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	b29b      	uxth	r3, r3
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	4013      	ands	r3, r2
 800692a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800692c:	68bb      	ldr	r3, [r7, #8]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800693a:	b480      	push	{r7}
 800693c:	b087      	sub	sp, #28
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	01db      	lsls	r3, r3, #7
 800696c:	b2db      	uxtb	r3, r3
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4013      	ands	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006988:	68bb      	ldr	r3, [r7, #8]
}
 800698a:	4618      	mov	r0, r3
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	460b      	mov	r3, r1
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	333c      	adds	r3, #60	; 0x3c
 8006a0e:	3304      	adds	r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <USB_EP0_OutStart+0xb8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d90a      	bls.n	8006a32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a2c:	d101      	bne.n	8006a32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e037      	b.n	8006aa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a60:	f043 0318 	orr.w	r3, r3, #24
 8006a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10f      	bne.n	8006aa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	4f54300a 	.word	0x4f54300a

08006ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <USB_CoreReset+0x64>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e01b      	b.n	8006b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	daf2      	bge.n	8006ac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <USB_CoreReset+0x64>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e006      	b.n	8006b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d0f0      	beq.n	8006aea <USB_CoreReset+0x36>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	00030d40 	.word	0x00030d40

08006b1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b2c:	f002 fcc4 	bl	80094b8 <USBD_static_malloc>
 8006b30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32b0      	adds	r2, #176	; 0xb0
 8006b42:	2100      	movs	r1, #0
 8006b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e0d4      	b.n	8006cf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f002 fd14 	bl	8009580 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32b0      	adds	r2, #176	; 0xb0
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	32b0      	adds	r2, #176	; 0xb0
 8006b72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d138      	bne.n	8006bf6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b84:	4b5e      	ldr	r3, [pc, #376]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006b86:	7819      	ldrb	r1, [r3, #0]
 8006b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 fb6f 	bl	8009272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b94:	4b5a      	ldr	r3, [pc, #360]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2201      	movs	r2, #1
 8006bac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bae:	4b55      	ldr	r3, [pc, #340]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006bb0:	7819      	ldrb	r1, [r3, #0]
 8006bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fb5a 	bl	8009272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bbe:	4b51      	ldr	r3, [pc, #324]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bda:	4b4b      	ldr	r3, [pc, #300]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f003 020f 	and.w	r2, r3, #15
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3326      	adds	r3, #38	; 0x26
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	e035      	b.n	8006c62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bf6:	4b42      	ldr	r3, [pc, #264]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006bf8:	7819      	ldrb	r1, [r3, #0]
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fb37 	bl	8009272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c04:	4b3e      	ldr	r3, [pc, #248]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c1e:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	2202      	movs	r2, #2
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f002 fb23 	bl	8009272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c2c:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 020f 	and.w	r2, r3, #15
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c44:	2201      	movs	r2, #1
 8006c46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c48:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3326      	adds	r3, #38	; 0x26
 8006c5e:	2210      	movs	r2, #16
 8006c60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c62:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006c64:	7819      	ldrb	r1, [r3, #0]
 8006c66:	2308      	movs	r3, #8
 8006c68:	2203      	movs	r2, #3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f002 fb01 	bl	8009272 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c70:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 020f 	and.w	r2, r3, #15
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	3324      	adds	r3, #36	; 0x24
 8006c86:	2201      	movs	r2, #1
 8006c88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	33b0      	adds	r3, #176	; 0xb0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e018      	b.n	8006cf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7c1b      	ldrb	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006cce:	7819      	ldrb	r1, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fbb8 	bl	8009450 <USBD_LL_PrepareReceive>
 8006ce0:	e008      	b.n	8006cf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006ce4:	7819      	ldrb	r1, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 fbae 	bl	8009450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200000a3 	.word	0x200000a3
 8006d04:	200000a4 	.word	0x200000a4
 8006d08:	200000a5 	.word	0x200000a5

08006d0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d18:	4b3a      	ldr	r3, [pc, #232]	; (8006e04 <USBD_CDC_DeInit+0xf8>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 facd 	bl	80092be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d24:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <USBD_CDC_DeInit+0xf8>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d3e:	4b32      	ldr	r3, [pc, #200]	; (8006e08 <USBD_CDC_DeInit+0xfc>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 faba 	bl	80092be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d4a:	4b2f      	ldr	r3, [pc, #188]	; (8006e08 <USBD_CDC_DeInit+0xfc>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f003 020f 	and.w	r2, r3, #15
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d62:	2200      	movs	r2, #0
 8006d64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <USBD_CDC_DeInit+0x100>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 faa6 	bl	80092be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d72:	4b26      	ldr	r3, [pc, #152]	; (8006e0c <USBD_CDC_DeInit+0x100>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f003 020f 	and.w	r2, r3, #15
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	2200      	movs	r2, #0
 8006d8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d8c:	4b1f      	ldr	r3, [pc, #124]	; (8006e0c <USBD_CDC_DeInit+0x100>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3326      	adds	r3, #38	; 0x26
 8006da2:	2200      	movs	r2, #0
 8006da4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	32b0      	adds	r2, #176	; 0xb0
 8006db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01f      	beq.n	8006df8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	33b0      	adds	r3, #176	; 0xb0
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32b0      	adds	r2, #176	; 0xb0
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f002 fb7a 	bl	80094d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	; 0xb0
 8006dea:	2100      	movs	r1, #0
 8006dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200000a3 	.word	0x200000a3
 8006e08:	200000a4 	.word	0x200000a4
 8006e0c:	200000a5 	.word	0x200000a5

08006e10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32b0      	adds	r2, #176	; 0xb0
 8006e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e0bf      	b.n	8006fc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d050      	beq.n	8006eee <USBD_CDC_Setup+0xde>
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	f040 80af 	bne.w	8006fb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88db      	ldrh	r3, [r3, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03a      	beq.n	8006ed0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b25b      	sxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da1b      	bge.n	8006e9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	33b0      	adds	r3, #176	; 0xb0
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	88d2      	ldrh	r2, [r2, #6]
 8006e80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b07      	cmp	r3, #7
 8006e88:	bf28      	it	cs
 8006e8a:	2307      	movcs	r3, #7
 8006e8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	89fa      	ldrh	r2, [r7, #14]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fd89 	bl	80089ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e9a:	e090      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785a      	ldrb	r2, [r3, #1]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8006eac:	d803      	bhi.n	8006eb6 <USBD_CDC_Setup+0xa6>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	88db      	ldrh	r3, [r3, #6]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	e000      	b.n	8006eb8 <USBD_CDC_Setup+0xa8>
 8006eb6:	2240      	movs	r2, #64	; 0x40
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ebe:	6939      	ldr	r1, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fd9b 	bl	8008a04 <USBD_CtlPrepareRx>
      break;
 8006ece:	e076      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	33b0      	adds	r3, #176	; 0xb0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	7850      	ldrb	r0, [r2, #1]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	4798      	blx	r3
      break;
 8006eec:	e067      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b0b      	cmp	r3, #11
 8006ef4:	d851      	bhi.n	8006f9a <USBD_CDC_Setup+0x18a>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBD_CDC_Setup+0xec>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f2d 	.word	0x08006f2d
 8006f00:	08006fa9 	.word	0x08006fa9
 8006f04:	08006f9b 	.word	0x08006f9b
 8006f08:	08006f9b 	.word	0x08006f9b
 8006f0c:	08006f9b 	.word	0x08006f9b
 8006f10:	08006f9b 	.word	0x08006f9b
 8006f14:	08006f9b 	.word	0x08006f9b
 8006f18:	08006f9b 	.word	0x08006f9b
 8006f1c:	08006f9b 	.word	0x08006f9b
 8006f20:	08006f9b 	.word	0x08006f9b
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006f81 	.word	0x08006f81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d107      	bne.n	8006f48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f38:	f107 030a 	add.w	r3, r7, #10
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fd33 	bl	80089ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f46:	e032      	b.n	8006fae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fcbd 	bl	80088ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	75fb      	strb	r3, [r7, #23]
          break;
 8006f54:	e02b      	b.n	8006fae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d107      	bne.n	8006f72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f62:	f107 030d 	add.w	r3, r7, #13
 8006f66:	2201      	movs	r2, #1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fd1e 	bl	80089ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f70:	e01d      	b.n	8006fae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fca8 	bl	80088ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7e:	e016      	b.n	8006fae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d00f      	beq.n	8006fac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fc9b 	bl	80088ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f98:	e008      	b.n	8006fac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fc94 	bl	80088ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fa6:	e002      	b.n	8006fae <USBD_CDC_Setup+0x19e>
          break;
 8006fa8:	bf00      	nop
 8006faa:	e008      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>
          break;
 8006fac:	bf00      	nop
      }
      break;
 8006fae:	e006      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fc89 	bl	80088ca <USBD_CtlError>
      ret = USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32b0      	adds	r2, #176	; 0xb0
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e065      	b.n	80070be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	32b0      	adds	r2, #176	; 0xb0
 8006ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007000:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	f003 020f 	and.w	r2, r3, #15
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	3318      	adds	r3, #24
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02f      	beq.n	800707c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	3318      	adds	r3, #24
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 010f 	and.w	r1, r3, #15
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	460b      	mov	r3, r1
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	440b      	add	r3, r1
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4403      	add	r3, r0
 8007044:	3348      	adds	r3, #72	; 0x48
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	fbb2 f1f3 	udiv	r1, r2, r3
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007052:	2b00      	cmp	r3, #0
 8007054:	d112      	bne.n	800707c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3318      	adds	r3, #24
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800706e:	78f9      	ldrb	r1, [r7, #3]
 8007070:	2300      	movs	r3, #0
 8007072:	2200      	movs	r2, #0
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f002 f9ca 	bl	800940e <USBD_LL_Transmit>
 800707a:	e01f      	b.n	80070bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	33b0      	adds	r3, #176	; 0xb0
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	33b0      	adds	r3, #176	; 0xb0
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32b0      	adds	r2, #176	; 0xb0
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	32b0      	adds	r2, #176	; 0xb0
 80070ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e01a      	b.n	800712e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f002 f9c8 	bl	8009492 <USBD_LL_GetRxDataSize>
 8007102:	4602      	mov	r2, r0
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	33b0      	adds	r3, #176	; 0xb0
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007128:	4611      	mov	r1, r2
 800712a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	32b0      	adds	r2, #176	; 0xb0
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	e025      	b.n	80071a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	33b0      	adds	r3, #176	; 0xb0
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01a      	beq.n	80071a2 <USBD_CDC_EP0_RxReady+0x6c>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007172:	2bff      	cmp	r3, #255	; 0xff
 8007174:	d015      	beq.n	80071a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	33b0      	adds	r3, #176	; 0xb0
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800718e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007196:	b292      	uxth	r2, r2
 8007198:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071b4:	2182      	movs	r1, #130	; 0x82
 80071b6:	4818      	ldr	r0, [pc, #96]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071b8:	f000 fd4f 	bl	8007c5a <USBD_GetEpDesc>
 80071bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071be:	2101      	movs	r1, #1
 80071c0:	4815      	ldr	r0, [pc, #84]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071c2:	f000 fd4a 	bl	8007c5a <USBD_GetEpDesc>
 80071c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071c8:	2181      	movs	r1, #129	; 0x81
 80071ca:	4813      	ldr	r0, [pc, #76]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071cc:	f000 fd45 	bl	8007c5a <USBD_GetEpDesc>
 80071d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2210      	movs	r2, #16
 80071dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ec:	711a      	strb	r2, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	711a      	strb	r2, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2243      	movs	r2, #67	; 0x43
 800720a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000060 	.word	0x20000060

0800721c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007224:	2182      	movs	r1, #130	; 0x82
 8007226:	4818      	ldr	r0, [pc, #96]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007228:	f000 fd17 	bl	8007c5a <USBD_GetEpDesc>
 800722c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800722e:	2101      	movs	r1, #1
 8007230:	4815      	ldr	r0, [pc, #84]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007232:	f000 fd12 	bl	8007c5a <USBD_GetEpDesc>
 8007236:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007238:	2181      	movs	r1, #129	; 0x81
 800723a:	4813      	ldr	r0, [pc, #76]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800723c:	f000 fd0d 	bl	8007c5a <USBD_GetEpDesc>
 8007240:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2210      	movs	r2, #16
 800724c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2200      	movs	r2, #0
 8007258:	711a      	strb	r2, [r3, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f042 0202 	orr.w	r2, r2, #2
 8007260:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d006      	beq.n	8007276 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	711a      	strb	r2, [r3, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f042 0202 	orr.w	r2, r2, #2
 8007274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2243      	movs	r2, #67	; 0x43
 800727a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000060 	.word	0x20000060

0800728c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007294:	2182      	movs	r1, #130	; 0x82
 8007296:	4818      	ldr	r0, [pc, #96]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007298:	f000 fcdf 	bl	8007c5a <USBD_GetEpDesc>
 800729c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800729e:	2101      	movs	r1, #1
 80072a0:	4815      	ldr	r0, [pc, #84]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072a2:	f000 fcda 	bl	8007c5a <USBD_GetEpDesc>
 80072a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072a8:	2181      	movs	r1, #129	; 0x81
 80072aa:	4813      	ldr	r0, [pc, #76]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072ac:	f000 fcd5 	bl	8007c5a <USBD_GetEpDesc>
 80072b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2210      	movs	r2, #16
 80072bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072cc:	711a      	strb	r2, [r3, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e0:	711a      	strb	r2, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2243      	movs	r2, #67	; 0x43
 80072ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000060 	.word	0x20000060

080072fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220a      	movs	r2, #10
 8007308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800730a:	4b03      	ldr	r3, [pc, #12]	; (8007318 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	2000001c 	.word	0x2000001c

0800731c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	e009      	b.n	8007344 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	33b0      	adds	r3, #176	; 0xb0
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	32b0      	adds	r2, #176	; 0xb0
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	e008      	b.n	8007388 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	32b0      	adds	r2, #176	; 0xb0
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e004      	b.n	80073c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32b0      	adds	r2, #176	; 0xb0
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80073e8:	2301      	movs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32b0      	adds	r2, #176	; 0xb0
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073fe:	2303      	movs	r3, #3
 8007400:	e025      	b.n	800744e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007408:	2b00      	cmp	r3, #0
 800740a:	d11f      	bne.n	800744c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2201      	movs	r2, #1
 8007410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007414:	4b10      	ldr	r3, [pc, #64]	; (8007458 <USBD_CDC_TransmitPacket+0x88>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 020f 	and.w	r2, r3, #15
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4403      	add	r3, r0
 800742e:	3318      	adds	r3, #24
 8007430:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <USBD_CDC_TransmitPacket+0x88>)
 8007434:	7819      	ldrb	r1, [r3, #0]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 ffe3 	bl	800940e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200000a3 	.word	0x200000a3

0800745c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32b0      	adds	r2, #176	; 0xb0
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	32b0      	adds	r2, #176	; 0xb0
 800747e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007486:	2303      	movs	r3, #3
 8007488:	e018      	b.n	80074bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7c1b      	ldrb	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <USBD_CDC_ReceivePacket+0x68>)
 8007494:	7819      	ldrb	r1, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800749c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 ffd5 	bl	8009450 <USBD_LL_PrepareReceive>
 80074a6:	e008      	b.n	80074ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <USBD_CDC_ReceivePacket+0x68>)
 80074aa:	7819      	ldrb	r1, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 ffcb 	bl	8009450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200000a4 	.word	0x200000a4

080074c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e01f      	b.n	8007520 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	79fa      	ldrb	r2, [r7, #7]
 8007512:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 fe45 	bl	80091a4 <USBD_LL_Init>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e025      	b.n	800758c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	; 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00f      	beq.n	800757c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	; 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	f107 020e 	add.w	r2, r7, #14
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	4602      	mov	r2, r0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fe4d 	bl	800923c <USBD_LL_Start>
 80075a2:	4603      	mov	r3, r0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	4611      	mov	r1, r2
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	4611      	mov	r1, r2
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f908 	bl	8008856 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2b02      	cmp	r3, #2
 8007668:	d01a      	beq.n	80076a0 <USBD_LL_SetupStage+0x72>
 800766a:	2b02      	cmp	r3, #2
 800766c:	d822      	bhi.n	80076b4 <USBD_LL_SetupStage+0x86>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <USBD_LL_SetupStage+0x4a>
 8007672:	2b01      	cmp	r3, #1
 8007674:	d00a      	beq.n	800768c <USBD_LL_SetupStage+0x5e>
 8007676:	e01d      	b.n	80076b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fb5f 	bl	8007d44 <USBD_StdDevReq>
 8007686:	4603      	mov	r3, r0
 8007688:	73fb      	strb	r3, [r7, #15]
      break;
 800768a:	e020      	b.n	80076ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fbc7 	bl	8007e28 <USBD_StdItfReq>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
      break;
 800769e:	e016      	b.n	80076ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fc29 	bl	8007f00 <USBD_StdEPReq>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
      break;
 80076b2:	e00c      	b.n	80076ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fe1a 	bl	80092fc <USBD_LL_StallEP>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	bf00      	nop
  }

  return ret;
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	460b      	mov	r3, r1
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d16e      	bne.n	80077ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f040 8098 	bne.w	8007834 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	429a      	cmp	r2, r3
 800770e:	d913      	bls.n	8007738 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	1ad2      	subs	r2, r2, r3
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	4293      	cmp	r3, r2
 8007728:	bf28      	it	cs
 800772a:	4613      	movcs	r3, r2
 800772c:	461a      	mov	r2, r3
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 f984 	bl	8008a3e <USBD_CtlContinueRx>
 8007736:	e07d      	b.n	8007834 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2b02      	cmp	r3, #2
 8007744:	d014      	beq.n	8007770 <USBD_LL_DataOutStage+0x98>
 8007746:	2b02      	cmp	r3, #2
 8007748:	d81d      	bhi.n	8007786 <USBD_LL_DataOutStage+0xae>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <USBD_LL_DataOutStage+0x7c>
 800774e:	2b01      	cmp	r3, #1
 8007750:	d003      	beq.n	800775a <USBD_LL_DataOutStage+0x82>
 8007752:	e018      	b.n	8007786 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	75bb      	strb	r3, [r7, #22]
            break;
 8007758:	e018      	b.n	800778c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007760:	b2db      	uxtb	r3, r3
 8007762:	4619      	mov	r1, r3
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fa5e 	bl	8007c26 <USBD_CoreFindIF>
 800776a:	4603      	mov	r3, r0
 800776c:	75bb      	strb	r3, [r7, #22]
            break;
 800776e:	e00d      	b.n	800778c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fa60 	bl	8007c40 <USBD_CoreFindEP>
 8007780:	4603      	mov	r3, r0
 8007782:	75bb      	strb	r3, [r7, #22]
            break;
 8007784:	e002      	b.n	800778c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	75bb      	strb	r3, [r7, #22]
            break;
 800778a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800778c:	7dbb      	ldrb	r3, [r7, #22]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d119      	bne.n	80077c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d113      	bne.n	80077c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800779e:	7dba      	ldrb	r2, [r7, #22]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	32ae      	adds	r2, #174	; 0xae
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077ae:	7dba      	ldrb	r2, [r7, #22]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077b6:	7dba      	ldrb	r2, [r7, #22]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	32ae      	adds	r2, #174	; 0xae
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f001 f94a 	bl	8008a60 <USBD_CtlSendStatus>
 80077cc:	e032      	b.n	8007834 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	4619      	mov	r1, r3
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fa31 	bl	8007c40 <USBD_CoreFindEP>
 80077de:	4603      	mov	r3, r0
 80077e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077e2:	7dbb      	ldrb	r3, [r7, #22]
 80077e4:	2bff      	cmp	r3, #255	; 0xff
 80077e6:	d025      	beq.n	8007834 <USBD_LL_DataOutStage+0x15c>
 80077e8:	7dbb      	ldrb	r3, [r7, #22]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d122      	bne.n	8007834 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d117      	bne.n	800782a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077fa:	7dba      	ldrb	r2, [r7, #22]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	32ae      	adds	r2, #174	; 0xae
 8007800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00f      	beq.n	800782a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800780a:	7dba      	ldrb	r2, [r7, #22]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007812:	7dba      	ldrb	r2, [r7, #22]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	32ae      	adds	r2, #174	; 0xae
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	7afa      	ldrb	r2, [r7, #11]
 8007820:	4611      	mov	r1, r2
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	e000      	b.n	8007836 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b086      	sub	sp, #24
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	460b      	mov	r3, r1
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d16f      	bne.n	8007932 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3314      	adds	r3, #20
 8007856:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800785e:	2b02      	cmp	r3, #2
 8007860:	d15a      	bne.n	8007918 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	429a      	cmp	r2, r3
 800786c:	d914      	bls.n	8007898 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	461a      	mov	r2, r3
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f001 f8ac 	bl	80089e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f001 fddd 	bl	8009450 <USBD_LL_PrepareReceive>
 8007896:	e03f      	b.n	8007918 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d11c      	bne.n	80078de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d316      	bcc.n	80078de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d20f      	bcs.n	80078de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078be:	2200      	movs	r2, #0
 80078c0:	2100      	movs	r1, #0
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f001 f88d 	bl	80089e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f001 fdba 	bl	8009450 <USBD_LL_PrepareReceive>
 80078dc:	e01c      	b.n	8007918 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d10f      	bne.n	800790a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f001 fcf5 	bl	80092fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f001 f8b7 	bl	8008a86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d03a      	beq.n	8007998 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fe42 	bl	80075ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007930:	e032      	b.n	8007998 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f97f 	bl	8007c40 <USBD_CoreFindEP>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	d025      	beq.n	8007998 <USBD_LL_DataInStage+0x15a>
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d122      	bne.n	8007998 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d11c      	bne.n	8007998 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800795e:	7dfa      	ldrb	r2, [r7, #23]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	32ae      	adds	r2, #174	; 0xae
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d014      	beq.n	8007998 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800796e:	7dfa      	ldrb	r2, [r7, #23]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007976:	7dfa      	ldrb	r2, [r7, #23]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	32ae      	adds	r2, #174	; 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	7afa      	ldrb	r2, [r7, #11]
 8007984:	4611      	mov	r1, r2
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800798e:	7dbb      	ldrb	r3, [r7, #22]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007994:	7dbb      	ldrb	r3, [r7, #22]
 8007996:	e000      	b.n	800799a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d014      	beq.n	8007a08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00e      	beq.n	8007a08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6852      	ldr	r2, [r2, #4]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	4611      	mov	r1, r2
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a08:	2340      	movs	r3, #64	; 0x40
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fc2f 	bl	8009272 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2240      	movs	r2, #64	; 0x40
 8007a20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	2200      	movs	r2, #0
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fc21 	bl	8009272 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2240      	movs	r2, #64	; 0x40
 8007a3a:	621a      	str	r2, [r3, #32]

  return ret;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d106      	bne.n	8007ab4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d110      	bne.n	8007af8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	32ae      	adds	r2, #174	; 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e01c      	b.n	8007b5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d115      	bne.n	8007b5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	32ae      	adds	r2, #174	; 0xae
 8007b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	; 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	4611      	mov	r1, r2
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32ae      	adds	r2, #174	; 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e01c      	b.n	8007bc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d115      	bne.n	8007bc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	32ae      	adds	r2, #174	; 0xae
 8007b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32ae      	adds	r2, #174	; 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6852      	ldr	r2, [r2, #4]
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b086      	sub	sp, #24
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	885b      	ldrh	r3, [r3, #2]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d920      	bls.n	8007cc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c8a:	e013      	b.n	8007cb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c8c:	f107 030a 	add.w	r3, r7, #10
 8007c90:	4619      	mov	r1, r3
 8007c92:	6978      	ldr	r0, [r7, #20]
 8007c94:	f000 f81b 	bl	8007cce <USBD_GetNextDesc>
 8007c98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b05      	cmp	r3, #5
 8007ca0:	d108      	bne.n	8007cb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	789b      	ldrb	r3, [r3, #2]
 8007caa:	78fa      	ldrb	r2, [r7, #3]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d008      	beq.n	8007cc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	897b      	ldrh	r3, [r7, #10]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d8e5      	bhi.n	8007c8c <USBD_GetEpDesc+0x32>
 8007cc0:	e000      	b.n	8007cc4 <USBD_GetEpDesc+0x6a>
          break;
 8007cc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cc4:	693b      	ldr	r3, [r7, #16]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d26:	8a3b      	ldrh	r3, [r7, #16]
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	b21a      	sxth	r2, r3
 8007d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	b21b      	sxth	r3, r3
 8007d34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d36:	89fb      	ldrh	r3, [r7, #14]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d005      	beq.n	8007d6a <USBD_StdDevReq+0x26>
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d857      	bhi.n	8007e12 <USBD_StdDevReq+0xce>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00f      	beq.n	8007d86 <USBD_StdDevReq+0x42>
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d153      	bne.n	8007e12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	32ae      	adds	r2, #174	; 0xae
 8007d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]
      break;
 8007d84:	e04a      	b.n	8007e1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d83b      	bhi.n	8007e06 <USBD_StdDevReq+0xc2>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USBD_StdDevReq+0x50>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007dfd 	.word	0x08007dfd
 8007d9c:	08007e07 	.word	0x08007e07
 8007da0:	08007df3 	.word	0x08007df3
 8007da4:	08007e07 	.word	0x08007e07
 8007da8:	08007dc7 	.word	0x08007dc7
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007e07 	.word	0x08007e07
 8007db4:	08007ddf 	.word	0x08007ddf
 8007db8:	08007dd1 	.word	0x08007dd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa3c 	bl	800823c <USBD_GetDescriptor>
          break;
 8007dc4:	e024      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fba1 	bl	8008510 <USBD_SetAddress>
          break;
 8007dce:	e01f      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fbe0 	bl	8008598 <USBD_SetConfig>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
          break;
 8007ddc:	e018      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fc83 	bl	80086ec <USBD_GetConfig>
          break;
 8007de6:	e013      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fcb4 	bl	8008758 <USBD_GetStatus>
          break;
 8007df0:	e00e      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fce3 	bl	80087c0 <USBD_SetFeature>
          break;
 8007dfa:	e009      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fd07 	bl	8008812 <USBD_ClrFeature>
          break;
 8007e04:	e004      	b.n	8007e10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fd5e 	bl	80088ca <USBD_CtlError>
          break;
 8007e0e:	bf00      	nop
      }
      break;
 8007e10:	e004      	b.n	8007e1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fd58 	bl	80088ca <USBD_CtlError>
      break;
 8007e1a:	bf00      	nop
  }

  return ret;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d005      	beq.n	8007e4e <USBD_StdItfReq+0x26>
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d852      	bhi.n	8007eec <USBD_StdItfReq+0xc4>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <USBD_StdItfReq+0x26>
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d14e      	bne.n	8007eec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d840      	bhi.n	8007ede <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	889b      	ldrh	r3, [r3, #4]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d836      	bhi.n	8007ed4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	889b      	ldrh	r3, [r3, #4]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff fed9 	bl	8007c26 <USBD_CoreFindIF>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2bff      	cmp	r3, #255	; 0xff
 8007e7c:	d01d      	beq.n	8007eba <USBD_StdItfReq+0x92>
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11a      	bne.n	8007eba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e84:	7bba      	ldrb	r2, [r7, #14]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	32ae      	adds	r2, #174	; 0xae
 8007e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00f      	beq.n	8007eb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e94:	7bba      	ldrb	r2, [r7, #14]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e9c:	7bba      	ldrb	r2, [r7, #14]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	32ae      	adds	r2, #174	; 0xae
 8007ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007eb2:	e004      	b.n	8007ebe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007eb8:	e001      	b.n	8007ebe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	88db      	ldrh	r3, [r3, #6]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d110      	bne.n	8007ee8 <USBD_StdItfReq+0xc0>
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10d      	bne.n	8007ee8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fdc7 	bl	8008a60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ed2:	e009      	b.n	8007ee8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fcf7 	bl	80088ca <USBD_CtlError>
          break;
 8007edc:	e004      	b.n	8007ee8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fcf2 	bl	80088ca <USBD_CtlError>
          break;
 8007ee6:	e000      	b.n	8007eea <USBD_StdItfReq+0xc2>
          break;
 8007ee8:	bf00      	nop
      }
      break;
 8007eea:	e004      	b.n	8007ef6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fceb 	bl	80088ca <USBD_CtlError>
      break;
 8007ef4:	bf00      	nop
  }

  return ret;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	889b      	ldrh	r3, [r3, #4]
 8007f12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f1c:	2b40      	cmp	r3, #64	; 0x40
 8007f1e:	d007      	beq.n	8007f30 <USBD_StdEPReq+0x30>
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	f200 817f 	bhi.w	8008224 <USBD_StdEPReq+0x324>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d02a      	beq.n	8007f80 <USBD_StdEPReq+0x80>
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	f040 817a 	bne.w	8008224 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff fe83 	bl	8007c40 <USBD_CoreFindEP>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f3e:	7b7b      	ldrb	r3, [r7, #13]
 8007f40:	2bff      	cmp	r3, #255	; 0xff
 8007f42:	f000 8174 	beq.w	800822e <USBD_StdEPReq+0x32e>
 8007f46:	7b7b      	ldrb	r3, [r7, #13]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f040 8170 	bne.w	800822e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f4e:	7b7a      	ldrb	r2, [r7, #13]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f56:	7b7a      	ldrb	r2, [r7, #13]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	32ae      	adds	r2, #174	; 0xae
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8163 	beq.w	800822e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f68:	7b7a      	ldrb	r2, [r7, #13]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	32ae      	adds	r2, #174	; 0xae
 8007f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f7e:	e156      	b.n	800822e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d008      	beq.n	8007f9a <USBD_StdEPReq+0x9a>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	f300 8145 	bgt.w	8008218 <USBD_StdEPReq+0x318>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 809b 	beq.w	80080ca <USBD_StdEPReq+0x1ca>
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d03c      	beq.n	8008012 <USBD_StdEPReq+0x112>
 8007f98:	e13e      	b.n	8008218 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d002      	beq.n	8007fac <USBD_StdEPReq+0xac>
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d016      	beq.n	8007fd8 <USBD_StdEPReq+0xd8>
 8007faa:	e02c      	b.n	8008006 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00d      	beq.n	8007fce <USBD_StdEPReq+0xce>
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b80      	cmp	r3, #128	; 0x80
 8007fb6:	d00a      	beq.n	8007fce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f99d 	bl	80092fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fc2:	2180      	movs	r1, #128	; 0x80
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 f999 	bl	80092fc <USBD_LL_StallEP>
 8007fca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fcc:	e020      	b.n	8008010 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fc7a 	bl	80088ca <USBD_CtlError>
              break;
 8007fd6:	e01b      	b.n	8008010 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	885b      	ldrh	r3, [r3, #2]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10e      	bne.n	8007ffe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <USBD_StdEPReq+0xfe>
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d008      	beq.n	8007ffe <USBD_StdEPReq+0xfe>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	88db      	ldrh	r3, [r3, #6]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f97f 	bl	80092fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fd2e 	bl	8008a60 <USBD_CtlSendStatus>

              break;
 8008004:	e004      	b.n	8008010 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fc5e 	bl	80088ca <USBD_CtlError>
              break;
 800800e:	bf00      	nop
          }
          break;
 8008010:	e107      	b.n	8008222 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d002      	beq.n	8008024 <USBD_StdEPReq+0x124>
 800801e:	2b03      	cmp	r3, #3
 8008020:	d016      	beq.n	8008050 <USBD_StdEPReq+0x150>
 8008022:	e04b      	b.n	80080bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00d      	beq.n	8008046 <USBD_StdEPReq+0x146>
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d00a      	beq.n	8008046 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f961 	bl	80092fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 f95d 	bl	80092fc <USBD_LL_StallEP>
 8008042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008044:	e040      	b.n	80080c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc3e 	bl	80088ca <USBD_CtlError>
              break;
 800804e:	e03b      	b.n	80080c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d136      	bne.n	80080c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 f967 	bl	800933a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fcf7 	bl	8008a60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fde2 	bl	8007c40 <USBD_CoreFindEP>
 800807c:	4603      	mov	r3, r0
 800807e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008080:	7b7b      	ldrb	r3, [r7, #13]
 8008082:	2bff      	cmp	r3, #255	; 0xff
 8008084:	d01f      	beq.n	80080c6 <USBD_StdEPReq+0x1c6>
 8008086:	7b7b      	ldrb	r3, [r7, #13]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11c      	bne.n	80080c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800808c:	7b7a      	ldrb	r2, [r7, #13]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008094:	7b7a      	ldrb	r2, [r7, #13]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	32ae      	adds	r2, #174	; 0xae
 800809a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d010      	beq.n	80080c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080a4:	7b7a      	ldrb	r2, [r7, #13]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32ae      	adds	r2, #174	; 0xae
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080ba:	e004      	b.n	80080c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fc03 	bl	80088ca <USBD_CtlError>
              break;
 80080c4:	e000      	b.n	80080c8 <USBD_StdEPReq+0x1c8>
              break;
 80080c6:	bf00      	nop
          }
          break;
 80080c8:	e0ab      	b.n	8008222 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d002      	beq.n	80080dc <USBD_StdEPReq+0x1dc>
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d032      	beq.n	8008140 <USBD_StdEPReq+0x240>
 80080da:	e097      	b.n	800820c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <USBD_StdEPReq+0x1f2>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d004      	beq.n	80080f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fbed 	bl	80088ca <USBD_CtlError>
                break;
 80080f0:	e091      	b.n	8008216 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	da0b      	bge.n	8008112 <USBD_StdEPReq+0x212>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	3310      	adds	r3, #16
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	3304      	adds	r3, #4
 8008110:	e00b      	b.n	800812a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	3304      	adds	r3, #4
 800812a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2202      	movs	r2, #2
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc37 	bl	80089ac <USBD_CtlSendData>
              break;
 800813e:	e06a      	b.n	8008216 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da11      	bge.n	800816c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	f003 020f 	and.w	r2, r3, #15
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	3324      	adds	r3, #36	; 0x24
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d117      	bne.n	8008192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fbb0 	bl	80088ca <USBD_CtlError>
                  break;
 800816a:	e054      	b.n	8008216 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	f003 020f 	and.w	r2, r3, #15
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb9d 	bl	80088ca <USBD_CtlError>
                  break;
 8008190:	e041      	b.n	8008216 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	da0b      	bge.n	80081b2 <USBD_StdEPReq+0x2b2>
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	3310      	adds	r3, #16
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	e00b      	b.n	80081ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	3304      	adds	r3, #4
 80081ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <USBD_StdEPReq+0x2d8>
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d103      	bne.n	80081e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e00e      	b.n	80081fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f8c7 	bl	8009378 <USBD_LL_IsStallEP>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2201      	movs	r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	e002      	b.n	80081fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2202      	movs	r2, #2
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fbd1 	bl	80089ac <USBD_CtlSendData>
              break;
 800820a:	e004      	b.n	8008216 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fb5b 	bl	80088ca <USBD_CtlError>
              break;
 8008214:	bf00      	nop
          }
          break;
 8008216:	e004      	b.n	8008222 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fb55 	bl	80088ca <USBD_CtlError>
          break;
 8008220:	bf00      	nop
      }
      break;
 8008222:	e005      	b.n	8008230 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fb4f 	bl	80088ca <USBD_CtlError>
      break;
 800822c:	e000      	b.n	8008230 <USBD_StdEPReq+0x330>
      break;
 800822e:	bf00      	nop
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	885b      	ldrh	r3, [r3, #2]
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	2b06      	cmp	r3, #6
 800825e:	f200 8128 	bhi.w	80084b2 <USBD_GetDescriptor+0x276>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <USBD_GetDescriptor+0x2c>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008285 	.word	0x08008285
 800826c:	0800829d 	.word	0x0800829d
 8008270:	080082dd 	.word	0x080082dd
 8008274:	080084b3 	.word	0x080084b3
 8008278:	080084b3 	.word	0x080084b3
 800827c:	08008453 	.word	0x08008453
 8008280:	0800847f 	.word	0x0800847f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7c12      	ldrb	r2, [r2, #16]
 8008290:	f107 0108 	add.w	r1, r7, #8
 8008294:	4610      	mov	r0, r2
 8008296:	4798      	blx	r3
 8008298:	60f8      	str	r0, [r7, #12]
      break;
 800829a:	e112      	b.n	80084c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7c1b      	ldrb	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f107 0208 	add.w	r2, r7, #8
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	2202      	movs	r2, #2
 80082bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082be:	e100      	b.n	80084c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	f107 0208 	add.w	r2, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	2202      	movs	r2, #2
 80082d8:	701a      	strb	r2, [r3, #0]
      break;
 80082da:	e0f2      	b.n	80084c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	885b      	ldrh	r3, [r3, #2]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b05      	cmp	r3, #5
 80082e4:	f200 80ac 	bhi.w	8008440 <USBD_GetDescriptor+0x204>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <USBD_GetDescriptor+0xb4>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008309 	.word	0x08008309
 80082f4:	0800833d 	.word	0x0800833d
 80082f8:	08008371 	.word	0x08008371
 80082fc:	080083a5 	.word	0x080083a5
 8008300:	080083d9 	.word	0x080083d9
 8008304:	0800840d 	.word	0x0800840d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832a:	e091      	b.n	8008450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 facb 	bl	80088ca <USBD_CtlError>
            err++;
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	3301      	adds	r3, #1
 8008338:	72fb      	strb	r3, [r7, #11]
          break;
 800833a:	e089      	b.n	8008450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	7c12      	ldrb	r2, [r2, #16]
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835e:	e077      	b.n	8008450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fab1 	bl	80088ca <USBD_CtlError>
            err++;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	3301      	adds	r3, #1
 800836c:	72fb      	strb	r3, [r7, #11]
          break;
 800836e:	e06f      	b.n	8008450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7c12      	ldrb	r2, [r2, #16]
 8008388:	f107 0108 	add.w	r1, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008392:	e05d      	b.n	8008450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa97 	bl	80088ca <USBD_CtlError>
            err++;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	3301      	adds	r3, #1
 80083a0:	72fb      	strb	r3, [r7, #11]
          break;
 80083a2:	e055      	b.n	8008450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7c12      	ldrb	r2, [r2, #16]
 80083bc:	f107 0108 	add.w	r1, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c6:	e043      	b.n	8008450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa7d 	bl	80088ca <USBD_CtlError>
            err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
          break;
 80083d6:	e03b      	b.n	8008450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c12      	ldrb	r2, [r2, #16]
 80083f0:	f107 0108 	add.w	r1, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fa:	e029      	b.n	8008450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa63 	bl	80088ca <USBD_CtlError>
            err++;
 8008404:	7afb      	ldrb	r3, [r7, #11]
 8008406:	3301      	adds	r3, #1
 8008408:	72fb      	strb	r3, [r7, #11]
          break;
 800840a:	e021      	b.n	8008450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7c12      	ldrb	r2, [r2, #16]
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842e:	e00f      	b.n	8008450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa49 	bl	80088ca <USBD_CtlError>
            err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
          break;
 800843e:	e007      	b.n	8008450 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa41 	bl	80088ca <USBD_CtlError>
          err++;
 8008448:	7afb      	ldrb	r3, [r7, #11]
 800844a:	3301      	adds	r3, #1
 800844c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800844e:	bf00      	nop
      }
      break;
 8008450:	e037      	b.n	80084c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7c1b      	ldrb	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	f107 0208 	add.w	r2, r7, #8
 8008466:	4610      	mov	r0, r2
 8008468:	4798      	blx	r3
 800846a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800846c:	e029      	b.n	80084c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa2a 	bl	80088ca <USBD_CtlError>
        err++;
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	3301      	adds	r3, #1
 800847a:	72fb      	strb	r3, [r7, #11]
      break;
 800847c:	e021      	b.n	80084c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7c1b      	ldrb	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	f107 0208 	add.w	r2, r7, #8
 8008492:	4610      	mov	r0, r2
 8008494:	4798      	blx	r3
 8008496:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	2207      	movs	r2, #7
 800849e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a0:	e00f      	b.n	80084c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fa10 	bl	80088ca <USBD_CtlError>
        err++;
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	3301      	adds	r3, #1
 80084ae:	72fb      	strb	r3, [r7, #11]
      break;
 80084b0:	e007      	b.n	80084c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fa08 	bl	80088ca <USBD_CtlError>
      err++;
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	3301      	adds	r3, #1
 80084be:	72fb      	strb	r3, [r7, #11]
      break;
 80084c0:	bf00      	nop
  }

  if (err != 0U)
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11e      	bne.n	8008506 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	88db      	ldrh	r3, [r3, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d016      	beq.n	80084fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084d0:	893b      	ldrh	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	88da      	ldrh	r2, [r3, #6]
 80084da:	893b      	ldrh	r3, [r7, #8]
 80084dc:	4293      	cmp	r3, r2
 80084de:	bf28      	it	cs
 80084e0:	4613      	movcs	r3, r2
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084e6:	893b      	ldrh	r3, [r7, #8]
 80084e8:	461a      	mov	r2, r3
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa5d 	bl	80089ac <USBD_CtlSendData>
 80084f2:	e009      	b.n	8008508 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9e7 	bl	80088ca <USBD_CtlError>
 80084fc:	e004      	b.n	8008508 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 faae 	bl	8008a60 <USBD_CtlSendStatus>
 8008504:	e000      	b.n	8008508 <USBD_GetDescriptor+0x2cc>
    return;
 8008506:	bf00      	nop
  }
}
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	889b      	ldrh	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d131      	bne.n	8008586 <USBD_SetAddress+0x76>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88db      	ldrh	r3, [r3, #6]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d12d      	bne.n	8008586 <USBD_SetAddress+0x76>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	2b7f      	cmp	r3, #127	; 0x7f
 8008530:	d829      	bhi.n	8008586 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800853c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b03      	cmp	r3, #3
 8008548:	d104      	bne.n	8008554 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9bc 	bl	80088ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008552:	e01d      	b.n	8008590 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7bfa      	ldrb	r2, [r7, #15]
 8008558:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 ff35 	bl	80093d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa7a 	bl	8008a60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	e009      	b.n	8008590 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	e004      	b.n	8008590 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f99e 	bl	80088ca <USBD_CtlError>
  }
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	885b      	ldrh	r3, [r3, #2]
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	4b4e      	ldr	r3, [pc, #312]	; (80086e8 <USBD_SetConfig+0x150>)
 80085ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085b0:	4b4d      	ldr	r3, [pc, #308]	; (80086e8 <USBD_SetConfig+0x150>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d905      	bls.n	80085c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f985 	bl	80088ca <USBD_CtlError>
    return USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e08c      	b.n	80086de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d002      	beq.n	80085d6 <USBD_SetConfig+0x3e>
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d029      	beq.n	8008628 <USBD_SetConfig+0x90>
 80085d4:	e075      	b.n	80086c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085d6:	4b44      	ldr	r3, [pc, #272]	; (80086e8 <USBD_SetConfig+0x150>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d020      	beq.n	8008620 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085de:	4b42      	ldr	r3, [pc, #264]	; (80086e8 <USBD_SetConfig+0x150>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085e8:	4b3f      	ldr	r3, [pc, #252]	; (80086e8 <USBD_SetConfig+0x150>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fe ffe7 	bl	80075c2 <USBD_SetClassConfig>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d008      	beq.n	8008610 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f962 	bl	80088ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800860e:	e065      	b.n	80086dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fa25 	bl	8008a60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2203      	movs	r2, #3
 800861a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800861e:	e05d      	b.n	80086dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fa1d 	bl	8008a60 <USBD_CtlSendStatus>
      break;
 8008626:	e059      	b.n	80086dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008628:	4b2f      	ldr	r3, [pc, #188]	; (80086e8 <USBD_SetConfig+0x150>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d112      	bne.n	8008656 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008638:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <USBD_SetConfig+0x150>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008642:	4b29      	ldr	r3, [pc, #164]	; (80086e8 <USBD_SetConfig+0x150>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7fe ffd6 	bl	80075fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa06 	bl	8008a60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008654:	e042      	b.n	80086dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008656:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <USBD_SetConfig+0x150>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d02a      	beq.n	80086ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fe ffc4 	bl	80075fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008672:	4b1d      	ldr	r3, [pc, #116]	; (80086e8 <USBD_SetConfig+0x150>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800867c:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <USBD_SetConfig+0x150>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fe ff9d 	bl	80075c2 <USBD_SetClassConfig>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00f      	beq.n	80086b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f918 	bl	80088ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7fe ffa9 	bl	80075fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086b0:	e014      	b.n	80086dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9d4 	bl	8008a60 <USBD_CtlSendStatus>
      break;
 80086b8:	e010      	b.n	80086dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9d0 	bl	8008a60 <USBD_CtlSendStatus>
      break;
 80086c0:	e00c      	b.n	80086dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f900 	bl	80088ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086ca:	4b07      	ldr	r3, [pc, #28]	; (80086e8 <USBD_SetConfig+0x150>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fe ff92 	bl	80075fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086d6:	2303      	movs	r3, #3
 80086d8:	73fb      	strb	r3, [r7, #15]
      break;
 80086da:	bf00      	nop
  }

  return ret;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200002ac 	.word	0x200002ac

080086ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	88db      	ldrh	r3, [r3, #6]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d004      	beq.n	8008708 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f8e2 	bl	80088ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008706:	e023      	b.n	8008750 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	dc02      	bgt.n	800871a <USBD_GetConfig+0x2e>
 8008714:	2b00      	cmp	r3, #0
 8008716:	dc03      	bgt.n	8008720 <USBD_GetConfig+0x34>
 8008718:	e015      	b.n	8008746 <USBD_GetConfig+0x5a>
 800871a:	2b03      	cmp	r3, #3
 800871c:	d00b      	beq.n	8008736 <USBD_GetConfig+0x4a>
 800871e:	e012      	b.n	8008746 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3308      	adds	r3, #8
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f93c 	bl	80089ac <USBD_CtlSendData>
        break;
 8008734:	e00c      	b.n	8008750 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3304      	adds	r3, #4
 800873a:	2201      	movs	r2, #1
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f934 	bl	80089ac <USBD_CtlSendData>
        break;
 8008744:	e004      	b.n	8008750 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f8be 	bl	80088ca <USBD_CtlError>
        break;
 800874e:	bf00      	nop
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008768:	b2db      	uxtb	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	2b02      	cmp	r3, #2
 800876e:	d81e      	bhi.n	80087ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d004      	beq.n	8008782 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8a5 	bl	80088ca <USBD_CtlError>
        break;
 8008780:	e01a      	b.n	80087b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f043 0202 	orr.w	r2, r3, #2
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	330c      	adds	r3, #12
 80087a2:	2202      	movs	r2, #2
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f900 	bl	80089ac <USBD_CtlSendData>
      break;
 80087ac:	e004      	b.n	80087b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f88a 	bl	80088ca <USBD_CtlError>
      break;
 80087b6:	bf00      	nop
  }
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d107      	bne.n	80087e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f940 	bl	8008a60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087e0:	e013      	b.n	800880a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	885b      	ldrh	r3, [r3, #2]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d10b      	bne.n	8008802 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	889b      	ldrh	r3, [r3, #4]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f930 	bl	8008a60 <USBD_CtlSendStatus>
}
 8008800:	e003      	b.n	800880a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f860 	bl	80088ca <USBD_CtlError>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008822:	b2db      	uxtb	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	2b02      	cmp	r3, #2
 8008828:	d80b      	bhi.n	8008842 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d10c      	bne.n	800884c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f910 	bl	8008a60 <USBD_CtlSendStatus>
      }
      break;
 8008840:	e004      	b.n	800884c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f840 	bl	80088ca <USBD_CtlError>
      break;
 800884a:	e000      	b.n	800884e <USBD_ClrFeature+0x3c>
      break;
 800884c:	bf00      	nop
  }
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7ff fa41 	bl	8007d08 <SWAPBYTE>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3301      	adds	r3, #1
 8008892:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fa34 	bl	8007d08 <SWAPBYTE>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff fa27 	bl	8007d08 <SWAPBYTE>
 80088ba:	4603      	mov	r3, r0
 80088bc:	461a      	mov	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	80da      	strh	r2, [r3, #6]
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088d4:	2180      	movs	r1, #128	; 0x80
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fd10 	bl	80092fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088dc:	2100      	movs	r1, #0
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fd0c 	bl	80092fc <USBD_LL_StallEP>
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d036      	beq.n	8008970 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008906:	6938      	ldr	r0, [r7, #16]
 8008908:	f000 f836 	bl	8008978 <USBD_GetLen>
 800890c:	4603      	mov	r3, r0
 800890e:	3301      	adds	r3, #1
 8008910:	b29b      	uxth	r3, r3
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	4413      	add	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7812      	ldrb	r2, [r2, #0]
 8008924:	701a      	strb	r2, [r3, #0]
  idx++;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	2203      	movs	r2, #3
 8008934:	701a      	strb	r2, [r3, #0]
  idx++;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	3301      	adds	r3, #1
 800893a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800893c:	e013      	b.n	8008966 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	4413      	add	r3, r2
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
    idx++;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	3301      	adds	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	3301      	adds	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e7      	bne.n	800893e <USBD_GetString+0x52>
 800896e:	e000      	b.n	8008972 <USBD_GetString+0x86>
    return;
 8008970:	bf00      	nop
  }
}
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008988:	e005      	b.n	8008996 <USBD_GetLen+0x1e>
  {
    len++;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	3301      	adds	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3301      	adds	r3, #1
 8008994:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f5      	bne.n	800898a <USBD_GetLen+0x12>
  }

  return len;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	2100      	movs	r1, #0
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 fd1b 	bl	800940e <USBD_LL_Transmit>

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	2100      	movs	r1, #0
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fd0a 	bl	800940e <USBD_LL_Transmit>

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2203      	movs	r2, #3
 8008a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fd0e 	bl	8009450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	2100      	movs	r1, #0
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fcfd 	bl	8009450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2204      	movs	r2, #4
 8008a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a70:	2300      	movs	r3, #0
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fcc9 	bl	800940e <USBD_LL_Transmit>

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2205      	movs	r2, #5
 8008a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a96:	2300      	movs	r3, #0
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fcd7 	bl	8009450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4912      	ldr	r1, [pc, #72]	; (8008afc <MX_USB_DEVICE_Init+0x50>)
 8008ab4:	4812      	ldr	r0, [pc, #72]	; (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008ab6:	f7fe fd07 	bl	80074c8 <USBD_Init>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ac0:	f7f8 f830 	bl	8000b24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ac4:	490f      	ldr	r1, [pc, #60]	; (8008b04 <MX_USB_DEVICE_Init+0x58>)
 8008ac6:	480e      	ldr	r0, [pc, #56]	; (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008ac8:	f7fe fd2e 	bl	8007528 <USBD_RegisterClass>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ad2:	f7f8 f827 	bl	8000b24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ad6:	490c      	ldr	r1, [pc, #48]	; (8008b08 <MX_USB_DEVICE_Init+0x5c>)
 8008ad8:	4809      	ldr	r0, [pc, #36]	; (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008ada:	f7fe fc1f 	bl	800731c <USBD_CDC_RegisterInterface>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ae4:	f7f8 f81e 	bl	8000b24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ae8:	4805      	ldr	r0, [pc, #20]	; (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008aea:	f7fe fd53 	bl	8007594 <USBD_Start>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008af4:	f7f8 f816 	bl	8000b24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008af8:	bf00      	nop
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	200000bc 	.word	0x200000bc
 8008b00:	200002b0 	.word	0x200002b0
 8008b04:	20000028 	.word	0x20000028
 8008b08:	200000a8 	.word	0x200000a8

08008b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b10:	2200      	movs	r2, #0
 8008b12:	4905      	ldr	r1, [pc, #20]	; (8008b28 <CDC_Init_FS+0x1c>)
 8008b14:	4805      	ldr	r0, [pc, #20]	; (8008b2c <CDC_Init_FS+0x20>)
 8008b16:	f7fe fc1b 	bl	8007350 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b1a:	4905      	ldr	r1, [pc, #20]	; (8008b30 <CDC_Init_FS+0x24>)
 8008b1c:	4803      	ldr	r0, [pc, #12]	; (8008b2c <CDC_Init_FS+0x20>)
 8008b1e:	f7fe fc39 	bl	8007394 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000d8c 	.word	0x20000d8c
 8008b2c:	200002b0 	.word	0x200002b0
 8008b30:	2000058c 	.word	0x2000058c

08008b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	6039      	str	r1, [r7, #0]
 8008b4e:	71fb      	strb	r3, [r7, #7]
 8008b50:	4613      	mov	r3, r2
 8008b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	2b23      	cmp	r3, #35	; 0x23
 8008b58:	d84a      	bhi.n	8008bf0 <CDC_Control_FS+0xac>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <CDC_Control_FS+0x1c>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008bf1 	.word	0x08008bf1
 8008b64:	08008bf1 	.word	0x08008bf1
 8008b68:	08008bf1 	.word	0x08008bf1
 8008b6c:	08008bf1 	.word	0x08008bf1
 8008b70:	08008bf1 	.word	0x08008bf1
 8008b74:	08008bf1 	.word	0x08008bf1
 8008b78:	08008bf1 	.word	0x08008bf1
 8008b7c:	08008bf1 	.word	0x08008bf1
 8008b80:	08008bf1 	.word	0x08008bf1
 8008b84:	08008bf1 	.word	0x08008bf1
 8008b88:	08008bf1 	.word	0x08008bf1
 8008b8c:	08008bf1 	.word	0x08008bf1
 8008b90:	08008bf1 	.word	0x08008bf1
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008bf1 	.word	0x08008bf1
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	08008bf1 	.word	0x08008bf1
 8008ba8:	08008bf1 	.word	0x08008bf1
 8008bac:	08008bf1 	.word	0x08008bf1
 8008bb0:	08008bf1 	.word	0x08008bf1
 8008bb4:	08008bf1 	.word	0x08008bf1
 8008bb8:	08008bf1 	.word	0x08008bf1
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008bf1 	.word	0x08008bf1
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf1 	.word	0x08008bf1
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	08008bf1 	.word	0x08008bf1
 8008bdc:	08008bf1 	.word	0x08008bf1
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008bf1 	.word	0x08008bf1
 8008be8:	08008bf1 	.word	0x08008bf1
 8008bec:	08008bf1 	.word	0x08008bf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bf0:	bf00      	nop
  }

  return (USBD_OK);
 8008bf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4813      	ldr	r0, [pc, #76]	; (8008c5c <CDC_Receive_FS+0x5c>)
 8008c0e:	f7fe fbc1 	bl	8007394 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c12:	4812      	ldr	r0, [pc, #72]	; (8008c5c <CDC_Receive_FS+0x5c>)
 8008c14:	f7fe fc22 	bl	800745c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f81f 	bl	8008c64 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b31      	cmp	r3, #49	; 0x31
 8008c2c:	d106      	bne.n	8008c3c <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c34:	480a      	ldr	r0, [pc, #40]	; (8008c60 <CDC_Receive_FS+0x60>)
 8008c36:	f7f9 fb5f 	bl	80022f8 <HAL_GPIO_WritePin>
 8008c3a:	e009      	b.n	8008c50 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b30      	cmp	r3, #48	; 0x30
 8008c42:	d105      	bne.n	8008c50 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008c44:	2200      	movs	r2, #0
 8008c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c4a:	4805      	ldr	r0, [pc, #20]	; (8008c60 <CDC_Receive_FS+0x60>)
 8008c4c:	f7f9 fb54 	bl	80022f8 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8008c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200002b0 	.word	0x200002b0
 8008c60:	40020c00 	.word	0x40020c00

08008c64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c74:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <CDC_Transmit_FS+0x48>)
 8008c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e00b      	b.n	8008ca2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c8a:	887b      	ldrh	r3, [r7, #2]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4806      	ldr	r0, [pc, #24]	; (8008cac <CDC_Transmit_FS+0x48>)
 8008c92:	f7fe fb5d 	bl	8007350 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c96:	4805      	ldr	r0, [pc, #20]	; (8008cac <CDC_Transmit_FS+0x48>)
 8008c98:	f7fe fb9a 	bl	80073d0 <USBD_CDC_TransmitPacket>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200002b0 	.word	0x200002b0

08008cb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2212      	movs	r2, #18
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	200000d8 	.word	0x200000d8

08008cf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2204      	movs	r2, #4
 8008d08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d0a:	4b03      	ldr	r3, [pc, #12]	; (8008d18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	200000ec 	.word	0x200000ec

08008d1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	4907      	ldr	r1, [pc, #28]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d32:	4808      	ldr	r0, [pc, #32]	; (8008d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d34:	f7ff fdda 	bl	80088ec <USBD_GetString>
 8008d38:	e004      	b.n	8008d44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4904      	ldr	r1, [pc, #16]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d3e:	4805      	ldr	r0, [pc, #20]	; (8008d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d40:	f7ff fdd4 	bl	80088ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	2000158c 	.word	0x2000158c
 8008d54:	08009fc0 	.word	0x08009fc0

08008d58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	4904      	ldr	r1, [pc, #16]	; (8008d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d68:	4804      	ldr	r0, [pc, #16]	; (8008d7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d6a:	f7ff fdbf 	bl	80088ec <USBD_GetString>
  return USBD_StrDesc;
 8008d6e:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	2000158c 	.word	0x2000158c
 8008d7c:	08009fd8 	.word	0x08009fd8

08008d80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	221a      	movs	r2, #26
 8008d90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d92:	f000 f843 	bl	8008e1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d96:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	200000f0 	.word	0x200000f0

08008da4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dbc:	f7ff fd96 	bl	80088ec <USBD_GetString>
 8008dc0:	e004      	b.n	8008dcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dc6:	4805      	ldr	r0, [pc, #20]	; (8008ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dc8:	f7ff fd90 	bl	80088ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2000158c 	.word	0x2000158c
 8008ddc:	08009fec 	.word	0x08009fec

08008de0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4907      	ldr	r1, [pc, #28]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008df6:	4808      	ldr	r0, [pc, #32]	; (8008e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008df8:	f7ff fd78 	bl	80088ec <USBD_GetString>
 8008dfc:	e004      	b.n	8008e08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4904      	ldr	r1, [pc, #16]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e02:	4805      	ldr	r0, [pc, #20]	; (8008e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e04:	f7ff fd72 	bl	80088ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	2000158c 	.word	0x2000158c
 8008e18:	08009ff8 	.word	0x08009ff8

08008e1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e22:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <Get_SerialNum+0x44>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <Get_SerialNum+0x48>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <Get_SerialNum+0x4c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e42:	2208      	movs	r2, #8
 8008e44:	4909      	ldr	r1, [pc, #36]	; (8008e6c <Get_SerialNum+0x50>)
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f814 	bl	8008e74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	4908      	ldr	r1, [pc, #32]	; (8008e70 <Get_SerialNum+0x54>)
 8008e50:	68b8      	ldr	r0, [r7, #8]
 8008e52:	f000 f80f 	bl	8008e74 <IntToUnicode>
  }
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	1fff7a10 	.word	0x1fff7a10
 8008e64:	1fff7a14 	.word	0x1fff7a14
 8008e68:	1fff7a18 	.word	0x1fff7a18
 8008e6c:	200000f2 	.word	0x200000f2
 8008e70:	20000102 	.word	0x20000102

08008e74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
 8008e8a:	e027      	b.n	8008edc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	2b09      	cmp	r3, #9
 8008e92:	d80b      	bhi.n	8008eac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	0f1b      	lsrs	r3, r3, #28
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	440b      	add	r3, r1
 8008ea4:	3230      	adds	r2, #48	; 0x30
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e00a      	b.n	8008ec2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0f1b      	lsrs	r3, r3, #28
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	440b      	add	r3, r1
 8008ebc:	3237      	adds	r2, #55	; 0x37
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	3301      	adds	r3, #1
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
 8008edc:	7dfa      	ldrb	r2, [r7, #23]
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d3d3      	bcc.n	8008e8c <IntToUnicode+0x18>
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
	...

08008ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	605a      	str	r2, [r3, #4]
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	60da      	str	r2, [r3, #12]
 8008f0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f14:	d14b      	bne.n	8008fae <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	4a26      	ldr	r2, [pc, #152]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	6313      	str	r3, [r2, #48]	; 0x30
 8008f26:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f40:	2300      	movs	r3, #0
 8008f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f44:	230a      	movs	r3, #10
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	481b      	ldr	r0, [pc, #108]	; (8008fbc <HAL_PCD_MspInit+0xc8>)
 8008f50:	f7f9 f81e 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f62:	2300      	movs	r3, #0
 8008f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f66:	230a      	movs	r3, #10
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f6a:	f107 0314 	add.w	r3, r7, #20
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4812      	ldr	r0, [pc, #72]	; (8008fbc <HAL_PCD_MspInit+0xc8>)
 8008f72:	f7f9 f80d 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f76:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7a:	4a0f      	ldr	r2, [pc, #60]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f80:	6353      	str	r3, [r2, #52]	; 0x34
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8a:	4a0b      	ldr	r2, [pc, #44]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f90:	6453      	str	r3, [r2, #68]	; 0x44
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <HAL_PCD_MspInit+0xc4>)
 8008f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	2043      	movs	r0, #67	; 0x43
 8008fa4:	f7f8 ff2b 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fa8:	2043      	movs	r0, #67	; 0x43
 8008faa:	f7f8 ff44 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	40023800 	.word	0x40023800
 8008fbc:	40020000 	.word	0x40020000

08008fc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7fe fb29 	bl	800762e <USBD_LL_SetupStage>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	4619      	mov	r1, r3
 800900e:	f7fe fb63 	bl	80076d8 <USBD_LL_DataOutStage>
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	334c      	adds	r3, #76	; 0x4c
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	4619      	mov	r1, r3
 8009042:	f7fe fbfc 	bl	800783e <USBD_LL_DataInStage>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe fd30 	bl	8007ac2 <USBD_LL_SOF>
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
 8009082:	e008      	b.n	8009096 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d102      	bne.n	8009092 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800908c:	2301      	movs	r3, #1
 800908e:	73fb      	strb	r3, [r7, #15]
 8009090:	e001      	b.n	8009096 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009092:	f7f7 fd47 	bl	8000b24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800909c:	7bfa      	ldrb	r2, [r7, #15]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fcd0 	bl	8007a46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe fc78 	bl	80079a2 <USBD_LL_Reset>
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fccb 	bl	8007a66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	6812      	ldr	r2, [r2, #0]
 80090de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <HAL_PCD_SuspendCallback+0x48>)
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	4a03      	ldr	r2, [pc, #12]	; (8009104 <HAL_PCD_SuspendCallback+0x48>)
 80090f6:	f043 0306 	orr.w	r3, r3, #6
 80090fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fcbb 	bl	8007a92 <USBD_LL_Resume>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fd13 	bl	8007b66 <USBD_LL_IsoOUTIncomplete>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fccf 	bl	8007b02 <USBD_LL_IsoINIncomplete>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe fd25 	bl	8007bca <USBD_LL_DevConnected>
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe fd22 	bl	8007be0 <USBD_LL_DevDisconnected>
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d13c      	bne.n	800922e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091b4:	4a20      	ldr	r2, [pc, #128]	; (8009238 <USBD_LL_Init+0x94>)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <USBD_LL_Init+0x94>)
 80091c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091c4:	4b1c      	ldr	r3, [pc, #112]	; (8009238 <USBD_LL_Init+0x94>)
 80091c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091cc:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <USBD_LL_Init+0x94>)
 80091ce:	2204      	movs	r2, #4
 80091d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091d2:	4b19      	ldr	r3, [pc, #100]	; (8009238 <USBD_LL_Init+0x94>)
 80091d4:	2202      	movs	r2, #2
 80091d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <USBD_LL_Init+0x94>)
 80091da:	2200      	movs	r2, #0
 80091dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091de:	4b16      	ldr	r3, [pc, #88]	; (8009238 <USBD_LL_Init+0x94>)
 80091e0:	2202      	movs	r2, #2
 80091e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091e4:	4b14      	ldr	r3, [pc, #80]	; (8009238 <USBD_LL_Init+0x94>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <USBD_LL_Init+0x94>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091f0:	4b11      	ldr	r3, [pc, #68]	; (8009238 <USBD_LL_Init+0x94>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091f6:	4b10      	ldr	r3, [pc, #64]	; (8009238 <USBD_LL_Init+0x94>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091fc:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <USBD_LL_Init+0x94>)
 80091fe:	2200      	movs	r2, #0
 8009200:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009202:	480d      	ldr	r0, [pc, #52]	; (8009238 <USBD_LL_Init+0x94>)
 8009204:	f7f9 f891 	bl	800232a <HAL_PCD_Init>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800920e:	f7f7 fc89 	bl	8000b24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009212:	2180      	movs	r1, #128	; 0x80
 8009214:	4808      	ldr	r0, [pc, #32]	; (8009238 <USBD_LL_Init+0x94>)
 8009216:	f7fa fae8 	bl	80037ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800921a:	2240      	movs	r2, #64	; 0x40
 800921c:	2100      	movs	r1, #0
 800921e:	4806      	ldr	r0, [pc, #24]	; (8009238 <USBD_LL_Init+0x94>)
 8009220:	f7fa fa9c 	bl	800375c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009224:	2280      	movs	r2, #128	; 0x80
 8009226:	2101      	movs	r1, #1
 8009228:	4803      	ldr	r0, [pc, #12]	; (8009238 <USBD_LL_Init+0x94>)
 800922a:	f7fa fa97 	bl	800375c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	2000178c 	.word	0x2000178c

0800923c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009252:	4618      	mov	r0, r3
 8009254:	f7f9 f986 	bl	8002564 <HAL_PCD_Start>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f942 	bl	80094e8 <USBD_Get_USB_Status>
 8009264:	4603      	mov	r3, r0
 8009266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009268:	7bbb      	ldrb	r3, [r7, #14]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	461a      	mov	r2, r3
 8009280:	4603      	mov	r3, r0
 8009282:	70fb      	strb	r3, [r7, #3]
 8009284:	460b      	mov	r3, r1
 8009286:	70bb      	strb	r3, [r7, #2]
 8009288:	4613      	mov	r3, r2
 800928a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800929a:	78bb      	ldrb	r3, [r7, #2]
 800929c:	883a      	ldrh	r2, [r7, #0]
 800929e:	78f9      	ldrb	r1, [r7, #3]
 80092a0:	f7f9 fe57 	bl	8002f52 <HAL_PCD_EP_Open>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f91c 	bl	80094e8 <USBD_Get_USB_Status>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f9 fea0 	bl	8003022 <HAL_PCD_EP_Close>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 f8fd 	bl	80094e8 <USBD_Get_USB_Status>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7f9 ff78 	bl	8003210 <HAL_PCD_EP_SetStall>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f8de 	bl	80094e8 <USBD_Get_USB_Status>
 800932c:	4603      	mov	r3, r0
 800932e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009330:	7bbb      	ldrb	r3, [r7, #14]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7f9 ffbd 	bl	80032d8 <HAL_PCD_EP_ClrStall>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f8bf 	bl	80094e8 <USBD_Get_USB_Status>
 800936a:	4603      	mov	r3, r0
 800936c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800938a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800938c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009390:	2b00      	cmp	r3, #0
 8009392:	da0b      	bge.n	80093ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	4613      	mov	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	333e      	adds	r3, #62	; 0x3e
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	e00b      	b.n	80093c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	4613      	mov	r3, r2
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80093c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7f9 fd8a 	bl	8002f08 <HAL_PCD_SetAddress>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 f874 	bl	80094e8 <USBD_Get_USB_Status>
 8009400:	4603      	mov	r3, r0
 8009402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009404:	7bbb      	ldrb	r3, [r7, #14]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b086      	sub	sp, #24
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
 800941a:	460b      	mov	r3, r1
 800941c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800942c:	7af9      	ldrb	r1, [r7, #11]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	f7f9 fea3 	bl	800317c <HAL_PCD_EP_Transmit>
 8009436:	4603      	mov	r3, r0
 8009438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	4618      	mov	r0, r3
 800943e:	f000 f853 	bl	80094e8 <USBD_Get_USB_Status>
 8009442:	4603      	mov	r3, r0
 8009444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009446:	7dbb      	ldrb	r3, [r7, #22]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	460b      	mov	r3, r1
 800945e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800946e:	7af9      	ldrb	r1, [r7, #11]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	f7f9 fe1f 	bl	80030b6 <HAL_PCD_EP_Receive>
 8009478:	4603      	mov	r3, r0
 800947a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f832 	bl	80094e8 <USBD_Get_USB_Status>
 8009484:	4603      	mov	r3, r0
 8009486:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009488:	7dbb      	ldrb	r3, [r7, #22]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094a4:	78fa      	ldrb	r2, [r7, #3]
 80094a6:	4611      	mov	r1, r2
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7f9 fe4f 	bl	800314c <HAL_PCD_EP_GetRxCount>
 80094ae:	4603      	mov	r3, r0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094c0:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <USBD_static_malloc+0x18>)
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20001c98 	.word	0x20001c98

080094d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]

}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d817      	bhi.n	800952c <USBD_Get_USB_Status+0x44>
 80094fc:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <USBD_Get_USB_Status+0x1c>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009515 	.word	0x08009515
 8009508:	0800951b 	.word	0x0800951b
 800950c:	08009521 	.word	0x08009521
 8009510:	08009527 	.word	0x08009527
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
    break;
 8009518:	e00b      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	73fb      	strb	r3, [r7, #15]
    break;
 800951e:	e008      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
    break;
 8009524:	e005      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	73fb      	strb	r3, [r7, #15]
    break;
 800952a:	e002      	b.n	8009532 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	73fb      	strb	r3, [r7, #15]
    break;
 8009530:	bf00      	nop
  }
  return usb_status;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <siprintf>:
 8009540:	b40e      	push	{r1, r2, r3}
 8009542:	b500      	push	{lr}
 8009544:	b09c      	sub	sp, #112	; 0x70
 8009546:	ab1d      	add	r3, sp, #116	; 0x74
 8009548:	9002      	str	r0, [sp, #8]
 800954a:	9006      	str	r0, [sp, #24]
 800954c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009550:	4809      	ldr	r0, [pc, #36]	; (8009578 <siprintf+0x38>)
 8009552:	9107      	str	r1, [sp, #28]
 8009554:	9104      	str	r1, [sp, #16]
 8009556:	4909      	ldr	r1, [pc, #36]	; (800957c <siprintf+0x3c>)
 8009558:	f853 2b04 	ldr.w	r2, [r3], #4
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	6800      	ldr	r0, [r0, #0]
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	a902      	add	r1, sp, #8
 8009564:	f000 f992 	bl	800988c <_svfiprintf_r>
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	2200      	movs	r2, #0
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	b01c      	add	sp, #112	; 0x70
 8009570:	f85d eb04 	ldr.w	lr, [sp], #4
 8009574:	b003      	add	sp, #12
 8009576:	4770      	bx	lr
 8009578:	20000158 	.word	0x20000158
 800957c:	ffff0208 	.word	0xffff0208

08009580 <memset>:
 8009580:	4402      	add	r2, r0
 8009582:	4603      	mov	r3, r0
 8009584:	4293      	cmp	r3, r2
 8009586:	d100      	bne.n	800958a <memset+0xa>
 8009588:	4770      	bx	lr
 800958a:	f803 1b01 	strb.w	r1, [r3], #1
 800958e:	e7f9      	b.n	8009584 <memset+0x4>

08009590 <__errno>:
 8009590:	4b01      	ldr	r3, [pc, #4]	; (8009598 <__errno+0x8>)
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	20000158 	.word	0x20000158

0800959c <__libc_init_array>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4d0d      	ldr	r5, [pc, #52]	; (80095d4 <__libc_init_array+0x38>)
 80095a0:	4c0d      	ldr	r4, [pc, #52]	; (80095d8 <__libc_init_array+0x3c>)
 80095a2:	1b64      	subs	r4, r4, r5
 80095a4:	10a4      	asrs	r4, r4, #2
 80095a6:	2600      	movs	r6, #0
 80095a8:	42a6      	cmp	r6, r4
 80095aa:	d109      	bne.n	80095c0 <__libc_init_array+0x24>
 80095ac:	4d0b      	ldr	r5, [pc, #44]	; (80095dc <__libc_init_array+0x40>)
 80095ae:	4c0c      	ldr	r4, [pc, #48]	; (80095e0 <__libc_init_array+0x44>)
 80095b0:	f000 fc6a 	bl	8009e88 <_init>
 80095b4:	1b64      	subs	r4, r4, r5
 80095b6:	10a4      	asrs	r4, r4, #2
 80095b8:	2600      	movs	r6, #0
 80095ba:	42a6      	cmp	r6, r4
 80095bc:	d105      	bne.n	80095ca <__libc_init_array+0x2e>
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c4:	4798      	blx	r3
 80095c6:	3601      	adds	r6, #1
 80095c8:	e7ee      	b.n	80095a8 <__libc_init_array+0xc>
 80095ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ce:	4798      	blx	r3
 80095d0:	3601      	adds	r6, #1
 80095d2:	e7f2      	b.n	80095ba <__libc_init_array+0x1e>
 80095d4:	0800a05c 	.word	0x0800a05c
 80095d8:	0800a05c 	.word	0x0800a05c
 80095dc:	0800a05c 	.word	0x0800a05c
 80095e0:	0800a060 	.word	0x0800a060

080095e4 <__retarget_lock_acquire_recursive>:
 80095e4:	4770      	bx	lr

080095e6 <__retarget_lock_release_recursive>:
 80095e6:	4770      	bx	lr

080095e8 <_free_r>:
 80095e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ea:	2900      	cmp	r1, #0
 80095ec:	d044      	beq.n	8009678 <_free_r+0x90>
 80095ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f2:	9001      	str	r0, [sp, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f1a1 0404 	sub.w	r4, r1, #4
 80095fa:	bfb8      	it	lt
 80095fc:	18e4      	addlt	r4, r4, r3
 80095fe:	f000 f8df 	bl	80097c0 <__malloc_lock>
 8009602:	4a1e      	ldr	r2, [pc, #120]	; (800967c <_free_r+0x94>)
 8009604:	9801      	ldr	r0, [sp, #4]
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	b933      	cbnz	r3, 8009618 <_free_r+0x30>
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	b003      	add	sp, #12
 8009610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009614:	f000 b8da 	b.w	80097cc <__malloc_unlock>
 8009618:	42a3      	cmp	r3, r4
 800961a:	d908      	bls.n	800962e <_free_r+0x46>
 800961c:	6825      	ldr	r5, [r4, #0]
 800961e:	1961      	adds	r1, r4, r5
 8009620:	428b      	cmp	r3, r1
 8009622:	bf01      	itttt	eq
 8009624:	6819      	ldreq	r1, [r3, #0]
 8009626:	685b      	ldreq	r3, [r3, #4]
 8009628:	1949      	addeq	r1, r1, r5
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	e7ed      	b.n	800960a <_free_r+0x22>
 800962e:	461a      	mov	r2, r3
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	b10b      	cbz	r3, 8009638 <_free_r+0x50>
 8009634:	42a3      	cmp	r3, r4
 8009636:	d9fa      	bls.n	800962e <_free_r+0x46>
 8009638:	6811      	ldr	r1, [r2, #0]
 800963a:	1855      	adds	r5, r2, r1
 800963c:	42a5      	cmp	r5, r4
 800963e:	d10b      	bne.n	8009658 <_free_r+0x70>
 8009640:	6824      	ldr	r4, [r4, #0]
 8009642:	4421      	add	r1, r4
 8009644:	1854      	adds	r4, r2, r1
 8009646:	42a3      	cmp	r3, r4
 8009648:	6011      	str	r1, [r2, #0]
 800964a:	d1e0      	bne.n	800960e <_free_r+0x26>
 800964c:	681c      	ldr	r4, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	6053      	str	r3, [r2, #4]
 8009652:	440c      	add	r4, r1
 8009654:	6014      	str	r4, [r2, #0]
 8009656:	e7da      	b.n	800960e <_free_r+0x26>
 8009658:	d902      	bls.n	8009660 <_free_r+0x78>
 800965a:	230c      	movs	r3, #12
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	e7d6      	b.n	800960e <_free_r+0x26>
 8009660:	6825      	ldr	r5, [r4, #0]
 8009662:	1961      	adds	r1, r4, r5
 8009664:	428b      	cmp	r3, r1
 8009666:	bf04      	itt	eq
 8009668:	6819      	ldreq	r1, [r3, #0]
 800966a:	685b      	ldreq	r3, [r3, #4]
 800966c:	6063      	str	r3, [r4, #4]
 800966e:	bf04      	itt	eq
 8009670:	1949      	addeq	r1, r1, r5
 8009672:	6021      	streq	r1, [r4, #0]
 8009674:	6054      	str	r4, [r2, #4]
 8009676:	e7ca      	b.n	800960e <_free_r+0x26>
 8009678:	b003      	add	sp, #12
 800967a:	bd30      	pop	{r4, r5, pc}
 800967c:	20001ff8 	.word	0x20001ff8

08009680 <sbrk_aligned>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	4e0e      	ldr	r6, [pc, #56]	; (80096bc <sbrk_aligned+0x3c>)
 8009684:	460c      	mov	r4, r1
 8009686:	6831      	ldr	r1, [r6, #0]
 8009688:	4605      	mov	r5, r0
 800968a:	b911      	cbnz	r1, 8009692 <sbrk_aligned+0x12>
 800968c:	f000 fba6 	bl	8009ddc <_sbrk_r>
 8009690:	6030      	str	r0, [r6, #0]
 8009692:	4621      	mov	r1, r4
 8009694:	4628      	mov	r0, r5
 8009696:	f000 fba1 	bl	8009ddc <_sbrk_r>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d00a      	beq.n	80096b4 <sbrk_aligned+0x34>
 800969e:	1cc4      	adds	r4, r0, #3
 80096a0:	f024 0403 	bic.w	r4, r4, #3
 80096a4:	42a0      	cmp	r0, r4
 80096a6:	d007      	beq.n	80096b8 <sbrk_aligned+0x38>
 80096a8:	1a21      	subs	r1, r4, r0
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 fb96 	bl	8009ddc <_sbrk_r>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d101      	bne.n	80096b8 <sbrk_aligned+0x38>
 80096b4:	f04f 34ff 	mov.w	r4, #4294967295
 80096b8:	4620      	mov	r0, r4
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	20001ffc 	.word	0x20001ffc

080096c0 <_malloc_r>:
 80096c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c4:	1ccd      	adds	r5, r1, #3
 80096c6:	f025 0503 	bic.w	r5, r5, #3
 80096ca:	3508      	adds	r5, #8
 80096cc:	2d0c      	cmp	r5, #12
 80096ce:	bf38      	it	cc
 80096d0:	250c      	movcc	r5, #12
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	4607      	mov	r7, r0
 80096d6:	db01      	blt.n	80096dc <_malloc_r+0x1c>
 80096d8:	42a9      	cmp	r1, r5
 80096da:	d905      	bls.n	80096e8 <_malloc_r+0x28>
 80096dc:	230c      	movs	r3, #12
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	2600      	movs	r6, #0
 80096e2:	4630      	mov	r0, r6
 80096e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097bc <_malloc_r+0xfc>
 80096ec:	f000 f868 	bl	80097c0 <__malloc_lock>
 80096f0:	f8d8 3000 	ldr.w	r3, [r8]
 80096f4:	461c      	mov	r4, r3
 80096f6:	bb5c      	cbnz	r4, 8009750 <_malloc_r+0x90>
 80096f8:	4629      	mov	r1, r5
 80096fa:	4638      	mov	r0, r7
 80096fc:	f7ff ffc0 	bl	8009680 <sbrk_aligned>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	4604      	mov	r4, r0
 8009704:	d155      	bne.n	80097b2 <_malloc_r+0xf2>
 8009706:	f8d8 4000 	ldr.w	r4, [r8]
 800970a:	4626      	mov	r6, r4
 800970c:	2e00      	cmp	r6, #0
 800970e:	d145      	bne.n	800979c <_malloc_r+0xdc>
 8009710:	2c00      	cmp	r4, #0
 8009712:	d048      	beq.n	80097a6 <_malloc_r+0xe6>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	4631      	mov	r1, r6
 8009718:	4638      	mov	r0, r7
 800971a:	eb04 0903 	add.w	r9, r4, r3
 800971e:	f000 fb5d 	bl	8009ddc <_sbrk_r>
 8009722:	4581      	cmp	r9, r0
 8009724:	d13f      	bne.n	80097a6 <_malloc_r+0xe6>
 8009726:	6821      	ldr	r1, [r4, #0]
 8009728:	1a6d      	subs	r5, r5, r1
 800972a:	4629      	mov	r1, r5
 800972c:	4638      	mov	r0, r7
 800972e:	f7ff ffa7 	bl	8009680 <sbrk_aligned>
 8009732:	3001      	adds	r0, #1
 8009734:	d037      	beq.n	80097a6 <_malloc_r+0xe6>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	442b      	add	r3, r5
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	f8d8 3000 	ldr.w	r3, [r8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d038      	beq.n	80097b6 <_malloc_r+0xf6>
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	42a2      	cmp	r2, r4
 8009748:	d12b      	bne.n	80097a2 <_malloc_r+0xe2>
 800974a:	2200      	movs	r2, #0
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	e00f      	b.n	8009770 <_malloc_r+0xb0>
 8009750:	6822      	ldr	r2, [r4, #0]
 8009752:	1b52      	subs	r2, r2, r5
 8009754:	d41f      	bmi.n	8009796 <_malloc_r+0xd6>
 8009756:	2a0b      	cmp	r2, #11
 8009758:	d917      	bls.n	800978a <_malloc_r+0xca>
 800975a:	1961      	adds	r1, r4, r5
 800975c:	42a3      	cmp	r3, r4
 800975e:	6025      	str	r5, [r4, #0]
 8009760:	bf18      	it	ne
 8009762:	6059      	strne	r1, [r3, #4]
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	bf08      	it	eq
 8009768:	f8c8 1000 	streq.w	r1, [r8]
 800976c:	5162      	str	r2, [r4, r5]
 800976e:	604b      	str	r3, [r1, #4]
 8009770:	4638      	mov	r0, r7
 8009772:	f104 060b 	add.w	r6, r4, #11
 8009776:	f000 f829 	bl	80097cc <__malloc_unlock>
 800977a:	f026 0607 	bic.w	r6, r6, #7
 800977e:	1d23      	adds	r3, r4, #4
 8009780:	1af2      	subs	r2, r6, r3
 8009782:	d0ae      	beq.n	80096e2 <_malloc_r+0x22>
 8009784:	1b9b      	subs	r3, r3, r6
 8009786:	50a3      	str	r3, [r4, r2]
 8009788:	e7ab      	b.n	80096e2 <_malloc_r+0x22>
 800978a:	42a3      	cmp	r3, r4
 800978c:	6862      	ldr	r2, [r4, #4]
 800978e:	d1dd      	bne.n	800974c <_malloc_r+0x8c>
 8009790:	f8c8 2000 	str.w	r2, [r8]
 8009794:	e7ec      	b.n	8009770 <_malloc_r+0xb0>
 8009796:	4623      	mov	r3, r4
 8009798:	6864      	ldr	r4, [r4, #4]
 800979a:	e7ac      	b.n	80096f6 <_malloc_r+0x36>
 800979c:	4634      	mov	r4, r6
 800979e:	6876      	ldr	r6, [r6, #4]
 80097a0:	e7b4      	b.n	800970c <_malloc_r+0x4c>
 80097a2:	4613      	mov	r3, r2
 80097a4:	e7cc      	b.n	8009740 <_malloc_r+0x80>
 80097a6:	230c      	movs	r3, #12
 80097a8:	603b      	str	r3, [r7, #0]
 80097aa:	4638      	mov	r0, r7
 80097ac:	f000 f80e 	bl	80097cc <__malloc_unlock>
 80097b0:	e797      	b.n	80096e2 <_malloc_r+0x22>
 80097b2:	6025      	str	r5, [r4, #0]
 80097b4:	e7dc      	b.n	8009770 <_malloc_r+0xb0>
 80097b6:	605b      	str	r3, [r3, #4]
 80097b8:	deff      	udf	#255	; 0xff
 80097ba:	bf00      	nop
 80097bc:	20001ff8 	.word	0x20001ff8

080097c0 <__malloc_lock>:
 80097c0:	4801      	ldr	r0, [pc, #4]	; (80097c8 <__malloc_lock+0x8>)
 80097c2:	f7ff bf0f 	b.w	80095e4 <__retarget_lock_acquire_recursive>
 80097c6:	bf00      	nop
 80097c8:	20001ff4 	.word	0x20001ff4

080097cc <__malloc_unlock>:
 80097cc:	4801      	ldr	r0, [pc, #4]	; (80097d4 <__malloc_unlock+0x8>)
 80097ce:	f7ff bf0a 	b.w	80095e6 <__retarget_lock_release_recursive>
 80097d2:	bf00      	nop
 80097d4:	20001ff4 	.word	0x20001ff4

080097d8 <__ssputs_r>:
 80097d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	688e      	ldr	r6, [r1, #8]
 80097de:	461f      	mov	r7, r3
 80097e0:	42be      	cmp	r6, r7
 80097e2:	680b      	ldr	r3, [r1, #0]
 80097e4:	4682      	mov	sl, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	4690      	mov	r8, r2
 80097ea:	d82c      	bhi.n	8009846 <__ssputs_r+0x6e>
 80097ec:	898a      	ldrh	r2, [r1, #12]
 80097ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097f2:	d026      	beq.n	8009842 <__ssputs_r+0x6a>
 80097f4:	6965      	ldr	r5, [r4, #20]
 80097f6:	6909      	ldr	r1, [r1, #16]
 80097f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097fc:	eba3 0901 	sub.w	r9, r3, r1
 8009800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009804:	1c7b      	adds	r3, r7, #1
 8009806:	444b      	add	r3, r9
 8009808:	106d      	asrs	r5, r5, #1
 800980a:	429d      	cmp	r5, r3
 800980c:	bf38      	it	cc
 800980e:	461d      	movcc	r5, r3
 8009810:	0553      	lsls	r3, r2, #21
 8009812:	d527      	bpl.n	8009864 <__ssputs_r+0x8c>
 8009814:	4629      	mov	r1, r5
 8009816:	f7ff ff53 	bl	80096c0 <_malloc_r>
 800981a:	4606      	mov	r6, r0
 800981c:	b360      	cbz	r0, 8009878 <__ssputs_r+0xa0>
 800981e:	6921      	ldr	r1, [r4, #16]
 8009820:	464a      	mov	r2, r9
 8009822:	f000 faeb 	bl	8009dfc <memcpy>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800982c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	6126      	str	r6, [r4, #16]
 8009834:	6165      	str	r5, [r4, #20]
 8009836:	444e      	add	r6, r9
 8009838:	eba5 0509 	sub.w	r5, r5, r9
 800983c:	6026      	str	r6, [r4, #0]
 800983e:	60a5      	str	r5, [r4, #8]
 8009840:	463e      	mov	r6, r7
 8009842:	42be      	cmp	r6, r7
 8009844:	d900      	bls.n	8009848 <__ssputs_r+0x70>
 8009846:	463e      	mov	r6, r7
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	4632      	mov	r2, r6
 800984c:	4641      	mov	r1, r8
 800984e:	f000 faab 	bl	8009da8 <memmove>
 8009852:	68a3      	ldr	r3, [r4, #8]
 8009854:	1b9b      	subs	r3, r3, r6
 8009856:	60a3      	str	r3, [r4, #8]
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	4433      	add	r3, r6
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	2000      	movs	r0, #0
 8009860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009864:	462a      	mov	r2, r5
 8009866:	f000 fad7 	bl	8009e18 <_realloc_r>
 800986a:	4606      	mov	r6, r0
 800986c:	2800      	cmp	r0, #0
 800986e:	d1e0      	bne.n	8009832 <__ssputs_r+0x5a>
 8009870:	6921      	ldr	r1, [r4, #16]
 8009872:	4650      	mov	r0, sl
 8009874:	f7ff feb8 	bl	80095e8 <_free_r>
 8009878:	230c      	movs	r3, #12
 800987a:	f8ca 3000 	str.w	r3, [sl]
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	e7e9      	b.n	8009860 <__ssputs_r+0x88>

0800988c <_svfiprintf_r>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	4698      	mov	r8, r3
 8009892:	898b      	ldrh	r3, [r1, #12]
 8009894:	061b      	lsls	r3, r3, #24
 8009896:	b09d      	sub	sp, #116	; 0x74
 8009898:	4607      	mov	r7, r0
 800989a:	460d      	mov	r5, r1
 800989c:	4614      	mov	r4, r2
 800989e:	d50e      	bpl.n	80098be <_svfiprintf_r+0x32>
 80098a0:	690b      	ldr	r3, [r1, #16]
 80098a2:	b963      	cbnz	r3, 80098be <_svfiprintf_r+0x32>
 80098a4:	2140      	movs	r1, #64	; 0x40
 80098a6:	f7ff ff0b 	bl	80096c0 <_malloc_r>
 80098aa:	6028      	str	r0, [r5, #0]
 80098ac:	6128      	str	r0, [r5, #16]
 80098ae:	b920      	cbnz	r0, 80098ba <_svfiprintf_r+0x2e>
 80098b0:	230c      	movs	r3, #12
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e0d0      	b.n	8009a5c <_svfiprintf_r+0x1d0>
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	616b      	str	r3, [r5, #20]
 80098be:	2300      	movs	r3, #0
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	2320      	movs	r3, #32
 80098c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098cc:	2330      	movs	r3, #48	; 0x30
 80098ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a74 <_svfiprintf_r+0x1e8>
 80098d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098d6:	f04f 0901 	mov.w	r9, #1
 80098da:	4623      	mov	r3, r4
 80098dc:	469a      	mov	sl, r3
 80098de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e2:	b10a      	cbz	r2, 80098e8 <_svfiprintf_r+0x5c>
 80098e4:	2a25      	cmp	r2, #37	; 0x25
 80098e6:	d1f9      	bne.n	80098dc <_svfiprintf_r+0x50>
 80098e8:	ebba 0b04 	subs.w	fp, sl, r4
 80098ec:	d00b      	beq.n	8009906 <_svfiprintf_r+0x7a>
 80098ee:	465b      	mov	r3, fp
 80098f0:	4622      	mov	r2, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff ff6f 	bl	80097d8 <__ssputs_r>
 80098fa:	3001      	adds	r0, #1
 80098fc:	f000 80a9 	beq.w	8009a52 <_svfiprintf_r+0x1c6>
 8009900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009902:	445a      	add	r2, fp
 8009904:	9209      	str	r2, [sp, #36]	; 0x24
 8009906:	f89a 3000 	ldrb.w	r3, [sl]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80a1 	beq.w	8009a52 <_svfiprintf_r+0x1c6>
 8009910:	2300      	movs	r3, #0
 8009912:	f04f 32ff 	mov.w	r2, #4294967295
 8009916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991a:	f10a 0a01 	add.w	sl, sl, #1
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	9307      	str	r3, [sp, #28]
 8009922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009926:	931a      	str	r3, [sp, #104]	; 0x68
 8009928:	4654      	mov	r4, sl
 800992a:	2205      	movs	r2, #5
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	4850      	ldr	r0, [pc, #320]	; (8009a74 <_svfiprintf_r+0x1e8>)
 8009932:	f7f6 fc55 	bl	80001e0 <memchr>
 8009936:	9a04      	ldr	r2, [sp, #16]
 8009938:	b9d8      	cbnz	r0, 8009972 <_svfiprintf_r+0xe6>
 800993a:	06d0      	lsls	r0, r2, #27
 800993c:	bf44      	itt	mi
 800993e:	2320      	movmi	r3, #32
 8009940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009944:	0711      	lsls	r1, r2, #28
 8009946:	bf44      	itt	mi
 8009948:	232b      	movmi	r3, #43	; 0x2b
 800994a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800994e:	f89a 3000 	ldrb.w	r3, [sl]
 8009952:	2b2a      	cmp	r3, #42	; 0x2a
 8009954:	d015      	beq.n	8009982 <_svfiprintf_r+0xf6>
 8009956:	9a07      	ldr	r2, [sp, #28]
 8009958:	4654      	mov	r4, sl
 800995a:	2000      	movs	r0, #0
 800995c:	f04f 0c0a 	mov.w	ip, #10
 8009960:	4621      	mov	r1, r4
 8009962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009966:	3b30      	subs	r3, #48	; 0x30
 8009968:	2b09      	cmp	r3, #9
 800996a:	d94d      	bls.n	8009a08 <_svfiprintf_r+0x17c>
 800996c:	b1b0      	cbz	r0, 800999c <_svfiprintf_r+0x110>
 800996e:	9207      	str	r2, [sp, #28]
 8009970:	e014      	b.n	800999c <_svfiprintf_r+0x110>
 8009972:	eba0 0308 	sub.w	r3, r0, r8
 8009976:	fa09 f303 	lsl.w	r3, r9, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	46a2      	mov	sl, r4
 8009980:	e7d2      	b.n	8009928 <_svfiprintf_r+0x9c>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	1d19      	adds	r1, r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	9103      	str	r1, [sp, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfbb      	ittet	lt
 800998e:	425b      	neglt	r3, r3
 8009990:	f042 0202 	orrlt.w	r2, r2, #2
 8009994:	9307      	strge	r3, [sp, #28]
 8009996:	9307      	strlt	r3, [sp, #28]
 8009998:	bfb8      	it	lt
 800999a:	9204      	strlt	r2, [sp, #16]
 800999c:	7823      	ldrb	r3, [r4, #0]
 800999e:	2b2e      	cmp	r3, #46	; 0x2e
 80099a0:	d10c      	bne.n	80099bc <_svfiprintf_r+0x130>
 80099a2:	7863      	ldrb	r3, [r4, #1]
 80099a4:	2b2a      	cmp	r3, #42	; 0x2a
 80099a6:	d134      	bne.n	8009a12 <_svfiprintf_r+0x186>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	1d1a      	adds	r2, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	9203      	str	r2, [sp, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfb8      	it	lt
 80099b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099b8:	3402      	adds	r4, #2
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a84 <_svfiprintf_r+0x1f8>
 80099c0:	7821      	ldrb	r1, [r4, #0]
 80099c2:	2203      	movs	r2, #3
 80099c4:	4650      	mov	r0, sl
 80099c6:	f7f6 fc0b 	bl	80001e0 <memchr>
 80099ca:	b138      	cbz	r0, 80099dc <_svfiprintf_r+0x150>
 80099cc:	9b04      	ldr	r3, [sp, #16]
 80099ce:	eba0 000a 	sub.w	r0, r0, sl
 80099d2:	2240      	movs	r2, #64	; 0x40
 80099d4:	4082      	lsls	r2, r0
 80099d6:	4313      	orrs	r3, r2
 80099d8:	3401      	adds	r4, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e0:	4825      	ldr	r0, [pc, #148]	; (8009a78 <_svfiprintf_r+0x1ec>)
 80099e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099e6:	2206      	movs	r2, #6
 80099e8:	f7f6 fbfa 	bl	80001e0 <memchr>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d038      	beq.n	8009a62 <_svfiprintf_r+0x1d6>
 80099f0:	4b22      	ldr	r3, [pc, #136]	; (8009a7c <_svfiprintf_r+0x1f0>)
 80099f2:	bb1b      	cbnz	r3, 8009a3c <_svfiprintf_r+0x1b0>
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	3307      	adds	r3, #7
 80099f8:	f023 0307 	bic.w	r3, r3, #7
 80099fc:	3308      	adds	r3, #8
 80099fe:	9303      	str	r3, [sp, #12]
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a02:	4433      	add	r3, r6
 8009a04:	9309      	str	r3, [sp, #36]	; 0x24
 8009a06:	e768      	b.n	80098da <_svfiprintf_r+0x4e>
 8009a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e7a6      	b.n	8009960 <_svfiprintf_r+0xd4>
 8009a12:	2300      	movs	r3, #0
 8009a14:	3401      	adds	r4, #1
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	f04f 0c0a 	mov.w	ip, #10
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a24:	3a30      	subs	r2, #48	; 0x30
 8009a26:	2a09      	cmp	r2, #9
 8009a28:	d903      	bls.n	8009a32 <_svfiprintf_r+0x1a6>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0c6      	beq.n	80099bc <_svfiprintf_r+0x130>
 8009a2e:	9105      	str	r1, [sp, #20]
 8009a30:	e7c4      	b.n	80099bc <_svfiprintf_r+0x130>
 8009a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a36:	4604      	mov	r4, r0
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e7f0      	b.n	8009a1e <_svfiprintf_r+0x192>
 8009a3c:	ab03      	add	r3, sp, #12
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	462a      	mov	r2, r5
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <_svfiprintf_r+0x1f4>)
 8009a44:	a904      	add	r1, sp, #16
 8009a46:	4638      	mov	r0, r7
 8009a48:	f3af 8000 	nop.w
 8009a4c:	1c42      	adds	r2, r0, #1
 8009a4e:	4606      	mov	r6, r0
 8009a50:	d1d6      	bne.n	8009a00 <_svfiprintf_r+0x174>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	065b      	lsls	r3, r3, #25
 8009a56:	f53f af2d 	bmi.w	80098b4 <_svfiprintf_r+0x28>
 8009a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a5c:	b01d      	add	sp, #116	; 0x74
 8009a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a62:	ab03      	add	r3, sp, #12
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	462a      	mov	r2, r5
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <_svfiprintf_r+0x1f4>)
 8009a6a:	a904      	add	r1, sp, #16
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f000 f879 	bl	8009b64 <_printf_i>
 8009a72:	e7eb      	b.n	8009a4c <_svfiprintf_r+0x1c0>
 8009a74:	0800a020 	.word	0x0800a020
 8009a78:	0800a02a 	.word	0x0800a02a
 8009a7c:	00000000 	.word	0x00000000
 8009a80:	080097d9 	.word	0x080097d9
 8009a84:	0800a026 	.word	0x0800a026

08009a88 <_printf_common>:
 8009a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	4699      	mov	r9, r3
 8009a90:	688a      	ldr	r2, [r1, #8]
 8009a92:	690b      	ldr	r3, [r1, #16]
 8009a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	bfb8      	it	lt
 8009a9c:	4613      	movlt	r3, r2
 8009a9e:	6033      	str	r3, [r6, #0]
 8009aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	b10a      	cbz	r2, 8009aae <_printf_common+0x26>
 8009aaa:	3301      	adds	r3, #1
 8009aac:	6033      	str	r3, [r6, #0]
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	0699      	lsls	r1, r3, #26
 8009ab2:	bf42      	ittt	mi
 8009ab4:	6833      	ldrmi	r3, [r6, #0]
 8009ab6:	3302      	addmi	r3, #2
 8009ab8:	6033      	strmi	r3, [r6, #0]
 8009aba:	6825      	ldr	r5, [r4, #0]
 8009abc:	f015 0506 	ands.w	r5, r5, #6
 8009ac0:	d106      	bne.n	8009ad0 <_printf_common+0x48>
 8009ac2:	f104 0a19 	add.w	sl, r4, #25
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	6832      	ldr	r2, [r6, #0]
 8009aca:	1a9b      	subs	r3, r3, r2
 8009acc:	42ab      	cmp	r3, r5
 8009ace:	dc26      	bgt.n	8009b1e <_printf_common+0x96>
 8009ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ad4:	1e13      	subs	r3, r2, #0
 8009ad6:	6822      	ldr	r2, [r4, #0]
 8009ad8:	bf18      	it	ne
 8009ada:	2301      	movne	r3, #1
 8009adc:	0692      	lsls	r2, r2, #26
 8009ade:	d42b      	bmi.n	8009b38 <_printf_common+0xb0>
 8009ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	47c0      	blx	r8
 8009aea:	3001      	adds	r0, #1
 8009aec:	d01e      	beq.n	8009b2c <_printf_common+0xa4>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	6922      	ldr	r2, [r4, #16]
 8009af2:	f003 0306 	and.w	r3, r3, #6
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	bf02      	ittt	eq
 8009afa:	68e5      	ldreq	r5, [r4, #12]
 8009afc:	6833      	ldreq	r3, [r6, #0]
 8009afe:	1aed      	subeq	r5, r5, r3
 8009b00:	68a3      	ldr	r3, [r4, #8]
 8009b02:	bf0c      	ite	eq
 8009b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b08:	2500      	movne	r5, #0
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	bfc4      	itt	gt
 8009b0e:	1a9b      	subgt	r3, r3, r2
 8009b10:	18ed      	addgt	r5, r5, r3
 8009b12:	2600      	movs	r6, #0
 8009b14:	341a      	adds	r4, #26
 8009b16:	42b5      	cmp	r5, r6
 8009b18:	d11a      	bne.n	8009b50 <_printf_common+0xc8>
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	e008      	b.n	8009b30 <_printf_common+0xa8>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4652      	mov	r2, sl
 8009b22:	4649      	mov	r1, r9
 8009b24:	4638      	mov	r0, r7
 8009b26:	47c0      	blx	r8
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d103      	bne.n	8009b34 <_printf_common+0xac>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	3501      	adds	r5, #1
 8009b36:	e7c6      	b.n	8009ac6 <_printf_common+0x3e>
 8009b38:	18e1      	adds	r1, r4, r3
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	2030      	movs	r0, #48	; 0x30
 8009b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b42:	4422      	add	r2, r4
 8009b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b4c:	3302      	adds	r3, #2
 8009b4e:	e7c7      	b.n	8009ae0 <_printf_common+0x58>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4622      	mov	r2, r4
 8009b54:	4649      	mov	r1, r9
 8009b56:	4638      	mov	r0, r7
 8009b58:	47c0      	blx	r8
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d0e6      	beq.n	8009b2c <_printf_common+0xa4>
 8009b5e:	3601      	adds	r6, #1
 8009b60:	e7d9      	b.n	8009b16 <_printf_common+0x8e>
	...

08009b64 <_printf_i>:
 8009b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	7e0f      	ldrb	r7, [r1, #24]
 8009b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b6c:	2f78      	cmp	r7, #120	; 0x78
 8009b6e:	4691      	mov	r9, r2
 8009b70:	4680      	mov	r8, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	469a      	mov	sl, r3
 8009b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b7a:	d807      	bhi.n	8009b8c <_printf_i+0x28>
 8009b7c:	2f62      	cmp	r7, #98	; 0x62
 8009b7e:	d80a      	bhi.n	8009b96 <_printf_i+0x32>
 8009b80:	2f00      	cmp	r7, #0
 8009b82:	f000 80d4 	beq.w	8009d2e <_printf_i+0x1ca>
 8009b86:	2f58      	cmp	r7, #88	; 0x58
 8009b88:	f000 80c0 	beq.w	8009d0c <_printf_i+0x1a8>
 8009b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b94:	e03a      	b.n	8009c0c <_printf_i+0xa8>
 8009b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b9a:	2b15      	cmp	r3, #21
 8009b9c:	d8f6      	bhi.n	8009b8c <_printf_i+0x28>
 8009b9e:	a101      	add	r1, pc, #4	; (adr r1, 8009ba4 <_printf_i+0x40>)
 8009ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	08009c11 	.word	0x08009c11
 8009bac:	08009b8d 	.word	0x08009b8d
 8009bb0:	08009b8d 	.word	0x08009b8d
 8009bb4:	08009b8d 	.word	0x08009b8d
 8009bb8:	08009b8d 	.word	0x08009b8d
 8009bbc:	08009c11 	.word	0x08009c11
 8009bc0:	08009b8d 	.word	0x08009b8d
 8009bc4:	08009b8d 	.word	0x08009b8d
 8009bc8:	08009b8d 	.word	0x08009b8d
 8009bcc:	08009b8d 	.word	0x08009b8d
 8009bd0:	08009d15 	.word	0x08009d15
 8009bd4:	08009c3d 	.word	0x08009c3d
 8009bd8:	08009ccf 	.word	0x08009ccf
 8009bdc:	08009b8d 	.word	0x08009b8d
 8009be0:	08009b8d 	.word	0x08009b8d
 8009be4:	08009d37 	.word	0x08009d37
 8009be8:	08009b8d 	.word	0x08009b8d
 8009bec:	08009c3d 	.word	0x08009c3d
 8009bf0:	08009b8d 	.word	0x08009b8d
 8009bf4:	08009b8d 	.word	0x08009b8d
 8009bf8:	08009cd7 	.word	0x08009cd7
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	602a      	str	r2, [r5, #0]
 8009c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e09f      	b.n	8009d50 <_printf_i+0x1ec>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	0607      	lsls	r7, r0, #24
 8009c16:	f103 0104 	add.w	r1, r3, #4
 8009c1a:	6029      	str	r1, [r5, #0]
 8009c1c:	d501      	bpl.n	8009c22 <_printf_i+0xbe>
 8009c1e:	681e      	ldr	r6, [r3, #0]
 8009c20:	e003      	b.n	8009c2a <_printf_i+0xc6>
 8009c22:	0646      	lsls	r6, r0, #25
 8009c24:	d5fb      	bpl.n	8009c1e <_printf_i+0xba>
 8009c26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	da03      	bge.n	8009c36 <_printf_i+0xd2>
 8009c2e:	232d      	movs	r3, #45	; 0x2d
 8009c30:	4276      	negs	r6, r6
 8009c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c36:	485a      	ldr	r0, [pc, #360]	; (8009da0 <_printf_i+0x23c>)
 8009c38:	230a      	movs	r3, #10
 8009c3a:	e012      	b.n	8009c62 <_printf_i+0xfe>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	1d19      	adds	r1, r3, #4
 8009c42:	6029      	str	r1, [r5, #0]
 8009c44:	0605      	lsls	r5, r0, #24
 8009c46:	d501      	bpl.n	8009c4c <_printf_i+0xe8>
 8009c48:	681e      	ldr	r6, [r3, #0]
 8009c4a:	e002      	b.n	8009c52 <_printf_i+0xee>
 8009c4c:	0641      	lsls	r1, r0, #25
 8009c4e:	d5fb      	bpl.n	8009c48 <_printf_i+0xe4>
 8009c50:	881e      	ldrh	r6, [r3, #0]
 8009c52:	4853      	ldr	r0, [pc, #332]	; (8009da0 <_printf_i+0x23c>)
 8009c54:	2f6f      	cmp	r7, #111	; 0x6f
 8009c56:	bf0c      	ite	eq
 8009c58:	2308      	moveq	r3, #8
 8009c5a:	230a      	movne	r3, #10
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c62:	6865      	ldr	r5, [r4, #4]
 8009c64:	60a5      	str	r5, [r4, #8]
 8009c66:	2d00      	cmp	r5, #0
 8009c68:	bfa2      	ittt	ge
 8009c6a:	6821      	ldrge	r1, [r4, #0]
 8009c6c:	f021 0104 	bicge.w	r1, r1, #4
 8009c70:	6021      	strge	r1, [r4, #0]
 8009c72:	b90e      	cbnz	r6, 8009c78 <_printf_i+0x114>
 8009c74:	2d00      	cmp	r5, #0
 8009c76:	d04b      	beq.n	8009d10 <_printf_i+0x1ac>
 8009c78:	4615      	mov	r5, r2
 8009c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c82:	5dc7      	ldrb	r7, [r0, r7]
 8009c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c88:	4637      	mov	r7, r6
 8009c8a:	42bb      	cmp	r3, r7
 8009c8c:	460e      	mov	r6, r1
 8009c8e:	d9f4      	bls.n	8009c7a <_printf_i+0x116>
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d10b      	bne.n	8009cac <_printf_i+0x148>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	07de      	lsls	r6, r3, #31
 8009c98:	d508      	bpl.n	8009cac <_printf_i+0x148>
 8009c9a:	6923      	ldr	r3, [r4, #16]
 8009c9c:	6861      	ldr	r1, [r4, #4]
 8009c9e:	4299      	cmp	r1, r3
 8009ca0:	bfde      	ittt	le
 8009ca2:	2330      	movle	r3, #48	; 0x30
 8009ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cac:	1b52      	subs	r2, r2, r5
 8009cae:	6122      	str	r2, [r4, #16]
 8009cb0:	f8cd a000 	str.w	sl, [sp]
 8009cb4:	464b      	mov	r3, r9
 8009cb6:	aa03      	add	r2, sp, #12
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f7ff fee4 	bl	8009a88 <_printf_common>
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d14a      	bne.n	8009d5a <_printf_i+0x1f6>
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	b004      	add	sp, #16
 8009cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	f043 0320 	orr.w	r3, r3, #32
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	4833      	ldr	r0, [pc, #204]	; (8009da4 <_printf_i+0x240>)
 8009cd8:	2778      	movs	r7, #120	; 0x78
 8009cda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	6829      	ldr	r1, [r5, #0]
 8009ce2:	061f      	lsls	r7, r3, #24
 8009ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ce8:	d402      	bmi.n	8009cf0 <_printf_i+0x18c>
 8009cea:	065f      	lsls	r7, r3, #25
 8009cec:	bf48      	it	mi
 8009cee:	b2b6      	uxthmi	r6, r6
 8009cf0:	07df      	lsls	r7, r3, #31
 8009cf2:	bf48      	it	mi
 8009cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8009cf8:	6029      	str	r1, [r5, #0]
 8009cfa:	bf48      	it	mi
 8009cfc:	6023      	strmi	r3, [r4, #0]
 8009cfe:	b91e      	cbnz	r6, 8009d08 <_printf_i+0x1a4>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	f023 0320 	bic.w	r3, r3, #32
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	2310      	movs	r3, #16
 8009d0a:	e7a7      	b.n	8009c5c <_printf_i+0xf8>
 8009d0c:	4824      	ldr	r0, [pc, #144]	; (8009da0 <_printf_i+0x23c>)
 8009d0e:	e7e4      	b.n	8009cda <_printf_i+0x176>
 8009d10:	4615      	mov	r5, r2
 8009d12:	e7bd      	b.n	8009c90 <_printf_i+0x12c>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	6826      	ldr	r6, [r4, #0]
 8009d18:	6961      	ldr	r1, [r4, #20]
 8009d1a:	1d18      	adds	r0, r3, #4
 8009d1c:	6028      	str	r0, [r5, #0]
 8009d1e:	0635      	lsls	r5, r6, #24
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	d501      	bpl.n	8009d28 <_printf_i+0x1c4>
 8009d24:	6019      	str	r1, [r3, #0]
 8009d26:	e002      	b.n	8009d2e <_printf_i+0x1ca>
 8009d28:	0670      	lsls	r0, r6, #25
 8009d2a:	d5fb      	bpl.n	8009d24 <_printf_i+0x1c0>
 8009d2c:	8019      	strh	r1, [r3, #0]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	4615      	mov	r5, r2
 8009d34:	e7bc      	b.n	8009cb0 <_printf_i+0x14c>
 8009d36:	682b      	ldr	r3, [r5, #0]
 8009d38:	1d1a      	adds	r2, r3, #4
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	681d      	ldr	r5, [r3, #0]
 8009d3e:	6862      	ldr	r2, [r4, #4]
 8009d40:	2100      	movs	r1, #0
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7f6 fa4c 	bl	80001e0 <memchr>
 8009d48:	b108      	cbz	r0, 8009d4e <_printf_i+0x1ea>
 8009d4a:	1b40      	subs	r0, r0, r5
 8009d4c:	6060      	str	r0, [r4, #4]
 8009d4e:	6863      	ldr	r3, [r4, #4]
 8009d50:	6123      	str	r3, [r4, #16]
 8009d52:	2300      	movs	r3, #0
 8009d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d58:	e7aa      	b.n	8009cb0 <_printf_i+0x14c>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	462a      	mov	r2, r5
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4640      	mov	r0, r8
 8009d62:	47d0      	blx	sl
 8009d64:	3001      	adds	r0, #1
 8009d66:	d0ad      	beq.n	8009cc4 <_printf_i+0x160>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	079b      	lsls	r3, r3, #30
 8009d6c:	d413      	bmi.n	8009d96 <_printf_i+0x232>
 8009d6e:	68e0      	ldr	r0, [r4, #12]
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	4298      	cmp	r0, r3
 8009d74:	bfb8      	it	lt
 8009d76:	4618      	movlt	r0, r3
 8009d78:	e7a6      	b.n	8009cc8 <_printf_i+0x164>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	4649      	mov	r1, r9
 8009d80:	4640      	mov	r0, r8
 8009d82:	47d0      	blx	sl
 8009d84:	3001      	adds	r0, #1
 8009d86:	d09d      	beq.n	8009cc4 <_printf_i+0x160>
 8009d88:	3501      	adds	r5, #1
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	9903      	ldr	r1, [sp, #12]
 8009d8e:	1a5b      	subs	r3, r3, r1
 8009d90:	42ab      	cmp	r3, r5
 8009d92:	dcf2      	bgt.n	8009d7a <_printf_i+0x216>
 8009d94:	e7eb      	b.n	8009d6e <_printf_i+0x20a>
 8009d96:	2500      	movs	r5, #0
 8009d98:	f104 0619 	add.w	r6, r4, #25
 8009d9c:	e7f5      	b.n	8009d8a <_printf_i+0x226>
 8009d9e:	bf00      	nop
 8009da0:	0800a031 	.word	0x0800a031
 8009da4:	0800a042 	.word	0x0800a042

08009da8 <memmove>:
 8009da8:	4288      	cmp	r0, r1
 8009daa:	b510      	push	{r4, lr}
 8009dac:	eb01 0402 	add.w	r4, r1, r2
 8009db0:	d902      	bls.n	8009db8 <memmove+0x10>
 8009db2:	4284      	cmp	r4, r0
 8009db4:	4623      	mov	r3, r4
 8009db6:	d807      	bhi.n	8009dc8 <memmove+0x20>
 8009db8:	1e43      	subs	r3, r0, #1
 8009dba:	42a1      	cmp	r1, r4
 8009dbc:	d008      	beq.n	8009dd0 <memmove+0x28>
 8009dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dc6:	e7f8      	b.n	8009dba <memmove+0x12>
 8009dc8:	4402      	add	r2, r0
 8009dca:	4601      	mov	r1, r0
 8009dcc:	428a      	cmp	r2, r1
 8009dce:	d100      	bne.n	8009dd2 <memmove+0x2a>
 8009dd0:	bd10      	pop	{r4, pc}
 8009dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dda:	e7f7      	b.n	8009dcc <memmove+0x24>

08009ddc <_sbrk_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d06      	ldr	r5, [pc, #24]	; (8009df8 <_sbrk_r+0x1c>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f6 fffe 	bl	8000de8 <_sbrk>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_sbrk_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_sbrk_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	20001ff0 	.word	0x20001ff0

08009dfc <memcpy>:
 8009dfc:	440a      	add	r2, r1
 8009dfe:	4291      	cmp	r1, r2
 8009e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e04:	d100      	bne.n	8009e08 <memcpy+0xc>
 8009e06:	4770      	bx	lr
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e12:	4291      	cmp	r1, r2
 8009e14:	d1f9      	bne.n	8009e0a <memcpy+0xe>
 8009e16:	bd10      	pop	{r4, pc}

08009e18 <_realloc_r>:
 8009e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	4614      	mov	r4, r2
 8009e20:	460e      	mov	r6, r1
 8009e22:	b921      	cbnz	r1, 8009e2e <_realloc_r+0x16>
 8009e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	4611      	mov	r1, r2
 8009e2a:	f7ff bc49 	b.w	80096c0 <_malloc_r>
 8009e2e:	b92a      	cbnz	r2, 8009e3c <_realloc_r+0x24>
 8009e30:	f7ff fbda 	bl	80095e8 <_free_r>
 8009e34:	4625      	mov	r5, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3c:	f000 f81b 	bl	8009e76 <_malloc_usable_size_r>
 8009e40:	4284      	cmp	r4, r0
 8009e42:	4607      	mov	r7, r0
 8009e44:	d802      	bhi.n	8009e4c <_realloc_r+0x34>
 8009e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e4a:	d812      	bhi.n	8009e72 <_realloc_r+0x5a>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4640      	mov	r0, r8
 8009e50:	f7ff fc36 	bl	80096c0 <_malloc_r>
 8009e54:	4605      	mov	r5, r0
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0ed      	beq.n	8009e36 <_realloc_r+0x1e>
 8009e5a:	42bc      	cmp	r4, r7
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4631      	mov	r1, r6
 8009e60:	bf28      	it	cs
 8009e62:	463a      	movcs	r2, r7
 8009e64:	f7ff ffca 	bl	8009dfc <memcpy>
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f7ff fbbc 	bl	80095e8 <_free_r>
 8009e70:	e7e1      	b.n	8009e36 <_realloc_r+0x1e>
 8009e72:	4635      	mov	r5, r6
 8009e74:	e7df      	b.n	8009e36 <_realloc_r+0x1e>

08009e76 <_malloc_usable_size_r>:
 8009e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7a:	1f18      	subs	r0, r3, #4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfbc      	itt	lt
 8009e80:	580b      	ldrlt	r3, [r1, r0]
 8009e82:	18c0      	addlt	r0, r0, r3
 8009e84:	4770      	bx	lr
	...

08009e88 <_init>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr

08009e94 <_fini>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr
