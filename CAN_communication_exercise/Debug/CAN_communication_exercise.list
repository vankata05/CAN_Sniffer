
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800a294  0800a294  0001a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001e7c  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001fd8  20001fd8  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014a76  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036fc  00000000  00000000  00034c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c13  00000000  00000000  00039340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c92  00000000  00000000  00039f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015855  00000000  00000000  0005dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c931a  00000000  00000000  0007343a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046e8  00000000  00000000  0013c754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00140e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a27c 	.word	0x0800a27c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800a27c 	.word	0x0800a27c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d141      	bne.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80005ac:	f001 f919 	bl	80017e2 <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80005b6:	d102      	bne.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	469c      	mov	ip, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461e      	mov	r6, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	9305      	str	r3, [sp, #20]
 80005f4:	9604      	str	r6, [sp, #16]
 80005f6:	9503      	str	r5, [sp, #12]
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000604:	f009 f980 	bl	8009908 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8000612:	bf00      	nop
 8000614:	372c      	adds	r7, #44	; 0x2c
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	20000273 	.word	0x20000273
 8000620:	20000178 	.word	0x20000178
 8000624:	200001c0 	.word	0x200001c0
 8000628:	20000272 	.word	0x20000272
 800062c:	0800a294 	.word	0x0800a294
 8000630:	20000180 	.word	0x20000180
 8000634:	20000274 	.word	0x20000274

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800063e:	f000 fdd1 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 fa39 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 fb71 	bl	8000d2c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800064a:	f008 fb83 	bl	8008d54 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800064e:	f000 fb43 	bl	8000cd8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000652:	f000 fb17 	bl	8000c84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8000656:	f000 f827 	bl	80006a8 <HODL_Till_BTN>

  Auto_Baudrate_Setup(PRE);
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <main+0x64>)
 800065c:	f000 f840 	bl	80006e0 <Auto_Baudrate_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t tick = HAL_GetTick();

  uint8_t data[64] = {0};
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	223c      	movs	r2, #60	; 0x3c
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f009 f96b 	bl	8009948 <memset>
  double coords[2] = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  AT_Join(&huart2);
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x68>)
 8000680:	f000 f9ca 	bl	8000a18 <AT_Join>

  while (1)
  {
	  GNSS_Get_Coords(&huart3, data, 64, coords);
 8000684:	463b      	mov	r3, r7
 8000686:	f107 0110 	add.w	r1, r7, #16
 800068a:	2240      	movs	r2, #64	; 0x40
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0x6c>)
 800068e:	f000 f8e3 	bl	8000858 <GNSS_Get_Coords>
	  HAL_Delay(5000);
 8000692:	f241 3088 	movw	r0, #5000	; 0x1388
 8000696:	f000 fe17 	bl	80012c8 <HAL_Delay>
	  GNSS_Get_Coords(&huart3, data, 64, coords);
 800069a:	e7f3      	b.n	8000684 <main+0x4c>
 800069c:	20000000 	.word	0x20000000
 80006a0:	200001e8 	.word	0x200001e8
 80006a4:	2000022c 	.word	0x2000022c

080006a8 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006ac:	e005      	b.n	80006ba <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <HODL_Till_BTN+0x30>)
 80006b6:	f001 ff53 	bl	8002560 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006ba:	2101      	movs	r1, #1
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <HODL_Till_BTN+0x34>)
 80006be:	f001 ff37 	bl	8002530 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f2      	beq.n	80006ae <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <HODL_Till_BTN+0x30>)
 80006d0:	f001 ff46 	bl	8002560 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40020000 	.word	0x40020000

080006e0 <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 4; i++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006ee:	e034      	b.n	800075a <Auto_Baudrate_Setup+0x7a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <Auto_Baudrate_Setup+0x110>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d133      	bne.n	8000762 <Auto_Baudrate_Setup+0x82>
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <Auto_Baudrate_Setup+0x114>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d12e      	bne.n	8000762 <Auto_Baudrate_Setup+0x82>
		  if(i == 0){
 8000704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10d      	bne.n	8000728 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fa67 	bl	8000be8 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800071a:	4837      	ldr	r0, [pc, #220]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 800071c:	f000 ffd4 	bl	80016c8 <HAL_CAN_Start>
			  HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	; 0x64
 8000722:	f000 fdd1 	bl	80012c8 <HAL_Delay>
 8000726:	e013      	b.n	8000750 <Auto_Baudrate_Setup+0x70>
		  }else{
			  HAL_CAN_Stop(&hcan1);
 8000728:	4833      	ldr	r0, [pc, #204]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 800072a:	f001 f811 	bl	8001750 <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800072e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fa52 	bl	8000be8 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000744:	482c      	ldr	r0, [pc, #176]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 8000746:	f000 ffbf 	bl	80016c8 <HAL_CAN_Start>
			  HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f000 fdbc 	bl	80012c8 <HAL_Delay>
  for(i = 0; i < 4; i++){
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3301      	adds	r3, #1
 8000756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9c6      	bls.n	80006f0 <Auto_Baudrate_Setup+0x10>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <Auto_Baudrate_Setup+0x110>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <Auto_Baudrate_Setup+0x96>
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <Auto_Baudrate_Setup+0x114>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d029      	beq.n	80007ca <Auto_Baudrate_Setup+0xea>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800077a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800077e:	3b01      	subs	r3, #1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	491b      	ldr	r1, [pc, #108]	; (80007fc <Auto_Baudrate_Setup+0x11c>)
 800078e:	4618      	mov	r0, r3
 8000790:	f009 f8ba 	bl	8009908 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd19 	bl	80001d0 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 fbaf 	bl	8008f0c <CDC_Transmit_FS>
	  HAL_CAN_Stop(&hcan1);
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007b0:	f000 ffce 	bl	8001750 <HAL_CAN_Stop>
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(&hcan1);
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007bc:	f000 fda8 	bl	8001310 <HAL_CAN_Init>
	  CAN1_Filter_Config();
 80007c0:	f000 f9e4 	bl	8000b8c <CAN1_Filter_Config>
	  HAL_CAN_Start(&hcan1);
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007c6:	f000 ff7f 	bl	80016c8 <HAL_CAN_Start>
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <Auto_Baudrate_Setup+0x110>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d108      	bne.n	80007e6 <Auto_Baudrate_Setup+0x106>
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <Auto_Baudrate_Setup+0x114>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d103      	bne.n	80007e6 <Auto_Baudrate_Setup+0x106>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80007de:	2118      	movs	r1, #24
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <Auto_Baudrate_Setup+0x120>)
 80007e2:	f008 fb93 	bl	8008f0c <CDC_Transmit_FS>
//	  Error_Handler();
  }
}
 80007e6:	bf00      	nop
 80007e8:	3738      	adds	r7, #56	; 0x38
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000271 	.word	0x20000271
 80007f4:	20000270 	.word	0x20000270
 80007f8:	200001c0 	.word	0x200001c0
 80007fc:	0800a36c 	.word	0x0800a36c
 8000800:	0800a398 	.word	0x0800a398

08000804 <Rem_Char>:

	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);

}

static void Rem_Char(uint8_t* data, uint8_t ch){
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	uint8_t *pr = data, *pw = data;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 8000818:	e011      	b.n	800083e <Rem_Char+0x3a>
        *pw = *pr++;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	60fa      	str	r2, [r7, #12]
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	701a      	strb	r2, [r3, #0]
        pw += (*pw != ch);
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	78fa      	ldrb	r2, [r7, #3]
 800082c:	429a      	cmp	r2, r3
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1e9      	bne.n	800081a <Rem_Char+0x16>
    }
    *pw = '\0';
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <GNSS_Get_Coords>:

static void GNSS_Get_Coords(UART_HandleTypeDef *huart, uint8_t* data, uint8_t size, double* Coords){
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4613      	mov	r3, r2
 8000866:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Receive_STR(huart, data, size, 50);
	  while(1){
//		  HAL_UART_Receive_STR(huart, data, size, 50);
		  strcpy((char*)data, (char*)"$GNGLL,4239.8504,N,02322.3824,E,065205.000,A,A*4A");
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <GNSS_Get_Coords+0xc8>)
 800086c:	4614      	mov	r4, r2
 800086e:	469c      	mov	ip, r3
 8000870:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000874:	4665      	mov	r5, ip
 8000876:	4626      	mov	r6, r4
 8000878:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800087a:	6028      	str	r0, [r5, #0]
 800087c:	6069      	str	r1, [r5, #4]
 800087e:	60aa      	str	r2, [r5, #8]
 8000880:	60eb      	str	r3, [r5, #12]
 8000882:	3410      	adds	r4, #16
 8000884:	f10c 0c10 	add.w	ip, ip, #16
 8000888:	4574      	cmp	r4, lr
 800088a:	d1f3      	bne.n	8000874 <GNSS_Get_Coords+0x1c>
 800088c:	4662      	mov	r2, ip
 800088e:	4623      	mov	r3, r4
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	8013      	strh	r3, [r2, #0]
//		  							4240.0922,N,02322.4681,E,06380
//		                            4240.092202322.4681
//		                            42400922023224681

//		  Rem_Char(data, '$');
		  break;
 8000894:	bf00      	nop
			  break;
		  }
	  }

//	**znam che moje sus strtok, narochno ne e taka**
	  for(int i = 0; i < size && data[i] != 0; i++){
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e02a      	b.n	80008f2 <GNSS_Get_Coords+0x9a>
		  if(i < 18){
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2b11      	cmp	r3, #17
 80008a0:	dc16      	bgt.n	80008d0 <GNSS_Get_Coords+0x78>
			  if(i > 8)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	dd09      	ble.n	80008bc <GNSS_Get_Coords+0x64>
				  data[i] = data[i+11];
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	330b      	adds	r3, #11
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	441a      	add	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	440b      	add	r3, r1
 80008b6:	7812      	ldrb	r2, [r2, #0]
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e017      	b.n	80008ec <GNSS_Get_Coords+0x94>
			  else
				  data[i] = data[i+7];
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	3307      	adds	r3, #7
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	441a      	add	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	68b9      	ldr	r1, [r7, #8]
 80008c8:	440b      	add	r3, r1
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e00d      	b.n	80008ec <GNSS_Get_Coords+0x94>
		  }else if(i == 18){
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d105      	bne.n	80008e2 <GNSS_Get_Coords+0x8a>
			  data[i] = '\n';
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	4413      	add	r3, r2
 80008dc:	220a      	movs	r2, #10
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e004      	b.n	80008ec <GNSS_Get_Coords+0x94>
		  }else{
			  data[i] = 0;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4413      	add	r3, r2
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < size && data[i] != 0; i++){
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	da05      	bge.n	8000906 <GNSS_Get_Coords+0xae>
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1ca      	bne.n	800089c <GNSS_Get_Coords+0x44>
		  }
	  }

	  Rem_Char(data, '.');
 8000906:	212e      	movs	r1, #46	; 0x2e
 8000908:	68b8      	ldr	r0, [r7, #8]
 800090a:	f7ff ff7b 	bl	8000804 <Rem_Char>
//	  strcat(msg, (uint8_t*)atoi((char*)data));

//	  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);

	  AT_Send(&huart2, data, 1);
 800090e:	2201      	movs	r2, #1
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <GNSS_Get_Coords+0xcc>)
 8000914:	f000 f836 	bl	8000984 <AT_Send>

}
 8000918:	bf00      	nop
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000920:	0800a3b4 	.word	0x0800a3b4
 8000924:	200001e8 	.word	0x200001e8

08000928 <HAL_UART_Receive_STR>:

static void HAL_UART_Receive_STR(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size, uint32_t Timeout){
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	4613      	mov	r3, r2
 8000936:	71fb      	strb	r3, [r7, #7]
	memset(pData, 0, Size);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	68b8      	ldr	r0, [r7, #8]
 8000940:	f009 f802 	bl	8009948 <memset>
	uint8_t buff[2] = {0};
 8000944:	2300      	movs	r3, #0
 8000946:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	75fb      	strb	r3, [r7, #23]
 800094c:	e011      	b.n	8000972 <HAL_UART_Receive_STR+0x4a>
		HAL_UART_Receive(huart, buff, 1, Timeout);
 800094e:	f107 0114 	add.w	r1, r7, #20
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f003 fe0f 	bl	800457a <HAL_UART_Receive>
		pData[Size - i] = buff[0];
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	461a      	mov	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4413      	add	r3, r2
 8000968:	7d3a      	ldrb	r2, [r7, #20]
 800096a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	3b01      	subs	r3, #1
 8000970:	75fb      	strb	r3, [r7, #23]
 8000972:	7d3b      	ldrb	r3, [r7, #20]
 8000974:	2b0a      	cmp	r3, #10
 8000976:	d1ea      	bne.n	800094e <HAL_UART_Receive_STR+0x26>
	}
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <AT_Send>:

static void AT_Send(UART_HandleTypeDef *huart, uint8_t* data, uint8_t Chnl){
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b09a      	sub	sp, #104	; 0x68
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	4613      	mov	r3, r2
 8000990:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[64] = {0};
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	223c      	movs	r2, #60	; 0x3c
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 ffd2 	bl	8009948 <memset>

    uint8_t lat[9] = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	711a      	strb	r2, [r3, #4]
    memcpy(&lat, data, 8);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2208      	movs	r2, #8
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f009 f80e 	bl	80099dc <memcpy>
    lat[8] = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	773b      	strb	r3, [r7, #28]
    data += 8;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3308      	adds	r3, #8
 80009c8:	60bb      	str	r3, [r7, #8]

	sprintf((char*)msg, "AT+SEND=%d:0:%x%x\n", Chnl, atoi((char*)lat), atoi((char*)data));
 80009ca:	79fc      	ldrb	r4, [r7, #7]
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f008 ff09 	bl	80097e8 <atoi>
 80009d6:	4605      	mov	r5, r0
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f008 ff05 	bl	80097e8 <atoi>
 80009de:	4603      	mov	r3, r0
 80009e0:	f107 0020 	add.w	r0, r7, #32
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	462b      	mov	r3, r5
 80009e8:	4622      	mov	r2, r4
 80009ea:	490a      	ldr	r1, [pc, #40]	; (8000a14 <AT_Send+0x90>)
 80009ec:	f008 ff8c 	bl	8009908 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen((char*)msg), 1000);
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbeb 	bl	80001d0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0120 	add.w	r1, r7, #32
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f003 fd25 	bl	8004456 <HAL_UART_Transmit>
}
 8000a0c:	bf00      	nop
 8000a0e:	3760      	adds	r7, #96	; 0x60
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bdb0      	pop	{r4, r5, r7, pc}
 8000a14:	0800a3e8 	.word	0x0800a3e8

08000a18 <AT_Join>:

static void AT_Join(UART_HandleTypeDef *huart){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t msg[64] = {0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	223c      	movs	r2, #60	; 0x3c
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f008 ff8b 	bl	8009948 <memset>
	uint32_t tick = HAL_GetTick();
 8000a32:	f000 fc3d 	bl	80012b0 <HAL_GetTick>
 8000a36:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	491b      	ldr	r1, [pc, #108]	; (8000aac <AT_Join+0x94>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f003 fd08 	bl	8004456 <HAL_UART_Transmit>
	while(strstr((char*) msg, "JOINED") == NULL){
 8000a46:	e022      	b.n	8000a8e <AT_Join+0x76>
		if((HAL_GetTick() - tick) > 10000 || strstr((char*) msg, "FAILED") != NULL){
 8000a48:	f000 fc32 	bl	80012b0 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d808      	bhi.n	8000a6c <AT_Join+0x54>
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4914      	ldr	r1, [pc, #80]	; (8000ab0 <AT_Join+0x98>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 ff79 	bl	8009958 <strstr>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d009      	beq.n	8000a80 <AT_Join+0x68>
			tick = HAL_GetTick();
 8000a6c:	f000 fc20 	bl	80012b0 <HAL_GetTick>
 8000a70:	64f8      	str	r0, [r7, #76]	; 0x4c
			HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	220a      	movs	r2, #10
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <AT_Join+0x94>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f003 fceb 	bl	8004456 <HAL_UART_Transmit>
		}
		HAL_UART_Receive_STR(huart, msg, 64, 50);
 8000a80:	f107 010c 	add.w	r1, r7, #12
 8000a84:	2332      	movs	r3, #50	; 0x32
 8000a86:	2240      	movs	r2, #64	; 0x40
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff4d 	bl	8000928 <HAL_UART_Receive_STR>
	while(strstr((char*) msg, "JOINED") == NULL){
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <AT_Join+0x9c>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 ff5f 	bl	8009958 <strstr>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0d3      	beq.n	8000a48 <AT_Join+0x30>
	}

}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	0800a3fc 	.word	0x0800a3fc
 8000ab0:	0800a408 	.word	0x0800a408
 8000ab4:	0800a410 	.word	0x0800a410

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 ff3e 	bl	8009948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <SystemClock_Config+0xcc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <SystemClock_Config+0xcc>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xd0>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 ffa4 	bl	8003a8c <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b4a:	f000 f94f 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2302      	movs	r3, #2
 8000b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fa05 	bl	8003f7c <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b78:	f000 f938 	bl	8000dec <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3750      	adds	r7, #80	; 0x50
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2228      	movs	r2, #40	; 0x28
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f008 fed5 	bl	8009948 <memset>

  filters.FilterActivation = ENABLE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 8000bb2:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000bb6:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8000bbc:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8000bc0:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <CAN1_Filter_Config+0x58>)
 8000bcc:	f000 fc9c 	bl	8001508 <HAL_CAN_ConfigFilter>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 8000bd6:	f000 f909 	bl	8000dec <Error_Handler>
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001c0 	.word	0x200001c0

08000be8 <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <MX_CAN1_Init+0x98>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000bf8:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c10:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c3e:	f000 fb67 	bl	8001310 <HAL_CAN_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000c48:	f000 f8d0 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c52:	f000 fed8 	bl	8001a06 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	2228      	movs	r2, #40	; 0x28
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 fe72 	bl	8009948 <memset>
  filters.FilterActivation = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MX_CAN1_Init+0x94>)
 8000c70:	f000 fc4a 	bl	8001508 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200001c0 	.word	0x200001c0
 8000c80:	40006400 	.word	0x40006400

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART2_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f003 fb7e 	bl	80043bc <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f891 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001e8 	.word	0x200001e8
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MX_USART3_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART3_UART_Init+0x4c>)
 8000d10:	f003 fb54 	bl	80043bc <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f000 f867 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000022c 	.word	0x2000022c
 8000d28:	40004800 	.word	0x40004800

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xb4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000d9e:	f001 fbdf 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_GPIO_Init+0xbc>)
 8000db6:	f001 fa1f 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_GPIO_Init+0xb8>)
 8000dd4:	f001 fa10 	bl	80021f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40020000 	.word	0x40020000

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_CAN_MspInit+0xb4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d143      	bne.n	8000ef2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_CAN_MspInit+0xb8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_CAN_MspInit+0xb8>)
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_CAN_MspInit+0xb8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_CAN_MspInit+0xb8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <HAL_CAN_MspInit+0xb8>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_CAN_MspInit+0xb8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eb2:	2309      	movs	r3, #9
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <HAL_CAN_MspInit+0xbc>)
 8000ebe:	f001 f99b 	bl	80021f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2013      	movs	r0, #19
 8000ec8:	f001 f8cd 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ecc:	2013      	movs	r0, #19
 8000ece:	f001 f8e6 	bl	800209e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f001 f8c5 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000edc:	2014      	movs	r0, #20
 8000ede:	f001 f8de 	bl	800209e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2015      	movs	r0, #21
 8000ee8:	f001 f8bd 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000eec:	2015      	movs	r0, #21
 8000eee:	f001 f8d6 	bl	800209e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40006400 	.word	0x40006400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020c00 	.word	0x40020c00

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <HAL_UART_MspInit+0x108>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d134      	bne.n	8000f94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a38      	ldr	r2, [pc, #224]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a31      	ldr	r2, [pc, #196]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f62:	230c      	movs	r3, #12
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f72:	2307      	movs	r3, #7
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4826      	ldr	r0, [pc, #152]	; (8001018 <HAL_UART_MspInit+0x110>)
 8000f7e:	f001 f93b 	bl	80021f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2026      	movs	r0, #38	; 0x26
 8000f88:	f001 f86d 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f8c:	2026      	movs	r0, #38	; 0x26
 8000f8e:	f001 f886 	bl	800209e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f92:	e039      	b.n	8001008 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_UART_MspInit+0x114>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d134      	bne.n	8001008 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_UART_MspInit+0x10c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_UART_MspInit+0x118>)
 8000ff4:	f001 f900 	bl	80021f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2027      	movs	r0, #39	; 0x27
 8000ffe:	f001 f832 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001002:	2027      	movs	r0, #39	; 0x27
 8001004:	f001 f84b 	bl	800209e <HAL_NVIC_EnableIRQ>
}
 8001008:	bf00      	nop
 800100a:	3730      	adds	r7, #48	; 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40004400 	.word	0x40004400
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	40004800 	.word	0x40004800
 8001020:	40020400 	.word	0x40020400

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f90a 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <CAN1_TX_IRQHandler+0x10>)
 800107e:	f000 fce8 	bl	8001a52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001c0 	.word	0x200001c0

0800108c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <CAN1_RX0_IRQHandler+0x14>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <CAN1_RX0_IRQHandler+0x18>)
 8001098:	f000 fcdb 	bl	8001a52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000270 	.word	0x20000270
 80010a4:	200001c0 	.word	0x200001c0

080010a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <CAN1_RX1_IRQHandler+0x14>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <CAN1_RX1_IRQHandler+0x18>)
 80010b4:	f000 fccd 	bl	8001a52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000271 	.word	0x20000271
 80010c0:	200001c0 	.word	0x200001c0

080010c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <USART2_IRQHandler+0x10>)
 80010ca:	f003 faf9 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200001e8 	.word	0x200001e8

080010d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <USART3_IRQHandler+0x10>)
 80010de:	f003 faef 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000022c 	.word	0x2000022c

080010ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <OTG_FS_IRQHandler+0x10>)
 80010f2:	f001 fb9e 	bl	8002832 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20001764 	.word	0x20001764

08001100 <_sbrk>:
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
 8001130:	f008 fc28 	bl	8009984 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20020000 	.word	0x20020000
 8001160:	00000400 	.word	0x00000400
 8001164:	2000027c 	.word	0x2000027c
 8001168:	20001fd8 	.word	0x20001fd8

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <SystemInit+0x20>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <SystemInit+0x20>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <Reset_Handler>:
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0x12>
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <LoopFillZerobss+0x16>)
 8001196:	490e      	ldr	r1, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1a>)
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1e>)
 800119a:	2300      	movs	r3, #0
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:
 800119e:	58d4      	ldr	r4, [r2, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:
 80011a4:	18c4      	adds	r4, r0, r3
 80011a6:	428c      	cmp	r4, r1
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LoopFillZerobss+0x22>)
 80011ac:	4c0b      	ldr	r4, [pc, #44]	; (80011dc <LoopFillZerobss+0x26>)
 80011ae:	2300      	movs	r3, #0
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:
 80011b6:	42a2      	cmp	r2, r4
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>
 80011ba:	f7ff ffd7 	bl	800116c <SystemInit>
 80011be:	f008 fbe7 	bl	8009990 <__libc_init_array>
 80011c2:	f7ff fa39 	bl	8000638 <main>
 80011c6:	4770      	bx	lr
 80011c8:	20020000 	.word	0x20020000
 80011cc:	20000000 	.word	0x20000000
 80011d0:	2000015c 	.word	0x2000015c
 80011d4:	0800a5bc 	.word	0x0800a5bc
 80011d8:	2000015c 	.word	0x2000015c
 80011dc:	20001fd8 	.word	0x20001fd8

080011e0 <ADC_IRQHandler>:
 80011e0:	e7fe      	b.n	80011e0 <ADC_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_Init+0x40>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_Init+0x40>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x40>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 ff1f 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fdee 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 ff37 	bl	80020ba <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 feff 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000010 	.word	0x20000010
 8001280:	20000018 	.word	0x20000018
 8001284:	20000014 	.word	0x20000014

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000018 	.word	0x20000018
 80012ac:	20000280 	.word	0x20000280

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000280 	.word	0x20000280

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff ffee 	bl	80012b0 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffde 	bl	80012b0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000018 	.word	0x20000018

08001310 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0ed      	b.n	80014fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd8a 	bl	8000e48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001344:	f7ff ffb4 	bl	80012b0 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134a:	e012      	b.n	8001372 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800134c:	f7ff ffb0 	bl	80012b0 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d90b      	bls.n	8001372 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2205      	movs	r2, #5
 800136a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0c5      	b.n	80014fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0e5      	beq.n	800134c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0202 	bic.w	r2, r2, #2
 800138e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff ff8e 	bl	80012b0 <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001396:	e012      	b.n	80013be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001398:	f7ff ff8a 	bl	80012b0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	d90b      	bls.n	80013be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2205      	movs	r2, #5
 80013b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e09f      	b.n	80014fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e5      	bne.n	8001398 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7e1b      	ldrb	r3, [r3, #24]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e007      	b.n	80013f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7e5b      	ldrb	r3, [r3, #25]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e007      	b.n	8001420 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800141e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e9b      	ldrb	r3, [r3, #26]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d108      	bne.n	800143a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e007      	b.n	800144a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0220 	bic.w	r2, r2, #32
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7edb      	ldrb	r3, [r3, #27]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0210 	bic.w	r2, r2, #16
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e007      	b.n	8001474 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0210 	orr.w	r2, r2, #16
 8001472:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7f1b      	ldrb	r3, [r3, #28]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e007      	b.n	800149e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0208 	bic.w	r2, r2, #8
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7f5b      	ldrb	r3, [r3, #29]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0204 	orr.w	r2, r2, #4
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e007      	b.n	80014c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	ea42 0103 	orr.w	r1, r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d003      	beq.n	800152e <HAL_CAN_ConfigFilter+0x26>
 8001526:	7cfb      	ldrb	r3, [r7, #19]
 8001528:	2b02      	cmp	r3, #2
 800152a:	f040 80be 	bne.w	80016aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800152e:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001530:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001548:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	431a      	orrs	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	2201      	movs	r2, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d123      	bne.n	80015d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3248      	adds	r2, #72	; 0x48
 80015b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	3348      	adds	r3, #72	; 0x48
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d122      	bne.n	8001626 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001600:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3248      	adds	r2, #72	; 0x48
 8001606:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800161a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800161c:	6979      	ldr	r1, [r7, #20]
 800161e:	3348      	adds	r3, #72	; 0x48
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001640:	e007      	b.n	8001652 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	431a      	orrs	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800166c:	e007      	b.n	800167e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	431a      	orrs	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	431a      	orrs	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800169c:	f023 0201 	bic.w	r2, r3, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e006      	b.n	80016b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
  }
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40006400 	.word	0x40006400

080016c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d12e      	bne.n	800173a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fddc 	bl	80012b0 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016fa:	e012      	b.n	8001722 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016fc:	f7ff fdd8 	bl	80012b0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d90b      	bls.n	8001722 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2205      	movs	r2, #5
 800171a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e012      	b.n	8001748 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e5      	bne.n	80016fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e006      	b.n	8001748 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
  }
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d133      	bne.n	80017cc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff fd9c 	bl	80012b0 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800177a:	e012      	b.n	80017a2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800177c:	f7ff fd98 	bl	80012b0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d90b      	bls.n	80017a2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2205      	movs	r2, #5
 800179a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e01b      	b.n	80017da <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0e5      	beq.n	800177c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0202 	bic.w	r2, r2, #2
 80017be:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e006      	b.n	80017da <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017e2:	b480      	push	{r7}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_GetRxMessage+0x24>
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2b02      	cmp	r3, #2
 8001802:	f040 80f3 	bne.w	80019ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10e      	bne.n	800182a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0e7      	b.n	80019fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0d8      	b.n	80019fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	331b      	adds	r3, #27
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0204 	and.w	r2, r3, #4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	331b      	adds	r3, #27
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00b      	b.n	8001898 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	331b      	adds	r3, #27
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	331b      	adds	r3, #27
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0202 	and.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	331b      	adds	r3, #27
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 020f 	and.w	r2, r3, #15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	331b      	adds	r3, #27
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	331b      	adds	r3, #27
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4413      	add	r3, r2
 8001900:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0a1a      	lsrs	r2, r3, #8
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0c1a      	lsrs	r2, r3, #16
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3302      	adds	r3, #2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e1a      	lsrs	r2, r3, #24
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3303      	adds	r3, #3
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0a1a      	lsrs	r2, r3, #8
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3305      	adds	r3, #5
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1a      	lsrs	r2, r3, #16
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3306      	adds	r3, #6
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0e1a      	lsrs	r2, r3, #24
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3307      	adds	r3, #7
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e006      	b.n	80019fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a16:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d002      	beq.n	8001a24 <HAL_CAN_ActivateNotification+0x1e>
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d109      	bne.n	8001a38 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6959      	ldr	r1, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e006      	b.n	8001a46 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b08a      	sub	sp, #40	; 0x28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d07c      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d023      	beq.n	8001aea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f983 	bl	8001dc0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001aba:	e016      	b.n	8001aea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e00c      	b.n	8001aea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae2:	e002      	b.n	8001aea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f989 	bl	8001dfc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d024      	beq.n	8001b3e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f963 	bl	8001dd4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b0e:	e016      	b.n	8001b3e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e00c      	b.n	8001b3e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	e002      	b.n	8001b3e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f969 	bl	8001e10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d024      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f943 	bl	8001de8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b62:	e016      	b.n	8001b92 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e00c      	b.n	8001b92 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e002      	b.n	8001b92 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f949 	bl	8001e24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00c      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f930 	bl	8001e38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fcc3 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2208      	movs	r2, #8
 8001c34:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f912 	bl	8001e60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f9 	bl	8001e4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2210      	movs	r2, #16
 8001c74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8fc 	bl	8001e74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2208      	movs	r2, #8
 8001c96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8f5 	bl	8001e88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d07b      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d072      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03e      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d20:	2b60      	cmp	r3, #96	; 0x60
 8001d22:	d02b      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x32a>
 8001d24:	2b60      	cmp	r3, #96	; 0x60
 8001d26:	d82e      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d28:	2b50      	cmp	r3, #80	; 0x50
 8001d2a:	d022      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x320>
 8001d2c:	2b50      	cmp	r3, #80	; 0x50
 8001d2e:	d82a      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d019      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x316>
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d826      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d38:	2b30      	cmp	r3, #48	; 0x30
 8001d3a:	d010      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x30c>
 8001d3c:	2b30      	cmp	r3, #48	; 0x30
 8001d3e:	d822      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d002      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x2f8>
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d005      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d48:	e01d      	b.n	8001d86 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d52:	e019      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d5c:	e014      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d66:	e00f      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d70:	e00a      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d7a:	e005      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d84:	e000      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d86:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d96:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f872 	bl	8001e9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff3e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff31 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffa2 	bl	800200c <SysTick_Config>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff f8e6 	bl	80012b0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d008      	beq.n	8002104 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e052      	b.n	80021aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0216 	bic.w	r2, r2, #22
 8002112:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002122:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <HAL_DMA_Abort+0x62>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0208 	bic.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002154:	e013      	b.n	800217e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002156:	f7ff f8ab 	bl	80012b0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b05      	cmp	r3, #5
 8002162:	d90c      	bls.n	800217e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e015      	b.n	80021aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e4      	bne.n	8002156 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	223f      	movs	r2, #63	; 0x3f
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d004      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00c      	b.n	80021ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2205      	movs	r2, #5
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e16b      	b.n	80024ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 815a 	bne.w	80024e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b4 	beq.w	80024e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b60      	ldr	r3, [pc, #384]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_GPIO_Init+0x310>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x324>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20a>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002402:	2308      	movs	r3, #8
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	; (8002508 <HAL_GPIO_Init+0x310>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_GPIO_Init+0x334>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_GPIO_Init+0x334>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_GPIO_Init+0x334>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_GPIO_Init+0x334>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_GPIO_Init+0x334>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b6:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_GPIO_Init+0x334>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae90 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40021400 	.word	0x40021400
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002594:	b08f      	sub	sp, #60	; 0x3c
 8002596:	af0a      	add	r7, sp, #40	; 0x28
 8002598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e10f      	b.n	80027c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f006 fdec 	bl	800919c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 f8b5 	bl	8005752 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	687e      	ldr	r6, [r7, #4]
 80025f0:	466d      	mov	r5, sp
 80025f2:	f106 0410 	add.w	r4, r6, #16
 80025f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002602:	e885 0003 	stmia.w	r5, {r0, r1}
 8002606:	1d33      	adds	r3, r6, #4
 8002608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f002 ff8c 	bl	8005528 <USB_CoreInit>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0d0      	b.n	80027c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f003 f8a3 	bl	8005774 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e04a      	b.n	80026ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	333d      	adds	r3, #61	; 0x3d
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	333c      	adds	r3, #60	; 0x3c
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	b298      	uxth	r0, r3
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3344      	adds	r3, #68	; 0x44
 8002670:	4602      	mov	r2, r0
 8002672:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3340      	adds	r3, #64	; 0x40
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3348      	adds	r3, #72	; 0x48
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334c      	adds	r3, #76	; 0x4c
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3354      	adds	r3, #84	; 0x54
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	3301      	adds	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3af      	bcc.n	8002634 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e044      	b.n	8002764 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	3301      	adds	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3b5      	bcc.n	80026da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	687e      	ldr	r6, [r7, #4]
 8002776:	466d      	mov	r5, sp
 8002778:	f106 0410 	add.w	r4, r6, #16
 800277c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002788:	e885 0003 	stmia.w	r5, {r0, r1}
 800278c:	1d33      	adds	r3, r6, #4
 800278e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002790:	6838      	ldr	r0, [r7, #0]
 8002792:	f003 f83b 	bl	800580c <USB_DevInit>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e00d      	b.n	80027c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 f98a 	bl	8006ad6 <USB_DevDisconnect>

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_PCD_Start+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e020      	b.n	800282a <HAL_PCD_Start+0x5e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d109      	bne.n	800280c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d005      	beq.n	800280c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f002 ff8d 	bl	8005730 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 f93a 	bl	8006a94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002832:	b590      	push	{r4, r7, lr}
 8002834:	b08d      	sub	sp, #52	; 0x34
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f004 f9f8 	bl	8006c3e <USB_GetMode>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 848a 	bne.w	800316a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 f95c 	bl	8006b18 <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8480 	beq.w	8003168 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f004 f949 	bl	8006b18 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d107      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f002 0202 	and.w	r2, r2, #2
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f937 	bl	8006b18 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d161      	bne.n	8002978 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0210 	bic.w	r2, r2, #16
 80028c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f003 020f 	and.w	r2, r3, #15
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	0c5b      	lsrs	r3, r3, #17
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d124      	bne.n	800293a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d035      	beq.n	8002968 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6a38      	ldr	r0, [r7, #32]
 8002910:	f003 ff6e 	bl	80067f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002920:	441a      	add	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002932:	441a      	add	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
 8002938:	e016      	b.n	8002968 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	0c5b      	lsrs	r3, r3, #17
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	2b06      	cmp	r3, #6
 8002944:	d110      	bne.n	8002968 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800294c:	2208      	movs	r2, #8
 800294e:	4619      	mov	r1, r3
 8002950:	6a38      	ldr	r0, [r7, #32]
 8002952:	f003 ff4d 	bl	80067f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002962:	441a      	add	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0210 	orr.w	r2, r2, #16
 8002976:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 f8cb 	bl	8006b18 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002988:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800298c:	f040 80a7 	bne.w	8002ade <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 f8d0 	bl	8006b3e <USB_ReadDevAllOutEpInterrupt>
 800299e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029a0:	e099      	b.n	8002ad6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 808e 	beq.w	8002aca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 f8f4 	bl	8006ba6 <USB_ReadDevOutEPInterrupt>
 80029be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	2301      	movs	r3, #1
 80029da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fec2 	bl	8003768 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fa:	461a      	mov	r2, r3
 80029fc:	2308      	movs	r3, #8
 80029fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ff98 	bl	8003938 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2310      	movs	r3, #16
 8002a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d030      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d109      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	78db      	ldrb	r3, [r3, #3]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f006 fca7 	bl	80093cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f af62 	bne.w	80029a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f818 	bl	8006b18 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002af2:	f040 80db 	bne.w	8002cac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f839 	bl	8006b72 <USB_ReadDevAllInEpInterrupt>
 8002b00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b06:	e0cd      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80c2 	beq.w	8002c98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 f85f 	bl	8006be2 <USB_ReadDevInEPInterrupt>
 8002b24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d057      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	2201      	movs	r2, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69f9      	ldr	r1, [r7, #28]
 8002b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b50:	4013      	ands	r3, r2
 8002b52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b60:	461a      	mov	r2, r3
 8002b62:	2301      	movs	r3, #1
 8002b64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d132      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	334c      	adds	r3, #76	; 0x4c
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4403      	add	r3, r0
 8002b8e:	3348      	adds	r3, #72	; 0x48
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4419      	add	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	334c      	adds	r3, #76	; 0x4c
 8002ba4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d113      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x3a2>
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3354      	adds	r3, #84	; 0x54
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2101      	movs	r1, #1
 8002bd0:	f004 f866 	bl	8006ca0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f006 fb71 	bl	80092c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c12:	461a      	mov	r2, r3
 8002c14:	2310      	movs	r3, #16
 8002c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d023      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c40:	6a38      	ldr	r0, [r7, #32]
 8002c42:	f002 ff47 	bl	8005ad4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3338      	adds	r3, #56	; 0x38
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	78db      	ldrb	r3, [r3, #3]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f006 fbbe 	bl	80093f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c80:	461a      	mov	r2, r3
 8002c82:	2302      	movs	r3, #2
 8002c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fcdb 	bl	800364e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f47f af2e 	bne.w	8002b08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 ff31 	bl	8006b18 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc0:	d122      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d108      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fec2 	bl	8003a74 <HAL_PCDEx_LPM_Callback>
 8002cf0:	e002      	b.n	8002cf8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f006 fb5c 	bl	80093b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 ff03 	bl	8006b18 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1c:	d112      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f006 fb18 	bl	8009364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d42:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fee5 	bl	8006b18 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	f040 80b7 	bne.w	8002eca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2110      	movs	r1, #16
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 feac 	bl	8005ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d80:	e046      	b.n	8002e10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dda:	0151      	lsls	r1, r2, #5
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	440a      	add	r2, r1
 8002de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfa:	0151      	lsls	r1, r2, #5
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	440a      	add	r2, r1
 8002e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3b3      	bcc.n	8002d82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e46:	f043 030b 	orr.w	r3, r3, #11
 8002e4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5c:	f043 030b 	orr.w	r3, r3, #11
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	e015      	b.n	8002e90 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8a:	f043 030b 	orr.w	r3, r3, #11
 8002e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f003 fef3 	bl	8006ca0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fe22 	bl	8006b18 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	d124      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 feb8 	bl	8006c5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fe6d 	bl	8005bce <USB_GetDevSpeed>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681c      	ldr	r4, [r3, #0]
 8002f00:	f001 fa28 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8002f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f002 fb6c 	bl	80055ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f006 f9fc 	bl	8009312 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fdf2 	bl	8006b18 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d10a      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f006 f9d9 	bl	80092f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f002 0208 	and.w	r2, r2, #8
 8002f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fddd 	bl	8006b18 <USB_ReadInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	d122      	bne.n	8002fae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f74:	2301      	movs	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e014      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fb27 	bl	80035ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3e5      	bcc.n	8002f7a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fdb0 	bl	8006b18 <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc2:	d13b      	bne.n	800303c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e02b      	b.n	8003022 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3340      	adds	r3, #64	; 0x40
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d115      	bne.n	800301c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ff0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da12      	bge.n	800301c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	333f      	adds	r3, #63	; 0x3f
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fae8 	bl	80035ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	3301      	adds	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	429a      	cmp	r2, r3
 800302a:	d3ce      	bcc.n	8002fca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800303a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fd69 	bl	8006b18 <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003050:	d155      	bne.n	80030fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003052:	2301      	movs	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	e045      	b.n	80030e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d12e      	bne.n	80030de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003080:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	da2b      	bge.n	80030de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003092:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003096:	429a      	cmp	r2, r3
 8003098:	d121      	bne.n	80030de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030da:	6053      	str	r3, [r2, #4]
            break;
 80030dc:	e007      	b.n	80030ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	3301      	adds	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3b4      	bcc.n	8003058 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fd08 	bl	8006b18 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003112:	d10a      	bne.n	800312a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f006 f97d 	bl	8009414 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fcf2 	bl	8006b18 <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d115      	bne.n	800316a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f006 f96d 	bl	8009430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e000      	b.n	800316a <HAL_PCD_IRQHandler+0x938>
      return;
 8003168:	bf00      	nop
    }
  }
}
 800316a:	3734      	adds	r7, #52	; 0x34
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_PCD_SetAddress+0x1a>
 8003186:	2302      	movs	r3, #2
 8003188:	e013      	b.n	80031b2 <HAL_PCD_SetAddress+0x42>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fc50 	bl	8006a48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	4608      	mov	r0, r1
 80031c4:	4611      	mov	r1, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	70fb      	strb	r3, [r7, #3]
 80031cc:	460b      	mov	r3, r1
 80031ce:	803b      	strh	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0f      	bge.n	8003200 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	3304      	adds	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
 80031fe:	e00f      	b.n	8003220 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800322c:	883a      	ldrh	r2, [r7, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	78ba      	ldrb	r2, [r7, #2]
 8003236:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	785b      	ldrb	r3, [r3, #1]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800324a:	78bb      	ldrb	r3, [r7, #2]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d102      	bne.n	8003256 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_PCD_EP_Open+0xaa>
 8003260:	2302      	movs	r3, #2
 8003262:	e00e      	b.n	8003282 <HAL_PCD_EP_Open+0xc8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fcd0 	bl	8005c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003280:	7afb      	ldrb	r3, [r7, #11]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329a:	2b00      	cmp	r3, #0
 800329c:	da0f      	bge.n	80032be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	3338      	adds	r3, #56	; 0x38
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	705a      	strb	r2, [r3, #1]
 80032bc:	e00f      	b.n	80032de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_PCD_EP_Close+0x6e>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e00e      	b.n	8003316 <HAL_PCD_EP_Close+0x8c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f002 fd0e 	bl	8005d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	460b      	mov	r3, r1
 800332c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332e:	7afb      	ldrb	r3, [r7, #11]
 8003330:	f003 020f 	and.w	r2, r3, #15
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2200      	movs	r2, #0
 800335e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	b2da      	uxtb	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d102      	bne.n	800337a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	6979      	ldr	r1, [r7, #20]
 8003392:	f002 ffed 	bl	8006370 <USB_EP0StartXfer>
 8003396:	e008      	b.n	80033aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6979      	ldr	r1, [r7, #20]
 80033a6:	f002 fd9b 	bl	8005ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	460b      	mov	r3, r1
 80033f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2201      	movs	r2, #1
 8003422:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	b2da      	uxtb	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	f002 ff8b 	bl	8006370 <USB_EP0StartXfer>
 800345a:	e008      	b.n	800346e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	6979      	ldr	r1, [r7, #20]
 800346a:	f002 fd39 	bl	8005ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d901      	bls.n	8003496 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e050      	b.n	8003538 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0f      	bge.n	80034be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	; 0x38
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00d      	b.n	80034da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	3304      	adds	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_PCD_EP_SetStall+0x82>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e01e      	b.n	8003538 <HAL_PCD_EP_SetStall+0xc0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f003 f9c9 	bl	80068a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	b2d9      	uxtb	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003528:	461a      	mov	r2, r3
 800352a:	f003 fbb9 	bl	8006ca0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d901      	bls.n	800355e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e042      	b.n	80035e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800355e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003562:	2b00      	cmp	r3, #0
 8003564:	da0f      	bge.n	8003586 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	f003 020f 	and.w	r2, r3, #15
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	3338      	adds	r3, #56	; 0x38
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	705a      	strb	r2, [r3, #1]
 8003584:	e00f      	b.n	80035a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4413      	add	r3, r2
 800359c:	3304      	adds	r3, #4
 800359e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_PCD_EP_ClrStall+0x86>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e00e      	b.n	80035e4 <HAL_PCD_EP_ClrStall+0xa4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 f9d1 	bl	800697c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da0c      	bge.n	800361a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 020f 	and.w	r2, r3, #15
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3338      	adds	r3, #56	; 0x38
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	3304      	adds	r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e00c      	b.n	8003634 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	3304      	adds	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4618      	mov	r0, r3
 800363c:	f002 fff0 	bl	8006620 <USB_EPStopXfer>
 8003640:	4603      	mov	r3, r0
 8003642:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003644:	7afb      	ldrb	r3, [r7, #11]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	; 0x28
 8003652:	af02      	add	r7, sp, #8
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3338      	adds	r3, #56	; 0x38
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1a      	ldr	r2, [r3, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	429a      	cmp	r2, r3
 8003680:	d901      	bls.n	8003686 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e06c      	b.n	8003760 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	429a      	cmp	r2, r3
 800369a:	d902      	bls.n	80036a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3303      	adds	r3, #3
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036aa:	e02b      	b.n	8003704 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d902      	bls.n	80036c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3303      	adds	r3, #3
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4603      	mov	r3, r0
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f003 f844 	bl	8006774 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	d809      	bhi.n	800372e <PCD_WriteEmptyTxFifo+0xe0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003722:	429a      	cmp	r2, r3
 8003724:	d203      	bcs.n	800372e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1be      	bne.n	80036ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	429a      	cmp	r2, r3
 8003738:	d811      	bhi.n	800375e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	2201      	movs	r2, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	43db      	mvns	r3, r3
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375a:	4013      	ands	r3, r2
 800375c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	333c      	adds	r3, #60	; 0x3c
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d17b      	bne.n	8003896 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4a61      	ldr	r2, [pc, #388]	; (8003930 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f240 80b9 	bls.w	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80b3 	beq.w	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	e0a7      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	2320      	movs	r3, #32
 80037ee:	6093      	str	r3, [r2, #8]
 80037f0:	e098      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f040 8093 	bne.w	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4a4b      	ldr	r2, [pc, #300]	; (8003930 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d90f      	bls.n	8003826 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	e07e      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	440b      	add	r3, r1
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d114      	bne.n	8003888 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003870:	461a      	mov	r2, r3
 8003872:	2101      	movs	r1, #1
 8003874:	f003 fa14 	bl	8006ca0 <USB_EP0_OutStart>
 8003878:	e006      	b.n	8003888 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	441a      	add	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 fcfc 	bl	800928c <HAL_PCD_DataOutStageCallback>
 8003894:	e046      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d124      	bne.n	80038e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b4:	461a      	mov	r2, r3
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	6093      	str	r3, [r2, #8]
 80038bc:	e032      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	2320      	movs	r3, #32
 80038d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f005 fcd3 	bl	800928c <HAL_PCD_DataOutStageCallback>
 80038e6:	e01d      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d114      	bne.n	8003918 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d108      	bne.n	8003918 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003910:	461a      	mov	r2, r3
 8003912:	2100      	movs	r1, #0
 8003914:	f003 f9c4 	bl	8006ca0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f005 fcb4 	bl	800928c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	4f54300a 	.word	0x4f54300a
 8003934:	4f54310a 	.word	0x4f54310a

08003938 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	333c      	adds	r3, #60	; 0x3c
 8003950:	3304      	adds	r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d90e      	bls.n	800398c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	461a      	mov	r2, r3
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f005 fc6b 	bl	8009268 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d90c      	bls.n	80039b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039ac:	461a      	mov	r2, r3
 80039ae:	2101      	movs	r1, #1
 80039b0:	f003 f976 	bl	8006ca0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	4f54300a 	.word	0x4f54300a

080039c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
 80039d0:	4613      	mov	r3, r2
 80039d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039e2:	883b      	ldrh	r3, [r7, #0]
 80039e4:	0419      	lsls	r1, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28
 80039f0:	e028      	b.n	8003a44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4413      	add	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e00d      	b.n	8003a22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3340      	adds	r3, #64	; 0x40
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3ec      	bcc.n	8003a06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a2c:	883b      	ldrh	r3, [r7, #0]
 8003a2e:	0418      	lsls	r0, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4302      	orrs	r2, r0
 8003a3c:	3340      	adds	r3, #64	; 0x40
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e267      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d112      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e242      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x74>
 8003af2:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a75      	ldr	r2, [pc, #468]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b70      	ldr	r3, [pc, #448]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6f      	ldr	r2, [pc, #444]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6c      	ldr	r2, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b24:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b66      	ldr	r3, [pc, #408]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fd fbb4 	bl	80012b0 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fbb0 	bl	80012b0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e207      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fba0 	bl	80012b0 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd fb9c 	bl	80012b0 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1f3      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d063      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d11c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b44      	ldr	r3, [pc, #272]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d116      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e1c7      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4937      	ldr	r1, [pc, #220]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	e03a      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfc:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCC_OscConfig+0x244>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fb55 	bl	80012b0 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fb51 	bl	80012b0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1a8      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4925      	ldr	r1, [pc, #148]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_OscConfig+0x244>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fb34 	bl	80012b0 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fb30 	bl	80012b0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e187      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d036      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_RCC_OscConfig+0x248>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fd fb14 	bl	80012b0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd fb10 	bl	80012b0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e167      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x200>
 8003caa:	e01b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_OscConfig+0x248>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fafd 	bl	80012b0 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	e00e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd faf9 	bl	80012b0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d907      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e150      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	42470000 	.word	0x42470000
 8003cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ea      	bne.n	8003cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8097 	beq.w	8003e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b81      	ldr	r3, [pc, #516]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
 8003d12:	4b7a      	ldr	r3, [pc, #488]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b77      	ldr	r3, [pc, #476]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b74      	ldr	r3, [pc, #464]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fab9 	bl	80012b0 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fd fab5 	bl	80012b0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e10c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x2ea>
 8003d68:	4b64      	ldr	r3, [pc, #400]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a63      	ldr	r2, [pc, #396]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	e01c      	b.n	8003db0 <HAL_RCC_OscConfig+0x324>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x30c>
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a5e      	ldr	r2, [pc, #376]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	4b5c      	ldr	r3, [pc, #368]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a5b      	ldr	r2, [pc, #364]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0x324>
 8003d98:	4b58      	ldr	r3, [pc, #352]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a57      	ldr	r2, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	4b55      	ldr	r3, [pc, #340]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a54      	ldr	r2, [pc, #336]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0304 	bic.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd fa7a 	bl	80012b0 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd fa76 	bl	80012b0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0cb      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	4b49      	ldr	r3, [pc, #292]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ee      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x334>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de4:	f7fd fa64 	bl	80012b0 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd fa60 	bl	80012b0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0b5      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ee      	bne.n	8003dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e14:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a1 	beq.w	8003f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2a:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d05c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d141      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd fa34 	bl	80012b0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd fa30 	bl	80012b0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e087      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	3b01      	subs	r3, #1
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	491b      	ldr	r1, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fa09 	bl	80012b0 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd fa05 	bl	80012b0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e05c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x416>
 8003ec0:	e054      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd f9f2 	bl	80012b0 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd f9ee 	bl	80012b0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e045      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x444>
 8003eee:	e03d      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e038      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x4ec>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d028      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d121      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d11a      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d111      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	3b01      	subs	r3, #1
 8003f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0cc      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90c      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b8      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	494d      	ldr	r1, [pc, #308]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d044      	beq.n	800409c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d119      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d003      	beq.n	800403a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e06f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e067      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4934      	ldr	r1, [pc, #208]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406c:	f7fd f920 	bl	80012b0 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fd f91c 	bl	80012b0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e04f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d20c      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e032      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4916      	ldr	r1, [pc, #88]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	5ccb      	ldrb	r3, [r1, r3]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd f880 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00
 8004138:	40023800 	.word	0x40023800
 800413c:	0800a460 	.word	0x0800a460
 8004140:	20000010 	.word	0x20000010
 8004144:	20000014 	.word	0x20000014

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800414c:	b094      	sub	sp, #80	; 0x50
 800414e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	647b      	str	r3, [r7, #68]	; 0x44
 8004154:	2300      	movs	r3, #0
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	2300      	movs	r3, #0
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004160:	4b79      	ldr	r3, [pc, #484]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d00d      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x40>
 800416c:	2b08      	cmp	r3, #8
 800416e:	f200 80e1 	bhi.w	8004334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3a>
 800417a:	e0db      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_GetSysClockFreq+0x204>)
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004180:	e0db      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b73      	ldr	r3, [pc, #460]	; (8004350 <HAL_RCC_GetSysClockFreq+0x208>)
 8004184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004186:	e0d8      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004192:	4b6d      	ldr	r3, [pc, #436]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	2200      	movs	r2, #0
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
 80041b2:	2300      	movs	r3, #0
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	0159      	lsls	r1, r3, #5
 80041c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041cc:	0150      	lsls	r0, r2, #5
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4621      	mov	r1, r4
 80041d4:	1a51      	subs	r1, r2, r1
 80041d6:	6139      	str	r1, [r7, #16]
 80041d8:	4629      	mov	r1, r5
 80041da:	eb63 0301 	sbc.w	r3, r3, r1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ec:	4659      	mov	r1, fp
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f6:	4651      	mov	r1, sl
 80041f8:	018a      	lsls	r2, r1, #6
 80041fa:	4651      	mov	r1, sl
 80041fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004200:	4659      	mov	r1, fp
 8004202:	eb63 0901 	sbc.w	r9, r3, r1
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800421a:	4690      	mov	r8, r2
 800421c:	4699      	mov	r9, r3
 800421e:	4623      	mov	r3, r4
 8004220:	eb18 0303 	adds.w	r3, r8, r3
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	462b      	mov	r3, r5
 8004228:	eb49 0303 	adc.w	r3, r9, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800423a:	4629      	mov	r1, r5
 800423c:	024b      	lsls	r3, r1, #9
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004244:	4621      	mov	r1, r4
 8004246:	024a      	lsls	r2, r1, #9
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	2200      	movs	r2, #0
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
 8004252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004258:	f7fc f812 	bl	8000280 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	e058      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	4618      	mov	r0, r3
 8004270:	4611      	mov	r1, r2
 8004272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	2300      	movs	r3, #0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004280:	4642      	mov	r2, r8
 8004282:	464b      	mov	r3, r9
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	0159      	lsls	r1, r3, #5
 800428e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004292:	0150      	lsls	r0, r2, #5
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4641      	mov	r1, r8
 800429a:	ebb2 0a01 	subs.w	sl, r2, r1
 800429e:	4649      	mov	r1, r9
 80042a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b8:	ebb2 040a 	subs.w	r4, r2, sl
 80042bc:	eb63 050b 	sbc.w	r5, r3, fp
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	464b      	mov	r3, r9
 80042dc:	eb45 0303 	adc.w	r3, r5, r3
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ee:	4629      	mov	r1, r5
 80042f0:	028b      	lsls	r3, r1, #10
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f8:	4621      	mov	r1, r4
 80042fa:	028a      	lsls	r2, r1, #10
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	61fa      	str	r2, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	f7fb ffb8 	bl	8000280 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004332:	e002      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetSysClockFreq+0x204>)
 8004336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800433c:	4618      	mov	r0, r3
 800433e:	3750      	adds	r7, #80	; 0x50
 8004340:	46bd      	mov	sp, r7
 8004342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	00f42400 	.word	0x00f42400
 8004350:	007a1200 	.word	0x007a1200

08004354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCC_GetHCLKFreq+0x14>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000010 	.word	0x20000010

0800436c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004370:	f7ff fff0 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0a9b      	lsrs	r3, r3, #10
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4903      	ldr	r1, [pc, #12]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40023800 	.word	0x40023800
 8004390:	0800a470 	.word	0x0800a470

08004394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004398:	f7ff ffdc 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0b5b      	lsrs	r3, r3, #13
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	0800a470 	.word	0x0800a470

080043bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e03f      	b.n	800444e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc fd90 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	; 0x24
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fe1d 	bl	8005040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08a      	sub	sp, #40	; 0x28
 800445a:	af02      	add	r7, sp, #8
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b20      	cmp	r3, #32
 8004474:	d17c      	bne.n	8004570 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_UART_Transmit+0x2c>
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e075      	b.n	8004572 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_UART_Transmit+0x3e>
 8004490:	2302      	movs	r3, #2
 8004492:	e06e      	b.n	8004572 <HAL_UART_Transmit+0x11c>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2221      	movs	r2, #33	; 0x21
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044aa:	f7fc ff01 	bl	80012b0 <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c4:	d108      	bne.n	80044d8 <HAL_UART_Transmit+0x82>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e003      	b.n	80044e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044e8:	e02a      	b.n	8004540 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb9b 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e036      	b.n	8004572 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3302      	adds	r3, #2
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	e007      	b.n	8004532 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1cf      	bne.n	80044ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb6b 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e006      	b.n	8004572 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b08a      	sub	sp, #40	; 0x28
 800457e:	af02      	add	r7, sp, #8
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b20      	cmp	r3, #32
 8004598:	f040 808c 	bne.w	80046b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Receive+0x2e>
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e084      	b.n	80046b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Receive+0x40>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e07d      	b.n	80046b6 <HAL_UART_Receive+0x13c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2222      	movs	r2, #34	; 0x22
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fc fe6b 	bl	80012b0 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f0:	d108      	bne.n	8004604 <HAL_UART_Receive+0x8a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e003      	b.n	800460c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004614:	e043      	b.n	800469e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2120      	movs	r1, #32
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb05 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e042      	b.n	80046b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10c      	bne.n	8004650 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	b29a      	uxth	r2, r3
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3302      	adds	r3, #2
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e01f      	b.n	8004690 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d007      	beq.n	800466a <HAL_UART_Receive+0xf0>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_UART_Receive+0xfe>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e008      	b.n	800468a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004684:	b2da      	uxtb	r2, r3
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3301      	adds	r3, #1
 800468e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1b6      	bne.n	8004616 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0ba      	sub	sp, #232	; 0xe8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_UART_IRQHandler+0x66>
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fbd3 	bl	8004eca <UART_Receive_IT>
      return;
 8004724:	e256      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80de 	beq.w	80048ec <HAL_UART_IRQHandler+0x22c>
 8004730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80d1 	beq.w	80048ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_UART_IRQHandler+0xae>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_UART_IRQHandler+0xd2>
 800477a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
 800479e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d011      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
 80047c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0208 	orr.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 81ed 	beq.w	8004bca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_UART_IRQHandler+0x14e>
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fb5e 	bl	8004eca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_UART_IRQHandler+0x17a>
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d04f      	beq.n	80048da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa66 	bl	8004d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d141      	bne.n	80048d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800487a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800487e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1d9      	bne.n	800484e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4a7d      	ldr	r2, [pc, #500]	; (8004a9c <HAL_UART_IRQHandler+0x3dc>)
 80048a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fc7f 	bl	80021b2 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00e      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f99a 	bl	8004c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00a      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f996 	bl	8004c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e006      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f992 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048e6:	e170      	b.n	8004bca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	bf00      	nop
    return;
 80048ea:	e16e      	b.n	8004bca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	f040 814a 	bne.w	8004b8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8143 	beq.w	8004b8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 813c 	beq.w	8004b8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	f040 80b4 	bne.w	8004aa0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8140 	beq.w	8004bce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004956:	429a      	cmp	r2, r3
 8004958:	f080 8139 	bcs.w	8004bce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004962:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	f000 8088 	beq.w	8004a82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800499e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1d9      	bne.n	8004972 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e1      	bne.n	80049be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a64:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd fb28 	bl	80020d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8c0 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a98:	e099      	b.n	8004bce <HAL_UART_IRQHandler+0x50e>
 8004a9a:	bf00      	nop
 8004a9c:	08004dd3 	.word	0x08004dd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 808b 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8086 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aea:	647a      	str	r2, [r7, #68]	; 0x44
 8004aec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e3      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3314      	adds	r3, #20
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b22:	633a      	str	r2, [r7, #48]	; 0x30
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e3      	bne.n	8004afe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0310 	bic.w	r3, r3, #16
 8004b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	617b      	str	r3, [r7, #20]
   return(result);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e3      	bne.n	8004b44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f848 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b88:	e023      	b.n	8004bd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_UART_IRQHandler+0x4ea>
 8004b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f929 	bl	8004dfa <UART_Transmit_IT>
    return;
 8004ba8:	e014      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x514>
 8004bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f969 	bl	8004e9a <UART_EndTransmit_IT>
    return;
 8004bc8:	e004      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
    return;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
      return;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
      return;
 8004bd2:	bf00      	nop
  }
}
 8004bd4:	37e8      	adds	r7, #232	; 0xe8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop

08004bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b090      	sub	sp, #64	; 0x40
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c40:	e050      	b.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d04c      	beq.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c50:	f7fc fb2e 	bl	80012b0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d241      	bcs.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c80:	637a      	str	r2, [r7, #52]	; 0x34
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb4:	623a      	str	r2, [r7, #32]
 8004cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	69f9      	ldr	r1, [r7, #28]
 8004cba:	6a3a      	ldr	r2, [r7, #32]
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e5      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e00f      	b.n	8004d04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4013      	ands	r3, r2
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d09f      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3740      	adds	r7, #64	; 0x40
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b095      	sub	sp, #84	; 0x54
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d34:	643a      	str	r2, [r7, #64]	; 0x40
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d119      	bne.n	8004db8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0310 	bic.w	r3, r3, #16
 8004d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da4:	61ba      	str	r2, [r7, #24]
 8004da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6979      	ldr	r1, [r7, #20]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	613b      	str	r3, [r7, #16]
   return(result);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dc6:	bf00      	nop
 8004dc8:	3754      	adds	r7, #84	; 0x54
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff ff09 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b21      	cmp	r3, #33	; 0x21
 8004e0c:	d13e      	bne.n	8004e8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d114      	bne.n	8004e42 <UART_Transmit_IT+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	1c9a      	adds	r2, r3, #2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	621a      	str	r2, [r3, #32]
 8004e40:	e008      	b.n	8004e54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	1c59      	adds	r1, r3, #1
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6211      	str	r1, [r2, #32]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4619      	mov	r1, r3
 8004e62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fe8e 	bl	8004bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b08c      	sub	sp, #48	; 0x30
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b22      	cmp	r3, #34	; 0x22
 8004edc:	f040 80ab 	bne.w	8005036 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d117      	bne.n	8004f1a <UART_Receive_IT+0x50>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d113      	bne.n	8004f1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
 8004f18:	e026      	b.n	8004f68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d007      	beq.n	8004f3e <UART_Receive_IT+0x74>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <UART_Receive_IT+0x82>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e008      	b.n	8004f5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4619      	mov	r1, r3
 8004f76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d15a      	bne.n	8005032 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0220 	bic.w	r2, r2, #32
 8004f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d135      	bne.n	8005028 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	623a      	str	r2, [r7, #32]
 8004fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	69f9      	ldr	r1, [r7, #28]
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e5      	bne.n	8004fc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d10a      	bne.n	800501a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff fdf9 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
 8005026:	e002      	b.n	800502e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fde1 	bl	8004bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e002      	b.n	8005038 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e000      	b.n	8005038 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	3730      	adds	r7, #48	; 0x30
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005044:	b0c0      	sub	sp, #256	; 0x100
 8005046:	af00      	add	r7, sp, #0
 8005048:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	68d9      	ldr	r1, [r3, #12]
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	ea40 0301 	orr.w	r3, r0, r1
 8005068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	431a      	orrs	r2, r3
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005098:	f021 010c 	bic.w	r1, r1, #12
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050a6:	430b      	orrs	r3, r1
 80050a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	6999      	ldr	r1, [r3, #24]
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	ea40 0301 	orr.w	r3, r0, r1
 80050c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b8f      	ldr	r3, [pc, #572]	; (800530c <UART_SetConfig+0x2cc>)
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d005      	beq.n	80050e0 <UART_SetConfig+0xa0>
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b8d      	ldr	r3, [pc, #564]	; (8005310 <UART_SetConfig+0x2d0>)
 80050dc:	429a      	cmp	r2, r3
 80050de:	d104      	bne.n	80050ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7ff f958 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 80050e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050e8:	e003      	b.n	80050f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ea:	f7ff f93f 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 80050ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fc:	f040 810c 	bne.w	8005318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800510a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800510e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005112:	4622      	mov	r2, r4
 8005114:	462b      	mov	r3, r5
 8005116:	1891      	adds	r1, r2, r2
 8005118:	65b9      	str	r1, [r7, #88]	; 0x58
 800511a:	415b      	adcs	r3, r3
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800511e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005122:	4621      	mov	r1, r4
 8005124:	eb12 0801 	adds.w	r8, r2, r1
 8005128:	4629      	mov	r1, r5
 800512a:	eb43 0901 	adc.w	r9, r3, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005142:	4690      	mov	r8, r2
 8005144:	4699      	mov	r9, r3
 8005146:	4623      	mov	r3, r4
 8005148:	eb18 0303 	adds.w	r3, r8, r3
 800514c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005150:	462b      	mov	r3, r5
 8005152:	eb49 0303 	adc.w	r3, r9, r3
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005166:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800516a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800516e:	460b      	mov	r3, r1
 8005170:	18db      	adds	r3, r3, r3
 8005172:	653b      	str	r3, [r7, #80]	; 0x50
 8005174:	4613      	mov	r3, r2
 8005176:	eb42 0303 	adc.w	r3, r2, r3
 800517a:	657b      	str	r3, [r7, #84]	; 0x54
 800517c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005184:	f7fb f87c 	bl	8000280 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4b61      	ldr	r3, [pc, #388]	; (8005314 <UART_SetConfig+0x2d4>)
 800518e:	fba3 2302 	umull	r2, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	011c      	lsls	r4, r3, #4
 8005196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	1891      	adds	r1, r2, r2
 80051ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80051b0:	415b      	adcs	r3, r3
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051b8:	4641      	mov	r1, r8
 80051ba:	eb12 0a01 	adds.w	sl, r2, r1
 80051be:	4649      	mov	r1, r9
 80051c0:	eb43 0b01 	adc.w	fp, r3, r1
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d8:	4692      	mov	sl, r2
 80051da:	469b      	mov	fp, r3
 80051dc:	4643      	mov	r3, r8
 80051de:	eb1a 0303 	adds.w	r3, sl, r3
 80051e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051e6:	464b      	mov	r3, r9
 80051e8:	eb4b 0303 	adc.w	r3, fp, r3
 80051ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005204:	460b      	mov	r3, r1
 8005206:	18db      	adds	r3, r3, r3
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
 800520a:	4613      	mov	r3, r2
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
 8005212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800521a:	f7fb f831 	bl	8000280 <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4611      	mov	r1, r2
 8005224:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <UART_SetConfig+0x2d4>)
 8005226:	fba3 2301 	umull	r2, r3, r3, r1
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2264      	movs	r2, #100	; 0x64
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	1acb      	subs	r3, r1, r3
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800523a:	4b36      	ldr	r3, [pc, #216]	; (8005314 <UART_SetConfig+0x2d4>)
 800523c:	fba3 2302 	umull	r2, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005248:	441c      	add	r4, r3
 800524a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005254:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	1891      	adds	r1, r2, r2
 8005262:	63b9      	str	r1, [r7, #56]	; 0x38
 8005264:	415b      	adcs	r3, r3
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800526c:	4641      	mov	r1, r8
 800526e:	1851      	adds	r1, r2, r1
 8005270:	6339      	str	r1, [r7, #48]	; 0x30
 8005272:	4649      	mov	r1, r9
 8005274:	414b      	adcs	r3, r1
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005284:	4659      	mov	r1, fp
 8005286:	00cb      	lsls	r3, r1, #3
 8005288:	4651      	mov	r1, sl
 800528a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528e:	4651      	mov	r1, sl
 8005290:	00ca      	lsls	r2, r1, #3
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	4603      	mov	r3, r0
 8005298:	4642      	mov	r2, r8
 800529a:	189b      	adds	r3, r3, r2
 800529c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a0:	464b      	mov	r3, r9
 80052a2:	460a      	mov	r2, r1
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052c0:	460b      	mov	r3, r1
 80052c2:	18db      	adds	r3, r3, r3
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c6:	4613      	mov	r3, r2
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052d6:	f7fa ffd3 	bl	8000280 <__aeabi_uldivmod>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <UART_SetConfig+0x2d4>)
 80052e0:	fba3 1302 	umull	r1, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	2164      	movs	r1, #100	; 0x64
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	3332      	adds	r3, #50	; 0x32
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <UART_SetConfig+0x2d4>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	f003 0207 	and.w	r2, r3, #7
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4422      	add	r2, r4
 8005306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005308:	e106      	b.n	8005518 <UART_SetConfig+0x4d8>
 800530a:	bf00      	nop
 800530c:	40011000 	.word	0x40011000
 8005310:	40011400 	.word	0x40011400
 8005314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005322:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800532a:	4642      	mov	r2, r8
 800532c:	464b      	mov	r3, r9
 800532e:	1891      	adds	r1, r2, r2
 8005330:	6239      	str	r1, [r7, #32]
 8005332:	415b      	adcs	r3, r3
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800533a:	4641      	mov	r1, r8
 800533c:	1854      	adds	r4, r2, r1
 800533e:	4649      	mov	r1, r9
 8005340:	eb43 0501 	adc.w	r5, r3, r1
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	00eb      	lsls	r3, r5, #3
 800534e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005352:	00e2      	lsls	r2, r4, #3
 8005354:	4614      	mov	r4, r2
 8005356:	461d      	mov	r5, r3
 8005358:	4643      	mov	r3, r8
 800535a:	18e3      	adds	r3, r4, r3
 800535c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005360:	464b      	mov	r3, r9
 8005362:	eb45 0303 	adc.w	r3, r5, r3
 8005366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005386:	4629      	mov	r1, r5
 8005388:	008b      	lsls	r3, r1, #2
 800538a:	4621      	mov	r1, r4
 800538c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005390:	4621      	mov	r1, r4
 8005392:	008a      	lsls	r2, r1, #2
 8005394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005398:	f7fa ff72 	bl	8000280 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b60      	ldr	r3, [pc, #384]	; (8005524 <UART_SetConfig+0x4e4>)
 80053a2:	fba3 2302 	umull	r2, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	011c      	lsls	r4, r3, #4
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	61b9      	str	r1, [r7, #24]
 80053c4:	415b      	adcs	r3, r3
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053cc:	4641      	mov	r1, r8
 80053ce:	1851      	adds	r1, r2, r1
 80053d0:	6139      	str	r1, [r7, #16]
 80053d2:	4649      	mov	r1, r9
 80053d4:	414b      	adcs	r3, r1
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e4:	4659      	mov	r1, fp
 80053e6:	00cb      	lsls	r3, r1, #3
 80053e8:	4651      	mov	r1, sl
 80053ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ee:	4651      	mov	r1, sl
 80053f0:	00ca      	lsls	r2, r1, #3
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	4642      	mov	r2, r8
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005400:	464b      	mov	r3, r9
 8005402:	460a      	mov	r2, r1
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	67bb      	str	r3, [r7, #120]	; 0x78
 8005416:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005424:	4649      	mov	r1, r9
 8005426:	008b      	lsls	r3, r1, #2
 8005428:	4641      	mov	r1, r8
 800542a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542e:	4641      	mov	r1, r8
 8005430:	008a      	lsls	r2, r1, #2
 8005432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005436:	f7fa ff23 	bl	8000280 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4611      	mov	r1, r2
 8005440:	4b38      	ldr	r3, [pc, #224]	; (8005524 <UART_SetConfig+0x4e4>)
 8005442:	fba3 2301 	umull	r2, r3, r3, r1
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2264      	movs	r2, #100	; 0x64
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	1acb      	subs	r3, r1, r3
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	3332      	adds	r3, #50	; 0x32
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <UART_SetConfig+0x4e4>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005460:	441c      	add	r4, r3
 8005462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005466:	2200      	movs	r2, #0
 8005468:	673b      	str	r3, [r7, #112]	; 0x70
 800546a:	677a      	str	r2, [r7, #116]	; 0x74
 800546c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	415b      	adcs	r3, r3
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005480:	4641      	mov	r1, r8
 8005482:	1851      	adds	r1, r2, r1
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	4649      	mov	r1, r9
 8005488:	414b      	adcs	r3, r1
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005498:	4659      	mov	r1, fp
 800549a:	00cb      	lsls	r3, r1, #3
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a2:	4651      	mov	r1, sl
 80054a4:	00ca      	lsls	r2, r1, #3
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	4642      	mov	r2, r8
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b2:	464b      	mov	r3, r9
 80054b4:	460a      	mov	r2, r1
 80054b6:	eb42 0303 	adc.w	r3, r2, r3
 80054ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	663b      	str	r3, [r7, #96]	; 0x60
 80054c6:	667a      	str	r2, [r7, #100]	; 0x64
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054d4:	4649      	mov	r1, r9
 80054d6:	008b      	lsls	r3, r1, #2
 80054d8:	4641      	mov	r1, r8
 80054da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054de:	4641      	mov	r1, r8
 80054e0:	008a      	lsls	r2, r1, #2
 80054e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054e6:	f7fa fecb 	bl	8000280 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <UART_SetConfig+0x4e4>)
 80054f0:	fba3 1302 	umull	r1, r3, r3, r2
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	2164      	movs	r1, #100	; 0x64
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	3332      	adds	r3, #50	; 0x32
 8005502:	4a08      	ldr	r2, [pc, #32]	; (8005524 <UART_SetConfig+0x4e4>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f003 020f 	and.w	r2, r3, #15
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4422      	add	r2, r4
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800551e:	46bd      	mov	sp, r7
 8005520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005524:	51eb851f 	.word	0x51eb851f

08005528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005528:	b084      	sub	sp, #16
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	f107 001c 	add.w	r0, r7, #28
 8005536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d122      	bne.n	8005586 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556a:	2b01      	cmp	r3, #1
 800556c:	d105      	bne.n	800557a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fbee 	bl	8006d5c <USB_CoreReset>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e01a      	b.n	80055bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fbe2 	bl	8006d5c <USB_CoreReset>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800559c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
 80055ae:	e005      	b.n	80055bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d10b      	bne.n	80055da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f043 0206 	orr.w	r2, r3, #6
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055e6:	b004      	add	sp, #16
 80055e8:	4770      	bx	lr
	...

080055ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d165      	bne.n	80056cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a41      	ldr	r2, [pc, #260]	; (8005708 <USB_SetTurnaroundTime+0x11c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d906      	bls.n	8005616 <USB_SetTurnaroundTime+0x2a>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a40      	ldr	r2, [pc, #256]	; (800570c <USB_SetTurnaroundTime+0x120>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d202      	bcs.n	8005616 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005610:	230f      	movs	r3, #15
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e062      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a3c      	ldr	r2, [pc, #240]	; (800570c <USB_SetTurnaroundTime+0x120>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d306      	bcc.n	800562c <USB_SetTurnaroundTime+0x40>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <USB_SetTurnaroundTime+0x124>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d202      	bcs.n	800562c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005626:	230e      	movs	r3, #14
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e057      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a38      	ldr	r2, [pc, #224]	; (8005710 <USB_SetTurnaroundTime+0x124>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d306      	bcc.n	8005642 <USB_SetTurnaroundTime+0x56>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a37      	ldr	r2, [pc, #220]	; (8005714 <USB_SetTurnaroundTime+0x128>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d202      	bcs.n	8005642 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800563c:	230d      	movs	r3, #13
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e04c      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a33      	ldr	r2, [pc, #204]	; (8005714 <USB_SetTurnaroundTime+0x128>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d306      	bcc.n	8005658 <USB_SetTurnaroundTime+0x6c>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a32      	ldr	r2, [pc, #200]	; (8005718 <USB_SetTurnaroundTime+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d802      	bhi.n	8005658 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005652:	230c      	movs	r3, #12
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e041      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a2f      	ldr	r2, [pc, #188]	; (8005718 <USB_SetTurnaroundTime+0x12c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d906      	bls.n	800566e <USB_SetTurnaroundTime+0x82>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a2e      	ldr	r2, [pc, #184]	; (800571c <USB_SetTurnaroundTime+0x130>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d802      	bhi.n	800566e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005668:	230b      	movs	r3, #11
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e036      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4a2a      	ldr	r2, [pc, #168]	; (800571c <USB_SetTurnaroundTime+0x130>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d906      	bls.n	8005684 <USB_SetTurnaroundTime+0x98>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a29      	ldr	r2, [pc, #164]	; (8005720 <USB_SetTurnaroundTime+0x134>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d802      	bhi.n	8005684 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800567e:	230a      	movs	r3, #10
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e02b      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <USB_SetTurnaroundTime+0x134>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d906      	bls.n	800569a <USB_SetTurnaroundTime+0xae>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <USB_SetTurnaroundTime+0x138>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d202      	bcs.n	800569a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005694:	2309      	movs	r3, #9
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e020      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <USB_SetTurnaroundTime+0x138>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d306      	bcc.n	80056b0 <USB_SetTurnaroundTime+0xc4>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <USB_SetTurnaroundTime+0x13c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d802      	bhi.n	80056b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056aa:	2308      	movs	r3, #8
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e015      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <USB_SetTurnaroundTime+0x13c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d906      	bls.n	80056c6 <USB_SetTurnaroundTime+0xda>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <USB_SetTurnaroundTime+0x140>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d202      	bcs.n	80056c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056c0:	2307      	movs	r3, #7
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e00a      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056c6:	2306      	movs	r3, #6
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e007      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056d2:	2309      	movs	r3, #9
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e001      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056d8:	2309      	movs	r3, #9
 80056da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	00d8acbf 	.word	0x00d8acbf
 800570c:	00e4e1c0 	.word	0x00e4e1c0
 8005710:	00f42400 	.word	0x00f42400
 8005714:	01067380 	.word	0x01067380
 8005718:	011a499f 	.word	0x011a499f
 800571c:	01312cff 	.word	0x01312cff
 8005720:	014ca43f 	.word	0x014ca43f
 8005724:	016e3600 	.word	0x016e3600
 8005728:	01a6ab1f 	.word	0x01a6ab1f
 800572c:	01e84800 	.word	0x01e84800

08005730 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f043 0201 	orr.w	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d115      	bne.n	80057c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f7fb fd90 	bl	80012c8 <HAL_Delay>
      ms++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fa45 	bl	8006c3e <USB_GetMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d01e      	beq.n	80057f8 <USB_SetCurrentMode+0x84>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b31      	cmp	r3, #49	; 0x31
 80057be:	d9f0      	bls.n	80057a2 <USB_SetCurrentMode+0x2e>
 80057c0:	e01a      	b.n	80057f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d115      	bne.n	80057f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057d4:	2001      	movs	r0, #1
 80057d6:	f7fb fd77 	bl	80012c8 <HAL_Delay>
      ms++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fa2c 	bl	8006c3e <USB_GetMode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <USB_SetCurrentMode+0x84>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b31      	cmp	r3, #49	; 0x31
 80057f0:	d9f0      	bls.n	80057d4 <USB_SetCurrentMode+0x60>
 80057f2:	e001      	b.n	80057f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e005      	b.n	8005804 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b32      	cmp	r3, #50	; 0x32
 80057fc:	d101      	bne.n	8005802 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800580c:	b084      	sub	sp, #16
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800581a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e009      	b.n	8005840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3340      	adds	r3, #64	; 0x40
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b0e      	cmp	r3, #14
 8005844:	d9f2      	bls.n	800582c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11c      	bne.n	8005886 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
 8005884:	e00b      	b.n	800589e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058a4:	461a      	mov	r2, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	4619      	mov	r1, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	461a      	mov	r2, r3
 80058ba:	680b      	ldr	r3, [r1, #0]
 80058bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10c      	bne.n	80058de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f965 	bl	8005b9c <USB_SetDevSpeed>
 80058d2:	e008      	b.n	80058e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058d4:	2101      	movs	r1, #1
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f960 	bl	8005b9c <USB_SetDevSpeed>
 80058dc:	e003      	b.n	80058e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058de:	2103      	movs	r1, #3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f95b 	bl	8005b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058e6:	2110      	movs	r1, #16
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8f3 	bl	8005ad4 <USB_FlushTxFifo>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f91f 	bl	8005b3c <USB_FlushRxFifo>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	461a      	mov	r2, r3
 8005910:	2300      	movs	r3, #0
 8005912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	461a      	mov	r2, r3
 800591c:	2300      	movs	r3, #0
 800591e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	461a      	mov	r2, r3
 8005928:	2300      	movs	r3, #0
 800592a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e043      	b.n	80059ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005948:	d118      	bne.n	800597c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	461a      	mov	r2, r3
 800595e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e013      	b.n	800598e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e008      	b.n	800598e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	461a      	mov	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	461a      	mov	r2, r3
 80059ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3301      	adds	r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3b7      	bcc.n	8005932 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e043      	b.n	8005a50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059de:	d118      	bne.n	8005a12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e013      	b.n	8005a24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	e008      	b.n	8005a24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	461a      	mov	r2, r3
 8005a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d3b7      	bcc.n	80059c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f043 0210 	orr.w	r2, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <USB_DevInit+0x2c4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f043 0208 	orr.w	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d107      	bne.n	8005ac0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ab8:	f043 0304 	orr.w	r3, r3, #4
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005acc:	b004      	add	sp, #16
 8005ace:	4770      	bx	lr
 8005ad0:	803c3800 	.word	0x803c3800

08005ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <USB_FlushTxFifo+0x64>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e01b      	b.n	8005b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	daf2      	bge.n	8005ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	019b      	lsls	r3, r3, #6
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <USB_FlushTxFifo+0x64>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e006      	b.n	8005b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d0f0      	beq.n	8005b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	00030d40 	.word	0x00030d40

08005b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <USB_FlushRxFifo+0x5c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e018      	b.n	8005b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daf2      	bge.n	8005b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2210      	movs	r2, #16
 8005b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <USB_FlushRxFifo+0x5c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e006      	b.n	8005b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d0f0      	beq.n	8005b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	00030d40 	.word	0x00030d40

08005b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0306 	and.w	r3, r3, #6
 8005be6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
 8005bf2:	e00a      	b.n	8005c0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d002      	beq.n	8005c00 <USB_GetDevSpeed+0x32>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d102      	bne.n	8005c06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c00:	2302      	movs	r3, #2
 8005c02:	75fb      	strb	r3, [r7, #23]
 8005c04:	e001      	b.n	8005c0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c06:	230f      	movs	r3, #15
 8005c08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d13a      	bne.n	8005caa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	68f9      	ldr	r1, [r7, #12]
 8005c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d155      	bne.n	8005d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	791b      	ldrb	r3, [r3, #4]
 8005c86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	059b      	lsls	r3, r3, #22
 8005c8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c90:	4313      	orrs	r3, r2
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e036      	b.n	8005d18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	2101      	movs	r1, #1
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11a      	bne.n	8005d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	791b      	ldrb	r3, [r3, #4]
 8005cfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	4313      	orrs	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d161      	bne.n	8005e08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5a:	d11f      	bne.n	8005d9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	2101      	movs	r1, #1
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4013      	ands	r3, r2
 8005de2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	0159      	lsls	r1, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	440b      	add	r3, r1
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4b35      	ldr	r3, [pc, #212]	; (8005ed8 <USB_DeactivateEndpoint+0x1b0>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	600b      	str	r3, [r1, #0]
 8005e06:	e060      	b.n	8005eca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1e:	d11f      	bne.n	8005e60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e80:	4013      	ands	r3, r2
 8005e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	0159      	lsls	r1, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <USB_DeactivateEndpoint+0x1b4>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	ec337800 	.word	0xec337800
 8005edc:	eff37800 	.word	0xeff37800

08005ee0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	; 0x28
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	f040 815c 	bne.w	80061ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d132      	bne.n	8005f70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	0cdb      	lsrs	r3, r3, #19
 8005f6a:	04db      	lsls	r3, r3, #19
 8005f6c:	6113      	str	r3, [r2, #16]
 8005f6e:	e074      	b.n	800605a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	0cdb      	lsrs	r3, r3, #19
 8005f8c:	04db      	lsls	r3, r3, #19
 8005f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	440b      	add	r3, r1
 8005fcc:	1e59      	subs	r1, r3, #1
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fd6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fd8:	4b9d      	ldr	r3, [pc, #628]	; (8006250 <USB_EPStartXfer+0x370>)
 8005fda:	400b      	ands	r3, r1
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	0148      	lsls	r0, r1, #5
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	4401      	add	r1, r0
 8005fe4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	0148      	lsls	r0, r1, #5
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	4401      	add	r1, r0
 800600a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800600e:	4313      	orrs	r3, r2
 8006010:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	791b      	ldrb	r3, [r3, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d11f      	bne.n	800605a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006038:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006058:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d14b      	bne.n	80060f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d009      	beq.n	800607c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	791b      	ldrb	r3, [r3, #4]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d128      	bne.n	80060d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d110      	bne.n	80060b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e00f      	b.n	80060d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e133      	b.n	8006360 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006116:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	791b      	ldrb	r3, [r3, #4]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d015      	beq.n	800614c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 811b 	beq.w	8006360 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	2101      	movs	r1, #1
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006146:	4313      	orrs	r3, r2
 8006148:	634b      	str	r3, [r1, #52]	; 0x34
 800614a:	e109      	b.n	8006360 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d110      	bne.n	800617e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	e00f      	b.n	800619e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6919      	ldr	r1, [r3, #16]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	b298      	uxth	r0, r3
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	4603      	mov	r3, r0
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fade 	bl	8006774 <USB_WritePacket>
 80061b8:	e0d2      	b.n	8006360 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	0cdb      	lsrs	r3, r3, #19
 80061d6:	04db      	lsls	r3, r3, #19
 80061d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d126      	bne.n	8006254 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	0148      	lsls	r0, r1, #5
 8006220:	69f9      	ldr	r1, [r7, #28]
 8006222:	4401      	add	r1, r0
 8006224:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800624a:	6113      	str	r3, [r2, #16]
 800624c:	e03a      	b.n	80062c4 <USB_EPStartXfer+0x3e4>
 800624e:	bf00      	nop
 8006250:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4413      	add	r3, r2
 800625e:	1e5a      	subs	r2, r3, #1
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	8afa      	ldrh	r2, [r7, #22]
 8006270:	fb03 f202 	mul.w	r2, r3, r2
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	8afb      	ldrh	r3, [r7, #22]
 8006288:	04d9      	lsls	r1, r3, #19
 800628a:	4b38      	ldr	r3, [pc, #224]	; (800636c <USB_EPStartXfer+0x48c>)
 800628c:	400b      	ands	r3, r1
 800628e:	69b9      	ldr	r1, [r7, #24]
 8006290:	0148      	lsls	r0, r1, #5
 8006292:	69f9      	ldr	r1, [r7, #28]
 8006294:	4401      	add	r1, r0
 8006296:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800629a:	4313      	orrs	r3, r2
 800629c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	0148      	lsls	r0, r1, #5
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	4401      	add	r1, r0
 80062bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062c0:	4313      	orrs	r3, r2
 80062c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d10d      	bne.n	80062e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6919      	ldr	r1, [r3, #16]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	460a      	mov	r2, r1
 80062e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d128      	bne.n	8006340 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d110      	bne.n	8006320 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e00f      	b.n	8006340 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800635e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	1ff80000 	.word	0x1ff80000

08006370 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	f040 80ce 	bne.w	800652e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d132      	bne.n	8006400 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f8:	0cdb      	lsrs	r3, r3, #19
 80063fa:	04db      	lsls	r3, r3, #19
 80063fc:	6113      	str	r3, [r2, #16]
 80063fe:	e04e      	b.n	800649e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641a:	0cdb      	lsrs	r3, r3, #19
 800641c:	04db      	lsls	r3, r3, #19
 800641e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800643e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006442:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	429a      	cmp	r2, r3
 800644e:	d903      	bls.n	8006458 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648e:	6939      	ldr	r1, [r7, #16]
 8006490:	0148      	lsls	r0, r1, #5
 8006492:	6979      	ldr	r1, [r7, #20]
 8006494:	4401      	add	r1, r0
 8006496:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800649a:	4313      	orrs	r3, r2
 800649c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d11e      	bne.n	80064e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	461a      	mov	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e097      	b.n	8006612 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006500:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8083 	beq.w	8006612 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	2101      	movs	r1, #1
 800651e:	fa01 f303 	lsl.w	r3, r1, r3
 8006522:	6979      	ldr	r1, [r7, #20]
 8006524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006528:	4313      	orrs	r3, r2
 800652a:	634b      	str	r3, [r1, #52]	; 0x34
 800652c:	e071      	b.n	8006612 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006548:	0cdb      	lsrs	r3, r3, #19
 800654a:	04db      	lsls	r3, r3, #19
 800654c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800656c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006570:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c0:	6939      	ldr	r1, [r7, #16]
 80065c2:	0148      	lsls	r0, r1, #5
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	4401      	add	r1, r0
 80065c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10d      	bne.n	80065f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6919      	ldr	r1, [r3, #16]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	460a      	mov	r2, r1
 80065f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006610:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d14a      	bne.n	80066d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006656:	f040 8086 	bne.w	8006766 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	7812      	ldrb	r2, [r2, #0]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006678:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800667c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d902      	bls.n	80066b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
          break;
 80066b6:	e056      	b.n	8006766 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d0:	d0e7      	beq.n	80066a2 <USB_EPStopXfer+0x82>
 80066d2:	e048      	b.n	8006766 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ec:	d13b      	bne.n	8006766 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006710:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006734:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006742:	4293      	cmp	r3, r2
 8006744:	d902      	bls.n	800674c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
          break;
 800674a:	e00c      	b.n	8006766 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d0e7      	beq.n	8006736 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
}
 8006768:	4618      	mov	r0, r3
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006774:	b480      	push	{r7}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	460b      	mov	r3, r1
 8006784:	71fb      	strb	r3, [r7, #7]
 8006786:	4613      	mov	r3, r2
 8006788:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d123      	bne.n	80067e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	3303      	adds	r3, #3
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e018      	b.n	80067da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	031a      	lsls	r2, r3, #12
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b4:	461a      	mov	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	3301      	adds	r3, #1
 80067c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3e2      	bcc.n	80067a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3724      	adds	r7, #36	; 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b08b      	sub	sp, #44	; 0x2c
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	b29b      	uxth	r3, r3
 800680c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	623b      	str	r3, [r7, #32]
 800681a:	e014      	b.n	8006846 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	601a      	str	r2, [r3, #0]
    pDest++;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	3301      	adds	r3, #1
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	3301      	adds	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	3301      	adds	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	3301      	adds	r3, #1
 8006844:	623b      	str	r3, [r7, #32]
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	429a      	cmp	r2, r3
 800684c:	d3e6      	bcc.n	800681c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800684e:	8bfb      	ldrh	r3, [r7, #30]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01e      	beq.n	8006892 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685e:	461a      	mov	r2, r3
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	b2da      	uxtb	r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	701a      	strb	r2, [r3, #0]
      i++;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	3301      	adds	r3, #1
 800687e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	3301      	adds	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006886:	8bfb      	ldrh	r3, [r7, #30]
 8006888:	3b01      	subs	r3, #1
 800688a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800688c:	8bfb      	ldrh	r3, [r7, #30]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ea      	bne.n	8006868 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006894:	4618      	mov	r0, r3
 8006896:	372c      	adds	r7, #44	; 0x2c
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d12c      	bne.n	8006916 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	db12      	blt.n	80068f4 <USB_EPSetStall+0x54>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00f      	beq.n	80068f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e02b      	b.n	800696e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	db12      	blt.n	800694e <USB_EPSetStall+0xae>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00f      	beq.n	800694e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800694c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800696c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d128      	bne.n	80069ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d003      	beq.n	80069c8 <USB_EPClearStall+0x4c>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	791b      	ldrb	r3, [r3, #4]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d138      	bne.n	8006a3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e027      	b.n	8006a3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	791b      	ldrb	r3, [r3, #4]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d003      	beq.n	8006a1a <USB_EPClearStall+0x9e>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d10f      	bne.n	8006a3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac2:	f023 0302 	bic.w	r3, r3, #2
 8006ac6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006af0:	f023 0303 	bic.w	r3, r3, #3
 8006af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b04:	f043 0302 	orr.w	r3, r3, #2
 8006b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0c1b      	lsrs	r3, r3, #16
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	b29b      	uxth	r3, r3
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b087      	sub	sp, #28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	01db      	lsls	r3, r3, #7
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c30:	68bb      	ldr	r3, [r7, #8]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c78:	f023 0307 	bic.w	r3, r3, #7
 8006c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	333c      	adds	r3, #60	; 0x3c
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <USB_EP0_OutStart+0xb8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d90a      	bls.n	8006cda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd4:	d101      	bne.n	8006cda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e037      	b.n	8006d4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d08:	f043 0318 	orr.w	r3, r3, #24
 8006d0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10f      	bne.n	8006d48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	4f54300a 	.word	0x4f54300a

08006d5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <USB_CoreReset+0x64>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d901      	bls.n	8006d7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e01b      	b.n	8006db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	daf2      	bge.n	8006d68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f043 0201 	orr.w	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <USB_CoreReset+0x64>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d901      	bls.n	8006da4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e006      	b.n	8006db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d0f0      	beq.n	8006d92 <USB_CoreReset+0x36>

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	00030d40 	.word	0x00030d40

08006dc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006dd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006dd4:	f002 fcc4 	bl	8009760 <USBD_static_malloc>
 8006dd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	; 0xb0
 8006dea:	2100      	movs	r1, #0
 8006dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0d4      	b.n	8006f9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006df4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006df8:	2100      	movs	r1, #0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f002 fda4 	bl	8009948 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32b0      	adds	r2, #176	; 0xb0
 8006e1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7c1b      	ldrb	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d138      	bne.n	8006e9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e2c:	4b5e      	ldr	r3, [pc, #376]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006e2e:	7819      	ldrb	r1, [r3, #0]
 8006e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e34:	2202      	movs	r2, #2
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f002 fb6f 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e3c:	4b5a      	ldr	r3, [pc, #360]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	3324      	adds	r3, #36	; 0x24
 8006e52:	2201      	movs	r2, #1
 8006e54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e56:	4b55      	ldr	r3, [pc, #340]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006e58:	7819      	ldrb	r1, [r3, #0]
 8006e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5e:	2202      	movs	r2, #2
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 fb5a 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e66:	4b51      	ldr	r3, [pc, #324]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e7e:	2201      	movs	r2, #1
 8006e80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e82:	4b4b      	ldr	r3, [pc, #300]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f003 020f 	and.w	r2, r3, #15
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	3326      	adds	r3, #38	; 0x26
 8006e98:	2210      	movs	r2, #16
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e035      	b.n	8006f0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e9e:	4b42      	ldr	r3, [pc, #264]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 fb37 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eac:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3324      	adds	r3, #36	; 0x24
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ec6:	4b39      	ldr	r3, [pc, #228]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006ec8:	7819      	ldrb	r1, [r3, #0]
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	2202      	movs	r2, #2
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f002 fb23 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ed4:	4b35      	ldr	r3, [pc, #212]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eec:	2201      	movs	r2, #1
 8006eee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ef0:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	3326      	adds	r3, #38	; 0x26
 8006f06:	2210      	movs	r2, #16
 8006f08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006f0c:	7819      	ldrb	r1, [r3, #0]
 8006f0e:	2308      	movs	r3, #8
 8006f10:	2203      	movs	r2, #3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f002 fb01 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3324      	adds	r3, #36	; 0x24
 8006f2e:	2201      	movs	r2, #1
 8006f30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	33b0      	adds	r3, #176	; 0xb0
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e018      	b.n	8006f9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7c1b      	ldrb	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006f76:	7819      	ldrb	r1, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f002 fbb8 	bl	80096f8 <USBD_LL_PrepareReceive>
 8006f88:	e008      	b.n	8006f9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f002 fbae 	bl	80096f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200000a3 	.word	0x200000a3
 8006fac:	200000a4 	.word	0x200000a4
 8006fb0:	200000a5 	.word	0x200000a5

08006fb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006fc0:	4b3a      	ldr	r3, [pc, #232]	; (80070ac <USBD_CDC_DeInit+0xf8>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f002 facd 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fcc:	4b37      	ldr	r3, [pc, #220]	; (80070ac <USBD_CDC_DeInit+0xf8>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	3324      	adds	r3, #36	; 0x24
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fe6:	4b32      	ldr	r3, [pc, #200]	; (80070b0 <USBD_CDC_DeInit+0xfc>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 faba 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ff2:	4b2f      	ldr	r3, [pc, #188]	; (80070b0 <USBD_CDC_DeInit+0xfc>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800700a:	2200      	movs	r2, #0
 800700c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <USBD_CDC_DeInit+0x100>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f002 faa6 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800701a:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <USBD_CDC_DeInit+0x100>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	3324      	adds	r3, #36	; 0x24
 8007030:	2200      	movs	r2, #0
 8007032:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007034:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <USBD_CDC_DeInit+0x100>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 020f 	and.w	r2, r3, #15
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	3326      	adds	r3, #38	; 0x26
 800704a:	2200      	movs	r2, #0
 800704c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	32b0      	adds	r2, #176	; 0xb0
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01f      	beq.n	80070a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	33b0      	adds	r3, #176	; 0xb0
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	; 0xb0
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	4618      	mov	r0, r3
 8007084:	f002 fb7a 	bl	800977c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	32b0      	adds	r2, #176	; 0xb0
 8007092:	2100      	movs	r1, #0
 8007094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200000a3 	.word	0x200000a3
 80070b0:	200000a4 	.word	0x200000a4
 80070b4:	200000a5 	.word	0x200000a5

080070b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	32b0      	adds	r2, #176	; 0xb0
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e0bf      	b.n	8007268 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d050      	beq.n	8007196 <USBD_CDC_Setup+0xde>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	f040 80af 	bne.w	8007258 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	88db      	ldrh	r3, [r3, #6]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d03a      	beq.n	8007178 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b25b      	sxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	da1b      	bge.n	8007144 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	33b0      	adds	r3, #176	; 0xb0
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007122:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	88d2      	ldrh	r2, [r2, #6]
 8007128:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b07      	cmp	r3, #7
 8007130:	bf28      	it	cs
 8007132:	2307      	movcs	r3, #7
 8007134:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	89fa      	ldrh	r2, [r7, #14]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fd89 	bl	8008c54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007142:	e090      	b.n	8007266 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785a      	ldrb	r2, [r3, #1]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	88db      	ldrh	r3, [r3, #6]
 8007152:	2b3f      	cmp	r3, #63	; 0x3f
 8007154:	d803      	bhi.n	800715e <USBD_CDC_Setup+0xa6>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	e000      	b.n	8007160 <USBD_CDC_Setup+0xa8>
 800715e:	2240      	movs	r2, #64	; 0x40
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007166:	6939      	ldr	r1, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800716e:	461a      	mov	r2, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fd9b 	bl	8008cac <USBD_CtlPrepareRx>
      break;
 8007176:	e076      	b.n	8007266 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	33b0      	adds	r3, #176	; 0xb0
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	7850      	ldrb	r0, [r2, #1]
 800718e:	2200      	movs	r2, #0
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	4798      	blx	r3
      break;
 8007194:	e067      	b.n	8007266 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b0b      	cmp	r3, #11
 800719c:	d851      	bhi.n	8007242 <USBD_CDC_Setup+0x18a>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <USBD_CDC_Setup+0xec>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071d5 	.word	0x080071d5
 80071a8:	08007251 	.word	0x08007251
 80071ac:	08007243 	.word	0x08007243
 80071b0:	08007243 	.word	0x08007243
 80071b4:	08007243 	.word	0x08007243
 80071b8:	08007243 	.word	0x08007243
 80071bc:	08007243 	.word	0x08007243
 80071c0:	08007243 	.word	0x08007243
 80071c4:	08007243 	.word	0x08007243
 80071c8:	08007243 	.word	0x08007243
 80071cc:	080071ff 	.word	0x080071ff
 80071d0:	08007229 	.word	0x08007229
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d107      	bne.n	80071f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071e0:	f107 030a 	add.w	r3, r7, #10
 80071e4:	2202      	movs	r2, #2
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fd33 	bl	8008c54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071ee:	e032      	b.n	8007256 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fcbd 	bl	8008b72 <USBD_CtlError>
            ret = USBD_FAIL;
 80071f8:	2303      	movs	r3, #3
 80071fa:	75fb      	strb	r3, [r7, #23]
          break;
 80071fc:	e02b      	b.n	8007256 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d107      	bne.n	800721a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800720a:	f107 030d 	add.w	r3, r7, #13
 800720e:	2201      	movs	r2, #1
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fd1e 	bl	8008c54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007218:	e01d      	b.n	8007256 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fca8 	bl	8008b72 <USBD_CtlError>
            ret = USBD_FAIL;
 8007222:	2303      	movs	r3, #3
 8007224:	75fb      	strb	r3, [r7, #23]
          break;
 8007226:	e016      	b.n	8007256 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b03      	cmp	r3, #3
 8007232:	d00f      	beq.n	8007254 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fc9b 	bl	8008b72 <USBD_CtlError>
            ret = USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007240:	e008      	b.n	8007254 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fc94 	bl	8008b72 <USBD_CtlError>
          ret = USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	75fb      	strb	r3, [r7, #23]
          break;
 800724e:	e002      	b.n	8007256 <USBD_CDC_Setup+0x19e>
          break;
 8007250:	bf00      	nop
 8007252:	e008      	b.n	8007266 <USBD_CDC_Setup+0x1ae>
          break;
 8007254:	bf00      	nop
      }
      break;
 8007256:	e006      	b.n	8007266 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fc89 	bl	8008b72 <USBD_CtlError>
      ret = USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	75fb      	strb	r3, [r7, #23]
      break;
 8007264:	bf00      	nop
  }

  return (uint8_t)ret;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007282:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32b0      	adds	r2, #176	; 0xb0
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	e065      	b.n	8007366 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32b0      	adds	r2, #176	; 0xb0
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3318      	adds	r3, #24
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02f      	beq.n	8007324 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3318      	adds	r3, #24
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	f003 010f 	and.w	r1, r3, #15
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	460b      	mov	r3, r1
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4403      	add	r3, r0
 80072ec:	3348      	adds	r3, #72	; 0x48
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d112      	bne.n	8007324 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	f003 020f 	and.w	r2, r3, #15
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	3318      	adds	r3, #24
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007316:	78f9      	ldrb	r1, [r7, #3]
 8007318:	2300      	movs	r3, #0
 800731a:	2200      	movs	r2, #0
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f002 f9ca 	bl	80096b6 <USBD_LL_Transmit>
 8007322:	e01f      	b.n	8007364 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	33b0      	adds	r3, #176	; 0xb0
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d010      	beq.n	8007364 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	33b0      	adds	r3, #176	; 0xb0
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	32b0      	adds	r2, #176	; 0xb0
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	32b0      	adds	r2, #176	; 0xb0
 8007394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e01a      	b.n	80073d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f002 f9c8 	bl	800973a <USBD_LL_GetRxDataSize>
 80073aa:	4602      	mov	r2, r0
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	33b0      	adds	r3, #176	; 0xb0
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073d0:	4611      	mov	r1, r2
 80073d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32b0      	adds	r2, #176	; 0xb0
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e025      	b.n	800744c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	33b0      	adds	r3, #176	; 0xb0
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01a      	beq.n	800744a <USBD_CDC_EP0_RxReady+0x6c>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800741a:	2bff      	cmp	r3, #255	; 0xff
 800741c:	d015      	beq.n	800744a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	33b0      	adds	r3, #176	; 0xb0
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007436:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800743e:	b292      	uxth	r2, r2
 8007440:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	22ff      	movs	r2, #255	; 0xff
 8007446:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800745c:	2182      	movs	r1, #130	; 0x82
 800745e:	4818      	ldr	r0, [pc, #96]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007460:	f000 fd4f 	bl	8007f02 <USBD_GetEpDesc>
 8007464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007466:	2101      	movs	r1, #1
 8007468:	4815      	ldr	r0, [pc, #84]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800746a:	f000 fd4a 	bl	8007f02 <USBD_GetEpDesc>
 800746e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007470:	2181      	movs	r1, #129	; 0x81
 8007472:	4813      	ldr	r0, [pc, #76]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007474:	f000 fd45 	bl	8007f02 <USBD_GetEpDesc>
 8007478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2210      	movs	r2, #16
 8007484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2200      	movs	r2, #0
 8007490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007494:	711a      	strb	r2, [r3, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a8:	711a      	strb	r2, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2243      	movs	r2, #67	; 0x43
 80074b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000060 	.word	0x20000060

080074c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074cc:	2182      	movs	r1, #130	; 0x82
 80074ce:	4818      	ldr	r0, [pc, #96]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074d0:	f000 fd17 	bl	8007f02 <USBD_GetEpDesc>
 80074d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074d6:	2101      	movs	r1, #1
 80074d8:	4815      	ldr	r0, [pc, #84]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074da:	f000 fd12 	bl	8007f02 <USBD_GetEpDesc>
 80074de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e0:	2181      	movs	r1, #129	; 0x81
 80074e2:	4813      	ldr	r0, [pc, #76]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074e4:	f000 fd0d 	bl	8007f02 <USBD_GetEpDesc>
 80074e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2210      	movs	r2, #16
 80074f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2200      	movs	r2, #0
 8007500:	711a      	strb	r2, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f042 0202 	orr.w	r2, r2, #2
 8007508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	711a      	strb	r2, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f042 0202 	orr.w	r2, r2, #2
 800751c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2243      	movs	r2, #67	; 0x43
 8007522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000060 	.word	0x20000060

08007534 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800753c:	2182      	movs	r1, #130	; 0x82
 800753e:	4818      	ldr	r0, [pc, #96]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007540:	f000 fcdf 	bl	8007f02 <USBD_GetEpDesc>
 8007544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007546:	2101      	movs	r1, #1
 8007548:	4815      	ldr	r0, [pc, #84]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800754a:	f000 fcda 	bl	8007f02 <USBD_GetEpDesc>
 800754e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007550:	2181      	movs	r1, #129	; 0x81
 8007552:	4813      	ldr	r0, [pc, #76]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007554:	f000 fcd5 	bl	8007f02 <USBD_GetEpDesc>
 8007558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2210      	movs	r2, #16
 8007564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007574:	711a      	strb	r2, [r3, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2243      	movs	r2, #67	; 0x43
 8007592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000060 	.word	0x20000060

080075a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	220a      	movs	r2, #10
 80075b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075b2:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	2000001c 	.word	0x2000001c

080075c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e009      	b.n	80075ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	33b0      	adds	r3, #176	; 0xb0
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	32b0      	adds	r2, #176	; 0xb0
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800761a:	2303      	movs	r3, #3
 800761c:	e008      	b.n	8007630 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	32b0      	adds	r2, #176	; 0xb0
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	e004      	b.n	800766a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32b0      	adds	r2, #176	; 0xb0
 800768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32b0      	adds	r2, #176	; 0xb0
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e025      	b.n	80076f6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11f      	bne.n	80076f4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076bc:	4b10      	ldr	r3, [pc, #64]	; (8007700 <USBD_CDC_TransmitPacket+0x88>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4403      	add	r3, r0
 80076d6:	3318      	adds	r3, #24
 80076d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <USBD_CDC_TransmitPacket+0x88>)
 80076dc:	7819      	ldrb	r1, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 ffe3 	bl	80096b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	200000a3 	.word	0x200000a3

08007704 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32b0      	adds	r2, #176	; 0xb0
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32b0      	adds	r2, #176	; 0xb0
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800772e:	2303      	movs	r3, #3
 8007730:	e018      	b.n	8007764 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7c1b      	ldrb	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800773a:	4b0c      	ldr	r3, [pc, #48]	; (800776c <USBD_CDC_ReceivePacket+0x68>)
 800773c:	7819      	ldrb	r1, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 ffd5 	bl	80096f8 <USBD_LL_PrepareReceive>
 800774e:	e008      	b.n	8007762 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <USBD_CDC_ReceivePacket+0x68>)
 8007752:	7819      	ldrb	r1, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 ffcb 	bl	80096f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	200000a4 	.word	0x200000a4

08007770 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	e01f      	b.n	80077c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	79fa      	ldrb	r2, [r7, #7]
 80077ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f001 fe45 	bl	800944c <USBD_LL_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e025      	b.n	8007834 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	; 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	; 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f107 020e 	add.w	r2, r7, #14
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fe4d 	bl	80094e4 <USBD_LL_Start>
 800784a:	4603      	mov	r3, r0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	4611      	mov	r1, r2
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	4611      	mov	r1, r2
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078c8:	2303      	movs	r3, #3
 80078ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 f908 	bl	8008afe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078fc:	461a      	mov	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	2b02      	cmp	r3, #2
 8007910:	d01a      	beq.n	8007948 <USBD_LL_SetupStage+0x72>
 8007912:	2b02      	cmp	r3, #2
 8007914:	d822      	bhi.n	800795c <USBD_LL_SetupStage+0x86>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <USBD_LL_SetupStage+0x4a>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d00a      	beq.n	8007934 <USBD_LL_SetupStage+0x5e>
 800791e:	e01d      	b.n	800795c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb5f 	bl	8007fec <USBD_StdDevReq>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
      break;
 8007932:	e020      	b.n	8007976 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbc7 	bl	80080d0 <USBD_StdItfReq>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e016      	b.n	8007976 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc29 	bl	80081a8 <USBD_StdEPReq>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
      break;
 800795a:	e00c      	b.n	8007976 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007966:	b2db      	uxtb	r3, r3
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fe1a 	bl	80095a4 <USBD_LL_StallEP>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]
      break;
 8007974:	bf00      	nop
  }

  return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	460b      	mov	r3, r1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d16e      	bne.n	8007a76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800799e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	f040 8098 	bne.w	8007adc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d913      	bls.n	80079e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	1ad2      	subs	r2, r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	bf28      	it	cs
 80079d2:	4613      	movcs	r3, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 f984 	bl	8008ce6 <USBD_CtlContinueRx>
 80079de:	e07d      	b.n	8007adc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d014      	beq.n	8007a18 <USBD_LL_DataOutStage+0x98>
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d81d      	bhi.n	8007a2e <USBD_LL_DataOutStage+0xae>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <USBD_LL_DataOutStage+0x7c>
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d003      	beq.n	8007a02 <USBD_LL_DataOutStage+0x82>
 80079fa:	e018      	b.n	8007a2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007a00:	e018      	b.n	8007a34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fa5e 	bl	8007ece <USBD_CoreFindIF>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75bb      	strb	r3, [r7, #22]
            break;
 8007a16:	e00d      	b.n	8007a34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa60 	bl	8007ee8 <USBD_CoreFindEP>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a2c:	e002      	b.n	8007a34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75bb      	strb	r3, [r7, #22]
            break;
 8007a32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d119      	bne.n	8007a6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d113      	bne.n	8007a6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a46:	7dba      	ldrb	r2, [r7, #22]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	32ae      	adds	r2, #174	; 0xae
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a56:	7dba      	ldrb	r2, [r7, #22]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a5e:	7dba      	ldrb	r2, [r7, #22]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	32ae      	adds	r2, #174	; 0xae
 8007a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f001 f94a 	bl	8008d08 <USBD_CtlSendStatus>
 8007a74:	e032      	b.n	8007adc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fa31 	bl	8007ee8 <USBD_CoreFindEP>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a8a:	7dbb      	ldrb	r3, [r7, #22]
 8007a8c:	2bff      	cmp	r3, #255	; 0xff
 8007a8e:	d025      	beq.n	8007adc <USBD_LL_DataOutStage+0x15c>
 8007a90:	7dbb      	ldrb	r3, [r7, #22]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d122      	bne.n	8007adc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d117      	bne.n	8007ad2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007aa2:	7dba      	ldrb	r2, [r7, #22]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	32ae      	adds	r2, #174	; 0xae
 8007aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00f      	beq.n	8007ad2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ab2:	7dba      	ldrb	r2, [r7, #22]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007aba:	7dba      	ldrb	r2, [r7, #22]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	32ae      	adds	r2, #174	; 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	7afa      	ldrb	r2, [r7, #11]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	e000      	b.n	8007ade <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	460b      	mov	r3, r1
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d16f      	bne.n	8007bda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3314      	adds	r3, #20
 8007afe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d15a      	bne.n	8007bc0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d914      	bls.n	8007b40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 f8ac 	bl	8008c8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b32:	2300      	movs	r3, #0
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f001 fddd 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007b3e:	e03f      	b.n	8007bc0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d11c      	bne.n	8007b86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d316      	bcc.n	8007b86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d20f      	bcs.n	8007b86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 f88d 	bl	8008c8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 fdba 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007b84:	e01c      	b.n	8007bc0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d10f      	bne.n	8007bb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bb2:	2180      	movs	r1, #128	; 0x80
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f001 fcf5 	bl	80095a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 f8b7 	bl	8008d2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d03a      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fe42 	bl	8007854 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bd8:	e032      	b.n	8007c40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4619      	mov	r1, r3
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f97f 	bl	8007ee8 <USBD_CoreFindEP>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	2bff      	cmp	r3, #255	; 0xff
 8007bf2:	d025      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d122      	bne.n	8007c40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d11c      	bne.n	8007c40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c06:	7dfa      	ldrb	r2, [r7, #23]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	32ae      	adds	r2, #174	; 0xae
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d014      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c16:	7dfa      	ldrb	r2, [r7, #23]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c1e:	7dfa      	ldrb	r2, [r7, #23]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	32ae      	adds	r2, #174	; 0xae
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	7afa      	ldrb	r2, [r7, #11]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c36:	7dbb      	ldrb	r3, [r7, #22]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c3c:	7dbb      	ldrb	r3, [r7, #22]
 8007c3e:	e000      	b.n	8007c42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d014      	beq.n	8007cb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6852      	ldr	r2, [r2, #4]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fc2f 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2240      	movs	r2, #64	; 0x40
 8007cc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ccc:	2340      	movs	r3, #64	; 0x40
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2180      	movs	r1, #128	; 0x80
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fc21 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2240      	movs	r2, #64	; 0x40
 8007ce2:	621a      	str	r2, [r3, #32]

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d106      	bne.n	8007d5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d110      	bne.n	8007da0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	32ae      	adds	r2, #174	; 0xae
 8007dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e01c      	b.n	8007e06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d115      	bne.n	8007e04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	32ae      	adds	r2, #174	; 0xae
 8007de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	32ae      	adds	r2, #174	; 0xae
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e01c      	b.n	8007e6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d115      	bne.n	8007e68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	32ae      	adds	r2, #174	; 0xae
 8007e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32ae      	adds	r2, #174	; 0xae
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	4611      	mov	r1, r2
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6852      	ldr	r2, [r2, #4]
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ef4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d920      	bls.n	8007f6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f32:	e013      	b.n	8007f5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f34:	f107 030a 	add.w	r3, r7, #10
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	f000 f81b 	bl	8007f76 <USBD_GetNextDesc>
 8007f40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d108      	bne.n	8007f5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	789b      	ldrb	r3, [r3, #2]
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d008      	beq.n	8007f6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	885b      	ldrh	r3, [r3, #2]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	897b      	ldrh	r3, [r7, #10]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d8e5      	bhi.n	8007f34 <USBD_GetEpDesc+0x32>
 8007f68:	e000      	b.n	8007f6c <USBD_GetEpDesc+0x6a>
          break;
 8007f6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f6c:	693b      	ldr	r3, [r7, #16]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	881a      	ldrh	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4413      	add	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fce:	8a3b      	ldrh	r3, [r7, #16]
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	b21a      	sxth	r2, r3
 8007fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	b21b      	sxth	r3, r3
 8007fdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fde:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d005      	beq.n	8008012 <USBD_StdDevReq+0x26>
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d857      	bhi.n	80080ba <USBD_StdDevReq+0xce>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <USBD_StdDevReq+0x42>
 800800e:	2b20      	cmp	r3, #32
 8008010:	d153      	bne.n	80080ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	32ae      	adds	r2, #174	; 0xae
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e04a      	b.n	80080c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b09      	cmp	r3, #9
 8008034:	d83b      	bhi.n	80080ae <USBD_StdDevReq+0xc2>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <USBD_StdDevReq+0x50>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	08008091 	.word	0x08008091
 8008040:	080080a5 	.word	0x080080a5
 8008044:	080080af 	.word	0x080080af
 8008048:	0800809b 	.word	0x0800809b
 800804c:	080080af 	.word	0x080080af
 8008050:	0800806f 	.word	0x0800806f
 8008054:	08008065 	.word	0x08008065
 8008058:	080080af 	.word	0x080080af
 800805c:	08008087 	.word	0x08008087
 8008060:	08008079 	.word	0x08008079
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa3c 	bl	80084e4 <USBD_GetDescriptor>
          break;
 800806c:	e024      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fba1 	bl	80087b8 <USBD_SetAddress>
          break;
 8008076:	e01f      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fbe0 	bl	8008840 <USBD_SetConfig>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
          break;
 8008084:	e018      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc83 	bl	8008994 <USBD_GetConfig>
          break;
 800808e:	e013      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fcb4 	bl	8008a00 <USBD_GetStatus>
          break;
 8008098:	e00e      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fce3 	bl	8008a68 <USBD_SetFeature>
          break;
 80080a2:	e009      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fd07 	bl	8008aba <USBD_ClrFeature>
          break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fd5e 	bl	8008b72 <USBD_CtlError>
          break;
 80080b6:	bf00      	nop
      }
      break;
 80080b8:	e004      	b.n	80080c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fd58 	bl	8008b72 <USBD_CtlError>
      break;
 80080c2:	bf00      	nop
  }

  return ret;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d005      	beq.n	80080f6 <USBD_StdItfReq+0x26>
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	d852      	bhi.n	8008194 <USBD_StdItfReq+0xc4>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <USBD_StdItfReq+0x26>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d14e      	bne.n	8008194 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	2b02      	cmp	r3, #2
 8008102:	d840      	bhi.n	8008186 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	889b      	ldrh	r3, [r3, #4]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d836      	bhi.n	800817c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	889b      	ldrh	r3, [r3, #4]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fed9 	bl	8007ece <USBD_CoreFindIF>
 800811c:	4603      	mov	r3, r0
 800811e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2bff      	cmp	r3, #255	; 0xff
 8008124:	d01d      	beq.n	8008162 <USBD_StdItfReq+0x92>
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11a      	bne.n	8008162 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800812c:	7bba      	ldrb	r2, [r7, #14]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32ae      	adds	r2, #174	; 0xae
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00f      	beq.n	800815c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800813c:	7bba      	ldrb	r2, [r7, #14]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008144:	7bba      	ldrb	r2, [r7, #14]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32ae      	adds	r2, #174	; 0xae
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800815a:	e004      	b.n	8008166 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008160:	e001      	b.n	8008166 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008162:	2303      	movs	r3, #3
 8008164:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d110      	bne.n	8008190 <USBD_StdItfReq+0xc0>
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fdc7 	bl	8008d08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800817a:	e009      	b.n	8008190 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fcf7 	bl	8008b72 <USBD_CtlError>
          break;
 8008184:	e004      	b.n	8008190 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fcf2 	bl	8008b72 <USBD_CtlError>
          break;
 800818e:	e000      	b.n	8008192 <USBD_StdItfReq+0xc2>
          break;
 8008190:	bf00      	nop
      }
      break;
 8008192:	e004      	b.n	800819e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fceb 	bl	8008b72 <USBD_CtlError>
      break;
 800819c:	bf00      	nop
  }

  return ret;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	889b      	ldrh	r3, [r3, #4]
 80081ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	d007      	beq.n	80081d8 <USBD_StdEPReq+0x30>
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	f200 817f 	bhi.w	80084cc <USBD_StdEPReq+0x324>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d02a      	beq.n	8008228 <USBD_StdEPReq+0x80>
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	f040 817a 	bne.w	80084cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff fe83 	bl	8007ee8 <USBD_CoreFindEP>
 80081e2:	4603      	mov	r3, r0
 80081e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081e6:	7b7b      	ldrb	r3, [r7, #13]
 80081e8:	2bff      	cmp	r3, #255	; 0xff
 80081ea:	f000 8174 	beq.w	80084d6 <USBD_StdEPReq+0x32e>
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 8170 	bne.w	80084d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081f6:	7b7a      	ldrb	r2, [r7, #13]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081fe:	7b7a      	ldrb	r2, [r7, #13]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32ae      	adds	r2, #174	; 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8163 	beq.w	80084d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008210:	7b7a      	ldrb	r2, [r7, #13]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008226:	e156      	b.n	80084d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b03      	cmp	r3, #3
 800822e:	d008      	beq.n	8008242 <USBD_StdEPReq+0x9a>
 8008230:	2b03      	cmp	r3, #3
 8008232:	f300 8145 	bgt.w	80084c0 <USBD_StdEPReq+0x318>
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 809b 	beq.w	8008372 <USBD_StdEPReq+0x1ca>
 800823c:	2b01      	cmp	r3, #1
 800823e:	d03c      	beq.n	80082ba <USBD_StdEPReq+0x112>
 8008240:	e13e      	b.n	80084c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d002      	beq.n	8008254 <USBD_StdEPReq+0xac>
 800824e:	2b03      	cmp	r3, #3
 8008250:	d016      	beq.n	8008280 <USBD_StdEPReq+0xd8>
 8008252:	e02c      	b.n	80082ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <USBD_StdEPReq+0xce>
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b80      	cmp	r3, #128	; 0x80
 800825e:	d00a      	beq.n	8008276 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 f99d 	bl	80095a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800826a:	2180      	movs	r1, #128	; 0x80
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f999 	bl	80095a4 <USBD_LL_StallEP>
 8008272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008274:	e020      	b.n	80082b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc7a 	bl	8008b72 <USBD_CtlError>
              break;
 800827e:	e01b      	b.n	80082b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10e      	bne.n	80082a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <USBD_StdEPReq+0xfe>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d008      	beq.n	80082a6 <USBD_StdEPReq+0xfe>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d104      	bne.n	80082a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f97f 	bl	80095a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fd2e 	bl	8008d08 <USBD_CtlSendStatus>

              break;
 80082ac:	e004      	b.n	80082b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fc5e 	bl	8008b72 <USBD_CtlError>
              break;
 80082b6:	bf00      	nop
          }
          break;
 80082b8:	e107      	b.n	80084ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d002      	beq.n	80082cc <USBD_StdEPReq+0x124>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d016      	beq.n	80082f8 <USBD_StdEPReq+0x150>
 80082ca:	e04b      	b.n	8008364 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00d      	beq.n	80082ee <USBD_StdEPReq+0x146>
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b80      	cmp	r3, #128	; 0x80
 80082d6:	d00a      	beq.n	80082ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f961 	bl	80095a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082e2:	2180      	movs	r1, #128	; 0x80
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f95d 	bl	80095a4 <USBD_LL_StallEP>
 80082ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082ec:	e040      	b.n	8008370 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc3e 	bl	8008b72 <USBD_CtlError>
              break;
 80082f6:	e03b      	b.n	8008370 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	885b      	ldrh	r3, [r3, #2]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d136      	bne.n	800836e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f967 	bl	80095e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fcf7 	bl	8008d08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fde2 	bl	8007ee8 <USBD_CoreFindEP>
 8008324:	4603      	mov	r3, r0
 8008326:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008328:	7b7b      	ldrb	r3, [r7, #13]
 800832a:	2bff      	cmp	r3, #255	; 0xff
 800832c:	d01f      	beq.n	800836e <USBD_StdEPReq+0x1c6>
 800832e:	7b7b      	ldrb	r3, [r7, #13]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11c      	bne.n	800836e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008334:	7b7a      	ldrb	r2, [r7, #13]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32ae      	adds	r2, #174	; 0xae
 8008342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800834c:	7b7a      	ldrb	r2, [r7, #13]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32ae      	adds	r2, #174	; 0xae
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008362:	e004      	b.n	800836e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fc03 	bl	8008b72 <USBD_CtlError>
              break;
 800836c:	e000      	b.n	8008370 <USBD_StdEPReq+0x1c8>
              break;
 800836e:	bf00      	nop
          }
          break;
 8008370:	e0ab      	b.n	80084ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d002      	beq.n	8008384 <USBD_StdEPReq+0x1dc>
 800837e:	2b03      	cmp	r3, #3
 8008380:	d032      	beq.n	80083e8 <USBD_StdEPReq+0x240>
 8008382:	e097      	b.n	80084b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <USBD_StdEPReq+0x1f2>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b80      	cmp	r3, #128	; 0x80
 800838e:	d004      	beq.n	800839a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fbed 	bl	8008b72 <USBD_CtlError>
                break;
 8008398:	e091      	b.n	80084be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800839a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	da0b      	bge.n	80083ba <USBD_StdEPReq+0x212>
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	3310      	adds	r3, #16
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	4413      	add	r3, r2
 80083b6:	3304      	adds	r3, #4
 80083b8:	e00b      	b.n	80083d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4413      	add	r3, r2
 80083d0:	3304      	adds	r3, #4
 80083d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2202      	movs	r2, #2
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fc37 	bl	8008c54 <USBD_CtlSendData>
              break;
 80083e6:	e06a      	b.n	80084be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	da11      	bge.n	8008414 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	f003 020f 	and.w	r2, r3, #15
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d117      	bne.n	800843a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fbb0 	bl	8008b72 <USBD_CtlError>
                  break;
 8008412:	e054      	b.n	80084be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	f003 020f 	and.w	r2, r3, #15
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fb9d 	bl	8008b72 <USBD_CtlError>
                  break;
 8008438:	e041      	b.n	80084be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	da0b      	bge.n	800845a <USBD_StdEPReq+0x2b2>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	3310      	adds	r3, #16
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	3304      	adds	r3, #4
 8008458:	e00b      	b.n	8008472 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	4413      	add	r3, r2
 8008470:	3304      	adds	r3, #4
 8008472:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <USBD_StdEPReq+0x2d8>
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b80      	cmp	r3, #128	; 0x80
 800847e:	d103      	bne.n	8008488 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e00e      	b.n	80084a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f8c7 	bl	8009620 <USBD_LL_IsStallEP>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e002      	b.n	80084a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2202      	movs	r2, #2
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fbd1 	bl	8008c54 <USBD_CtlSendData>
              break;
 80084b2:	e004      	b.n	80084be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fb5b 	bl	8008b72 <USBD_CtlError>
              break;
 80084bc:	bf00      	nop
          }
          break;
 80084be:	e004      	b.n	80084ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb55 	bl	8008b72 <USBD_CtlError>
          break;
 80084c8:	bf00      	nop
      }
      break;
 80084ca:	e005      	b.n	80084d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fb4f 	bl	8008b72 <USBD_CtlError>
      break;
 80084d4:	e000      	b.n	80084d8 <USBD_StdEPReq+0x330>
      break;
 80084d6:	bf00      	nop
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	2b06      	cmp	r3, #6
 8008506:	f200 8128 	bhi.w	800875a <USBD_GetDescriptor+0x276>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBD_GetDescriptor+0x2c>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	0800852d 	.word	0x0800852d
 8008514:	08008545 	.word	0x08008545
 8008518:	08008585 	.word	0x08008585
 800851c:	0800875b 	.word	0x0800875b
 8008520:	0800875b 	.word	0x0800875b
 8008524:	080086fb 	.word	0x080086fb
 8008528:	08008727 	.word	0x08008727
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
      break;
 8008542:	e112      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7c1b      	ldrb	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10d      	bne.n	8008568 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f107 0208 	add.w	r2, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3301      	adds	r3, #1
 8008562:	2202      	movs	r2, #2
 8008564:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008566:	e100      	b.n	800876a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	f107 0208 	add.w	r2, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	2202      	movs	r2, #2
 8008580:	701a      	strb	r2, [r3, #0]
      break;
 8008582:	e0f2      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b05      	cmp	r3, #5
 800858c:	f200 80ac 	bhi.w	80086e8 <USBD_GetDescriptor+0x204>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0xb4>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085e5 	.word	0x080085e5
 80085a0:	08008619 	.word	0x08008619
 80085a4:	0800864d 	.word	0x0800864d
 80085a8:	08008681 	.word	0x08008681
 80085ac:	080086b5 	.word	0x080086b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d2:	e091      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 facb 	bl	8008b72 <USBD_CtlError>
            err++;
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	3301      	adds	r3, #1
 80085e0:	72fb      	strb	r3, [r7, #11]
          break;
 80085e2:	e089      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	7c12      	ldrb	r2, [r2, #16]
 80085fc:	f107 0108 	add.w	r1, r7, #8
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
 8008604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008606:	e077      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fab1 	bl	8008b72 <USBD_CtlError>
            err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
          break;
 8008616:	e06f      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	7c12      	ldrb	r2, [r2, #16]
 8008630:	f107 0108 	add.w	r1, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863a:	e05d      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa97 	bl	8008b72 <USBD_CtlError>
            err++;
 8008644:	7afb      	ldrb	r3, [r7, #11]
 8008646:	3301      	adds	r3, #1
 8008648:	72fb      	strb	r3, [r7, #11]
          break;
 800864a:	e055      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866e:	e043      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa7d 	bl	8008b72 <USBD_CtlError>
            err++;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	3301      	adds	r3, #1
 800867c:	72fb      	strb	r3, [r7, #11]
          break;
 800867e:	e03b      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7c12      	ldrb	r2, [r2, #16]
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a2:	e029      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa63 	bl	8008b72 <USBD_CtlError>
            err++;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	3301      	adds	r3, #1
 80086b0:	72fb      	strb	r3, [r7, #11]
          break;
 80086b2:	e021      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	7c12      	ldrb	r2, [r2, #16]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d6:	e00f      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa49 	bl	8008b72 <USBD_CtlError>
            err++;
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	3301      	adds	r3, #1
 80086e4:	72fb      	strb	r3, [r7, #11]
          break;
 80086e6:	e007      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa41 	bl	8008b72 <USBD_CtlError>
          err++;
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	3301      	adds	r3, #1
 80086f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086f6:	bf00      	nop
      }
      break;
 80086f8:	e037      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	f107 0208 	add.w	r2, r7, #8
 800870e:	4610      	mov	r0, r2
 8008710:	4798      	blx	r3
 8008712:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008714:	e029      	b.n	800876a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa2a 	bl	8008b72 <USBD_CtlError>
        err++;
 800871e:	7afb      	ldrb	r3, [r7, #11]
 8008720:	3301      	adds	r3, #1
 8008722:	72fb      	strb	r3, [r7, #11]
      break;
 8008724:	e021      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7c1b      	ldrb	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10d      	bne.n	800874a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	f107 0208 	add.w	r2, r7, #8
 800873a:	4610      	mov	r0, r2
 800873c:	4798      	blx	r3
 800873e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	2207      	movs	r2, #7
 8008746:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008748:	e00f      	b.n	800876a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fa10 	bl	8008b72 <USBD_CtlError>
        err++;
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	3301      	adds	r3, #1
 8008756:	72fb      	strb	r3, [r7, #11]
      break;
 8008758:	e007      	b.n	800876a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa08 	bl	8008b72 <USBD_CtlError>
      err++;
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	3301      	adds	r3, #1
 8008766:	72fb      	strb	r3, [r7, #11]
      break;
 8008768:	bf00      	nop
  }

  if (err != 0U)
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d11e      	bne.n	80087ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d016      	beq.n	80087a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008778:	893b      	ldrh	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	88da      	ldrh	r2, [r3, #6]
 8008782:	893b      	ldrh	r3, [r7, #8]
 8008784:	4293      	cmp	r3, r2
 8008786:	bf28      	it	cs
 8008788:	4613      	movcs	r3, r2
 800878a:	b29b      	uxth	r3, r3
 800878c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800878e:	893b      	ldrh	r3, [r7, #8]
 8008790:	461a      	mov	r2, r3
 8008792:	68f9      	ldr	r1, [r7, #12]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa5d 	bl	8008c54 <USBD_CtlSendData>
 800879a:	e009      	b.n	80087b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f9e7 	bl	8008b72 <USBD_CtlError>
 80087a4:	e004      	b.n	80087b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 faae 	bl	8008d08 <USBD_CtlSendStatus>
 80087ac:	e000      	b.n	80087b0 <USBD_GetDescriptor+0x2cc>
    return;
 80087ae:	bf00      	nop
  }
}
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	889b      	ldrh	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d131      	bne.n	800882e <USBD_SetAddress+0x76>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	88db      	ldrh	r3, [r3, #6]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d12d      	bne.n	800882e <USBD_SetAddress+0x76>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b7f      	cmp	r3, #127	; 0x7f
 80087d8:	d829      	bhi.n	800882e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d104      	bne.n	80087fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f9bc 	bl	8008b72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	e01d      	b.n	8008838 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7bfa      	ldrb	r2, [r7, #15]
 8008800:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 ff35 	bl	8009678 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa7a 	bl	8008d08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2202      	movs	r2, #2
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e009      	b.n	8008838 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882c:	e004      	b.n	8008838 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f99e 	bl	8008b72 <USBD_CtlError>
  }
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2da      	uxtb	r2, r3
 8008854:	4b4e      	ldr	r3, [pc, #312]	; (8008990 <USBD_SetConfig+0x150>)
 8008856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008858:	4b4d      	ldr	r3, [pc, #308]	; (8008990 <USBD_SetConfig+0x150>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d905      	bls.n	800886c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f985 	bl	8008b72 <USBD_CtlError>
    return USBD_FAIL;
 8008868:	2303      	movs	r3, #3
 800886a:	e08c      	b.n	8008986 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d002      	beq.n	800887e <USBD_SetConfig+0x3e>
 8008878:	2b03      	cmp	r3, #3
 800887a:	d029      	beq.n	80088d0 <USBD_SetConfig+0x90>
 800887c:	e075      	b.n	800896a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800887e:	4b44      	ldr	r3, [pc, #272]	; (8008990 <USBD_SetConfig+0x150>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d020      	beq.n	80088c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008886:	4b42      	ldr	r3, [pc, #264]	; (8008990 <USBD_SetConfig+0x150>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008890:	4b3f      	ldr	r3, [pc, #252]	; (8008990 <USBD_SetConfig+0x150>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fe ffe7 	bl	800786a <USBD_SetClassConfig>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d008      	beq.n	80088b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f962 	bl	8008b72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088b6:	e065      	b.n	8008984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fa25 	bl	8008d08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2203      	movs	r2, #3
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088c6:	e05d      	b.n	8008984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa1d 	bl	8008d08 <USBD_CtlSendStatus>
      break;
 80088ce:	e059      	b.n	8008984 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088d0:	4b2f      	ldr	r3, [pc, #188]	; (8008990 <USBD_SetConfig+0x150>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d112      	bne.n	80088fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088e0:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <USBD_SetConfig+0x150>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ea:	4b29      	ldr	r3, [pc, #164]	; (8008990 <USBD_SetConfig+0x150>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fe ffd6 	bl	80078a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa06 	bl	8008d08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088fc:	e042      	b.n	8008984 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <USBD_SetConfig+0x150>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d02a      	beq.n	8008962 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7fe ffc4 	bl	80078a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800891a:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <USBD_SetConfig+0x150>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008924:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <USBD_SetConfig+0x150>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7fe ff9d 	bl	800786a <USBD_SetClassConfig>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00f      	beq.n	800895a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f918 	bl	8008b72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fe ffa9 	bl	80078a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008958:	e014      	b.n	8008984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f9d4 	bl	8008d08 <USBD_CtlSendStatus>
      break;
 8008960:	e010      	b.n	8008984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9d0 	bl	8008d08 <USBD_CtlSendStatus>
      break;
 8008968:	e00c      	b.n	8008984 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f900 	bl	8008b72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <USBD_SetConfig+0x150>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe ff92 	bl	80078a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	73fb      	strb	r3, [r7, #15]
      break;
 8008982:	bf00      	nop
  }

  return ret;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000284 	.word	0x20000284

08008994 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d004      	beq.n	80089b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f8e2 	bl	8008b72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ae:	e023      	b.n	80089f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	dc02      	bgt.n	80089c2 <USBD_GetConfig+0x2e>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dc03      	bgt.n	80089c8 <USBD_GetConfig+0x34>
 80089c0:	e015      	b.n	80089ee <USBD_GetConfig+0x5a>
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d00b      	beq.n	80089de <USBD_GetConfig+0x4a>
 80089c6:	e012      	b.n	80089ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3308      	adds	r3, #8
 80089d2:	2201      	movs	r2, #1
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f93c 	bl	8008c54 <USBD_CtlSendData>
        break;
 80089dc:	e00c      	b.n	80089f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3304      	adds	r3, #4
 80089e2:	2201      	movs	r2, #1
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f934 	bl	8008c54 <USBD_CtlSendData>
        break;
 80089ec:	e004      	b.n	80089f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f8be 	bl	8008b72 <USBD_CtlError>
        break;
 80089f6:	bf00      	nop
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d81e      	bhi.n	8008a56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d004      	beq.n	8008a2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f8a5 	bl	8008b72 <USBD_CtlError>
        break;
 8008a28:	e01a      	b.n	8008a60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f043 0202 	orr.w	r2, r3, #2
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f900 	bl	8008c54 <USBD_CtlSendData>
      break;
 8008a54:	e004      	b.n	8008a60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f88a 	bl	8008b72 <USBD_CtlError>
      break;
 8008a5e:	bf00      	nop
  }
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d107      	bne.n	8008a8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f940 	bl	8008d08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a88:	e013      	b.n	8008ab2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d10b      	bne.n	8008aaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	889b      	ldrh	r3, [r3, #4]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f930 	bl	8008d08 <USBD_CtlSendStatus>
}
 8008aa8:	e003      	b.n	8008ab2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f860 	bl	8008b72 <USBD_CtlError>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d80b      	bhi.n	8008aea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d10c      	bne.n	8008af4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f910 	bl	8008d08 <USBD_CtlSendStatus>
      }
      break;
 8008ae8:	e004      	b.n	8008af4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f840 	bl	8008b72 <USBD_CtlError>
      break;
 8008af2:	e000      	b.n	8008af6 <USBD_ClrFeature+0x3c>
      break;
 8008af4:	bf00      	nop
  }
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	781a      	ldrb	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f7ff fa41 	bl	8007fb0 <SWAPBYTE>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461a      	mov	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff fa34 	bl	8007fb0 <SWAPBYTE>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fa27 	bl	8007fb0 <SWAPBYTE>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	80da      	strh	r2, [r3, #6]
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7c:	2180      	movs	r1, #128	; 0x80
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fd10 	bl	80095a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fd0c 	bl	80095a4 <USBD_LL_StallEP>
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d036      	beq.n	8008c18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bae:	6938      	ldr	r0, [r7, #16]
 8008bb0:	f000 f836 	bl	8008c20 <USBD_GetLen>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7812      	ldrb	r2, [r2, #0]
 8008bcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	2203      	movs	r2, #3
 8008bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	3301      	adds	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008be4:	e013      	b.n	8008c0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	613b      	str	r3, [r7, #16]
    idx++;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	4413      	add	r3, r2
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e7      	bne.n	8008be6 <USBD_GetString+0x52>
 8008c16:	e000      	b.n	8008c1a <USBD_GetString+0x86>
    return;
 8008c18:	bf00      	nop
  }
}
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c30:	e005      	b.n	8008c3e <USBD_GetLen+0x1e>
  {
    len++;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	3301      	adds	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f5      	bne.n	8008c32 <USBD_GetLen+0x12>
  }

  return len;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fd1b 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 fd0a 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2203      	movs	r2, #3
 8008cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fd0e 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 fcfd 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2204      	movs	r2, #4
 8008d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fcc9 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2205      	movs	r2, #5
 8008d3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2200      	movs	r2, #0
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fcd7 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4912      	ldr	r1, [pc, #72]	; (8008da4 <MX_USB_DEVICE_Init+0x50>)
 8008d5c:	4812      	ldr	r0, [pc, #72]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d5e:	f7fe fd07 	bl	8007770 <USBD_Init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d68:	f7f8 f840 	bl	8000dec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d6c:	490f      	ldr	r1, [pc, #60]	; (8008dac <MX_USB_DEVICE_Init+0x58>)
 8008d6e:	480e      	ldr	r0, [pc, #56]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d70:	f7fe fd2e 	bl	80077d0 <USBD_RegisterClass>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d7a:	f7f8 f837 	bl	8000dec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d7e:	490c      	ldr	r1, [pc, #48]	; (8008db0 <MX_USB_DEVICE_Init+0x5c>)
 8008d80:	4809      	ldr	r0, [pc, #36]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d82:	f7fe fc1f 	bl	80075c4 <USBD_CDC_RegisterInterface>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d8c:	f7f8 f82e 	bl	8000dec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d90:	4805      	ldr	r0, [pc, #20]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d92:	f7fe fd53 	bl	800783c <USBD_Start>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d9c:	f7f8 f826 	bl	8000dec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008da0:	bf00      	nop
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200000bc 	.word	0x200000bc
 8008da8:	20000288 	.word	0x20000288
 8008dac:	20000028 	.word	0x20000028
 8008db0:	200000a8 	.word	0x200000a8

08008db4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008db8:	2200      	movs	r2, #0
 8008dba:	4905      	ldr	r1, [pc, #20]	; (8008dd0 <CDC_Init_FS+0x1c>)
 8008dbc:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <CDC_Init_FS+0x20>)
 8008dbe:	f7fe fc1b 	bl	80075f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dc2:	4905      	ldr	r1, [pc, #20]	; (8008dd8 <CDC_Init_FS+0x24>)
 8008dc4:	4803      	ldr	r0, [pc, #12]	; (8008dd4 <CDC_Init_FS+0x20>)
 8008dc6:	f7fe fc39 	bl	800763c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20000d64 	.word	0x20000d64
 8008dd4:	20000288 	.word	0x20000288
 8008dd8:	20000564 	.word	0x20000564

08008ddc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008de0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b23      	cmp	r3, #35	; 0x23
 8008e00:	d84a      	bhi.n	8008e98 <CDC_Control_FS+0xac>
 8008e02:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <CDC_Control_FS+0x1c>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e99 	.word	0x08008e99
 8008e0c:	08008e99 	.word	0x08008e99
 8008e10:	08008e99 	.word	0x08008e99
 8008e14:	08008e99 	.word	0x08008e99
 8008e18:	08008e99 	.word	0x08008e99
 8008e1c:	08008e99 	.word	0x08008e99
 8008e20:	08008e99 	.word	0x08008e99
 8008e24:	08008e99 	.word	0x08008e99
 8008e28:	08008e99 	.word	0x08008e99
 8008e2c:	08008e99 	.word	0x08008e99
 8008e30:	08008e99 	.word	0x08008e99
 8008e34:	08008e99 	.word	0x08008e99
 8008e38:	08008e99 	.word	0x08008e99
 8008e3c:	08008e99 	.word	0x08008e99
 8008e40:	08008e99 	.word	0x08008e99
 8008e44:	08008e99 	.word	0x08008e99
 8008e48:	08008e99 	.word	0x08008e99
 8008e4c:	08008e99 	.word	0x08008e99
 8008e50:	08008e99 	.word	0x08008e99
 8008e54:	08008e99 	.word	0x08008e99
 8008e58:	08008e99 	.word	0x08008e99
 8008e5c:	08008e99 	.word	0x08008e99
 8008e60:	08008e99 	.word	0x08008e99
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008e99 	.word	0x08008e99
 8008e6c:	08008e99 	.word	0x08008e99
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008e99 	.word	0x08008e99
 8008e80:	08008e99 	.word	0x08008e99
 8008e84:	08008e99 	.word	0x08008e99
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008e99 	.word	0x08008e99
 8008e90:	08008e99 	.word	0x08008e99
 8008e94:	08008e99 	.word	0x08008e99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e98:	bf00      	nop
  }

  return (USBD_OK);
 8008e9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	4813      	ldr	r0, [pc, #76]	; (8008f04 <CDC_Receive_FS+0x5c>)
 8008eb6:	f7fe fbc1 	bl	800763c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008eba:	4812      	ldr	r0, [pc, #72]	; (8008f04 <CDC_Receive_FS+0x5c>)
 8008ebc:	f7fe fc22 	bl	8007704 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f81f 	bl	8008f0c <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b31      	cmp	r3, #49	; 0x31
 8008ed4:	d106      	bne.n	8008ee4 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008edc:	480a      	ldr	r0, [pc, #40]	; (8008f08 <CDC_Receive_FS+0x60>)
 8008ede:	f7f9 fb3f 	bl	8002560 <HAL_GPIO_WritePin>
 8008ee2:	e009      	b.n	8008ef8 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b30      	cmp	r3, #48	; 0x30
 8008eea:	d105      	bne.n	8008ef8 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008eec:	2200      	movs	r2, #0
 8008eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ef2:	4805      	ldr	r0, [pc, #20]	; (8008f08 <CDC_Receive_FS+0x60>)
 8008ef4:	f7f9 fb34 	bl	8002560 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8008ef8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000288 	.word	0x20000288
 8008f08:	40020c00 	.word	0x40020c00

08008f0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <CDC_Transmit_FS+0x48>)
 8008f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e00b      	b.n	8008f4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f32:	887b      	ldrh	r3, [r7, #2]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	4806      	ldr	r0, [pc, #24]	; (8008f54 <CDC_Transmit_FS+0x48>)
 8008f3a:	f7fe fb5d 	bl	80075f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f3e:	4805      	ldr	r0, [pc, #20]	; (8008f54 <CDC_Transmit_FS+0x48>)
 8008f40:	f7fe fb9a 	bl	8007678 <USBD_CDC_TransmitPacket>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000288 	.word	0x20000288

08008f58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2212      	movs	r2, #18
 8008f8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f8e:	4b03      	ldr	r3, [pc, #12]	; (8008f9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	200000d8 	.word	0x200000d8

08008fa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fb2:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	200000ec 	.word	0x200000ec

08008fc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d105      	bne.n	8008fe2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4907      	ldr	r1, [pc, #28]	; (8008ff8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fda:	4808      	ldr	r0, [pc, #32]	; (8008ffc <USBD_FS_ProductStrDescriptor+0x38>)
 8008fdc:	f7ff fdda 	bl	8008b94 <USBD_GetString>
 8008fe0:	e004      	b.n	8008fec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4904      	ldr	r1, [pc, #16]	; (8008ff8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fe6:	4805      	ldr	r0, [pc, #20]	; (8008ffc <USBD_FS_ProductStrDescriptor+0x38>)
 8008fe8:	f7ff fdd4 	bl	8008b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20001564 	.word	0x20001564
 8008ffc:	0800a418 	.word	0x0800a418

08009000 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	6039      	str	r1, [r7, #0]
 800900a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	4904      	ldr	r1, [pc, #16]	; (8009020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009010:	4804      	ldr	r0, [pc, #16]	; (8009024 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009012:	f7ff fdbf 	bl	8008b94 <USBD_GetString>
  return USBD_StrDesc;
 8009016:	4b02      	ldr	r3, [pc, #8]	; (8009020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20001564 	.word	0x20001564
 8009024:	0800a430 	.word	0x0800a430

08009028 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	221a      	movs	r2, #26
 8009038:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800903a:	f000 f843 	bl	80090c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800903e:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200000f0 	.word	0x200000f0

0800904c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d105      	bne.n	800906a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	4907      	ldr	r1, [pc, #28]	; (8009080 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009062:	4808      	ldr	r0, [pc, #32]	; (8009084 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009064:	f7ff fd96 	bl	8008b94 <USBD_GetString>
 8009068:	e004      	b.n	8009074 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4904      	ldr	r1, [pc, #16]	; (8009080 <USBD_FS_ConfigStrDescriptor+0x34>)
 800906e:	4805      	ldr	r0, [pc, #20]	; (8009084 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009070:	f7ff fd90 	bl	8008b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20001564 	.word	0x20001564
 8009084:	0800a444 	.word	0x0800a444

08009088 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d105      	bne.n	80090a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4907      	ldr	r1, [pc, #28]	; (80090bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800909e:	4808      	ldr	r0, [pc, #32]	; (80090c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090a0:	f7ff fd78 	bl	8008b94 <USBD_GetString>
 80090a4:	e004      	b.n	80090b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4904      	ldr	r1, [pc, #16]	; (80090bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090aa:	4805      	ldr	r0, [pc, #20]	; (80090c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090ac:	f7ff fd72 	bl	8008b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b0:	4b02      	ldr	r3, [pc, #8]	; (80090bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20001564 	.word	0x20001564
 80090c0:	0800a450 	.word	0x0800a450

080090c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090ca:	4b0f      	ldr	r3, [pc, #60]	; (8009108 <Get_SerialNum+0x44>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090d0:	4b0e      	ldr	r3, [pc, #56]	; (800910c <Get_SerialNum+0x48>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090d6:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <Get_SerialNum+0x4c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4413      	add	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090ea:	2208      	movs	r2, #8
 80090ec:	4909      	ldr	r1, [pc, #36]	; (8009114 <Get_SerialNum+0x50>)
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 f814 	bl	800911c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090f4:	2204      	movs	r2, #4
 80090f6:	4908      	ldr	r1, [pc, #32]	; (8009118 <Get_SerialNum+0x54>)
 80090f8:	68b8      	ldr	r0, [r7, #8]
 80090fa:	f000 f80f 	bl	800911c <IntToUnicode>
  }
}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	1fff7a10 	.word	0x1fff7a10
 800910c:	1fff7a14 	.word	0x1fff7a14
 8009110:	1fff7a18 	.word	0x1fff7a18
 8009114:	200000f2 	.word	0x200000f2
 8009118:	20000102 	.word	0x20000102

0800911c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800912e:	2300      	movs	r3, #0
 8009130:	75fb      	strb	r3, [r7, #23]
 8009132:	e027      	b.n	8009184 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	0f1b      	lsrs	r3, r3, #28
 8009138:	2b09      	cmp	r3, #9
 800913a:	d80b      	bhi.n	8009154 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	0f1b      	lsrs	r3, r3, #28
 8009140:	b2da      	uxtb	r2, r3
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	4619      	mov	r1, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	440b      	add	r3, r1
 800914c:	3230      	adds	r2, #48	; 0x30
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	e00a      	b.n	800916a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	0f1b      	lsrs	r3, r3, #28
 8009158:	b2da      	uxtb	r2, r3
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	4619      	mov	r1, r3
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	440b      	add	r3, r1
 8009164:	3237      	adds	r2, #55	; 0x37
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	3301      	adds	r3, #1
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	4413      	add	r3, r2
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	3301      	adds	r3, #1
 8009182:	75fb      	strb	r3, [r7, #23]
 8009184:	7dfa      	ldrb	r2, [r7, #23]
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	429a      	cmp	r2, r3
 800918a:	d3d3      	bcc.n	8009134 <IntToUnicode+0x18>
  }
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	371c      	adds	r7, #28
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
	...

0800919c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	; 0x28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091a4:	f107 0314 	add.w	r3, r7, #20
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	605a      	str	r2, [r3, #4]
 80091ae:	609a      	str	r2, [r3, #8]
 80091b0:	60da      	str	r2, [r3, #12]
 80091b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091bc:	d14b      	bne.n	8009256 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	4b27      	ldr	r3, [pc, #156]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	4a26      	ldr	r2, [pc, #152]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	6313      	str	r3, [r2, #48]	; 0x30
 80091ce:	4b24      	ldr	r3, [pc, #144]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	613b      	str	r3, [r7, #16]
 80091d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80091da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e0:	2302      	movs	r3, #2
 80091e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091e8:	2300      	movs	r3, #0
 80091ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091ec:	230a      	movs	r3, #10
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4619      	mov	r1, r3
 80091f6:	481b      	ldr	r0, [pc, #108]	; (8009264 <HAL_PCD_MspInit+0xc8>)
 80091f8:	f7f8 fffe 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80091fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009202:	2302      	movs	r3, #2
 8009204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009206:	2301      	movs	r3, #1
 8009208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800920a:	2300      	movs	r3, #0
 800920c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800920e:	230a      	movs	r3, #10
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009212:	f107 0314 	add.w	r3, r7, #20
 8009216:	4619      	mov	r1, r3
 8009218:	4812      	ldr	r0, [pc, #72]	; (8009264 <HAL_PCD_MspInit+0xc8>)
 800921a:	f7f8 ffed 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800921e:	4b10      	ldr	r3, [pc, #64]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	4a0f      	ldr	r2, [pc, #60]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 8009224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009228:	6353      	str	r3, [r2, #52]	; 0x34
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 8009230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009232:	4a0b      	ldr	r2, [pc, #44]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 8009234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009238:	6453      	str	r3, [r2, #68]	; 0x44
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <HAL_PCD_MspInit+0xc4>)
 800923c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	2043      	movs	r0, #67	; 0x43
 800924c:	f7f8 ff0b 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009250:	2043      	movs	r0, #67	; 0x43
 8009252:	f7f8 ff24 	bl	800209e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009256:	bf00      	nop
 8009258:	3728      	adds	r7, #40	; 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40023800 	.word	0x40023800
 8009264:	40020000 	.word	0x40020000

08009268 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fe fb29 	bl	80078d6 <USBD_LL_SetupStage>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800929e:	78fa      	ldrb	r2, [r7, #3]
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	4613      	mov	r3, r2
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	440b      	add	r3, r1
 80092ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	4619      	mov	r1, r3
 80092b6:	f7fe fb63 	bl	8007980 <USBD_LL_DataOutStage>
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092d4:	78fa      	ldrb	r2, [r7, #3]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	334c      	adds	r3, #76	; 0x4c
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7fe fbfc 	bl	8007ae6 <USBD_LL_DataInStage>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fd30 	bl	8007d6a <USBD_LL_SOF>
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800931a:	2301      	movs	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
 800932a:	e008      	b.n	800933e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d102      	bne.n	800933a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009334:	2301      	movs	r3, #1
 8009336:	73fb      	strb	r3, [r7, #15]
 8009338:	e001      	b.n	800933e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800933a:	f7f7 fd57 	bl	8000dec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009344:	7bfa      	ldrb	r2, [r7, #15]
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fcd0 	bl	8007cee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fc78 	bl	8007c4a <USBD_LL_Reset>
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fccb 	bl	8007d0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <HAL_PCD_SuspendCallback+0x48>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	4a03      	ldr	r2, [pc, #12]	; (80093ac <HAL_PCD_SuspendCallback+0x48>)
 800939e:	f043 0306 	orr.w	r3, r3, #6
 80093a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	e000ed00 	.word	0xe000ed00

080093b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fcbb 	bl	8007d3a <USBD_LL_Resume>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fd13 	bl	8007e0e <USBD_LL_IsoOUTIncomplete>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fccf 	bl	8007daa <USBD_LL_IsoINIncomplete>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fd25 	bl	8007e72 <USBD_LL_DevConnected>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fd22 	bl	8007e88 <USBD_LL_DevDisconnected>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d13c      	bne.n	80094d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800945c:	4a20      	ldr	r2, [pc, #128]	; (80094e0 <USBD_LL_Init+0x94>)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1e      	ldr	r2, [pc, #120]	; (80094e0 <USBD_LL_Init+0x94>)
 8009468:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800946c:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <USBD_LL_Init+0x94>)
 800946e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009474:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <USBD_LL_Init+0x94>)
 8009476:	2204      	movs	r2, #4
 8009478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800947a:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <USBD_LL_Init+0x94>)
 800947c:	2202      	movs	r2, #2
 800947e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009480:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <USBD_LL_Init+0x94>)
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009486:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <USBD_LL_Init+0x94>)
 8009488:	2202      	movs	r2, #2
 800948a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800948c:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <USBD_LL_Init+0x94>)
 8009494:	2200      	movs	r2, #0
 8009496:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009498:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <USBD_LL_Init+0x94>)
 800949a:	2200      	movs	r2, #0
 800949c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094aa:	480d      	ldr	r0, [pc, #52]	; (80094e0 <USBD_LL_Init+0x94>)
 80094ac:	f7f9 f871 	bl	8002592 <HAL_PCD_Init>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094b6:	f7f7 fc99 	bl	8000dec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094ba:	2180      	movs	r1, #128	; 0x80
 80094bc:	4808      	ldr	r0, [pc, #32]	; (80094e0 <USBD_LL_Init+0x94>)
 80094be:	f7fa fac8 	bl	8003a52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	2100      	movs	r1, #0
 80094c6:	4806      	ldr	r0, [pc, #24]	; (80094e0 <USBD_LL_Init+0x94>)
 80094c8:	f7fa fa7c 	bl	80039c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094cc:	2280      	movs	r2, #128	; 0x80
 80094ce:	2101      	movs	r1, #1
 80094d0:	4803      	ldr	r0, [pc, #12]	; (80094e0 <USBD_LL_Init+0x94>)
 80094d2:	f7fa fa77 	bl	80039c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20001764 	.word	0x20001764

080094e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f9 f966 	bl	80027cc <HAL_PCD_Start>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f942 	bl	8009790 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	4608      	mov	r0, r1
 8009524:	4611      	mov	r1, r2
 8009526:	461a      	mov	r2, r3
 8009528:	4603      	mov	r3, r0
 800952a:	70fb      	strb	r3, [r7, #3]
 800952c:	460b      	mov	r3, r1
 800952e:	70bb      	strb	r3, [r7, #2]
 8009530:	4613      	mov	r3, r2
 8009532:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009542:	78bb      	ldrb	r3, [r7, #2]
 8009544:	883a      	ldrh	r2, [r7, #0]
 8009546:	78f9      	ldrb	r1, [r7, #3]
 8009548:	f7f9 fe37 	bl	80031ba <HAL_PCD_EP_Open>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f91c 	bl	8009790 <USBD_Get_USB_Status>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955c:	7bbb      	ldrb	r3, [r7, #14]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f7f9 fe80 	bl	800328a <HAL_PCD_EP_Close>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f8fd 	bl	8009790 <USBD_Get_USB_Status>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959a:	7bbb      	ldrb	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7f9 ff58 	bl	8003478 <HAL_PCD_EP_SetStall>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f8de 	bl	8009790 <USBD_Get_USB_Status>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7f9 ff9d 	bl	8003540 <HAL_PCD_EP_ClrStall>
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f8bf 	bl	8009790 <USBD_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009616:	7bbb      	ldrb	r3, [r7, #14]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009632:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0b      	bge.n	8009654 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	333e      	adds	r3, #62	; 0x3e
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	e00b      	b.n	800966c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4613      	mov	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800966a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7f9 fd6a 	bl	8003170 <HAL_PCD_SetAddress>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f874 	bl	8009790 <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	460b      	mov	r3, r1
 80096c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096d4:	7af9      	ldrb	r1, [r7, #11]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	f7f9 fe83 	bl	80033e4 <HAL_PCD_EP_Transmit>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f853 	bl	8009790 <USBD_Get_USB_Status>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	460b      	mov	r3, r1
 8009706:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009716:	7af9      	ldrb	r1, [r7, #11]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	f7f9 fdff 	bl	800331e <HAL_PCD_EP_Receive>
 8009720:	4603      	mov	r3, r0
 8009722:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f832 	bl	8009790 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009730:	7dbb      	ldrb	r3, [r7, #22]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	4611      	mov	r1, r2
 8009750:	4618      	mov	r0, r3
 8009752:	f7f9 fe2f 	bl	80033b4 <HAL_PCD_EP_GetRxCount>
 8009756:	4603      	mov	r3, r0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009768:	4b03      	ldr	r3, [pc, #12]	; (8009778 <USBD_static_malloc+0x18>)
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	20001c70 	.word	0x20001c70

0800977c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d817      	bhi.n	80097d4 <USBD_Get_USB_Status+0x44>
 80097a4:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <USBD_Get_USB_Status+0x1c>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097c3 	.word	0x080097c3
 80097b4:	080097c9 	.word	0x080097c9
 80097b8:	080097cf 	.word	0x080097cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
    break;
 80097c0:	e00b      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
    break;
 80097c6:	e008      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097c8:	2301      	movs	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e005      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e002      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	bf00      	nop
  }
  return usb_status;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <atoi>:
 80097e8:	220a      	movs	r2, #10
 80097ea:	2100      	movs	r1, #0
 80097ec:	f000 b882 	b.w	80098f4 <strtol>

080097f0 <_strtol_l.constprop.0>:
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f6:	d001      	beq.n	80097fc <_strtol_l.constprop.0+0xc>
 80097f8:	2b24      	cmp	r3, #36	; 0x24
 80097fa:	d906      	bls.n	800980a <_strtol_l.constprop.0+0x1a>
 80097fc:	f000 f8c2 	bl	8009984 <__errno>
 8009800:	2316      	movs	r3, #22
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	2000      	movs	r0, #0
 8009806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098f0 <_strtol_l.constprop.0+0x100>
 800980e:	460d      	mov	r5, r1
 8009810:	462e      	mov	r6, r5
 8009812:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009816:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800981a:	f017 0708 	ands.w	r7, r7, #8
 800981e:	d1f7      	bne.n	8009810 <_strtol_l.constprop.0+0x20>
 8009820:	2c2d      	cmp	r4, #45	; 0x2d
 8009822:	d132      	bne.n	800988a <_strtol_l.constprop.0+0x9a>
 8009824:	782c      	ldrb	r4, [r5, #0]
 8009826:	2701      	movs	r7, #1
 8009828:	1cb5      	adds	r5, r6, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d05b      	beq.n	80098e6 <_strtol_l.constprop.0+0xf6>
 800982e:	2b10      	cmp	r3, #16
 8009830:	d109      	bne.n	8009846 <_strtol_l.constprop.0+0x56>
 8009832:	2c30      	cmp	r4, #48	; 0x30
 8009834:	d107      	bne.n	8009846 <_strtol_l.constprop.0+0x56>
 8009836:	782c      	ldrb	r4, [r5, #0]
 8009838:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800983c:	2c58      	cmp	r4, #88	; 0x58
 800983e:	d14d      	bne.n	80098dc <_strtol_l.constprop.0+0xec>
 8009840:	786c      	ldrb	r4, [r5, #1]
 8009842:	2310      	movs	r3, #16
 8009844:	3502      	adds	r5, #2
 8009846:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800984a:	f108 38ff 	add.w	r8, r8, #4294967295
 800984e:	f04f 0e00 	mov.w	lr, #0
 8009852:	fbb8 f9f3 	udiv	r9, r8, r3
 8009856:	4676      	mov	r6, lr
 8009858:	fb03 8a19 	mls	sl, r3, r9, r8
 800985c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009860:	f1bc 0f09 	cmp.w	ip, #9
 8009864:	d816      	bhi.n	8009894 <_strtol_l.constprop.0+0xa4>
 8009866:	4664      	mov	r4, ip
 8009868:	42a3      	cmp	r3, r4
 800986a:	dd24      	ble.n	80098b6 <_strtol_l.constprop.0+0xc6>
 800986c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009870:	d008      	beq.n	8009884 <_strtol_l.constprop.0+0x94>
 8009872:	45b1      	cmp	r9, r6
 8009874:	d31c      	bcc.n	80098b0 <_strtol_l.constprop.0+0xc0>
 8009876:	d101      	bne.n	800987c <_strtol_l.constprop.0+0x8c>
 8009878:	45a2      	cmp	sl, r4
 800987a:	db19      	blt.n	80098b0 <_strtol_l.constprop.0+0xc0>
 800987c:	fb06 4603 	mla	r6, r6, r3, r4
 8009880:	f04f 0e01 	mov.w	lr, #1
 8009884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009888:	e7e8      	b.n	800985c <_strtol_l.constprop.0+0x6c>
 800988a:	2c2b      	cmp	r4, #43	; 0x2b
 800988c:	bf04      	itt	eq
 800988e:	782c      	ldrbeq	r4, [r5, #0]
 8009890:	1cb5      	addeq	r5, r6, #2
 8009892:	e7ca      	b.n	800982a <_strtol_l.constprop.0+0x3a>
 8009894:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009898:	f1bc 0f19 	cmp.w	ip, #25
 800989c:	d801      	bhi.n	80098a2 <_strtol_l.constprop.0+0xb2>
 800989e:	3c37      	subs	r4, #55	; 0x37
 80098a0:	e7e2      	b.n	8009868 <_strtol_l.constprop.0+0x78>
 80098a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098a6:	f1bc 0f19 	cmp.w	ip, #25
 80098aa:	d804      	bhi.n	80098b6 <_strtol_l.constprop.0+0xc6>
 80098ac:	3c57      	subs	r4, #87	; 0x57
 80098ae:	e7db      	b.n	8009868 <_strtol_l.constprop.0+0x78>
 80098b0:	f04f 3eff 	mov.w	lr, #4294967295
 80098b4:	e7e6      	b.n	8009884 <_strtol_l.constprop.0+0x94>
 80098b6:	f1be 3fff 	cmp.w	lr, #4294967295
 80098ba:	d105      	bne.n	80098c8 <_strtol_l.constprop.0+0xd8>
 80098bc:	2322      	movs	r3, #34	; 0x22
 80098be:	6003      	str	r3, [r0, #0]
 80098c0:	4646      	mov	r6, r8
 80098c2:	b942      	cbnz	r2, 80098d6 <_strtol_l.constprop.0+0xe6>
 80098c4:	4630      	mov	r0, r6
 80098c6:	e79e      	b.n	8009806 <_strtol_l.constprop.0+0x16>
 80098c8:	b107      	cbz	r7, 80098cc <_strtol_l.constprop.0+0xdc>
 80098ca:	4276      	negs	r6, r6
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d0f9      	beq.n	80098c4 <_strtol_l.constprop.0+0xd4>
 80098d0:	f1be 0f00 	cmp.w	lr, #0
 80098d4:	d000      	beq.n	80098d8 <_strtol_l.constprop.0+0xe8>
 80098d6:	1e69      	subs	r1, r5, #1
 80098d8:	6011      	str	r1, [r2, #0]
 80098da:	e7f3      	b.n	80098c4 <_strtol_l.constprop.0+0xd4>
 80098dc:	2430      	movs	r4, #48	; 0x30
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1b1      	bne.n	8009846 <_strtol_l.constprop.0+0x56>
 80098e2:	2308      	movs	r3, #8
 80098e4:	e7af      	b.n	8009846 <_strtol_l.constprop.0+0x56>
 80098e6:	2c30      	cmp	r4, #48	; 0x30
 80098e8:	d0a5      	beq.n	8009836 <_strtol_l.constprop.0+0x46>
 80098ea:	230a      	movs	r3, #10
 80098ec:	e7ab      	b.n	8009846 <_strtol_l.constprop.0+0x56>
 80098ee:	bf00      	nop
 80098f0:	0800a479 	.word	0x0800a479

080098f4 <strtol>:
 80098f4:	4613      	mov	r3, r2
 80098f6:	460a      	mov	r2, r1
 80098f8:	4601      	mov	r1, r0
 80098fa:	4802      	ldr	r0, [pc, #8]	; (8009904 <strtol+0x10>)
 80098fc:	6800      	ldr	r0, [r0, #0]
 80098fe:	f7ff bf77 	b.w	80097f0 <_strtol_l.constprop.0>
 8009902:	bf00      	nop
 8009904:	20000158 	.word	0x20000158

08009908 <siprintf>:
 8009908:	b40e      	push	{r1, r2, r3}
 800990a:	b500      	push	{lr}
 800990c:	b09c      	sub	sp, #112	; 0x70
 800990e:	ab1d      	add	r3, sp, #116	; 0x74
 8009910:	9002      	str	r0, [sp, #8]
 8009912:	9006      	str	r0, [sp, #24]
 8009914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009918:	4809      	ldr	r0, [pc, #36]	; (8009940 <siprintf+0x38>)
 800991a:	9107      	str	r1, [sp, #28]
 800991c:	9104      	str	r1, [sp, #16]
 800991e:	4909      	ldr	r1, [pc, #36]	; (8009944 <siprintf+0x3c>)
 8009920:	f853 2b04 	ldr.w	r2, [r3], #4
 8009924:	9105      	str	r1, [sp, #20]
 8009926:	6800      	ldr	r0, [r0, #0]
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	a902      	add	r1, sp, #8
 800992c:	f000 f9b6 	bl	8009c9c <_svfiprintf_r>
 8009930:	9b02      	ldr	r3, [sp, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	b01c      	add	sp, #112	; 0x70
 8009938:	f85d eb04 	ldr.w	lr, [sp], #4
 800993c:	b003      	add	sp, #12
 800993e:	4770      	bx	lr
 8009940:	20000158 	.word	0x20000158
 8009944:	ffff0208 	.word	0xffff0208

08009948 <memset>:
 8009948:	4402      	add	r2, r0
 800994a:	4603      	mov	r3, r0
 800994c:	4293      	cmp	r3, r2
 800994e:	d100      	bne.n	8009952 <memset+0xa>
 8009950:	4770      	bx	lr
 8009952:	f803 1b01 	strb.w	r1, [r3], #1
 8009956:	e7f9      	b.n	800994c <memset+0x4>

08009958 <strstr>:
 8009958:	780a      	ldrb	r2, [r1, #0]
 800995a:	b570      	push	{r4, r5, r6, lr}
 800995c:	b96a      	cbnz	r2, 800997a <strstr+0x22>
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	429a      	cmp	r2, r3
 8009962:	d109      	bne.n	8009978 <strstr+0x20>
 8009964:	460c      	mov	r4, r1
 8009966:	4605      	mov	r5, r0
 8009968:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0f6      	beq.n	800995e <strstr+0x6>
 8009970:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009974:	429e      	cmp	r6, r3
 8009976:	d0f7      	beq.n	8009968 <strstr+0x10>
 8009978:	3001      	adds	r0, #1
 800997a:	7803      	ldrb	r3, [r0, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1ef      	bne.n	8009960 <strstr+0x8>
 8009980:	4618      	mov	r0, r3
 8009982:	e7ec      	b.n	800995e <strstr+0x6>

08009984 <__errno>:
 8009984:	4b01      	ldr	r3, [pc, #4]	; (800998c <__errno+0x8>)
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	20000158 	.word	0x20000158

08009990 <__libc_init_array>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4d0d      	ldr	r5, [pc, #52]	; (80099c8 <__libc_init_array+0x38>)
 8009994:	4c0d      	ldr	r4, [pc, #52]	; (80099cc <__libc_init_array+0x3c>)
 8009996:	1b64      	subs	r4, r4, r5
 8009998:	10a4      	asrs	r4, r4, #2
 800999a:	2600      	movs	r6, #0
 800999c:	42a6      	cmp	r6, r4
 800999e:	d109      	bne.n	80099b4 <__libc_init_array+0x24>
 80099a0:	4d0b      	ldr	r5, [pc, #44]	; (80099d0 <__libc_init_array+0x40>)
 80099a2:	4c0c      	ldr	r4, [pc, #48]	; (80099d4 <__libc_init_array+0x44>)
 80099a4:	f000 fc6a 	bl	800a27c <_init>
 80099a8:	1b64      	subs	r4, r4, r5
 80099aa:	10a4      	asrs	r4, r4, #2
 80099ac:	2600      	movs	r6, #0
 80099ae:	42a6      	cmp	r6, r4
 80099b0:	d105      	bne.n	80099be <__libc_init_array+0x2e>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b8:	4798      	blx	r3
 80099ba:	3601      	adds	r6, #1
 80099bc:	e7ee      	b.n	800999c <__libc_init_array+0xc>
 80099be:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c2:	4798      	blx	r3
 80099c4:	3601      	adds	r6, #1
 80099c6:	e7f2      	b.n	80099ae <__libc_init_array+0x1e>
 80099c8:	0800a5b4 	.word	0x0800a5b4
 80099cc:	0800a5b4 	.word	0x0800a5b4
 80099d0:	0800a5b4 	.word	0x0800a5b4
 80099d4:	0800a5b8 	.word	0x0800a5b8

080099d8 <__retarget_lock_acquire_recursive>:
 80099d8:	4770      	bx	lr

080099da <__retarget_lock_release_recursive>:
 80099da:	4770      	bx	lr

080099dc <memcpy>:
 80099dc:	440a      	add	r2, r1
 80099de:	4291      	cmp	r1, r2
 80099e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e4:	d100      	bne.n	80099e8 <memcpy+0xc>
 80099e6:	4770      	bx	lr
 80099e8:	b510      	push	{r4, lr}
 80099ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f2:	4291      	cmp	r1, r2
 80099f4:	d1f9      	bne.n	80099ea <memcpy+0xe>
 80099f6:	bd10      	pop	{r4, pc}

080099f8 <_free_r>:
 80099f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fa:	2900      	cmp	r1, #0
 80099fc:	d044      	beq.n	8009a88 <_free_r+0x90>
 80099fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a02:	9001      	str	r0, [sp, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f1a1 0404 	sub.w	r4, r1, #4
 8009a0a:	bfb8      	it	lt
 8009a0c:	18e4      	addlt	r4, r4, r3
 8009a0e:	f000 f8df 	bl	8009bd0 <__malloc_lock>
 8009a12:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <_free_r+0x94>)
 8009a14:	9801      	ldr	r0, [sp, #4]
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	b933      	cbnz	r3, 8009a28 <_free_r+0x30>
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	6014      	str	r4, [r2, #0]
 8009a1e:	b003      	add	sp, #12
 8009a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a24:	f000 b8da 	b.w	8009bdc <__malloc_unlock>
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	d908      	bls.n	8009a3e <_free_r+0x46>
 8009a2c:	6825      	ldr	r5, [r4, #0]
 8009a2e:	1961      	adds	r1, r4, r5
 8009a30:	428b      	cmp	r3, r1
 8009a32:	bf01      	itttt	eq
 8009a34:	6819      	ldreq	r1, [r3, #0]
 8009a36:	685b      	ldreq	r3, [r3, #4]
 8009a38:	1949      	addeq	r1, r1, r5
 8009a3a:	6021      	streq	r1, [r4, #0]
 8009a3c:	e7ed      	b.n	8009a1a <_free_r+0x22>
 8009a3e:	461a      	mov	r2, r3
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	b10b      	cbz	r3, 8009a48 <_free_r+0x50>
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	d9fa      	bls.n	8009a3e <_free_r+0x46>
 8009a48:	6811      	ldr	r1, [r2, #0]
 8009a4a:	1855      	adds	r5, r2, r1
 8009a4c:	42a5      	cmp	r5, r4
 8009a4e:	d10b      	bne.n	8009a68 <_free_r+0x70>
 8009a50:	6824      	ldr	r4, [r4, #0]
 8009a52:	4421      	add	r1, r4
 8009a54:	1854      	adds	r4, r2, r1
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	6011      	str	r1, [r2, #0]
 8009a5a:	d1e0      	bne.n	8009a1e <_free_r+0x26>
 8009a5c:	681c      	ldr	r4, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	6053      	str	r3, [r2, #4]
 8009a62:	440c      	add	r4, r1
 8009a64:	6014      	str	r4, [r2, #0]
 8009a66:	e7da      	b.n	8009a1e <_free_r+0x26>
 8009a68:	d902      	bls.n	8009a70 <_free_r+0x78>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	e7d6      	b.n	8009a1e <_free_r+0x26>
 8009a70:	6825      	ldr	r5, [r4, #0]
 8009a72:	1961      	adds	r1, r4, r5
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf04      	itt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	bf04      	itt	eq
 8009a80:	1949      	addeq	r1, r1, r5
 8009a82:	6021      	streq	r1, [r4, #0]
 8009a84:	6054      	str	r4, [r2, #4]
 8009a86:	e7ca      	b.n	8009a1e <_free_r+0x26>
 8009a88:	b003      	add	sp, #12
 8009a8a:	bd30      	pop	{r4, r5, pc}
 8009a8c:	20001fd0 	.word	0x20001fd0

08009a90 <sbrk_aligned>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	4e0e      	ldr	r6, [pc, #56]	; (8009acc <sbrk_aligned+0x3c>)
 8009a94:	460c      	mov	r4, r1
 8009a96:	6831      	ldr	r1, [r6, #0]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b911      	cbnz	r1, 8009aa2 <sbrk_aligned+0x12>
 8009a9c:	f000 fba6 	bl	800a1ec <_sbrk_r>
 8009aa0:	6030      	str	r0, [r6, #0]
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 fba1 	bl	800a1ec <_sbrk_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d00a      	beq.n	8009ac4 <sbrk_aligned+0x34>
 8009aae:	1cc4      	adds	r4, r0, #3
 8009ab0:	f024 0403 	bic.w	r4, r4, #3
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	d007      	beq.n	8009ac8 <sbrk_aligned+0x38>
 8009ab8:	1a21      	subs	r1, r4, r0
 8009aba:	4628      	mov	r0, r5
 8009abc:	f000 fb96 	bl	800a1ec <_sbrk_r>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d101      	bne.n	8009ac8 <sbrk_aligned+0x38>
 8009ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac8:	4620      	mov	r0, r4
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	20001fd4 	.word	0x20001fd4

08009ad0 <_malloc_r>:
 8009ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad4:	1ccd      	adds	r5, r1, #3
 8009ad6:	f025 0503 	bic.w	r5, r5, #3
 8009ada:	3508      	adds	r5, #8
 8009adc:	2d0c      	cmp	r5, #12
 8009ade:	bf38      	it	cc
 8009ae0:	250c      	movcc	r5, #12
 8009ae2:	2d00      	cmp	r5, #0
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	db01      	blt.n	8009aec <_malloc_r+0x1c>
 8009ae8:	42a9      	cmp	r1, r5
 8009aea:	d905      	bls.n	8009af8 <_malloc_r+0x28>
 8009aec:	230c      	movs	r3, #12
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	2600      	movs	r6, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bcc <_malloc_r+0xfc>
 8009afc:	f000 f868 	bl	8009bd0 <__malloc_lock>
 8009b00:	f8d8 3000 	ldr.w	r3, [r8]
 8009b04:	461c      	mov	r4, r3
 8009b06:	bb5c      	cbnz	r4, 8009b60 <_malloc_r+0x90>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff ffc0 	bl	8009a90 <sbrk_aligned>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	4604      	mov	r4, r0
 8009b14:	d155      	bne.n	8009bc2 <_malloc_r+0xf2>
 8009b16:	f8d8 4000 	ldr.w	r4, [r8]
 8009b1a:	4626      	mov	r6, r4
 8009b1c:	2e00      	cmp	r6, #0
 8009b1e:	d145      	bne.n	8009bac <_malloc_r+0xdc>
 8009b20:	2c00      	cmp	r4, #0
 8009b22:	d048      	beq.n	8009bb6 <_malloc_r+0xe6>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	4631      	mov	r1, r6
 8009b28:	4638      	mov	r0, r7
 8009b2a:	eb04 0903 	add.w	r9, r4, r3
 8009b2e:	f000 fb5d 	bl	800a1ec <_sbrk_r>
 8009b32:	4581      	cmp	r9, r0
 8009b34:	d13f      	bne.n	8009bb6 <_malloc_r+0xe6>
 8009b36:	6821      	ldr	r1, [r4, #0]
 8009b38:	1a6d      	subs	r5, r5, r1
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ffa7 	bl	8009a90 <sbrk_aligned>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d037      	beq.n	8009bb6 <_malloc_r+0xe6>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	442b      	add	r3, r5
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d038      	beq.n	8009bc6 <_malloc_r+0xf6>
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	42a2      	cmp	r2, r4
 8009b58:	d12b      	bne.n	8009bb2 <_malloc_r+0xe2>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	e00f      	b.n	8009b80 <_malloc_r+0xb0>
 8009b60:	6822      	ldr	r2, [r4, #0]
 8009b62:	1b52      	subs	r2, r2, r5
 8009b64:	d41f      	bmi.n	8009ba6 <_malloc_r+0xd6>
 8009b66:	2a0b      	cmp	r2, #11
 8009b68:	d917      	bls.n	8009b9a <_malloc_r+0xca>
 8009b6a:	1961      	adds	r1, r4, r5
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	6025      	str	r5, [r4, #0]
 8009b70:	bf18      	it	ne
 8009b72:	6059      	strne	r1, [r3, #4]
 8009b74:	6863      	ldr	r3, [r4, #4]
 8009b76:	bf08      	it	eq
 8009b78:	f8c8 1000 	streq.w	r1, [r8]
 8009b7c:	5162      	str	r2, [r4, r5]
 8009b7e:	604b      	str	r3, [r1, #4]
 8009b80:	4638      	mov	r0, r7
 8009b82:	f104 060b 	add.w	r6, r4, #11
 8009b86:	f000 f829 	bl	8009bdc <__malloc_unlock>
 8009b8a:	f026 0607 	bic.w	r6, r6, #7
 8009b8e:	1d23      	adds	r3, r4, #4
 8009b90:	1af2      	subs	r2, r6, r3
 8009b92:	d0ae      	beq.n	8009af2 <_malloc_r+0x22>
 8009b94:	1b9b      	subs	r3, r3, r6
 8009b96:	50a3      	str	r3, [r4, r2]
 8009b98:	e7ab      	b.n	8009af2 <_malloc_r+0x22>
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	6862      	ldr	r2, [r4, #4]
 8009b9e:	d1dd      	bne.n	8009b5c <_malloc_r+0x8c>
 8009ba0:	f8c8 2000 	str.w	r2, [r8]
 8009ba4:	e7ec      	b.n	8009b80 <_malloc_r+0xb0>
 8009ba6:	4623      	mov	r3, r4
 8009ba8:	6864      	ldr	r4, [r4, #4]
 8009baa:	e7ac      	b.n	8009b06 <_malloc_r+0x36>
 8009bac:	4634      	mov	r4, r6
 8009bae:	6876      	ldr	r6, [r6, #4]
 8009bb0:	e7b4      	b.n	8009b1c <_malloc_r+0x4c>
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	e7cc      	b.n	8009b50 <_malloc_r+0x80>
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f000 f80e 	bl	8009bdc <__malloc_unlock>
 8009bc0:	e797      	b.n	8009af2 <_malloc_r+0x22>
 8009bc2:	6025      	str	r5, [r4, #0]
 8009bc4:	e7dc      	b.n	8009b80 <_malloc_r+0xb0>
 8009bc6:	605b      	str	r3, [r3, #4]
 8009bc8:	deff      	udf	#255	; 0xff
 8009bca:	bf00      	nop
 8009bcc:	20001fd0 	.word	0x20001fd0

08009bd0 <__malloc_lock>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__malloc_lock+0x8>)
 8009bd2:	f7ff bf01 	b.w	80099d8 <__retarget_lock_acquire_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20001fcc 	.word	0x20001fcc

08009bdc <__malloc_unlock>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__malloc_unlock+0x8>)
 8009bde:	f7ff befc 	b.w	80099da <__retarget_lock_release_recursive>
 8009be2:	bf00      	nop
 8009be4:	20001fcc 	.word	0x20001fcc

08009be8 <__ssputs_r>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	688e      	ldr	r6, [r1, #8]
 8009bee:	461f      	mov	r7, r3
 8009bf0:	42be      	cmp	r6, r7
 8009bf2:	680b      	ldr	r3, [r1, #0]
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	4690      	mov	r8, r2
 8009bfa:	d82c      	bhi.n	8009c56 <__ssputs_r+0x6e>
 8009bfc:	898a      	ldrh	r2, [r1, #12]
 8009bfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c02:	d026      	beq.n	8009c52 <__ssputs_r+0x6a>
 8009c04:	6965      	ldr	r5, [r4, #20]
 8009c06:	6909      	ldr	r1, [r1, #16]
 8009c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c0c:	eba3 0901 	sub.w	r9, r3, r1
 8009c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c14:	1c7b      	adds	r3, r7, #1
 8009c16:	444b      	add	r3, r9
 8009c18:	106d      	asrs	r5, r5, #1
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	bf38      	it	cc
 8009c1e:	461d      	movcc	r5, r3
 8009c20:	0553      	lsls	r3, r2, #21
 8009c22:	d527      	bpl.n	8009c74 <__ssputs_r+0x8c>
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7ff ff53 	bl	8009ad0 <_malloc_r>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	b360      	cbz	r0, 8009c88 <__ssputs_r+0xa0>
 8009c2e:	6921      	ldr	r1, [r4, #16]
 8009c30:	464a      	mov	r2, r9
 8009c32:	f7ff fed3 	bl	80099dc <memcpy>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	6126      	str	r6, [r4, #16]
 8009c44:	6165      	str	r5, [r4, #20]
 8009c46:	444e      	add	r6, r9
 8009c48:	eba5 0509 	sub.w	r5, r5, r9
 8009c4c:	6026      	str	r6, [r4, #0]
 8009c4e:	60a5      	str	r5, [r4, #8]
 8009c50:	463e      	mov	r6, r7
 8009c52:	42be      	cmp	r6, r7
 8009c54:	d900      	bls.n	8009c58 <__ssputs_r+0x70>
 8009c56:	463e      	mov	r6, r7
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	4632      	mov	r2, r6
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	f000 faab 	bl	800a1b8 <memmove>
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	1b9b      	subs	r3, r3, r6
 8009c66:	60a3      	str	r3, [r4, #8]
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	4433      	add	r3, r6
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	2000      	movs	r0, #0
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	462a      	mov	r2, r5
 8009c76:	f000 fac9 	bl	800a20c <_realloc_r>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d1e0      	bne.n	8009c42 <__ssputs_r+0x5a>
 8009c80:	6921      	ldr	r1, [r4, #16]
 8009c82:	4650      	mov	r0, sl
 8009c84:	f7ff feb8 	bl	80099f8 <_free_r>
 8009c88:	230c      	movs	r3, #12
 8009c8a:	f8ca 3000 	str.w	r3, [sl]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9a:	e7e9      	b.n	8009c70 <__ssputs_r+0x88>

08009c9c <_svfiprintf_r>:
 8009c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	4698      	mov	r8, r3
 8009ca2:	898b      	ldrh	r3, [r1, #12]
 8009ca4:	061b      	lsls	r3, r3, #24
 8009ca6:	b09d      	sub	sp, #116	; 0x74
 8009ca8:	4607      	mov	r7, r0
 8009caa:	460d      	mov	r5, r1
 8009cac:	4614      	mov	r4, r2
 8009cae:	d50e      	bpl.n	8009cce <_svfiprintf_r+0x32>
 8009cb0:	690b      	ldr	r3, [r1, #16]
 8009cb2:	b963      	cbnz	r3, 8009cce <_svfiprintf_r+0x32>
 8009cb4:	2140      	movs	r1, #64	; 0x40
 8009cb6:	f7ff ff0b 	bl	8009ad0 <_malloc_r>
 8009cba:	6028      	str	r0, [r5, #0]
 8009cbc:	6128      	str	r0, [r5, #16]
 8009cbe:	b920      	cbnz	r0, 8009cca <_svfiprintf_r+0x2e>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	e0d0      	b.n	8009e6c <_svfiprintf_r+0x1d0>
 8009cca:	2340      	movs	r3, #64	; 0x40
 8009ccc:	616b      	str	r3, [r5, #20]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd2:	2320      	movs	r3, #32
 8009cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cdc:	2330      	movs	r3, #48	; 0x30
 8009cde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e84 <_svfiprintf_r+0x1e8>
 8009ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce6:	f04f 0901 	mov.w	r9, #1
 8009cea:	4623      	mov	r3, r4
 8009cec:	469a      	mov	sl, r3
 8009cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf2:	b10a      	cbz	r2, 8009cf8 <_svfiprintf_r+0x5c>
 8009cf4:	2a25      	cmp	r2, #37	; 0x25
 8009cf6:	d1f9      	bne.n	8009cec <_svfiprintf_r+0x50>
 8009cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8009cfc:	d00b      	beq.n	8009d16 <_svfiprintf_r+0x7a>
 8009cfe:	465b      	mov	r3, fp
 8009d00:	4622      	mov	r2, r4
 8009d02:	4629      	mov	r1, r5
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ff6f 	bl	8009be8 <__ssputs_r>
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f000 80a9 	beq.w	8009e62 <_svfiprintf_r+0x1c6>
 8009d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d12:	445a      	add	r2, fp
 8009d14:	9209      	str	r2, [sp, #36]	; 0x24
 8009d16:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 80a1 	beq.w	8009e62 <_svfiprintf_r+0x1c6>
 8009d20:	2300      	movs	r3, #0
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d2a:	f10a 0a01 	add.w	sl, sl, #1
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	9307      	str	r3, [sp, #28]
 8009d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d36:	931a      	str	r3, [sp, #104]	; 0x68
 8009d38:	4654      	mov	r4, sl
 8009d3a:	2205      	movs	r2, #5
 8009d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d40:	4850      	ldr	r0, [pc, #320]	; (8009e84 <_svfiprintf_r+0x1e8>)
 8009d42:	f7f6 fa4d 	bl	80001e0 <memchr>
 8009d46:	9a04      	ldr	r2, [sp, #16]
 8009d48:	b9d8      	cbnz	r0, 8009d82 <_svfiprintf_r+0xe6>
 8009d4a:	06d0      	lsls	r0, r2, #27
 8009d4c:	bf44      	itt	mi
 8009d4e:	2320      	movmi	r3, #32
 8009d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d54:	0711      	lsls	r1, r2, #28
 8009d56:	bf44      	itt	mi
 8009d58:	232b      	movmi	r3, #43	; 0x2b
 8009d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d62:	2b2a      	cmp	r3, #42	; 0x2a
 8009d64:	d015      	beq.n	8009d92 <_svfiprintf_r+0xf6>
 8009d66:	9a07      	ldr	r2, [sp, #28]
 8009d68:	4654      	mov	r4, sl
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f04f 0c0a 	mov.w	ip, #10
 8009d70:	4621      	mov	r1, r4
 8009d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d76:	3b30      	subs	r3, #48	; 0x30
 8009d78:	2b09      	cmp	r3, #9
 8009d7a:	d94d      	bls.n	8009e18 <_svfiprintf_r+0x17c>
 8009d7c:	b1b0      	cbz	r0, 8009dac <_svfiprintf_r+0x110>
 8009d7e:	9207      	str	r2, [sp, #28]
 8009d80:	e014      	b.n	8009dac <_svfiprintf_r+0x110>
 8009d82:	eba0 0308 	sub.w	r3, r0, r8
 8009d86:	fa09 f303 	lsl.w	r3, r9, r3
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	9304      	str	r3, [sp, #16]
 8009d8e:	46a2      	mov	sl, r4
 8009d90:	e7d2      	b.n	8009d38 <_svfiprintf_r+0x9c>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	1d19      	adds	r1, r3, #4
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9103      	str	r1, [sp, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bfbb      	ittet	lt
 8009d9e:	425b      	neglt	r3, r3
 8009da0:	f042 0202 	orrlt.w	r2, r2, #2
 8009da4:	9307      	strge	r3, [sp, #28]
 8009da6:	9307      	strlt	r3, [sp, #28]
 8009da8:	bfb8      	it	lt
 8009daa:	9204      	strlt	r2, [sp, #16]
 8009dac:	7823      	ldrb	r3, [r4, #0]
 8009dae:	2b2e      	cmp	r3, #46	; 0x2e
 8009db0:	d10c      	bne.n	8009dcc <_svfiprintf_r+0x130>
 8009db2:	7863      	ldrb	r3, [r4, #1]
 8009db4:	2b2a      	cmp	r3, #42	; 0x2a
 8009db6:	d134      	bne.n	8009e22 <_svfiprintf_r+0x186>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	1d1a      	adds	r2, r3, #4
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	9203      	str	r2, [sp, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	bfb8      	it	lt
 8009dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc8:	3402      	adds	r4, #2
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e94 <_svfiprintf_r+0x1f8>
 8009dd0:	7821      	ldrb	r1, [r4, #0]
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	4650      	mov	r0, sl
 8009dd6:	f7f6 fa03 	bl	80001e0 <memchr>
 8009dda:	b138      	cbz	r0, 8009dec <_svfiprintf_r+0x150>
 8009ddc:	9b04      	ldr	r3, [sp, #16]
 8009dde:	eba0 000a 	sub.w	r0, r0, sl
 8009de2:	2240      	movs	r2, #64	; 0x40
 8009de4:	4082      	lsls	r2, r0
 8009de6:	4313      	orrs	r3, r2
 8009de8:	3401      	adds	r4, #1
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df0:	4825      	ldr	r0, [pc, #148]	; (8009e88 <_svfiprintf_r+0x1ec>)
 8009df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df6:	2206      	movs	r2, #6
 8009df8:	f7f6 f9f2 	bl	80001e0 <memchr>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d038      	beq.n	8009e72 <_svfiprintf_r+0x1d6>
 8009e00:	4b22      	ldr	r3, [pc, #136]	; (8009e8c <_svfiprintf_r+0x1f0>)
 8009e02:	bb1b      	cbnz	r3, 8009e4c <_svfiprintf_r+0x1b0>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	3307      	adds	r3, #7
 8009e08:	f023 0307 	bic.w	r3, r3, #7
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	9303      	str	r3, [sp, #12]
 8009e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e12:	4433      	add	r3, r6
 8009e14:	9309      	str	r3, [sp, #36]	; 0x24
 8009e16:	e768      	b.n	8009cea <_svfiprintf_r+0x4e>
 8009e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	2001      	movs	r0, #1
 8009e20:	e7a6      	b.n	8009d70 <_svfiprintf_r+0xd4>
 8009e22:	2300      	movs	r3, #0
 8009e24:	3401      	adds	r4, #1
 8009e26:	9305      	str	r3, [sp, #20]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	f04f 0c0a 	mov.w	ip, #10
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e34:	3a30      	subs	r2, #48	; 0x30
 8009e36:	2a09      	cmp	r2, #9
 8009e38:	d903      	bls.n	8009e42 <_svfiprintf_r+0x1a6>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0c6      	beq.n	8009dcc <_svfiprintf_r+0x130>
 8009e3e:	9105      	str	r1, [sp, #20]
 8009e40:	e7c4      	b.n	8009dcc <_svfiprintf_r+0x130>
 8009e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e46:	4604      	mov	r4, r0
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e7f0      	b.n	8009e2e <_svfiprintf_r+0x192>
 8009e4c:	ab03      	add	r3, sp, #12
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	462a      	mov	r2, r5
 8009e52:	4b0f      	ldr	r3, [pc, #60]	; (8009e90 <_svfiprintf_r+0x1f4>)
 8009e54:	a904      	add	r1, sp, #16
 8009e56:	4638      	mov	r0, r7
 8009e58:	f3af 8000 	nop.w
 8009e5c:	1c42      	adds	r2, r0, #1
 8009e5e:	4606      	mov	r6, r0
 8009e60:	d1d6      	bne.n	8009e10 <_svfiprintf_r+0x174>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	065b      	lsls	r3, r3, #25
 8009e66:	f53f af2d 	bmi.w	8009cc4 <_svfiprintf_r+0x28>
 8009e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e6c:	b01d      	add	sp, #116	; 0x74
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	ab03      	add	r3, sp, #12
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	462a      	mov	r2, r5
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <_svfiprintf_r+0x1f4>)
 8009e7a:	a904      	add	r1, sp, #16
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f000 f879 	bl	8009f74 <_printf_i>
 8009e82:	e7eb      	b.n	8009e5c <_svfiprintf_r+0x1c0>
 8009e84:	0800a579 	.word	0x0800a579
 8009e88:	0800a583 	.word	0x0800a583
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	08009be9 	.word	0x08009be9
 8009e94:	0800a57f 	.word	0x0800a57f

08009e98 <_printf_common>:
 8009e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	4616      	mov	r6, r2
 8009e9e:	4699      	mov	r9, r3
 8009ea0:	688a      	ldr	r2, [r1, #8]
 8009ea2:	690b      	ldr	r3, [r1, #16]
 8009ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bfb8      	it	lt
 8009eac:	4613      	movlt	r3, r2
 8009eae:	6033      	str	r3, [r6, #0]
 8009eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_printf_common+0x26>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	0699      	lsls	r1, r3, #26
 8009ec2:	bf42      	ittt	mi
 8009ec4:	6833      	ldrmi	r3, [r6, #0]
 8009ec6:	3302      	addmi	r3, #2
 8009ec8:	6033      	strmi	r3, [r6, #0]
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	f015 0506 	ands.w	r5, r5, #6
 8009ed0:	d106      	bne.n	8009ee0 <_printf_common+0x48>
 8009ed2:	f104 0a19 	add.w	sl, r4, #25
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	6832      	ldr	r2, [r6, #0]
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	42ab      	cmp	r3, r5
 8009ede:	dc26      	bgt.n	8009f2e <_printf_common+0x96>
 8009ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee4:	1e13      	subs	r3, r2, #0
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	2301      	movne	r3, #1
 8009eec:	0692      	lsls	r2, r2, #26
 8009eee:	d42b      	bmi.n	8009f48 <_printf_common+0xb0>
 8009ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	47c0      	blx	r8
 8009efa:	3001      	adds	r0, #1
 8009efc:	d01e      	beq.n	8009f3c <_printf_common+0xa4>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	6922      	ldr	r2, [r4, #16]
 8009f02:	f003 0306 	and.w	r3, r3, #6
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	bf02      	ittt	eq
 8009f0a:	68e5      	ldreq	r5, [r4, #12]
 8009f0c:	6833      	ldreq	r3, [r6, #0]
 8009f0e:	1aed      	subeq	r5, r5, r3
 8009f10:	68a3      	ldr	r3, [r4, #8]
 8009f12:	bf0c      	ite	eq
 8009f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f18:	2500      	movne	r5, #0
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bfc4      	itt	gt
 8009f1e:	1a9b      	subgt	r3, r3, r2
 8009f20:	18ed      	addgt	r5, r5, r3
 8009f22:	2600      	movs	r6, #0
 8009f24:	341a      	adds	r4, #26
 8009f26:	42b5      	cmp	r5, r6
 8009f28:	d11a      	bne.n	8009f60 <_printf_common+0xc8>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e008      	b.n	8009f40 <_printf_common+0xa8>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4652      	mov	r2, sl
 8009f32:	4649      	mov	r1, r9
 8009f34:	4638      	mov	r0, r7
 8009f36:	47c0      	blx	r8
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d103      	bne.n	8009f44 <_printf_common+0xac>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f44:	3501      	adds	r5, #1
 8009f46:	e7c6      	b.n	8009ed6 <_printf_common+0x3e>
 8009f48:	18e1      	adds	r1, r4, r3
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	2030      	movs	r0, #48	; 0x30
 8009f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f52:	4422      	add	r2, r4
 8009f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	e7c7      	b.n	8009ef0 <_printf_common+0x58>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4622      	mov	r2, r4
 8009f64:	4649      	mov	r1, r9
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c0      	blx	r8
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d0e6      	beq.n	8009f3c <_printf_common+0xa4>
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7d9      	b.n	8009f26 <_printf_common+0x8e>
	...

08009f74 <_printf_i>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	7e0f      	ldrb	r7, [r1, #24]
 8009f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f7c:	2f78      	cmp	r7, #120	; 0x78
 8009f7e:	4691      	mov	r9, r2
 8009f80:	4680      	mov	r8, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	469a      	mov	sl, r3
 8009f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f8a:	d807      	bhi.n	8009f9c <_printf_i+0x28>
 8009f8c:	2f62      	cmp	r7, #98	; 0x62
 8009f8e:	d80a      	bhi.n	8009fa6 <_printf_i+0x32>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	f000 80d4 	beq.w	800a13e <_printf_i+0x1ca>
 8009f96:	2f58      	cmp	r7, #88	; 0x58
 8009f98:	f000 80c0 	beq.w	800a11c <_printf_i+0x1a8>
 8009f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa4:	e03a      	b.n	800a01c <_printf_i+0xa8>
 8009fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009faa:	2b15      	cmp	r3, #21
 8009fac:	d8f6      	bhi.n	8009f9c <_printf_i+0x28>
 8009fae:	a101      	add	r1, pc, #4	; (adr r1, 8009fb4 <_printf_i+0x40>)
 8009fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	0800a021 	.word	0x0800a021
 8009fbc:	08009f9d 	.word	0x08009f9d
 8009fc0:	08009f9d 	.word	0x08009f9d
 8009fc4:	08009f9d 	.word	0x08009f9d
 8009fc8:	08009f9d 	.word	0x08009f9d
 8009fcc:	0800a021 	.word	0x0800a021
 8009fd0:	08009f9d 	.word	0x08009f9d
 8009fd4:	08009f9d 	.word	0x08009f9d
 8009fd8:	08009f9d 	.word	0x08009f9d
 8009fdc:	08009f9d 	.word	0x08009f9d
 8009fe0:	0800a125 	.word	0x0800a125
 8009fe4:	0800a04d 	.word	0x0800a04d
 8009fe8:	0800a0df 	.word	0x0800a0df
 8009fec:	08009f9d 	.word	0x08009f9d
 8009ff0:	08009f9d 	.word	0x08009f9d
 8009ff4:	0800a147 	.word	0x0800a147
 8009ff8:	08009f9d 	.word	0x08009f9d
 8009ffc:	0800a04d 	.word	0x0800a04d
 800a000:	08009f9d 	.word	0x08009f9d
 800a004:	08009f9d 	.word	0x08009f9d
 800a008:	0800a0e7 	.word	0x0800a0e7
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	602a      	str	r2, [r5, #0]
 800a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a01c:	2301      	movs	r3, #1
 800a01e:	e09f      	b.n	800a160 <_printf_i+0x1ec>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	682b      	ldr	r3, [r5, #0]
 800a024:	0607      	lsls	r7, r0, #24
 800a026:	f103 0104 	add.w	r1, r3, #4
 800a02a:	6029      	str	r1, [r5, #0]
 800a02c:	d501      	bpl.n	800a032 <_printf_i+0xbe>
 800a02e:	681e      	ldr	r6, [r3, #0]
 800a030:	e003      	b.n	800a03a <_printf_i+0xc6>
 800a032:	0646      	lsls	r6, r0, #25
 800a034:	d5fb      	bpl.n	800a02e <_printf_i+0xba>
 800a036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	da03      	bge.n	800a046 <_printf_i+0xd2>
 800a03e:	232d      	movs	r3, #45	; 0x2d
 800a040:	4276      	negs	r6, r6
 800a042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a046:	485a      	ldr	r0, [pc, #360]	; (800a1b0 <_printf_i+0x23c>)
 800a048:	230a      	movs	r3, #10
 800a04a:	e012      	b.n	800a072 <_printf_i+0xfe>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	1d19      	adds	r1, r3, #4
 800a052:	6029      	str	r1, [r5, #0]
 800a054:	0605      	lsls	r5, r0, #24
 800a056:	d501      	bpl.n	800a05c <_printf_i+0xe8>
 800a058:	681e      	ldr	r6, [r3, #0]
 800a05a:	e002      	b.n	800a062 <_printf_i+0xee>
 800a05c:	0641      	lsls	r1, r0, #25
 800a05e:	d5fb      	bpl.n	800a058 <_printf_i+0xe4>
 800a060:	881e      	ldrh	r6, [r3, #0]
 800a062:	4853      	ldr	r0, [pc, #332]	; (800a1b0 <_printf_i+0x23c>)
 800a064:	2f6f      	cmp	r7, #111	; 0x6f
 800a066:	bf0c      	ite	eq
 800a068:	2308      	moveq	r3, #8
 800a06a:	230a      	movne	r3, #10
 800a06c:	2100      	movs	r1, #0
 800a06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a072:	6865      	ldr	r5, [r4, #4]
 800a074:	60a5      	str	r5, [r4, #8]
 800a076:	2d00      	cmp	r5, #0
 800a078:	bfa2      	ittt	ge
 800a07a:	6821      	ldrge	r1, [r4, #0]
 800a07c:	f021 0104 	bicge.w	r1, r1, #4
 800a080:	6021      	strge	r1, [r4, #0]
 800a082:	b90e      	cbnz	r6, 800a088 <_printf_i+0x114>
 800a084:	2d00      	cmp	r5, #0
 800a086:	d04b      	beq.n	800a120 <_printf_i+0x1ac>
 800a088:	4615      	mov	r5, r2
 800a08a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a08e:	fb03 6711 	mls	r7, r3, r1, r6
 800a092:	5dc7      	ldrb	r7, [r0, r7]
 800a094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a098:	4637      	mov	r7, r6
 800a09a:	42bb      	cmp	r3, r7
 800a09c:	460e      	mov	r6, r1
 800a09e:	d9f4      	bls.n	800a08a <_printf_i+0x116>
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d10b      	bne.n	800a0bc <_printf_i+0x148>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	07de      	lsls	r6, r3, #31
 800a0a8:	d508      	bpl.n	800a0bc <_printf_i+0x148>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	bfde      	ittt	le
 800a0b2:	2330      	movle	r3, #48	; 0x30
 800a0b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0bc:	1b52      	subs	r2, r2, r5
 800a0be:	6122      	str	r2, [r4, #16]
 800a0c0:	f8cd a000 	str.w	sl, [sp]
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	aa03      	add	r2, sp, #12
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7ff fee4 	bl	8009e98 <_printf_common>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d14a      	bne.n	800a16a <_printf_i+0x1f6>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	b004      	add	sp, #16
 800a0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	f043 0320 	orr.w	r3, r3, #32
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	4833      	ldr	r0, [pc, #204]	; (800a1b4 <_printf_i+0x240>)
 800a0e8:	2778      	movs	r7, #120	; 0x78
 800a0ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	6829      	ldr	r1, [r5, #0]
 800a0f2:	061f      	lsls	r7, r3, #24
 800a0f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f8:	d402      	bmi.n	800a100 <_printf_i+0x18c>
 800a0fa:	065f      	lsls	r7, r3, #25
 800a0fc:	bf48      	it	mi
 800a0fe:	b2b6      	uxthmi	r6, r6
 800a100:	07df      	lsls	r7, r3, #31
 800a102:	bf48      	it	mi
 800a104:	f043 0320 	orrmi.w	r3, r3, #32
 800a108:	6029      	str	r1, [r5, #0]
 800a10a:	bf48      	it	mi
 800a10c:	6023      	strmi	r3, [r4, #0]
 800a10e:	b91e      	cbnz	r6, 800a118 <_printf_i+0x1a4>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	f023 0320 	bic.w	r3, r3, #32
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	2310      	movs	r3, #16
 800a11a:	e7a7      	b.n	800a06c <_printf_i+0xf8>
 800a11c:	4824      	ldr	r0, [pc, #144]	; (800a1b0 <_printf_i+0x23c>)
 800a11e:	e7e4      	b.n	800a0ea <_printf_i+0x176>
 800a120:	4615      	mov	r5, r2
 800a122:	e7bd      	b.n	800a0a0 <_printf_i+0x12c>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	6826      	ldr	r6, [r4, #0]
 800a128:	6961      	ldr	r1, [r4, #20]
 800a12a:	1d18      	adds	r0, r3, #4
 800a12c:	6028      	str	r0, [r5, #0]
 800a12e:	0635      	lsls	r5, r6, #24
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	d501      	bpl.n	800a138 <_printf_i+0x1c4>
 800a134:	6019      	str	r1, [r3, #0]
 800a136:	e002      	b.n	800a13e <_printf_i+0x1ca>
 800a138:	0670      	lsls	r0, r6, #25
 800a13a:	d5fb      	bpl.n	800a134 <_printf_i+0x1c0>
 800a13c:	8019      	strh	r1, [r3, #0]
 800a13e:	2300      	movs	r3, #0
 800a140:	6123      	str	r3, [r4, #16]
 800a142:	4615      	mov	r5, r2
 800a144:	e7bc      	b.n	800a0c0 <_printf_i+0x14c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	1d1a      	adds	r2, r3, #4
 800a14a:	602a      	str	r2, [r5, #0]
 800a14c:	681d      	ldr	r5, [r3, #0]
 800a14e:	6862      	ldr	r2, [r4, #4]
 800a150:	2100      	movs	r1, #0
 800a152:	4628      	mov	r0, r5
 800a154:	f7f6 f844 	bl	80001e0 <memchr>
 800a158:	b108      	cbz	r0, 800a15e <_printf_i+0x1ea>
 800a15a:	1b40      	subs	r0, r0, r5
 800a15c:	6060      	str	r0, [r4, #4]
 800a15e:	6863      	ldr	r3, [r4, #4]
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	2300      	movs	r3, #0
 800a164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a168:	e7aa      	b.n	800a0c0 <_printf_i+0x14c>
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	462a      	mov	r2, r5
 800a16e:	4649      	mov	r1, r9
 800a170:	4640      	mov	r0, r8
 800a172:	47d0      	blx	sl
 800a174:	3001      	adds	r0, #1
 800a176:	d0ad      	beq.n	800a0d4 <_printf_i+0x160>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	079b      	lsls	r3, r3, #30
 800a17c:	d413      	bmi.n	800a1a6 <_printf_i+0x232>
 800a17e:	68e0      	ldr	r0, [r4, #12]
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	4298      	cmp	r0, r3
 800a184:	bfb8      	it	lt
 800a186:	4618      	movlt	r0, r3
 800a188:	e7a6      	b.n	800a0d8 <_printf_i+0x164>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4632      	mov	r2, r6
 800a18e:	4649      	mov	r1, r9
 800a190:	4640      	mov	r0, r8
 800a192:	47d0      	blx	sl
 800a194:	3001      	adds	r0, #1
 800a196:	d09d      	beq.n	800a0d4 <_printf_i+0x160>
 800a198:	3501      	adds	r5, #1
 800a19a:	68e3      	ldr	r3, [r4, #12]
 800a19c:	9903      	ldr	r1, [sp, #12]
 800a19e:	1a5b      	subs	r3, r3, r1
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	dcf2      	bgt.n	800a18a <_printf_i+0x216>
 800a1a4:	e7eb      	b.n	800a17e <_printf_i+0x20a>
 800a1a6:	2500      	movs	r5, #0
 800a1a8:	f104 0619 	add.w	r6, r4, #25
 800a1ac:	e7f5      	b.n	800a19a <_printf_i+0x226>
 800a1ae:	bf00      	nop
 800a1b0:	0800a58a 	.word	0x0800a58a
 800a1b4:	0800a59b 	.word	0x0800a59b

0800a1b8 <memmove>:
 800a1b8:	4288      	cmp	r0, r1
 800a1ba:	b510      	push	{r4, lr}
 800a1bc:	eb01 0402 	add.w	r4, r1, r2
 800a1c0:	d902      	bls.n	800a1c8 <memmove+0x10>
 800a1c2:	4284      	cmp	r4, r0
 800a1c4:	4623      	mov	r3, r4
 800a1c6:	d807      	bhi.n	800a1d8 <memmove+0x20>
 800a1c8:	1e43      	subs	r3, r0, #1
 800a1ca:	42a1      	cmp	r1, r4
 800a1cc:	d008      	beq.n	800a1e0 <memmove+0x28>
 800a1ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1d6:	e7f8      	b.n	800a1ca <memmove+0x12>
 800a1d8:	4402      	add	r2, r0
 800a1da:	4601      	mov	r1, r0
 800a1dc:	428a      	cmp	r2, r1
 800a1de:	d100      	bne.n	800a1e2 <memmove+0x2a>
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ea:	e7f7      	b.n	800a1dc <memmove+0x24>

0800a1ec <_sbrk_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d06      	ldr	r5, [pc, #24]	; (800a208 <_sbrk_r+0x1c>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7f6 ff82 	bl	8001100 <_sbrk>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_sbrk_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_sbrk_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20001fc8 	.word	0x20001fc8

0800a20c <_realloc_r>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	4680      	mov	r8, r0
 800a212:	4614      	mov	r4, r2
 800a214:	460e      	mov	r6, r1
 800a216:	b921      	cbnz	r1, 800a222 <_realloc_r+0x16>
 800a218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21c:	4611      	mov	r1, r2
 800a21e:	f7ff bc57 	b.w	8009ad0 <_malloc_r>
 800a222:	b92a      	cbnz	r2, 800a230 <_realloc_r+0x24>
 800a224:	f7ff fbe8 	bl	80099f8 <_free_r>
 800a228:	4625      	mov	r5, r4
 800a22a:	4628      	mov	r0, r5
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	f000 f81b 	bl	800a26a <_malloc_usable_size_r>
 800a234:	4284      	cmp	r4, r0
 800a236:	4607      	mov	r7, r0
 800a238:	d802      	bhi.n	800a240 <_realloc_r+0x34>
 800a23a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a23e:	d812      	bhi.n	800a266 <_realloc_r+0x5a>
 800a240:	4621      	mov	r1, r4
 800a242:	4640      	mov	r0, r8
 800a244:	f7ff fc44 	bl	8009ad0 <_malloc_r>
 800a248:	4605      	mov	r5, r0
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d0ed      	beq.n	800a22a <_realloc_r+0x1e>
 800a24e:	42bc      	cmp	r4, r7
 800a250:	4622      	mov	r2, r4
 800a252:	4631      	mov	r1, r6
 800a254:	bf28      	it	cs
 800a256:	463a      	movcs	r2, r7
 800a258:	f7ff fbc0 	bl	80099dc <memcpy>
 800a25c:	4631      	mov	r1, r6
 800a25e:	4640      	mov	r0, r8
 800a260:	f7ff fbca 	bl	80099f8 <_free_r>
 800a264:	e7e1      	b.n	800a22a <_realloc_r+0x1e>
 800a266:	4635      	mov	r5, r6
 800a268:	e7df      	b.n	800a22a <_realloc_r+0x1e>

0800a26a <_malloc_usable_size_r>:
 800a26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a26e:	1f18      	subs	r0, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	bfbc      	itt	lt
 800a274:	580b      	ldrlt	r3, [r1, r0]
 800a276:	18c0      	addlt	r0, r0, r3
 800a278:	4770      	bx	lr
	...

0800a27c <_init>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	bf00      	nop
 800a280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a282:	bc08      	pop	{r3}
 800a284:	469e      	mov	lr, r3
 800a286:	4770      	bx	lr

0800a288 <_fini>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	bf00      	nop
 800a28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28e:	bc08      	pop	{r3}
 800a290:	469e      	mov	lr, r3
 800a292:	4770      	bx	lr
