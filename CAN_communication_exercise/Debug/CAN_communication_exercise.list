
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d838  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800d9c8  0800d9c8  0001d9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfd8  0800dfd8  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfd8  0800dfd8  0001dfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfe0  0800dfe0  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfe0  0800dfe0  0001dfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfe4  0800dfe4  0001dfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800dfe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
 10 .bss          00001e80  200002d8  200002d8  000202d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20002158  20002158  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015c6f  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bca  00000000  00000000  00035fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b8  00000000  00000000  00039b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c92  00000000  00000000  0003ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002502a  00000000  00000000  0003b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000171db  00000000  00000000  000608fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb6de  00000000  00000000  00077ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058e0  00000000  00000000  001431b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00148a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9b0 	.word	0x0800d9b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800d9b0 	.word	0x0800d9b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9a6 	b.w	8000efc <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff83 	bl	8000adc <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcf9 	bl	80005f8 <__aeabi_dmul>
 8000c06:	f7ff ffa7 	bl	8000b58 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc7a 	bl	8000504 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fcf0 	bl	80005f8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb32 	bl	8000288 <__aeabi_dsub>
 8000c24:	f7ff ff98 	bl	8000b58 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9e08      	ldr	r6, [sp, #32]
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460f      	mov	r7, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14a      	bne.n	8000cda <__udivmoddi4+0xa6>
 8000c44:	428a      	cmp	r2, r1
 8000c46:	4694      	mov	ip, r2
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0xe2>
 8000c4a:	fab2 f382 	clz	r3, r2
 8000c4e:	b143      	cbz	r3, 8000c62 <__udivmoddi4+0x2e>
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	409c      	lsls	r4, r3
 8000c62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c66:	fa1f f58c 	uxth.w	r5, ip
 8000c6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c6e:	0c22      	lsrs	r2, r4, #16
 8000c70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c78:	fb01 f005 	mul.w	r0, r1, r5
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c80:	eb1c 0202 	adds.w	r2, ip, r2
 8000c84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c88:	f080 811c 	bcs.w	8000ec4 <__udivmoddi4+0x290>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f240 8119 	bls.w	8000ec4 <__udivmoddi4+0x290>
 8000c92:	3902      	subs	r1, #2
 8000c94:	4462      	add	r2, ip
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca6:	fb00 f505 	mul.w	r5, r0, r5
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x90>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x294>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x294>
 8000cc0:	4464      	add	r4, ip
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc8:	1b64      	subs	r4, r4, r5
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b11e      	cbz	r6, 8000cd6 <__udivmoddi4+0xa2>
 8000cce:	40dc      	lsrs	r4, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0xbc>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f000 80ed 	beq.w	8000ebe <__udivmoddi4+0x28a>
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cea:	4608      	mov	r0, r1
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf0:	fab3 f183 	clz	r1, r3
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d149      	bne.n	8000d8c <__udivmoddi4+0x158>
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	d302      	bcc.n	8000d02 <__udivmoddi4+0xce>
 8000cfc:	4282      	cmp	r2, r0
 8000cfe:	f200 80f8 	bhi.w	8000ef2 <__udivmoddi4+0x2be>
 8000d02:	1a84      	subs	r4, r0, r2
 8000d04:	eb65 0203 	sbc.w	r2, r5, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d0e2      	beq.n	8000cd6 <__udivmoddi4+0xa2>
 8000d10:	e9c6 4700 	strd	r4, r7, [r6]
 8000d14:	e7df      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000d16:	b902      	cbnz	r2, 8000d1a <__udivmoddi4+0xe6>
 8000d18:	deff      	udf	#255	; 0xff
 8000d1a:	fab2 f382 	clz	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x210>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d34:	fb07 2015 	mls	r0, r7, r5, r2
 8000d38:	0c22      	lsrs	r2, r4, #16
 8000d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d3e:	fb0e f005 	mul.w	r0, lr, r5
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d46:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x122>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2b8>
 8000d56:	4645      	mov	r5, r8
 8000d58:	1a12      	subs	r2, r2, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d60:	fb07 2210 	mls	r2, r7, r0, r2
 8000d64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x14e>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x14c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2c2>
 8000d80:	4610      	mov	r0, r2
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8a:	e79f      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d8c:	f1c1 0720 	rsb	r7, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000da2:	40fd      	lsrs	r5, r7
 8000da4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da8:	4323      	orrs	r3, r4
 8000daa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	fb09 5518 	mls	r5, r9, r8, r5
 8000db6:	0c1c      	lsrs	r4, r3, #16
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b0>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4464      	add	r4, ip
 8000de4:	1b64      	subs	r4, r4, r5
 8000de6:	b29d      	uxth	r5, r3
 8000de8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dec:	fb09 4413 	mls	r4, r9, r3, r4
 8000df0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1da>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	4464      	add	r4, ip
 8000e0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e12:	fba3 9502 	umull	r9, r5, r3, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46ae      	mov	lr, r5
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x29c>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x298>
 8000e24:	b156      	cbz	r6, 8000e3c <__udivmoddi4+0x208>
 8000e26:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e32:	40ca      	lsrs	r2, r1
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	4317      	orrs	r7, r2
 8000e38:	e9c6 7400 	strd	r7, r4, [r6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	f1c3 0120 	rsb	r1, r3, #32
 8000e48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e50:	fa25 f101 	lsr.w	r1, r5, r1
 8000e54:	409d      	lsls	r5, r3
 8000e56:	432a      	orrs	r2, r5
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e64:	fb07 1510 	mls	r5, r7, r0, r1
 8000e68:	0c11      	lsrs	r1, r2, #16
 8000e6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e72:	428d      	cmp	r5, r1
 8000e74:	fa04 f403 	lsl.w	r4, r4, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x258>
 8000e7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e84:	428d      	cmp	r5, r1
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1b49      	subs	r1, r1, r5
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e94:	fb07 1115 	mls	r1, r7, r5, r1
 8000e98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x282>
 8000ea4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2a8>
 8000eae:	4291      	cmp	r1, r2
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2a8>
 8000eb2:	3d02      	subs	r5, #2
 8000eb4:	4462      	add	r2, ip
 8000eb6:	1a52      	subs	r2, r2, r1
 8000eb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0xfc>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	e6e6      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x90>
 8000ecc:	4548      	cmp	r0, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f0>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f0>
 8000edc:	4645      	mov	r5, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x282>
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1da>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x258>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b0>
 8000eec:	3d02      	subs	r5, #2
 8000eee:	4462      	add	r2, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x124>
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e70a      	b.n	8000d0c <__udivmoddi4+0xd8>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x14e>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <CRC_>:
 *      Author: IVI6SF
 */

#include "GNSS.h"

uint8_t CRC_(const uint8_t* str) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < strlen((char*)str); i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	e009      	b.n	8000f26 <CRC_+0x26>
        checksum ^= (uint8_t)str[i];
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4053      	eors	r3, r2
 8000f1e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < strlen((char*)str); i++) {
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff f952 	bl	80001d0 <strlen>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8ee      	bhi.n	8000f12 <CRC_+0x12>
    }

    return checksum;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <xyz_to_wgs84>:


void xyz_to_wgs84(double x, double y, double z, double *latitude, double *longitude) {
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0b06 	vstr	d0, [r7, #24]
 8000f4a:	ed87 1b04 	vstr	d1, [r7, #16]
 8000f4e:	ed87 2b02 	vstr	d2, [r7, #8]
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    double r = sqrt(x*x + y*y + z*z);
 8000f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f5e:	f7ff fb4b 	bl	80005f8 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4614      	mov	r4, r2
 8000f68:	461d      	mov	r5, r3
 8000f6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f72:	f7ff fb41 	bl	80005f8 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff f985 	bl	800028c <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f92:	f7ff fb31 	bl	80005f8 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff f975 	bl	800028c <__adddf3>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	ec43 2b17 	vmov	d7, r2, r3
 8000faa:	eeb0 0a47 	vmov.f32	s0, s14
 8000fae:	eef0 0a67 	vmov.f32	s1, s15
 8000fb2:	f00b ff71 	bl	800ce98 <sqrt>
 8000fb6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    double lon = atan2(y, x);
 8000fba:	ed97 1b06 	vldr	d1, [r7, #24]
 8000fbe:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fc2:	f00b ff67 	bl	800ce94 <atan2>
 8000fc6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    double lat = asin(z / r);
 8000fca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd2:	f7ff fc3b 	bl	800084c <__aeabi_ddiv>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ec43 2b17 	vmov	d7, r2, r3
 8000fde:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe2:	eef0 0a67 	vmov.f32	s1, s15
 8000fe6:	f00b ff21 	bl	800ce2c <asin>
 8000fea:	ed87 0b08 	vstr	d0, [r7, #32]

    *latitude = lat * 180.0 / M_PI;  // Convert to degrees
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <xyz_to_wgs84+0x118>)
 8000ff4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ff8:	f7ff fafe 	bl	80005f8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a312      	add	r3, pc, #72	; (adr r3, 8001050 <xyz_to_wgs84+0x110>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fc1f 	bl	800084c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
    *longitude = lon * 180.0 / M_PI; // Convert to degrees
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <xyz_to_wgs84+0x118>)
 800101e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	a308      	add	r3, pc, #32	; (adr r3, 8001050 <xyz_to_wgs84+0x110>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc0a 	bl	800084c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001042:	bf00      	nop
 8001044:	3738      	adds	r7, #56	; 0x38
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	54442d18 	.word	0x54442d18
 8001054:	400921fb 	.word	0x400921fb
 8001058:	40668000 	.word	0x40668000
 800105c:	00000000 	.word	0x00000000

08001060 <GNSS_Get_Coords>:


void GNSS_Get_Coords(UART_HandleTypeDef *huart, uint8_t size, uint32_t* lat, uint32_t* lon){
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	ed2d 8b04 	vpush	{d8-d9}
 8001066:	b098      	sub	sp, #96	; 0x60
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	72fb      	strb	r3, [r7, #11]
	  uint8_t data[64] = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	223c      	movs	r2, #60	; 0x3c
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f009 fdb4 	bl	800abee <memset>

	  GNSS_Transmit(huart, (uint8_t*)MSG2);
 8001086:	494a      	ldr	r1, [pc, #296]	; (80011b0 <GNSS_Get_Coords+0x150>)
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f89b 	bl	80011c4 <GNSS_Transmit>

	  while(1){
//		  HAL_UART_Receive_STR(huart, data, size, 50);
		  strcpy((char*)data, (char*)"$PMTK558,4311951.2,1863684.4,4300899.3,59.5*05\r\n");
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <GNSS_Get_Coords+0x154>)
 8001094:	461c      	mov	r4, r3
 8001096:	4615      	mov	r5, r2
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	7023      	strb	r3, [r4, #0]
		  if(strstr((char*) data, "$PMTK558") != NULL){
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4942      	ldr	r1, [pc, #264]	; (80011b8 <GNSS_Get_Coords+0x158>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f009 fe14 	bl	800acdc <strstr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d111      	bne.n	80010de <GNSS_Get_Coords+0x7e>
			  break;
		  }else if(strstr((char*) data, "0.0,0.0,") != NULL){
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	493f      	ldr	r1, [pc, #252]	; (80011bc <GNSS_Get_Coords+0x15c>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 fe0b 	bl	800acdc <strstr>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0e0      	beq.n	800108e <GNSS_Get_Coords+0x2e>
			  *lat = -1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	601a      	str	r2, [r3, #0]
			  *lon = -1;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e05e      	b.n	800119c <GNSS_Get_Coords+0x13c>
			  break;
 80010de:	bf00      	nop
			  return;
		  }
	  }

	  strtok((char*)data, ",");
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4936      	ldr	r1, [pc, #216]	; (80011c0 <GNSS_Get_Coords+0x160>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 fd9c 	bl	800ac24 <strtok>

	  double lat_, lon_;

	  xyz_to_wgs84(atof(strtok(NULL, ",")) , atof(strtok(NULL, ",")), atof(strtok(NULL, ",")), &lat_, &lon_);
 80010ec:	4934      	ldr	r1, [pc, #208]	; (80011c0 <GNSS_Get_Coords+0x160>)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f009 fd98 	bl	800ac24 <strtok>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f008 fe4a 	bl	8009d90 <atof>
 80010fc:	eeb0 8a40 	vmov.f32	s16, s0
 8001100:	eef0 8a60 	vmov.f32	s17, s1
 8001104:	492e      	ldr	r1, [pc, #184]	; (80011c0 <GNSS_Get_Coords+0x160>)
 8001106:	2000      	movs	r0, #0
 8001108:	f009 fd8c 	bl	800ac24 <strtok>
 800110c:	4603      	mov	r3, r0
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fe3e 	bl	8009d90 <atof>
 8001114:	eeb0 9a40 	vmov.f32	s18, s0
 8001118:	eef0 9a60 	vmov.f32	s19, s1
 800111c:	4928      	ldr	r1, [pc, #160]	; (80011c0 <GNSS_Get_Coords+0x160>)
 800111e:	2000      	movs	r0, #0
 8001120:	f009 fd80 	bl	800ac24 <strtok>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f008 fe32 	bl	8009d90 <atof>
 800112c:	eeb0 7a40 	vmov.f32	s14, s0
 8001130:	eef0 7a60 	vmov.f32	s15, s1
 8001134:	f107 0210 	add.w	r2, r7, #16
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	eeb0 2a47 	vmov.f32	s4, s14
 8001144:	eef0 2a67 	vmov.f32	s5, s15
 8001148:	eeb0 1a49 	vmov.f32	s2, s18
 800114c:	eef0 1a69 	vmov.f32	s3, s19
 8001150:	eeb0 0a48 	vmov.f32	s0, s16
 8001154:	eef0 0a68 	vmov.f32	s1, s17
 8001158:	f7ff fef2 	bl	8000f40 <xyz_to_wgs84>

	  *lat = (uint32_t)(lat_*1000000);
 800115c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001160:	a311      	add	r3, pc, #68	; (adr r3, 80011a8 <GNSS_Get_Coords+0x148>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fa47 	bl	80005f8 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fcf1 	bl	8000b58 <__aeabi_d2uiz>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	601a      	str	r2, [r3, #0]
	  *lon = (uint32_t)(lon_*1000000);
 800117c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001180:	a309      	add	r3, pc, #36	; (adr r3, 80011a8 <GNSS_Get_Coords+0x148>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa37 	bl	80005f8 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fce1 	bl	8000b58 <__aeabi_d2uiz>
 8001196:	4602      	mov	r2, r0
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
}
 800119c:	3760      	adds	r7, #96	; 0x60
 800119e:	46bd      	mov	sp, r7
 80011a0:	ecbd 8b04 	vpop	{d8-d9}
 80011a4:	bdb0      	pop	{r4, r5, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	412e8480 	.word	0x412e8480
 80011b0:	0800d9c8 	.word	0x0800d9c8
 80011b4:	0800d9d0 	.word	0x0800d9d0
 80011b8:	0800da04 	.word	0x0800da04
 80011bc:	0800da10 	.word	0x0800da10
 80011c0:	0800da1c 	.word	0x0800da1c

080011c4 <GNSS_Transmit>:

void GNSS_Transmit(UART_HandleTypeDef *huart, uint8_t* msg){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b092      	sub	sp, #72	; 0x48
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	  uint8_t req[64] = {0};
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	223c      	movs	r2, #60	; 0x3c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fd07 	bl	800abee <memset>
	  sprintf((char*)req, "$%s*%X\r\n", msg, CRC_((uint8_t*)msg));
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f7ff fe8d 	bl	8000f00 <CRC_>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <GNSS_Transmit+0x54>)
 80011f0:	f009 fc9a 	bl	800ab28 <siprintf>
	  HAL_UART_Transmit(huart, req, strlen((char*)req), 1000);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7fe ffe9 	bl	80001d0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 0108 	add.w	r1, r7, #8
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f003 fbf7 	bl	80049fe <HAL_UART_Transmit>
}
 8001210:	bf00      	nop
 8001212:	3748      	adds	r7, #72	; 0x48
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800da20 	.word	0x0800da20

0800121c <Bypass_DCR>:
 */

#include "LoRa.h"

//  **Bypass bandwith limitations**
static void Bypass_DCR(UART_HandleTypeDef *huart){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8001224:	2032      	movs	r0, #50	; 0x32
 8001226:	f000 fdb1 	bl	8001d8c <HAL_Delay>
	HAL_UART_Transmit(huart, (uint8_t*)"AT+DCS=0\n", strlen("AT+DCS=0\n"), 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	2209      	movs	r2, #9
 8001230:	4908      	ldr	r1, [pc, #32]	; (8001254 <Bypass_DCR+0x38>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f003 fbe3 	bl	80049fe <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*)"AT+DR=2\n", strlen("AT+DR=2\n"), 1000);
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	2208      	movs	r2, #8
 800123e:	4906      	ldr	r1, [pc, #24]	; (8001258 <Bypass_DCR+0x3c>)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f003 fbdc 	bl	80049fe <HAL_UART_Transmit>
	HAL_Delay(50);
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f000 fda0 	bl	8001d8c <HAL_Delay>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800da2c 	.word	0x0800da2c
 8001258:	0800da38 	.word	0x0800da38

0800125c <AT_Send>:

void AT_Send(UART_HandleTypeDef *huart, uint8_t* data, uint8_t Chnl){
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	71fb      	strb	r3, [r7, #7]

	uint8_t msg[64] = {0};
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	223c      	movs	r2, #60	; 0x3c
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f009 fcb9 	bl	800abee <memset>
	sprintf((char*)msg, "AT+SEND=%d:0:%s\n", Chnl, (char*)data);
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	f107 0010 	add.w	r0, r7, #16
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	490a      	ldr	r1, [pc, #40]	; (80012b0 <AT_Send+0x54>)
 8001286:	f009 fc4f 	bl	800ab28 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen((char*)msg), 1000);
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ff9e 	bl	80001d0 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f107 0110 	add.w	r1, r7, #16
 800129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f003 fbac 	bl	80049fe <HAL_UART_Transmit>

}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	; 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800da44 	.word	0x0800da44

080012b4 <AT_Join>:

void AT_Join(UART_HandleTypeDef *huart){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	//Reset teh LoRa E5 module
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c2:	483a      	ldr	r0, [pc, #232]	; (80013ac <AT_Join+0xf8>)
 80012c4:	f001 fc20 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	4837      	ldr	r0, [pc, #220]	; (80013ac <AT_Join+0xf8>)
 80012d0:	f001 fc1a 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012d4:	20c8      	movs	r0, #200	; 0xc8
 80012d6:	f000 fd59 	bl	8001d8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e0:	4832      	ldr	r0, [pc, #200]	; (80013ac <AT_Join+0xf8>)
 80012e2:	f001 fc11 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ec:	482f      	ldr	r0, [pc, #188]	; (80013ac <AT_Join+0xf8>)
 80012ee:	f001 fc0b 	bl	8002b08 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f000 fd4a 	bl	8001d8c <HAL_Delay>

	//Start JOIN
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fe:	482b      	ldr	r0, [pc, #172]	; (80013ac <AT_Join+0xf8>)
 8001300:	f001 fc02 	bl	8002b08 <HAL_GPIO_WritePin>

	Bypass_DCR(huart);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff89 	bl	800121c <Bypass_DCR>

	uint8_t msg[64] = {0};
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	223c      	movs	r2, #60	; 0x3c
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f009 fc69 	bl	800abee <memset>
	uint32_t tick = HAL_GetTick();
 800131c:	f000 fd2a 	bl	8001d74 <HAL_GetTick>
 8001320:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	220a      	movs	r2, #10
 8001328:	4921      	ldr	r1, [pc, #132]	; (80013b0 <AT_Join+0xfc>)
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f003 fb67 	bl	80049fe <HAL_UART_Transmit>
	while(strstr((char*) msg, "JOINED") == NULL){
 8001330:	e022      	b.n	8001378 <AT_Join+0xc4>
		if(HAL_GetTick() - tick >= 10000 || strstr((char*) msg, "FAILED") != NULL){
 8001332:	f000 fd1f 	bl	8001d74 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001340:	4293      	cmp	r3, r2
 8001342:	d808      	bhi.n	8001356 <AT_Join+0xa2>
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	491a      	ldr	r1, [pc, #104]	; (80013b4 <AT_Join+0x100>)
 800134a:	4618      	mov	r0, r3
 800134c:	f009 fcc6 	bl	800acdc <strstr>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <AT_Join+0xb6>
			tick = HAL_GetTick();
 8001356:	f000 fd0d 	bl	8001d74 <HAL_GetTick>
 800135a:	64f8      	str	r0, [r7, #76]	; 0x4c
			HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 800135c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001360:	220a      	movs	r2, #10
 8001362:	4913      	ldr	r1, [pc, #76]	; (80013b0 <AT_Join+0xfc>)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f003 fb4a 	bl	80049fe <HAL_UART_Transmit>
		}
		HAL_UART_Receive_STR(huart, msg, 64, 50);
 800136a:	f107 010c 	add.w	r1, r7, #12
 800136e:	2332      	movs	r3, #50	; 0x32
 8001370:	2240      	movs	r2, #64	; 0x40
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f90a 	bl	800158c <HAL_UART_Receive_STR>
	while(strstr((char*) msg, "JOINED") == NULL){
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <AT_Join+0x104>)
 800137e:	4618      	mov	r0, r3
 8001380:	f009 fcac 	bl	800acdc <strstr>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0d3      	beq.n	8001332 <AT_Join+0x7e>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <AT_Join+0xf8>)
 8001392:	f001 fbb9 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <AT_Join+0xf8>)
 800139e:	f001 fbb3 	bl	8002b08 <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	0800da58 	.word	0x0800da58
 80013b4:	0800da64 	.word	0x0800da64
 80013b8:	0800da6c 	.word	0x0800da6c

080013bc <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	b093      	sub	sp, #76	; 0x4c
 80013c0:	af08      	add	r7, sp, #32
 80013c2:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d141      	bne.n	8001452 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80013e2:	f107 020c 	add.w	r2, r7, #12
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	481e      	ldr	r0, [pc, #120]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80013ec:	f000 fcf2 	bl	8001dd4 <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80013f6:	d102      	bne.n	80013fe <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	469c      	mov	ip, r3
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	4619      	mov	r1, r3
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	4618      	mov	r0, r3
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	461c      	mov	r4, r3
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	461d      	mov	r5, r3
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	461e      	mov	r6, r3
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001426:	799b      	ldrb	r3, [r3, #6]
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800142c:	79db      	ldrb	r3, [r3, #7]
 800142e:	9306      	str	r3, [sp, #24]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	9305      	str	r3, [sp, #20]
 8001434:	9604      	str	r6, [sp, #16]
 8001436:	9503      	str	r5, [sp, #12]
 8001438:	9402      	str	r4, [sp, #8]
 800143a:	9001      	str	r0, [sp, #4]
 800143c:	9100      	str	r1, [sp, #0]
 800143e:	4663      	mov	r3, ip
 8001440:	490a      	ldr	r1, [pc, #40]	; (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001444:	f009 fb70 	bl	800ab28 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800144c:	cb03      	ldmia	r3!, {r0, r1}
 800144e:	6010      	str	r0, [r2, #0]
 8001450:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8001452:	bf00      	nop
 8001454:	372c      	adds	r7, #44	; 0x2c
 8001456:	46bd      	mov	sp, r7
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	bf00      	nop
 800145c:	200003ef 	.word	0x200003ef
 8001460:	200002f4 	.word	0x200002f4
 8001464:	2000033c 	.word	0x2000033c
 8001468:	200003ee 	.word	0x200003ee
 800146c:	0800da74 	.word	0x0800da74
 8001470:	200002fc 	.word	0x200002fc
 8001474:	200003f0 	.word	0x200003f0

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800147e:	f000 fc13 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f8b1 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 f96d 	bl	8001764 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800148a:	f007 ff37 	bl	80092fc <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800148e:	f000 f93f 	bl	8001710 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001492:	f000 f913 	bl	80016bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8001496:	f000 f85d 	bl	8001554 <HODL_Till_BTN>

  // **Full cold start**
  GNSS_Transmit(&huart3, (uint8_t*)"PMTK104");
 800149a:	4928      	ldr	r1, [pc, #160]	; (800153c <main+0xc4>)
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <main+0xc8>)
 800149e:	f7ff fe91 	bl	80011c4 <GNSS_Transmit>

//  Auto_Baudrate_Setup(&hcan1, PRE);
  AT_Join(&huart2);
 80014a2:	4828      	ldr	r0, [pc, #160]	; (8001544 <main+0xcc>)
 80014a4:	f7ff ff06 	bl	80012b4 <AT_Join>

  HAL_Delay(500);
 80014a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ac:	f000 fc6e 	bl	8001d8c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// **Disable Periodic NMEA**
  GNSS_Transmit(&huart3, (uint8_t*)MSG);
 80014b0:	4925      	ldr	r1, [pc, #148]	; (8001548 <main+0xd0>)
 80014b2:	4823      	ldr	r0, [pc, #140]	; (8001540 <main+0xc8>)
 80014b4:	f7ff fe86 	bl	80011c4 <GNSS_Transmit>

  HAL_Delay(50);
 80014b8:	2032      	movs	r0, #50	; 0x32
 80014ba:	f000 fc67 	bl	8001d8c <HAL_Delay>

  int chnl = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  while (1)
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+DR=?\n", strlen("AT+DR=?\n"), 1000);
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	2208      	movs	r2, #8
 80014c8:	4920      	ldr	r1, [pc, #128]	; (800154c <main+0xd4>)
 80014ca:	481e      	ldr	r0, [pc, #120]	; (8001544 <main+0xcc>)
 80014cc:	f003 fa97 	bl	80049fe <HAL_UART_Transmit>
	  uint32_t lat, lon = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
	  GNSS_Get_Coords(&huart3, 64, &lat, &lon);
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <main+0xc8>)
 80014e0:	f7ff fdbe 	bl	8001060 <GNSS_Get_Coords>

	  if(lat > 0 && lon > 0){
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d023      	beq.n	8001532 <main+0xba>
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <main+0xba>
		  uint8_t data[32] = {0};
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]
		  sprintf((char*)data, "%lX%lX", lat, lon);
 8001508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	1d38      	adds	r0, r7, #4
 800150e:	4910      	ldr	r1, [pc, #64]	; (8001550 <main+0xd8>)
 8001510:	f009 fb0a 	bl	800ab28 <siprintf>

		  AT_Send(&huart2, data, chnl);
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	b2da      	uxtb	r2, r3
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <main+0xcc>)
 800151e:	f7ff fe9d 	bl	800125c <AT_Send>
		  chnl++;
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	3301      	adds	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if(chnl > 7){
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	2b07      	cmp	r3, #7
 800152c:	dd01      	ble.n	8001532 <main+0xba>
			  chnl = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
	  }

	  HAL_Delay(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001536:	f000 fc29 	bl	8001d8c <HAL_Delay>
  {
 800153a:	e7c2      	b.n	80014c2 <main+0x4a>
 800153c:	0800daac 	.word	0x0800daac
 8001540:	200003a8 	.word	0x200003a8
 8001544:	20000364 	.word	0x20000364
 8001548:	0800dab4 	.word	0x0800dab4
 800154c:	0800dae4 	.word	0x0800dae4
 8001550:	0800daf0 	.word	0x0800daf0

08001554 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8001558:	e005      	b.n	8001566 <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <HODL_Till_BTN+0x30>)
 8001562:	f001 fad1 	bl	8002b08 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8001566:	2101      	movs	r1, #1
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <HODL_Till_BTN+0x34>)
 800156a:	f001 fab5 	bl	8002ad8 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f2      	beq.n	800155a <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <HODL_Till_BTN+0x30>)
 800157c:	f001 fac4 	bl	8002b08 <HAL_GPIO_WritePin>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40020000 	.word	0x40020000

0800158c <HAL_UART_Receive_STR>:

void HAL_UART_Receive_STR(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size, uint32_t Timeout){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	71fb      	strb	r3, [r7, #7]
	memset(pData, 0, Size);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	461a      	mov	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f009 fb23 	bl	800abee <memset>
	uint8_t buff[2] = {0};
 80015a8:	2300      	movs	r3, #0
 80015aa:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	75fb      	strb	r3, [r7, #23]
 80015b0:	e011      	b.n	80015d6 <HAL_UART_Receive_STR+0x4a>
		HAL_UART_Receive(huart, buff, 1, Timeout);
 80015b2:	f107 0114 	add.w	r1, r7, #20
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f003 fab1 	bl	8004b22 <HAL_UART_Receive>
		pData[Size - i] = buff[0];
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4413      	add	r3, r2
 80015cc:	7d3a      	ldrb	r2, [r7, #20]
 80015ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
 80015d6:	7d3b      	ldrb	r3, [r7, #20]
 80015d8:	2b0a      	cmp	r3, #10
 80015da:	d1ea      	bne.n	80015b2 <HAL_UART_Receive_STR+0x26>
	}
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	; 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2230      	movs	r2, #48	; 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f009 faf9 	bl	800abee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <SystemClock_Config+0xcc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <SystemClock_Config+0xcc>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <SystemClock_Config+0xcc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <SystemClock_Config+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <SystemClock_Config+0xd0>)
 8001632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <SystemClock_Config+0xd0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001644:	2301      	movs	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001658:	2308      	movs	r3, #8
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800165c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001666:	2307      	movs	r3, #7
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fce0 	bl	8004034 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800167a:	f000 f8e9 	bl	8001850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2105      	movs	r1, #5
 800169c:	4618      	mov	r0, r3
 800169e:	f002 ff41 	bl	8004524 <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a8:	f000 f8d2 	bl	8001850 <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	; 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f003 f936 	bl	8004964 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 f8a7 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000364 	.word	0x20000364
 800170c:	40004400 	.word	0x40004400

08001710 <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART3_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART3_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART3_UART_Init+0x4c>)
 800171c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART3_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART3_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART3_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART3_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART3_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART3_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART3_UART_Init+0x4c>)
 8001748:	f003 f90c 	bl	8004964 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 f87d 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200003a8 	.word	0x200003a8
 8001760:	40004800 	.word	0x40004800

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <MX_GPIO_Init+0xe0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a30      	ldr	r2, [pc, #192]	; (8001844 <MX_GPIO_Init+0xe0>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <MX_GPIO_Init+0xe0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <MX_GPIO_Init+0xe0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a29      	ldr	r2, [pc, #164]	; (8001844 <MX_GPIO_Init+0xe0>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <MX_GPIO_Init+0xe0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_GPIO_Init+0xe0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <MX_GPIO_Init+0xe0>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_GPIO_Init+0xe0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80017d4:	481c      	ldr	r0, [pc, #112]	; (8001848 <MX_GPIO_Init+0xe4>)
 80017d6:	f001 f997 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	4817      	ldr	r0, [pc, #92]	; (800184c <MX_GPIO_Init+0xe8>)
 80017ee:	f000 ffd7 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	480f      	ldr	r0, [pc, #60]	; (8001848 <MX_GPIO_Init+0xe4>)
 800180c:	f000 ffc8 	bl	80027a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_GPIO_Init+0xe4>)
 8001818:	f001 f976 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800181c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_GPIO_Init+0xe4>)
 8001836:	f000 ffb3 	bl	80027a0 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40020000 	.word	0x40020000

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001858:	e7fe      	b.n	8001858 <Error_Handler+0x8>
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_MspInit+0x4c>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x4c>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_UART_MspInit+0x108>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d134      	bne.n	8001938 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001906:	230c      	movs	r3, #12
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001916:	2307      	movs	r3, #7
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	4826      	ldr	r0, [pc, #152]	; (80019bc <HAL_UART_MspInit+0x110>)
 8001922:	f000 ff3d 	bl	80027a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2026      	movs	r0, #38	; 0x26
 800192c:	f000 fe6f 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001930:	2026      	movs	r0, #38	; 0x26
 8001932:	f000 fe88 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001936:	e039      	b.n	80019ac <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <HAL_UART_MspInit+0x114>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d134      	bne.n	80019ac <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0x10c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800197a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800198c:	2307      	movs	r3, #7
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	480b      	ldr	r0, [pc, #44]	; (80019c4 <HAL_UART_MspInit+0x118>)
 8001998:	f000 ff02 	bl	80027a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	2027      	movs	r0, #39	; 0x27
 80019a2:	f000 fe34 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019a6:	2027      	movs	r0, #39	; 0x27
 80019a8:	f000 fe4d 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3730      	adds	r7, #48	; 0x30
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40004800 	.word	0x40004800
 80019c4:	40020400 	.word	0x40020400

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <NMI_Handler+0x4>

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f99a 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <CAN1_TX_IRQHandler+0x10>)
 8001a22:	f000 fae9 	bl	8001ff8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000033c 	.word	0x2000033c

08001a30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <CAN1_RX0_IRQHandler+0x14>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <CAN1_RX0_IRQHandler+0x18>)
 8001a3c:	f000 fadc 	bl	8001ff8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200003ec 	.word	0x200003ec
 8001a48:	2000033c 	.word	0x2000033c

08001a4c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <CAN1_RX1_IRQHandler+0x14>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <CAN1_RX1_IRQHandler+0x18>)
 8001a58:	f000 face 	bl	8001ff8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200003ed 	.word	0x200003ed
 8001a64:	2000033c 	.word	0x2000033c

08001a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART2_IRQHandler+0x10>)
 8001a6e:	f003 f8fb 	bl	8004c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000364 	.word	0x20000364

08001a7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <USART3_IRQHandler+0x10>)
 8001a82:	f003 f8f1 	bl	8004c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200003a8 	.word	0x200003a8

08001a90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <OTG_FS_IRQHandler+0x10>)
 8001a96:	f001 f9a0 	bl	8002dda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200018e0 	.word	0x200018e0

08001aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_kill>:

int _kill(int pid, int sig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001abe:	f009 f969 	bl	800ad94 <__errno>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2216      	movs	r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_exit>:

void _exit (int status)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffe7 	bl	8001ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae6:	e7fe      	b.n	8001ae6 <_exit+0x12>

08001ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00a      	b.n	8001b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afa:	f3af 8000 	nop.w
 8001afe:	4601      	mov	r1, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf0      	blt.n	8001afa <_read+0x12>
  }

  return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e009      	b.n	8001b48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf1      	blt.n	8001b34 <_write+0x12>
  }
  return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_close>:

int _close(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b82:	605a      	str	r2, [r3, #4]
  return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_isatty>:

int _isatty(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f009 f8ce 	bl	800ad94 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20020000 	.word	0x20020000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	200003f8 	.word	0x200003f8
 8001c2c:	20002158 	.word	0x20002158

08001c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SystemInit+0x20>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <SystemInit+0x20>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5a:	490e      	ldr	r1, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c70:	4c0b      	ldr	r4, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7e:	f7ff ffd7 	bl	8001c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f009 f88d 	bl	800ada0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7ff fbf7 	bl	8001478 <main>
  bx  lr    
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001c98:	0800dfe8 	.word	0x0800dfe8
  ldr r2, =_sbss
 8001c9c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001ca0:	20002158 	.word	0x20002158

08001ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_Init+0x40>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_Init+0x40>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_Init+0x40>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 fc91 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fdbe 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fca9 	bl	8002662 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 fc71 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	200003fc 	.word	0x200003fc

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200003fc 	.word	0x200003fc

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <HAL_CAN_GetRxMessage+0x24>
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 80f3 	bne.w	8001fde <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10e      	bne.n	8001e1c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d116      	bne.n	8001e3a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0e7      	b.n	8001fec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0d8      	b.n	8001fec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	331b      	adds	r3, #27
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0204 	and.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	331b      	adds	r3, #27
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e00b      	b.n	8001e8a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	331b      	adds	r3, #27
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	331b      	adds	r3, #27
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0202 	and.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	331b      	adds	r3, #27
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	331b      	adds	r3, #27
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	331b      	adds	r3, #27
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0a1a      	lsrs	r2, r3, #8
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0c1a      	lsrs	r2, r3, #16
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e1a      	lsrs	r2, r3, #24
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3303      	adds	r3, #3
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0a1a      	lsrs	r2, r3, #8
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3305      	adds	r3, #5
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0c1a      	lsrs	r2, r3, #16
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3306      	adds	r3, #6
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e1a      	lsrs	r2, r3, #24
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3307      	adds	r3, #7
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e006      	b.n	8001fec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07c      	beq.n	8002138 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f983 	bl	8002366 <HAL_CAN_TxMailbox0CompleteCallback>
 8002060:	e016      	b.n	8002090 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
 8002074:	e00c      	b.n	8002090 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
 8002088:	e002      	b.n	8002090 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f989 	bl	80023a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f963 	bl	800237a <HAL_CAN_TxMailbox1CompleteCallback>
 80020b4:	e016      	b.n	80020e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	e00c      	b.n	80020e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	e002      	b.n	80020e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f969 	bl	80023b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d024      	beq.n	8002138 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f943 	bl	800238e <HAL_CAN_TxMailbox2CompleteCallback>
 8002108:	e016      	b.n	8002138 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	e00c      	b.n	8002138 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	e002      	b.n	8002138 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f949 	bl	80023ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002152:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2210      	movs	r2, #16
 800215a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2208      	movs	r2, #8
 8002176:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f930 	bl	80023de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff f910 	bl	80013bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2208      	movs	r2, #8
 80021da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f912 	bl	8002406 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8f9 	bl	80023f2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2210      	movs	r2, #16
 800221a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8fc 	bl	800241a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2208      	movs	r2, #8
 800223c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8f5 	bl	800242e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07b      	beq.n	8002346 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d072      	beq.n	800233e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d043      	beq.n	800233e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d03e      	beq.n	800233e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c6:	2b60      	cmp	r3, #96	; 0x60
 80022c8:	d02b      	beq.n	8002322 <HAL_CAN_IRQHandler+0x32a>
 80022ca:	2b60      	cmp	r3, #96	; 0x60
 80022cc:	d82e      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022ce:	2b50      	cmp	r3, #80	; 0x50
 80022d0:	d022      	beq.n	8002318 <HAL_CAN_IRQHandler+0x320>
 80022d2:	2b50      	cmp	r3, #80	; 0x50
 80022d4:	d82a      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d019      	beq.n	800230e <HAL_CAN_IRQHandler+0x316>
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d826      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022de:	2b30      	cmp	r3, #48	; 0x30
 80022e0:	d010      	beq.n	8002304 <HAL_CAN_IRQHandler+0x30c>
 80022e2:	2b30      	cmp	r3, #48	; 0x30
 80022e4:	d822      	bhi.n	800232c <HAL_CAN_IRQHandler+0x334>
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d002      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x2f8>
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d005      	beq.n	80022fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022ee:	e01d      	b.n	800232c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022f8:	e019      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002302:	e014      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	f043 0320 	orr.w	r3, r3, #32
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230c:	e00f      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002316:	e00a      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002320:	e005      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232a:	e000      	b.n	800232e <HAL_CAN_IRQHandler+0x336>
            break;
 800232c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800233c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f872 	bl	8002442 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff fb74 	bl	8001d74 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e052      	b.n	8002752 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0216 	bic.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <HAL_DMA_Abort+0x62>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0208 	bic.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fc:	e013      	b.n	8002726 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fe:	f7ff fb39 	bl	8001d74 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b05      	cmp	r3, #5
 800270a:	d90c      	bls.n	8002726 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e015      	b.n	8002752 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e4      	bne.n	80026fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	223f      	movs	r2, #63	; 0x3f
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d004      	beq.n	8002778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00c      	b.n	8002792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2205      	movs	r2, #5
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e16b      	b.n	8002a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 815a 	bne.w	8002a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80b4 	beq.w	8002a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b60      	ldr	r3, [pc, #384]	; (8002aac <HAL_GPIO_Init+0x30c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a5f      	ldr	r2, [pc, #380]	; (8002aac <HAL_GPIO_Init+0x30c>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <HAL_GPIO_Init+0x30c>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002942:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <HAL_GPIO_Init+0x310>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_GPIO_Init+0x314>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02b      	beq.n	80029c6 <HAL_GPIO_Init+0x226>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a51      	ldr	r2, [pc, #324]	; (8002ab8 <HAL_GPIO_Init+0x318>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x222>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a50      	ldr	r2, [pc, #320]	; (8002abc <HAL_GPIO_Init+0x31c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x21e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4f      	ldr	r2, [pc, #316]	; (8002ac0 <HAL_GPIO_Init+0x320>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x21a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x216>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4d      	ldr	r2, [pc, #308]	; (8002ac8 <HAL_GPIO_Init+0x328>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x212>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4c      	ldr	r2, [pc, #304]	; (8002acc <HAL_GPIO_Init+0x32c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x20e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_GPIO_Init+0x330>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x20a>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e00e      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029aa:	2308      	movs	r3, #8
 80029ac:	e00c      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029ae:	2306      	movs	r3, #6
 80029b0:	e00a      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029b2:	2305      	movs	r3, #5
 80029b4:	e008      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029ba:	2303      	movs	r3, #3
 80029bc:	e004      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029be:	2302      	movs	r3, #2
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_GPIO_Init+0x228>
 80029c6:	2300      	movs	r3, #0
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f002 0203 	and.w	r2, r2, #3
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	4093      	lsls	r3, r2
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d8:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <HAL_GPIO_Init+0x310>)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0a:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b0f      	cmp	r3, #15
 8002a98:	f67f ae90 	bls.w	80027bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40021400 	.word	0x40021400
 8002acc:	40021800 	.word	0x40021800
 8002ad0:	40021c00 	.word	0x40021c00
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e001      	b.n	8002afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3c:	b08f      	sub	sp, #60	; 0x3c
 8002b3e:	af0a      	add	r7, sp, #40	; 0x28
 8002b40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e10f      	b.n	8002d6c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f006 fdec 	bl	8009744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 f8b5 	bl	8005cfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	687e      	ldr	r6, [r7, #4]
 8002b98:	466d      	mov	r5, sp
 8002b9a:	f106 0410 	add.w	r4, r6, #16
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bae:	1d33      	adds	r3, r6, #4
 8002bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f002 ff8c 	bl	8005ad0 <USB_CoreInit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0d0      	b.n	8002d6c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 f8a3 	bl	8005d1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e04a      	b.n	8002c72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	333d      	adds	r3, #61	; 0x3d
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333c      	adds	r3, #60	; 0x3c
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3344      	adds	r3, #68	; 0x44
 8002c18:	4602      	mov	r2, r0
 8002c1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3340      	adds	r3, #64	; 0x40
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3348      	adds	r3, #72	; 0x48
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3354      	adds	r3, #84	; 0x54
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3af      	bcc.n	8002bdc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e044      	b.n	8002d0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d3b5      	bcc.n	8002c82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	687e      	ldr	r6, [r7, #4]
 8002d1e:	466d      	mov	r5, sp
 8002d20:	f106 0410 	add.w	r4, r6, #16
 8002d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d34:	1d33      	adds	r3, r6, #4
 8002d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d38:	6838      	ldr	r0, [r7, #0]
 8002d3a:	f003 f83b 	bl	8005db4 <USB_DevInit>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e00d      	b.n	8002d6c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 f98a 	bl	800707e <USB_DevDisconnect>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_Start+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e020      	b.n	8002dd2 <HAL_PCD_Start+0x5e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d109      	bne.n	8002db4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d005      	beq.n	8002db4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 ff8d 	bl	8005cd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 f93a 	bl	800703c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dda:	b590      	push	{r4, r7, lr}
 8002ddc:	b08d      	sub	sp, #52	; 0x34
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f004 f9f8 	bl	80071e6 <USB_GetMode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 848a 	bne.w	8003712 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f95c 	bl	80070c0 <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8480 	beq.w	8003710 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 f949 	bl	80070c0 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d107      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f002 0202 	and.w	r2, r2, #2
 8002e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 f937 	bl	80070c0 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d161      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0210 	bic.w	r2, r2, #16
 8002e6a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	0c5b      	lsrs	r3, r3, #17
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d124      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d035      	beq.n	8002f10 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6a38      	ldr	r0, [r7, #32]
 8002eb8:	f003 ff6e 	bl	8006d98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec8:	441a      	add	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6a1a      	ldr	r2, [r3, #32]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eda:	441a      	add	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
 8002ee0:	e016      	b.n	8002f10 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	0c5b      	lsrs	r3, r3, #17
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d110      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6a38      	ldr	r0, [r7, #32]
 8002efa:	f003 ff4d 	bl	8006d98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	441a      	add	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0210 	orr.w	r2, r2, #16
 8002f1e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 f8cb 	bl	80070c0 <USB_ReadInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f34:	f040 80a7 	bne.w	8003086 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 f8d0 	bl	80070e6 <USB_ReadDevAllOutEpInterrupt>
 8002f46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f48:	e099      	b.n	800307e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 808e 	beq.w	8003072 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 f8f4 	bl	800714e <USB_ReadDevOutEPInterrupt>
 8002f66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2301      	movs	r3, #1
 8002f82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fec2 	bl	8003d10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 ff98 	bl	8003ee0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2310      	movs	r3, #16
 8002fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d030      	beq.n	8003038 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d109      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	78db      	ldrb	r3, [r3, #3]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f006 fca7 	bl	8009974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	461a      	mov	r2, r3
 8003034:	2302      	movs	r3, #2
 8003036:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	2320      	movs	r3, #32
 8003052:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003070:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	3301      	adds	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f af62 	bne.w	8002f4a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 f818 	bl	80070c0 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309a:	f040 80db 	bne.w	8003254 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 f839 	bl	800711a <USB_ReadDevAllInEpInterrupt>
 80030a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030ae:	e0cd      	b.n	800324c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80c2 	beq.w	8003240 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f004 f85f 	bl	800718a <USB_ReadDevInEPInterrupt>
 80030cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d057      	beq.n	8003188 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	2201      	movs	r2, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69f9      	ldr	r1, [r7, #28]
 80030f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f8:	4013      	ands	r3, r2
 80030fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	461a      	mov	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d132      	bne.n	800317c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	334c      	adds	r3, #76	; 0x4c
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4403      	add	r3, r0
 8003136:	3348      	adds	r3, #72	; 0x48
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4419      	add	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4403      	add	r3, r0
 800314a:	334c      	adds	r3, #76	; 0x4c
 800314c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d113      	bne.n	800317c <HAL_PCD_IRQHandler+0x3a2>
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3354      	adds	r3, #84	; 0x54
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003174:	461a      	mov	r2, r3
 8003176:	2101      	movs	r1, #1
 8003178:	f004 f866 	bl	8007248 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f006 fb71 	bl	800986a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319e:	461a      	mov	r2, r3
 80031a0:	2308      	movs	r3, #8
 80031a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	461a      	mov	r2, r3
 80031bc:	2310      	movs	r3, #16
 80031be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d6:	461a      	mov	r2, r3
 80031d8:	2340      	movs	r3, #64	; 0x40
 80031da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e8:	6a38      	ldr	r0, [r7, #32]
 80031ea:	f002 ff47 	bl	800607c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	3338      	adds	r3, #56	; 0x38
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	3304      	adds	r3, #4
 8003200:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f006 fbbe 	bl	8009998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003228:	461a      	mov	r2, r3
 800322a:	2302      	movs	r3, #2
 800322c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fcdb 	bl	8003bf6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	3301      	adds	r3, #1
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f af2e 	bne.w	80030b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 ff31 	bl	80070c0 <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003268:	d122      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fec2 	bl	800401c <HAL_PCDEx_LPM_Callback>
 8003298:	e002      	b.n	80032a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f006 fb5c 	bl	8009958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 ff03 	bl	80070c0 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c4:	d112      	bne.n	80032ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f006 fb18 	bl	800990c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fee5 	bl	80070c0 <USB_ReadInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	f040 80b7 	bne.w	8003472 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2110      	movs	r1, #16
 800331e:	4618      	mov	r0, r3
 8003320:	f002 feac 	bl	800607c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003328:	e046      	b.n	80033b8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	461a      	mov	r2, r3
 8003338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334e:	0151      	lsls	r1, r2, #5
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	440a      	add	r2, r1
 8003354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800335c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336a:	461a      	mov	r2, r3
 800336c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003370:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	440a      	add	r2, r1
 8003388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800338c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003390:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	3301      	adds	r3, #1
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033be:	429a      	cmp	r2, r3
 80033c0:	d3b3      	bcc.n	800332a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ee:	f043 030b 	orr.w	r3, r3, #11
 80033f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003404:	f043 030b 	orr.w	r3, r3, #11
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	e015      	b.n	8003438 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800341e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003422:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f043 030b 	orr.w	r3, r3, #11
 8003436:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003446:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800344a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345c:	461a      	mov	r2, r3
 800345e:	f003 fef3 	bl	8007248 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fe22 	bl	80070c0 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003486:	d124      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 feb8 	bl	8007202 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f002 fe6d 	bl	8006176 <USB_GetDevSpeed>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681c      	ldr	r4, [r3, #0]
 80034a8:	f001 fa28 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 80034ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	4620      	mov	r0, r4
 80034b8:	f002 fb6c 	bl	8005b94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f006 f9fc 	bl	80098ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fdf2 	bl	80070c0 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d10a      	bne.n	80034fc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f006 f9d9 	bl	800989e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f002 0208 	and.w	r2, r2, #8
 80034fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fddd 	bl	80070c0 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d122      	bne.n	8003556 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351c:	2301      	movs	r3, #1
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e014      	b.n	800354c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb27 	bl	8003b94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d3e5      	bcc.n	8003522 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 fdb0 	bl	80070c0 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356a:	d13b      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	e02b      	b.n	80035ca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3340      	adds	r3, #64	; 0x40
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d115      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003598:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359a:	2b00      	cmp	r3, #0
 800359c:	da12      	bge.n	80035c4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	333f      	adds	r3, #63	; 0x3f
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fae8 	bl	8003b94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	3301      	adds	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3ce      	bcc.n	8003572 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 fd69 	bl	80070c0 <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f8:	d155      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035fa:	2301      	movs	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	e045      	b.n	800368c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d12e      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003628:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	da2b      	bge.n	8003686 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800363a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800363e:	429a      	cmp	r2, r3
 8003640:	d121      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6053      	str	r3, [r2, #4]
            break;
 8003684:	e007      	b.n	8003696 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	3301      	adds	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b4      	bcc.n	8003600 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 fd08 	bl	80070c0 <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d10a      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f006 f97d 	bl	80099bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 fcf2 	bl	80070c0 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d115      	bne.n	8003712 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f006 f96d 	bl	80099d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	e000      	b.n	8003712 <HAL_PCD_IRQHandler+0x938>
      return;
 8003710:	bf00      	nop
    }
  }
}
 8003712:	3734      	adds	r7, #52	; 0x34
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_PCD_SetAddress+0x1a>
 800372e:	2302      	movs	r3, #2
 8003730:	e013      	b.n	800375a <HAL_PCD_SetAddress+0x42>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fc50 	bl	8006ff0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	4608      	mov	r0, r1
 800376c:	4611      	mov	r1, r2
 800376e:	461a      	mov	r2, r3
 8003770:	4603      	mov	r3, r0
 8003772:	70fb      	strb	r3, [r7, #3]
 8003774:	460b      	mov	r3, r1
 8003776:	803b      	strh	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da0f      	bge.n	80037a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	3338      	adds	r3, #56	; 0x38
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	705a      	strb	r2, [r3, #1]
 80037a6:	e00f      	b.n	80037c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 020f 	and.w	r2, r3, #15
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	3304      	adds	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037d4:	883a      	ldrh	r2, [r7, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037f2:	78bb      	ldrb	r3, [r7, #2]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d102      	bne.n	80037fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_PCD_EP_Open+0xaa>
 8003808:	2302      	movs	r3, #2
 800380a:	e00e      	b.n	800382a <HAL_PCD_EP_Open+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	4618      	mov	r0, r3
 800381c:	f002 fcd0 	bl	80061c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003828:	7afb      	ldrb	r3, [r7, #11]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800383e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da0f      	bge.n	8003866 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3338      	adds	r3, #56	; 0x38
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	705a      	strb	r2, [r3, #1]
 8003864:	e00f      	b.n	8003886 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_PCD_EP_Close+0x6e>
 800389c:	2302      	movs	r3, #2
 800389e:	e00e      	b.n	80038be <HAL_PCD_EP_Close+0x8c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fd0e 	bl	80062d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	460b      	mov	r3, r1
 80038d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	f003 020f 	and.w	r2, r3, #15
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	b2da      	uxtb	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	f002 ffed 	bl	8006918 <USB_EP0StartXfer>
 800393e:	e008      	b.n	8003952 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	f002 fd9b 	bl	8006488 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	460b      	mov	r3, r1
 800399a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	3338      	adds	r3, #56	; 0x38
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	3304      	adds	r3, #4
 80039b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2201      	movs	r2, #1
 80039ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d102      	bne.n	80039e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	f002 ff8b 	bl	8006918 <USB_EP0StartXfer>
 8003a02:	e008      	b.n	8003a16 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6979      	ldr	r1, [r7, #20]
 8003a12:	f002 fd39 	bl	8006488 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d901      	bls.n	8003a3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e050      	b.n	8003ae0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	da0f      	bge.n	8003a66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	3338      	adds	r3, #56	; 0x38
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	705a      	strb	r2, [r3, #1]
 8003a64:	e00d      	b.n	8003a82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	3304      	adds	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_PCD_EP_SetStall+0x82>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e01e      	b.n	8003ae0 <HAL_PCD_EP_SetStall+0xc0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 f9c9 	bl	8006e48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	b2d9      	uxtb	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f003 fbb9 	bl	8007248 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d901      	bls.n	8003b06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e042      	b.n	8003b8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	da0f      	bge.n	8003b2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	3338      	adds	r3, #56	; 0x38
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	3304      	adds	r3, #4
 8003b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	705a      	strb	r2, [r3, #1]
 8003b2c:	e00f      	b.n	8003b4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	3304      	adds	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_PCD_EP_ClrStall+0x86>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e00e      	b.n	8003b8c <HAL_PCD_EP_ClrStall+0xa4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 f9d1 	bl	8006f24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	da0c      	bge.n	8003bc2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	3338      	adds	r3, #56	; 0x38
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e00c      	b.n	8003bdc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 fff0 	bl	8006bc8 <USB_EPStopXfer>
 8003be8:	4603      	mov	r3, r0
 8003bea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bec:	7afb      	ldrb	r3, [r7, #11]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08a      	sub	sp, #40	; 0x28
 8003bfa:	af02      	add	r7, sp, #8
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	3338      	adds	r3, #56	; 0x38
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1a      	ldr	r2, [r3, #32]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d901      	bls.n	8003c2e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06c      	b.n	8003d08 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d902      	bls.n	8003c4a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3303      	adds	r3, #3
 8003c4e:	089b      	lsrs	r3, r3, #2
 8003c50:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c52:	e02b      	b.n	8003cac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d902      	bls.n	8003c70 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3303      	adds	r3, #3
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6919      	ldr	r1, [r3, #16]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f003 f844 	bl	8006d1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	441a      	add	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d809      	bhi.n	8003cd6 <PCD_WriteEmptyTxFifo+0xe0>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d203      	bcs.n	8003cd6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1be      	bne.n	8003c54 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d811      	bhi.n	8003d06 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2201      	movs	r2, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	6939      	ldr	r1, [r7, #16]
 8003cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d02:	4013      	ands	r3, r2
 8003d04:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	333c      	adds	r3, #60	; 0x3c
 8003d28:	3304      	adds	r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d17b      	bne.n	8003e3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d015      	beq.n	8003d7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4a61      	ldr	r2, [pc, #388]	; (8003ed8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f240 80b9 	bls.w	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80b3 	beq.w	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d78:	6093      	str	r3, [r2, #8]
 8003d7a:	e0a7      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	461a      	mov	r2, r3
 8003d94:	2320      	movs	r3, #32
 8003d96:	6093      	str	r3, [r2, #8]
 8003d98:	e098      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 8093 	bne.w	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4a4b      	ldr	r2, [pc, #300]	; (8003ed8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d90f      	bls.n	8003dce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dca:	6093      	str	r3, [r2, #8]
 8003dcc:	e07e      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	3304      	adds	r3, #4
 8003de2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	0159      	lsls	r1, r3, #5
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	1ad2      	subs	r2, r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d114      	bne.n	8003e30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	f003 fa14 	bl	8007248 <USB_EP0_OutStart>
 8003e20:	e006      	b.n	8003e30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	441a      	add	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f005 fcfc 	bl	8009834 <HAL_PCD_DataOutStageCallback>
 8003e3c:	e046      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d124      	bne.n	8003e90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	6093      	str	r3, [r2, #8]
 8003e64:	e032      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2320      	movs	r3, #32
 8003e80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f005 fcd3 	bl	8009834 <HAL_PCD_DataOutStageCallback>
 8003e8e:	e01d      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d114      	bne.n	8003ec0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f003 f9c4 	bl	8007248 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 fcb4 	bl	8009834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	4f54300a 	.word	0x4f54300a
 8003edc:	4f54310a 	.word	0x4f54310a

08003ee0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	333c      	adds	r3, #60	; 0x3c
 8003ef8:	3304      	adds	r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d90e      	bls.n	8003f34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f005 fc6b 	bl	8009810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d90c      	bls.n	8003f5c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f54:	461a      	mov	r2, r3
 8003f56:	2101      	movs	r1, #1
 8003f58:	f003 f976 	bl	8007248 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	4f54300a 	.word	0x4f54300a

08003f6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f8a:	883b      	ldrh	r3, [r7, #0]
 8003f8c:	0419      	lsls	r1, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
 8003f98:	e028      	b.n	8003fec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e00d      	b.n	8003fca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	3340      	adds	r3, #64	; 0x40
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3ec      	bcc.n	8003fae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fd4:	883b      	ldrh	r3, [r7, #0]
 8003fd6:	0418      	lsls	r0, r3, #16
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4302      	orrs	r2, r0
 8003fe4:	3340      	adds	r3, #64	; 0x40
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e267      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d075      	beq.n	800413e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004052:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b04      	cmp	r3, #4
 800405c:	d00c      	beq.n	8004078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4b85      	ldr	r3, [pc, #532]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004066:	2b08      	cmp	r3, #8
 8004068:	d112      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b82      	ldr	r3, [pc, #520]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b7e      	ldr	r3, [pc, #504]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_RCC_OscConfig+0x108>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d157      	bne.n	800413c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e242      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x74>
 800409a:	4b76      	ldr	r3, [pc, #472]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a75      	ldr	r2, [pc, #468]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x98>
 80040b2:	4b70      	ldr	r3, [pc, #448]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6f      	ldr	r2, [pc, #444]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6c      	ldr	r2, [pc, #432]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040cc:	4b69      	ldr	r3, [pc, #420]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a68      	ldr	r2, [pc, #416]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b66      	ldr	r3, [pc, #408]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a65      	ldr	r2, [pc, #404]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd fe42 	bl	8001d74 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fd fe3e 	bl	8001d74 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e207      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0xc0>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fd fe2e 	bl	8001d74 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7fd fe2a 	bl	8001d74 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1f3      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	4b51      	ldr	r3, [pc, #324]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0xe8>
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d063      	beq.n	8004212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414a:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11c      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b44      	ldr	r3, [pc, #272]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1c7      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4937      	ldr	r1, [pc, #220]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	e03a      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_RCC_OscConfig+0x244>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fd fde3 	bl	8001d74 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fd fddf 	bl	8001d74 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1a8      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4925      	ldr	r1, [pc, #148]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0x244>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd fdc2 	bl	8001d74 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fd fdbe 	bl	8001d74 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e187      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d036      	beq.n	800428c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_RCC_OscConfig+0x248>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd fda2 	bl	8001d74 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004234:	f7fd fd9e 	bl	8001d74 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e167      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x200>
 8004252:	e01b      	b.n	800428c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_OscConfig+0x248>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fd fd8b 	bl	8001d74 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	e00e      	b.n	8004280 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004262:	f7fd fd87 	bl	8001d74 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d907      	bls.n	8004280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e150      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
 8004274:	40023800 	.word	0x40023800
 8004278:	42470000 	.word	0x42470000
 800427c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ea      	bne.n	8004262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8097 	beq.w	80043c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429e:	4b81      	ldr	r3, [pc, #516]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b7d      	ldr	r3, [pc, #500]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a7c      	ldr	r2, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b7a      	ldr	r3, [pc, #488]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d6:	4b74      	ldr	r3, [pc, #464]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a73      	ldr	r2, [pc, #460]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fd47 	bl	8001d74 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd fd43 	bl	8001d74 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e10c      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x2ea>
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a63      	ldr	r2, [pc, #396]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
 800431c:	e01c      	b.n	8004358 <HAL_RCC_OscConfig+0x324>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x30c>
 8004326:	4b5f      	ldr	r3, [pc, #380]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a5e      	ldr	r2, [pc, #376]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
 8004332:	4b5c      	ldr	r3, [pc, #368]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a5b      	ldr	r2, [pc, #364]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0x324>
 8004340:	4b58      	ldr	r3, [pc, #352]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a57      	ldr	r2, [pc, #348]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a54      	ldr	r2, [pc, #336]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd fd08 	bl	8001d74 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fd fd04 	bl	8001d74 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0cb      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ee      	beq.n	8004368 <HAL_RCC_OscConfig+0x334>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438c:	f7fd fcf2 	bl	8001d74 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd fcee 	bl	8001d74 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0b5      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043aa:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ee      	bne.n	8004394 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d105      	bne.n	80043c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043bc:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4a38      	ldr	r2, [pc, #224]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a1 	beq.w	8004514 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d2:	4b34      	ldr	r3, [pc, #208]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d05c      	beq.n	8004498 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d141      	bne.n	800446a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_OscConfig+0x478>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fd fcc2 	bl	8001d74 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd fcbe 	bl	8001d74 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e087      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	3b01      	subs	r3, #1
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	491b      	ldr	r1, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x478>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fd fc97 	bl	8001d74 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fd fc93 	bl	8001d74 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e05c      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x416>
 8004468:	e054      	b.n	8004514 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCC_OscConfig+0x478>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd fc80 	bl	8001d74 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd fc7c 	bl	8001d74 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e045      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x444>
 8004496:	e03d      	b.n	8004514 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e038      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40007000 	.word	0x40007000
 80044ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x4ec>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d028      	beq.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d121      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d11a      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0cc      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b68      	ldr	r3, [pc, #416]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d90c      	bls.n	8004560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d044      	beq.n	8004644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d119      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e067      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4934      	ldr	r1, [pc, #208]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fd fbae 	bl	8001d74 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fd fbaa 	bl	8001d74 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d20c      	bcs.n	800466c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fb0e 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0800db40 	.word	0x0800db40
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b094      	sub	sp, #80	; 0x50
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	647b      	str	r3, [r7, #68]	; 0x44
 80046fc:	2300      	movs	r3, #0
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b79      	ldr	r3, [pc, #484]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80e1 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0db      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b73      	ldr	r3, [pc, #460]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004726:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004728:	e0db      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800472e:	e0d8      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b6f      	ldr	r3, [pc, #444]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473a:	4b6d      	ldr	r3, [pc, #436]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
 800475e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	f04f 0000 	mov.w	r0, #0
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	0159      	lsls	r1, r3, #5
 8004770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004774:	0150      	lsls	r0, r2, #5
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4621      	mov	r1, r4
 800477c:	1a51      	subs	r1, r2, r1
 800477e:	6139      	str	r1, [r7, #16]
 8004780:	4629      	mov	r1, r5
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	018b      	lsls	r3, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479e:	4651      	mov	r1, sl
 80047a0:	018a      	lsls	r2, r1, #6
 80047a2:	4651      	mov	r1, sl
 80047a4:	ebb2 0801 	subs.w	r8, r2, r1
 80047a8:	4659      	mov	r1, fp
 80047aa:	eb63 0901 	sbc.w	r9, r3, r1
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c2:	4690      	mov	r8, r2
 80047c4:	4699      	mov	r9, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	eb18 0303 	adds.w	r3, r8, r3
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	462b      	mov	r3, r5
 80047d0:	eb49 0303 	adc.w	r3, r9, r3
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e2:	4629      	mov	r1, r5
 80047e4:	024b      	lsls	r3, r1, #9
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ec:	4621      	mov	r1, r4
 80047ee:	024a      	lsls	r2, r1, #9
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004800:	f7fc f9ca 	bl	8000b98 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	e058      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	4611      	mov	r1, r2
 800481a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483a:	0150      	lsls	r0, r2, #5
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4641      	mov	r1, r8
 8004842:	ebb2 0a01 	subs.w	sl, r2, r1
 8004846:	4649      	mov	r1, r9
 8004848:	eb63 0b01 	sbc.w	fp, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800485c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004860:	ebb2 040a 	subs.w	r4, r2, sl
 8004864:	eb63 050b 	sbc.w	r5, r3, fp
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	464b      	mov	r3, r9
 8004884:	eb45 0303 	adc.w	r3, r5, r3
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004896:	4629      	mov	r1, r5
 8004898:	028b      	lsls	r3, r1, #10
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a0:	4621      	mov	r1, r4
 80048a2:	028a      	lsls	r2, r1, #10
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	61fa      	str	r2, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	f7fc f970 	bl	8000b98 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3750      	adds	r7, #80	; 0x50
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000000 	.word	0x20000000

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	0800db50 	.word	0x0800db50

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004940:	f7ff ffdc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	0800db50 	.word	0x0800db50

08004964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e03f      	b.n	80049f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc ff8e 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	; 0x24
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fe1d 	bl	80055e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b08a      	sub	sp, #40	; 0x28
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d17c      	bne.n	8004b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_UART_Transmit+0x2c>
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e075      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Transmit+0x3e>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e06e      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2221      	movs	r2, #33	; 0x21
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a52:	f7fd f98f 	bl	8001d74 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d108      	bne.n	8004a80 <HAL_UART_Transmit+0x82>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	e003      	b.n	8004a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a90:	e02a      	b.n	8004ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fb9b 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e036      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	e007      	b.n	8004ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1cf      	bne.n	8004a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2140      	movs	r1, #64	; 0x40
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fb6b 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e006      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b08a      	sub	sp, #40	; 0x28
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	f040 808c 	bne.w	8004c5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Receive+0x2e>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e084      	b.n	8004c5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Receive+0x40>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e07d      	b.n	8004c5e <HAL_UART_Receive+0x13c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2222      	movs	r2, #34	; 0x22
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7e:	f7fd f8f9 	bl	8001d74 <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b98:	d108      	bne.n	8004bac <HAL_UART_Receive+0x8a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e003      	b.n	8004bb4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004bbc:	e043      	b.n	8004c46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fb05 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e042      	b.n	8004c5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e01f      	b.n	8004c38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d007      	beq.n	8004c12 <HAL_UART_Receive+0xf0>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <HAL_UART_Receive+0xfe>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e008      	b.n	8004c32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1b6      	bne.n	8004bbe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b0ba      	sub	sp, #232	; 0xe8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_UART_IRQHandler+0x66>
 8004cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fbd3 	bl	8005472 <UART_Receive_IT>
      return;
 8004ccc:	e256      	b.n	800517c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80de 	beq.w	8004e94 <HAL_UART_IRQHandler+0x22c>
 8004cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80d1 	beq.w	8004e94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_UART_IRQHandler+0xae>
 8004cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_UART_IRQHandler+0xd2>
 8004d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f043 0202 	orr.w	r2, r3, #2
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_UART_IRQHandler+0xf6>
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <HAL_UART_IRQHandler+0x126>
 8004d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d105      	bne.n	8004d82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0208 	orr.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 81ed 	beq.w	8005172 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_UART_IRQHandler+0x14e>
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fb5e 	bl	8005472 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <HAL_UART_IRQHandler+0x17a>
 8004dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d04f      	beq.n	8004e82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa66 	bl	80052b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d141      	bne.n	8004e7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1d9      	bne.n	8004df6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d013      	beq.n	8004e72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	4a7d      	ldr	r2, [pc, #500]	; (8005044 <HAL_UART_IRQHandler+0x3dc>)
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd fc7f 	bl	800275a <HAL_DMA_Abort_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	e00e      	b.n	8004e90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f99a 	bl	80051ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	e00a      	b.n	8004e90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f996 	bl	80051ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	e006      	b.n	8004e90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f992 	bl	80051ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e8e:	e170      	b.n	8005172 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	bf00      	nop
    return;
 8004e92:	e16e      	b.n	8005172 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f040 814a 	bne.w	8005132 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8143 	beq.w	8005132 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 813c 	beq.w	8005132 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	f040 80b4 	bne.w	8005048 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8140 	beq.w	8005176 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004efe:	429a      	cmp	r2, r3
 8004f00:	f080 8139 	bcs.w	8005176 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f16:	f000 8088 	beq.w	800502a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1d9      	bne.n	8004f1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e1      	bne.n	8004f66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e3      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffa:	f023 0310 	bic.w	r3, r3, #16
 8004ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800500c:	65ba      	str	r2, [r7, #88]	; 0x58
 800500e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e3      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	4618      	mov	r0, r3
 8005026:	f7fd fb28 	bl	800267a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005032:	b29b      	uxth	r3, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8c0 	bl	80051c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005040:	e099      	b.n	8005176 <HAL_UART_IRQHandler+0x50e>
 8005042:	bf00      	nop
 8005044:	0800537b 	.word	0x0800537b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005050:	b29b      	uxth	r3, r3
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 808b 	beq.w	800517a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8086 	beq.w	800517a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005092:	647a      	str	r2, [r7, #68]	; 0x44
 8005094:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e3      	bne.n	800506e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	623b      	str	r3, [r7, #32]
   return(result);
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050ca:	633a      	str	r2, [r7, #48]	; 0x30
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e3      	bne.n	80050a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	330c      	adds	r3, #12
 80050f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0310 	bic.w	r3, r3, #16
 8005102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005110:	61fa      	str	r2, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	617b      	str	r3, [r7, #20]
   return(result);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e3      	bne.n	80050ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f848 	bl	80051c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005130:	e023      	b.n	800517a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_UART_IRQHandler+0x4ea>
 800513e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f929 	bl	80053a2 <UART_Transmit_IT>
    return;
 8005150:	e014      	b.n	800517c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00e      	beq.n	800517c <HAL_UART_IRQHandler+0x514>
 800515e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f969 	bl	8005442 <UART_EndTransmit_IT>
    return;
 8005170:	e004      	b.n	800517c <HAL_UART_IRQHandler+0x514>
    return;
 8005172:	bf00      	nop
 8005174:	e002      	b.n	800517c <HAL_UART_IRQHandler+0x514>
      return;
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <HAL_UART_IRQHandler+0x514>
      return;
 800517a:	bf00      	nop
  }
}
 800517c:	37e8      	adds	r7, #232	; 0xe8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop

08005184 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b090      	sub	sp, #64	; 0x40
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	e050      	b.n	800528c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d04c      	beq.n	800528c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f8:	f7fc fdbc 	bl	8001d74 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005204:	429a      	cmp	r2, r3
 8005206:	d241      	bcs.n	800528c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005228:	637a      	str	r2, [r7, #52]	; 0x34
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800522e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525c:	623a      	str	r2, [r7, #32]
 800525e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69f9      	ldr	r1, [r7, #28]
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	61bb      	str	r3, [r7, #24]
   return(result);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e00f      	b.n	80052ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4013      	ands	r3, r2
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d09f      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3740      	adds	r7, #64	; 0x40
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b095      	sub	sp, #84	; 0x54
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052dc:	643a      	str	r2, [r7, #64]	; 0x40
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e5      	bne.n	80052bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3314      	adds	r3, #20
 80052f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	64bb      	str	r3, [r7, #72]	; 0x48
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005310:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	2b01      	cmp	r3, #1
 800532a:	d119      	bne.n	8005360 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	60bb      	str	r3, [r7, #8]
   return(result);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f023 0310 	bic.w	r3, r3, #16
 8005342:	647b      	str	r3, [r7, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800534c:	61ba      	str	r2, [r7, #24]
 800534e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6979      	ldr	r1, [r7, #20]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	613b      	str	r3, [r7, #16]
   return(result);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800536e:	bf00      	nop
 8005370:	3754      	adds	r7, #84	; 0x54
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff ff09 	bl	80051ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b21      	cmp	r3, #33	; 0x21
 80053b4:	d13e      	bne.n	8005434 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d114      	bne.n	80053ea <UART_Transmit_IT+0x48>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d110      	bne.n	80053ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	1c9a      	adds	r2, r3, #2
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]
 80053e8:	e008      	b.n	80053fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6211      	str	r1, [r2, #32]
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29b      	uxth	r3, r3
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4619      	mov	r1, r3
 800540a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10f      	bne.n	8005430 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800541e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800542e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005458:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fe8e 	bl	8005184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b08c      	sub	sp, #48	; 0x30
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b22      	cmp	r3, #34	; 0x22
 8005484:	f040 80ab 	bne.w	80055de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005490:	d117      	bne.n	80054c2 <UART_Receive_IT+0x50>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d113      	bne.n	80054c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	1c9a      	adds	r2, r3, #2
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
 80054c0:	e026      	b.n	8005510 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d4:	d007      	beq.n	80054e6 <UART_Receive_IT+0x74>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <UART_Receive_IT+0x82>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e008      	b.n	8005506 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005500:	b2da      	uxtb	r2, r3
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4619      	mov	r1, r3
 800551e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005520:	2b00      	cmp	r3, #0
 8005522:	d15a      	bne.n	80055da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0220 	bic.w	r2, r2, #32
 8005532:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d135      	bne.n	80055d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	613b      	str	r3, [r7, #16]
   return(result);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f023 0310 	bic.w	r3, r3, #16
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558a:	623a      	str	r2, [r7, #32]
 800558c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	69f9      	ldr	r1, [r7, #28]
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	61bb      	str	r3, [r7, #24]
   return(result);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d10a      	bne.n	80055c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fdf9 	bl	80051c0 <HAL_UARTEx_RxEventCallback>
 80055ce:	e002      	b.n	80055d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fde1 	bl	8005198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e002      	b.n	80055e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ec:	b0c0      	sub	sp, #256	; 0x100
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	ea40 0301 	orr.w	r3, r0, r1
 8005610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	431a      	orrs	r2, r3
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	431a      	orrs	r2, r3
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005640:	f021 010c 	bic.w	r1, r1, #12
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800564e:	430b      	orrs	r3, r1
 8005650:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005662:	6999      	ldr	r1, [r3, #24]
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	ea40 0301 	orr.w	r3, r0, r1
 800566e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8f      	ldr	r3, [pc, #572]	; (80058b4 <UART_SetConfig+0x2cc>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d005      	beq.n	8005688 <UART_SetConfig+0xa0>
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b8d      	ldr	r3, [pc, #564]	; (80058b8 <UART_SetConfig+0x2d0>)
 8005684:	429a      	cmp	r2, r3
 8005686:	d104      	bne.n	8005692 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005688:	f7ff f958 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 800568c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005690:	e003      	b.n	800569a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005692:	f7ff f93f 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 8005696:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	f040 810c 	bne.w	80058c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056ba:	4622      	mov	r2, r4
 80056bc:	462b      	mov	r3, r5
 80056be:	1891      	adds	r1, r2, r2
 80056c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80056c2:	415b      	adcs	r3, r3
 80056c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056ca:	4621      	mov	r1, r4
 80056cc:	eb12 0801 	adds.w	r8, r2, r1
 80056d0:	4629      	mov	r1, r5
 80056d2:	eb43 0901 	adc.w	r9, r3, r1
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ea:	4690      	mov	r8, r2
 80056ec:	4699      	mov	r9, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	eb18 0303 	adds.w	r3, r8, r3
 80056f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056f8:	462b      	mov	r3, r5
 80056fa:	eb49 0303 	adc.w	r3, r9, r3
 80056fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800570e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005716:	460b      	mov	r3, r1
 8005718:	18db      	adds	r3, r3, r3
 800571a:	653b      	str	r3, [r7, #80]	; 0x50
 800571c:	4613      	mov	r3, r2
 800571e:	eb42 0303 	adc.w	r3, r2, r3
 8005722:	657b      	str	r3, [r7, #84]	; 0x54
 8005724:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005728:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800572c:	f7fb fa34 	bl	8000b98 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4b61      	ldr	r3, [pc, #388]	; (80058bc <UART_SetConfig+0x2d4>)
 8005736:	fba3 2302 	umull	r2, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	011c      	lsls	r4, r3, #4
 800573e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005748:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800574c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	1891      	adds	r1, r2, r2
 8005756:	64b9      	str	r1, [r7, #72]	; 0x48
 8005758:	415b      	adcs	r3, r3
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005760:	4641      	mov	r1, r8
 8005762:	eb12 0a01 	adds.w	sl, r2, r1
 8005766:	4649      	mov	r1, r9
 8005768:	eb43 0b01 	adc.w	fp, r3, r1
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800577c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005780:	4692      	mov	sl, r2
 8005782:	469b      	mov	fp, r3
 8005784:	4643      	mov	r3, r8
 8005786:	eb1a 0303 	adds.w	r3, sl, r3
 800578a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800578e:	464b      	mov	r3, r9
 8005790:	eb4b 0303 	adc.w	r3, fp, r3
 8005794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057ac:	460b      	mov	r3, r1
 80057ae:	18db      	adds	r3, r3, r3
 80057b0:	643b      	str	r3, [r7, #64]	; 0x40
 80057b2:	4613      	mov	r3, r2
 80057b4:	eb42 0303 	adc.w	r3, r2, r3
 80057b8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057c2:	f7fb f9e9 	bl	8000b98 <__aeabi_uldivmod>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	4b3b      	ldr	r3, [pc, #236]	; (80058bc <UART_SetConfig+0x2d4>)
 80057ce:	fba3 2301 	umull	r2, r3, r3, r1
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	2264      	movs	r2, #100	; 0x64
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
 80057da:	1acb      	subs	r3, r1, r3
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057e2:	4b36      	ldr	r3, [pc, #216]	; (80058bc <UART_SetConfig+0x2d4>)
 80057e4:	fba3 2302 	umull	r2, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f0:	441c      	add	r4, r3
 80057f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005800:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005804:	4642      	mov	r2, r8
 8005806:	464b      	mov	r3, r9
 8005808:	1891      	adds	r1, r2, r2
 800580a:	63b9      	str	r1, [r7, #56]	; 0x38
 800580c:	415b      	adcs	r3, r3
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005814:	4641      	mov	r1, r8
 8005816:	1851      	adds	r1, r2, r1
 8005818:	6339      	str	r1, [r7, #48]	; 0x30
 800581a:	4649      	mov	r1, r9
 800581c:	414b      	adcs	r3, r1
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800582c:	4659      	mov	r1, fp
 800582e:	00cb      	lsls	r3, r1, #3
 8005830:	4651      	mov	r1, sl
 8005832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005836:	4651      	mov	r1, sl
 8005838:	00ca      	lsls	r2, r1, #3
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	4603      	mov	r3, r0
 8005840:	4642      	mov	r2, r8
 8005842:	189b      	adds	r3, r3, r2
 8005844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005848:	464b      	mov	r3, r9
 800584a:	460a      	mov	r2, r1
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005860:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005868:	460b      	mov	r3, r1
 800586a:	18db      	adds	r3, r3, r3
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
 800586e:	4613      	mov	r3, r2
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800587a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800587e:	f7fb f98b 	bl	8000b98 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <UART_SetConfig+0x2d4>)
 8005888:	fba3 1302 	umull	r1, r3, r3, r2
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	2164      	movs	r1, #100	; 0x64
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	3332      	adds	r3, #50	; 0x32
 800589a:	4a08      	ldr	r2, [pc, #32]	; (80058bc <UART_SetConfig+0x2d4>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	f003 0207 	and.w	r2, r3, #7
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4422      	add	r2, r4
 80058ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058b0:	e106      	b.n	8005ac0 <UART_SetConfig+0x4d8>
 80058b2:	bf00      	nop
 80058b4:	40011000 	.word	0x40011000
 80058b8:	40011400 	.word	0x40011400
 80058bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058d2:	4642      	mov	r2, r8
 80058d4:	464b      	mov	r3, r9
 80058d6:	1891      	adds	r1, r2, r2
 80058d8:	6239      	str	r1, [r7, #32]
 80058da:	415b      	adcs	r3, r3
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058e2:	4641      	mov	r1, r8
 80058e4:	1854      	adds	r4, r2, r1
 80058e6:	4649      	mov	r1, r9
 80058e8:	eb43 0501 	adc.w	r5, r3, r1
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	00eb      	lsls	r3, r5, #3
 80058f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058fa:	00e2      	lsls	r2, r4, #3
 80058fc:	4614      	mov	r4, r2
 80058fe:	461d      	mov	r5, r3
 8005900:	4643      	mov	r3, r8
 8005902:	18e3      	adds	r3, r4, r3
 8005904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005908:	464b      	mov	r3, r9
 800590a:	eb45 0303 	adc.w	r3, r5, r3
 800590e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800591e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800592e:	4629      	mov	r1, r5
 8005930:	008b      	lsls	r3, r1, #2
 8005932:	4621      	mov	r1, r4
 8005934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005938:	4621      	mov	r1, r4
 800593a:	008a      	lsls	r2, r1, #2
 800593c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005940:	f7fb f92a 	bl	8000b98 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4b60      	ldr	r3, [pc, #384]	; (8005acc <UART_SetConfig+0x4e4>)
 800594a:	fba3 2302 	umull	r2, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	011c      	lsls	r4, r3, #4
 8005952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800595c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005960:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005964:	4642      	mov	r2, r8
 8005966:	464b      	mov	r3, r9
 8005968:	1891      	adds	r1, r2, r2
 800596a:	61b9      	str	r1, [r7, #24]
 800596c:	415b      	adcs	r3, r3
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005974:	4641      	mov	r1, r8
 8005976:	1851      	adds	r1, r2, r1
 8005978:	6139      	str	r1, [r7, #16]
 800597a:	4649      	mov	r1, r9
 800597c:	414b      	adcs	r3, r1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800598c:	4659      	mov	r1, fp
 800598e:	00cb      	lsls	r3, r1, #3
 8005990:	4651      	mov	r1, sl
 8005992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005996:	4651      	mov	r1, sl
 8005998:	00ca      	lsls	r2, r1, #3
 800599a:	4610      	mov	r0, r2
 800599c:	4619      	mov	r1, r3
 800599e:	4603      	mov	r3, r0
 80059a0:	4642      	mov	r2, r8
 80059a2:	189b      	adds	r3, r3, r2
 80059a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059a8:	464b      	mov	r3, r9
 80059aa:	460a      	mov	r2, r1
 80059ac:	eb42 0303 	adc.w	r3, r2, r3
 80059b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80059be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059cc:	4649      	mov	r1, r9
 80059ce:	008b      	lsls	r3, r1, #2
 80059d0:	4641      	mov	r1, r8
 80059d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d6:	4641      	mov	r1, r8
 80059d8:	008a      	lsls	r2, r1, #2
 80059da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059de:	f7fb f8db 	bl	8000b98 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	4b38      	ldr	r3, [pc, #224]	; (8005acc <UART_SetConfig+0x4e4>)
 80059ea:	fba3 2301 	umull	r2, r3, r3, r1
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2264      	movs	r2, #100	; 0x64
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	1acb      	subs	r3, r1, r3
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	3332      	adds	r3, #50	; 0x32
 80059fc:	4a33      	ldr	r2, [pc, #204]	; (8005acc <UART_SetConfig+0x4e4>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a08:	441c      	add	r4, r3
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0e:	2200      	movs	r2, #0
 8005a10:	673b      	str	r3, [r7, #112]	; 0x70
 8005a12:	677a      	str	r2, [r7, #116]	; 0x74
 8005a14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	1891      	adds	r1, r2, r2
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	415b      	adcs	r3, r3
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a28:	4641      	mov	r1, r8
 8005a2a:	1851      	adds	r1, r2, r1
 8005a2c:	6039      	str	r1, [r7, #0]
 8005a2e:	4649      	mov	r1, r9
 8005a30:	414b      	adcs	r3, r1
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a40:	4659      	mov	r1, fp
 8005a42:	00cb      	lsls	r3, r1, #3
 8005a44:	4651      	mov	r1, sl
 8005a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4a:	4651      	mov	r1, sl
 8005a4c:	00ca      	lsls	r2, r1, #3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	4603      	mov	r3, r0
 8005a54:	4642      	mov	r2, r8
 8005a56:	189b      	adds	r3, r3, r2
 8005a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	eb42 0303 	adc.w	r3, r2, r3
 8005a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a6e:	667a      	str	r2, [r7, #100]	; 0x64
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	008b      	lsls	r3, r1, #2
 8005a80:	4641      	mov	r1, r8
 8005a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a86:	4641      	mov	r1, r8
 8005a88:	008a      	lsls	r2, r1, #2
 8005a8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a8e:	f7fb f883 	bl	8000b98 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <UART_SetConfig+0x4e4>)
 8005a98:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	2164      	movs	r1, #100	; 0x64
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	3332      	adds	r3, #50	; 0x32
 8005aaa:	4a08      	ldr	r2, [pc, #32]	; (8005acc <UART_SetConfig+0x4e4>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	f003 020f 	and.w	r2, r3, #15
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4422      	add	r2, r4
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005acc:	51eb851f 	.word	0x51eb851f

08005ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	f107 001c 	add.w	r0, r7, #28
 8005ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d122      	bne.n	8005b2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f001 fbee 	bl	8007304 <USB_CoreReset>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	e01a      	b.n	8005b64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fbe2 	bl	8007304 <USB_CoreReset>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
 8005b56:	e005      	b.n	8005b64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10b      	bne.n	8005b82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f043 0206 	orr.w	r2, r3, #6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b8e:	b004      	add	sp, #16
 8005b90:	4770      	bx	lr
	...

08005b94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d165      	bne.n	8005c74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4a41      	ldr	r2, [pc, #260]	; (8005cb0 <USB_SetTurnaroundTime+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d906      	bls.n	8005bbe <USB_SetTurnaroundTime+0x2a>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4a40      	ldr	r2, [pc, #256]	; (8005cb4 <USB_SetTurnaroundTime+0x120>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d202      	bcs.n	8005bbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bb8:	230f      	movs	r3, #15
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e062      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4a3c      	ldr	r2, [pc, #240]	; (8005cb4 <USB_SetTurnaroundTime+0x120>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d306      	bcc.n	8005bd4 <USB_SetTurnaroundTime+0x40>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4a3b      	ldr	r2, [pc, #236]	; (8005cb8 <USB_SetTurnaroundTime+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d202      	bcs.n	8005bd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bce:	230e      	movs	r3, #14
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e057      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a38      	ldr	r2, [pc, #224]	; (8005cb8 <USB_SetTurnaroundTime+0x124>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d306      	bcc.n	8005bea <USB_SetTurnaroundTime+0x56>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4a37      	ldr	r2, [pc, #220]	; (8005cbc <USB_SetTurnaroundTime+0x128>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d202      	bcs.n	8005bea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005be4:	230d      	movs	r3, #13
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e04c      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4a33      	ldr	r2, [pc, #204]	; (8005cbc <USB_SetTurnaroundTime+0x128>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d306      	bcc.n	8005c00 <USB_SetTurnaroundTime+0x6c>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4a32      	ldr	r2, [pc, #200]	; (8005cc0 <USB_SetTurnaroundTime+0x12c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d802      	bhi.n	8005c00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e041      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <USB_SetTurnaroundTime+0x12c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d906      	bls.n	8005c16 <USB_SetTurnaroundTime+0x82>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <USB_SetTurnaroundTime+0x130>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d802      	bhi.n	8005c16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c10:	230b      	movs	r3, #11
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e036      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4a2a      	ldr	r2, [pc, #168]	; (8005cc4 <USB_SetTurnaroundTime+0x130>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d906      	bls.n	8005c2c <USB_SetTurnaroundTime+0x98>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4a29      	ldr	r2, [pc, #164]	; (8005cc8 <USB_SetTurnaroundTime+0x134>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d802      	bhi.n	8005c2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c26:	230a      	movs	r3, #10
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e02b      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <USB_SetTurnaroundTime+0x134>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d906      	bls.n	8005c42 <USB_SetTurnaroundTime+0xae>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a25      	ldr	r2, [pc, #148]	; (8005ccc <USB_SetTurnaroundTime+0x138>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d202      	bcs.n	8005c42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c3c:	2309      	movs	r3, #9
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e020      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <USB_SetTurnaroundTime+0x138>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d306      	bcc.n	8005c58 <USB_SetTurnaroundTime+0xc4>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <USB_SetTurnaroundTime+0x13c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d802      	bhi.n	8005c58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c52:	2308      	movs	r3, #8
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e015      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <USB_SetTurnaroundTime+0x13c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d906      	bls.n	8005c6e <USB_SetTurnaroundTime+0xda>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <USB_SetTurnaroundTime+0x140>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d202      	bcs.n	8005c6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c68:	2307      	movs	r3, #7
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e00a      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c6e:	2306      	movs	r3, #6
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e007      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c7a:	2309      	movs	r3, #9
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e001      	b.n	8005c84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c80:	2309      	movs	r3, #9
 8005c82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	029b      	lsls	r3, r3, #10
 8005c98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	00d8acbf 	.word	0x00d8acbf
 8005cb4:	00e4e1c0 	.word	0x00e4e1c0
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	01067380 	.word	0x01067380
 8005cc0:	011a499f 	.word	0x011a499f
 8005cc4:	01312cff 	.word	0x01312cff
 8005cc8:	014ca43f 	.word	0x014ca43f
 8005ccc:	016e3600 	.word	0x016e3600
 8005cd0:	01a6ab1f 	.word	0x01a6ab1f
 8005cd4:	01e84800 	.word	0x01e84800

08005cd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f043 0201 	orr.w	r2, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d115      	bne.n	8005d6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	f7fc f81e 	bl	8001d8c <HAL_Delay>
      ms++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fa45 	bl	80071e6 <USB_GetMode>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d01e      	beq.n	8005da0 <USB_SetCurrentMode+0x84>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b31      	cmp	r3, #49	; 0x31
 8005d66:	d9f0      	bls.n	8005d4a <USB_SetCurrentMode+0x2e>
 8005d68:	e01a      	b.n	8005da0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d115      	bne.n	8005d9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	f7fc f805 	bl	8001d8c <HAL_Delay>
      ms++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fa2c 	bl	80071e6 <USB_GetMode>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <USB_SetCurrentMode+0x84>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b31      	cmp	r3, #49	; 0x31
 8005d98:	d9f0      	bls.n	8005d7c <USB_SetCurrentMode+0x60>
 8005d9a:	e001      	b.n	8005da0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e005      	b.n	8005dac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b32      	cmp	r3, #50	; 0x32
 8005da4:	d101      	bne.n	8005daa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db4:	b084      	sub	sp, #16
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	e009      	b.n	8005de8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3340      	adds	r3, #64	; 0x40
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b0e      	cmp	r3, #14
 8005dec:	d9f2      	bls.n	8005dd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d11c      	bne.n	8005e2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e02:	f043 0302 	orr.w	r3, r3, #2
 8005e06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2c:	e00b      	b.n	8005e46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e58:	4619      	mov	r1, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e60:	461a      	mov	r2, r3
 8005e62:	680b      	ldr	r3, [r1, #0]
 8005e64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d10c      	bne.n	8005e86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d104      	bne.n	8005e7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e72:	2100      	movs	r1, #0
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f965 	bl	8006144 <USB_SetDevSpeed>
 8005e7a:	e008      	b.n	8005e8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f960 	bl	8006144 <USB_SetDevSpeed>
 8005e84:	e003      	b.n	8005e8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e86:	2103      	movs	r1, #3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f95b 	bl	8006144 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e8e:	2110      	movs	r1, #16
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8f3 	bl	800607c <USB_FlushTxFifo>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f91f 	bl	80060e4 <USB_FlushRxFifo>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	e043      	b.n	8005f62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef0:	d118      	bne.n	8005f24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	461a      	mov	r2, r3
 8005f06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e013      	b.n	8005f36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e008      	b.n	8005f36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	461a      	mov	r2, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	461a      	mov	r2, r3
 8005f44:	2300      	movs	r3, #0
 8005f46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	461a      	mov	r2, r3
 8005f56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3b7      	bcc.n	8005eda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	e043      	b.n	8005ff8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f86:	d118      	bne.n	8005fba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e013      	b.n	8005fcc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e008      	b.n	8005fcc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	461a      	mov	r2, r3
 8005fec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ff0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3b7      	bcc.n	8005f70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006012:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006020:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2b00      	cmp	r3, #0
 8006026:	d105      	bne.n	8006034 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f043 0210 	orr.w	r2, r3, #16
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <USB_DevInit+0x2c4>)
 800603a:	4313      	orrs	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f043 0208 	orr.w	r2, r3, #8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d107      	bne.n	8006068 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006060:	f043 0304 	orr.w	r3, r3, #4
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006074:	b004      	add	sp, #16
 8006076:	4770      	bx	lr
 8006078:	803c3800 	.word	0x803c3800

0800607c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <USB_FlushTxFifo+0x64>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e01b      	b.n	80060d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	daf2      	bge.n	800608a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	019b      	lsls	r3, r3, #6
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <USB_FlushTxFifo+0x64>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e006      	b.n	80060d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d0f0      	beq.n	80060b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	00030d40 	.word	0x00030d40

080060e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <USB_FlushRxFifo+0x5c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e018      	b.n	8006134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	daf2      	bge.n	80060f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2210      	movs	r2, #16
 8006112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3301      	adds	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a08      	ldr	r2, [pc, #32]	; (8006140 <USB_FlushRxFifo+0x5c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e006      	b.n	8006134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b10      	cmp	r3, #16
 8006130:	d0f0      	beq.n	8006114 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	00030d40 	.word	0x00030d40

08006144 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006164:	4313      	orrs	r3, r2
 8006166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0306 	and.w	r3, r3, #6
 800618e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
 800619a:	e00a      	b.n	80061b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d002      	beq.n	80061a8 <USB_GetDevSpeed+0x32>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d102      	bne.n	80061ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061a8:	2302      	movs	r3, #2
 80061aa:	75fb      	strb	r3, [r7, #23]
 80061ac:	e001      	b.n	80061b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ae:	230f      	movs	r3, #15
 80061b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d13a      	bne.n	8006252 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d155      	bne.n	80062c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006230:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	059b      	lsls	r3, r3, #22
 8006236:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006238:	4313      	orrs	r3, r2
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e036      	b.n	80062c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006270:	4313      	orrs	r3, r2
 8006272:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11a      	bne.n	80062c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	791b      	ldrb	r3, [r3, #4]
 80062a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062a6:	430b      	orrs	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d161      	bne.n	80063b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006302:	d11f      	bne.n	8006344 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006322:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f303 	lsl.w	r3, r1, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006364:	4013      	ands	r3, r2
 8006366:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	2101      	movs	r1, #1
 800637a:	fa01 f303 	lsl.w	r3, r1, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006388:	4013      	ands	r3, r2
 800638a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	0159      	lsls	r1, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	440b      	add	r3, r1
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	4619      	mov	r1, r3
 80063a8:	4b35      	ldr	r3, [pc, #212]	; (8006480 <USB_DeactivateEndpoint+0x1b0>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]
 80063ae:	e060      	b.n	8006472 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c6:	d11f      	bne.n	8006408 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006406:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	43db      	mvns	r3, r3
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006428:	4013      	ands	r3, r2
 800642a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	43db      	mvns	r3, r3
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644c:	4013      	ands	r3, r2
 800644e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0159      	lsls	r1, r3, #5
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	440b      	add	r3, r1
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	4619      	mov	r1, r3
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <USB_DeactivateEndpoint+0x1b4>)
 800646e:	4013      	ands	r3, r2
 8006470:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	ec337800 	.word	0xec337800
 8006484:	eff37800 	.word	0xeff37800

08006488 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 815c 	bne.w	8006762 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d132      	bne.n	8006518 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	0cdb      	lsrs	r3, r3, #19
 8006512:	04db      	lsls	r3, r3, #19
 8006514:	6113      	str	r3, [r2, #16]
 8006516:	e074      	b.n	8006602 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	0cdb      	lsrs	r3, r3, #19
 8006534:	04db      	lsls	r3, r3, #19
 8006536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006556:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800655a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	440b      	add	r3, r1
 8006574:	1e59      	subs	r1, r3, #1
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	fbb1 f3f3 	udiv	r3, r1, r3
 800657e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006580:	4b9d      	ldr	r3, [pc, #628]	; (80067f8 <USB_EPStartXfer+0x370>)
 8006582:	400b      	ands	r3, r1
 8006584:	69b9      	ldr	r1, [r7, #24]
 8006586:	0148      	lsls	r0, r1, #5
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	4401      	add	r1, r0
 800658c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006590:	4313      	orrs	r3, r2
 8006592:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065aa:	69b9      	ldr	r1, [r7, #24]
 80065ac:	0148      	lsls	r0, r1, #5
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	4401      	add	r1, r0
 80065b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065b6:	4313      	orrs	r3, r2
 80065b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d11f      	bne.n	8006602 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006600:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d14b      	bne.n	80066a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	791b      	ldrb	r3, [r3, #4]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d128      	bne.n	800667e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d110      	bne.n	800665e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e00f      	b.n	800667e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006698:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e133      	b.n	8006908 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	791b      	ldrb	r3, [r3, #4]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d015      	beq.n	80066f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 811b 	beq.w	8006908 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	2101      	movs	r1, #1
 80066e4:	fa01 f303 	lsl.w	r3, r1, r3
 80066e8:	69f9      	ldr	r1, [r7, #28]
 80066ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ee:	4313      	orrs	r3, r2
 80066f0:	634b      	str	r3, [r1, #52]	; 0x34
 80066f2:	e109      	b.n	8006908 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d110      	bne.n	8006726 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	e00f      	b.n	8006746 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006744:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	6919      	ldr	r1, [r3, #16]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	b298      	uxth	r0, r3
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4603      	mov	r3, r0
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fade 	bl	8006d1c <USB_WritePacket>
 8006760:	e0d2      	b.n	8006908 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	0cdb      	lsrs	r3, r3, #19
 800677e:	04db      	lsls	r3, r3, #19
 8006780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800679c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d126      	bne.n	80067fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c4:	69b9      	ldr	r1, [r7, #24]
 80067c6:	0148      	lsls	r0, r1, #5
 80067c8:	69f9      	ldr	r1, [r7, #28]
 80067ca:	4401      	add	r1, r0
 80067cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067d0:	4313      	orrs	r3, r2
 80067d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f2:	6113      	str	r3, [r2, #16]
 80067f4:	e03a      	b.n	800686c <USB_EPStartXfer+0x3e4>
 80067f6:	bf00      	nop
 80067f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4413      	add	r3, r2
 8006806:	1e5a      	subs	r2, r3, #1
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	8afa      	ldrh	r2, [r7, #22]
 8006818:	fb03 f202 	mul.w	r2, r3, r2
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	8afb      	ldrh	r3, [r7, #22]
 8006830:	04d9      	lsls	r1, r3, #19
 8006832:	4b38      	ldr	r3, [pc, #224]	; (8006914 <USB_EPStartXfer+0x48c>)
 8006834:	400b      	ands	r3, r1
 8006836:	69b9      	ldr	r1, [r7, #24]
 8006838:	0148      	lsls	r0, r1, #5
 800683a:	69f9      	ldr	r1, [r7, #28]
 800683c:	4401      	add	r1, r0
 800683e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006842:	4313      	orrs	r3, r2
 8006844:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685c:	69b9      	ldr	r1, [r7, #24]
 800685e:	0148      	lsls	r0, r1, #5
 8006860:	69f9      	ldr	r1, [r7, #28]
 8006862:	4401      	add	r1, r0
 8006864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006868:	4313      	orrs	r3, r2
 800686a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10d      	bne.n	800688e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6919      	ldr	r1, [r3, #16]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	460a      	mov	r2, r1
 800688c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	791b      	ldrb	r3, [r3, #4]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d128      	bne.n	80068e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d110      	bne.n	80068c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e00f      	b.n	80068e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	1ff80000 	.word	0x1ff80000

08006918 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	f040 80ce 	bne.w	8006ad6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d132      	bne.n	80069a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	440a      	add	r2, r1
 800699c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a0:	0cdb      	lsrs	r3, r3, #19
 80069a2:	04db      	lsls	r3, r3, #19
 80069a4:	6113      	str	r3, [r2, #16]
 80069a6:	e04e      	b.n	8006a46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c2:	0cdb      	lsrs	r3, r3, #19
 80069c4:	04db      	lsls	r3, r3, #19
 80069c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d903      	bls.n	8006a00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a36:	6939      	ldr	r1, [r7, #16]
 8006a38:	0148      	lsls	r0, r1, #5
 8006a3a:	6979      	ldr	r1, [r7, #20]
 8006a3c:	4401      	add	r1, r0
 8006a3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a42:	4313      	orrs	r3, r2
 8006a44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d11e      	bne.n	8006a8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e097      	b.n	8006bba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aa8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8083 	beq.w	8006bba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	6979      	ldr	r1, [r7, #20]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	634b      	str	r3, [r1, #52]	; 0x34
 8006ad4:	e071      	b.n	8006bba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af0:	0cdb      	lsrs	r3, r3, #19
 8006af2:	04db      	lsls	r3, r3, #19
 8006af4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b68:	6939      	ldr	r1, [r7, #16]
 8006b6a:	0148      	lsls	r0, r1, #5
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	4401      	add	r1, r0
 8006b70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b74:	4313      	orrs	r3, r2
 8006b76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d10d      	bne.n	8006b9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6919      	ldr	r1, [r3, #16]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b96:	460a      	mov	r2, r1
 8006b98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d14a      	bne.n	8006c7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bfe:	f040 8086 	bne.w	8006d0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	7812      	ldrb	r2, [r2, #0]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d902      	bls.n	8006c60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c5e:	e056      	b.n	8006d0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c78:	d0e7      	beq.n	8006c4a <USB_EPStopXfer+0x82>
 8006c7a:	e048      	b.n	8006d0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c94:	d13b      	bne.n	8006d0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d902      	bls.n	8006cf4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf2:	e00c      	b.n	8006d0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0c:	d0e7      	beq.n	8006cde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	; 0x24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4611      	mov	r1, r2
 8006d28:	461a      	mov	r2, r3
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	71fb      	strb	r3, [r7, #7]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d123      	bne.n	8006d8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d42:	88bb      	ldrh	r3, [r7, #4]
 8006d44:	3303      	adds	r3, #3
 8006d46:	089b      	lsrs	r3, r3, #2
 8006d48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e018      	b.n	8006d82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	031a      	lsls	r2, r3, #12
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	3301      	adds	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d3e2      	bcc.n	8006d50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3724      	adds	r7, #36	; 0x24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b08b      	sub	sp, #44	; 0x2c
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e014      	b.n	8006dee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	3301      	adds	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	3301      	adds	r3, #1
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	3301      	adds	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	3301      	adds	r3, #1
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	6a3a      	ldr	r2, [r7, #32]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3e6      	bcc.n	8006dc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006df6:	8bfb      	ldrh	r3, [r7, #30]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e06:	461a      	mov	r2, r3
 8006e08:	f107 0310 	add.w	r3, r7, #16
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	701a      	strb	r2, [r3, #0]
      i++;
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	3301      	adds	r3, #1
 8006e26:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e2e:	8bfb      	ldrh	r3, [r7, #30]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e34:	8bfb      	ldrh	r3, [r7, #30]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ea      	bne.n	8006e10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	372c      	adds	r7, #44	; 0x2c
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d12c      	bne.n	8006ebe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	db12      	blt.n	8006e9c <USB_EPSetStall+0x54>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00f      	beq.n	8006e9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	e02b      	b.n	8006f16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	db12      	blt.n	8006ef6 <USB_EPSetStall+0xae>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00f      	beq.n	8006ef6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d128      	bne.n	8006f92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d003      	beq.n	8006f70 <USB_EPClearStall+0x4c>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d138      	bne.n	8006fe2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	e027      	b.n	8006fe2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d003      	beq.n	8006fc2 <USB_EPClearStall+0x9e>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d10f      	bne.n	8006fe2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007012:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007024:	68f9      	ldr	r1, [r7, #12]
 8007026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702a:	4313      	orrs	r3, r2
 800702c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800706a:	f023 0302 	bic.w	r3, r3, #2
 800706e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ac:	f043 0302 	orr.w	r3, r3, #2
 80070b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4013      	ands	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	0c1b      	lsrs	r3, r3, #16
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	4013      	ands	r3, r2
 800713c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	b29b      	uxth	r3, r3
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800717c:	68bb      	ldr	r3, [r7, #8]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800718a:	b480      	push	{r7}
 800718c:	b087      	sub	sp, #28
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	01db      	lsls	r3, r3, #7
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4013      	ands	r3, r2
 80071d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071d8:	68bb      	ldr	r3, [r7, #8]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	f003 0301 	and.w	r3, r3, #1
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007220:	f023 0307 	bic.w	r3, r3, #7
 8007224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	460b      	mov	r3, r1
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	333c      	adds	r3, #60	; 0x3c
 800725e:	3304      	adds	r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	4a26      	ldr	r2, [pc, #152]	; (8007300 <USB_EP0_OutStart+0xb8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d90a      	bls.n	8007282 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727c:	d101      	bne.n	8007282 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e037      	b.n	80072f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800729c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b0:	f043 0318 	orr.w	r3, r3, #24
 80072b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10f      	bne.n	80072f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	4f54300a 	.word	0x4f54300a

08007304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <USB_CoreReset+0x64>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e01b      	b.n	800735a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	daf2      	bge.n	8007310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f043 0201 	orr.w	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a09      	ldr	r2, [pc, #36]	; (8007368 <USB_CoreReset+0x64>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e006      	b.n	800735a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d0f0      	beq.n	800733a <USB_CoreReset+0x36>

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	00030d40 	.word	0x00030d40

0800736c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007378:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800737c:	f002 fcc4 	bl	8009d08 <USBD_static_malloc>
 8007380:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32b0      	adds	r2, #176	; 0xb0
 8007392:	2100      	movs	r1, #0
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007398:	2302      	movs	r3, #2
 800739a:	e0d4      	b.n	8007546 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800739c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f003 fc23 	bl	800abee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32b0      	adds	r2, #176	; 0xb0
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32b0      	adds	r2, #176	; 0xb0
 80073c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7c1b      	ldrb	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d138      	bne.n	8007446 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073d4:	4b5e      	ldr	r3, [pc, #376]	; (8007550 <USBD_CDC_Init+0x1e4>)
 80073d6:	7819      	ldrb	r1, [r3, #0]
 80073d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073dc:	2202      	movs	r2, #2
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f002 fb6f 	bl	8009ac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073e4:	4b5a      	ldr	r3, [pc, #360]	; (8007550 <USBD_CDC_Init+0x1e4>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	2201      	movs	r2, #1
 80073fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073fe:	4b55      	ldr	r3, [pc, #340]	; (8007554 <USBD_CDC_Init+0x1e8>)
 8007400:	7819      	ldrb	r1, [r3, #0]
 8007402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007406:	2202      	movs	r2, #2
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f002 fb5a 	bl	8009ac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800740e:	4b51      	ldr	r3, [pc, #324]	; (8007554 <USBD_CDC_Init+0x1e8>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f003 020f 	and.w	r2, r3, #15
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007426:	2201      	movs	r2, #1
 8007428:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800742a:	4b4b      	ldr	r3, [pc, #300]	; (8007558 <USBD_CDC_Init+0x1ec>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 020f 	and.w	r2, r3, #15
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	3326      	adds	r3, #38	; 0x26
 8007440:	2210      	movs	r2, #16
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e035      	b.n	80074b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007446:	4b42      	ldr	r3, [pc, #264]	; (8007550 <USBD_CDC_Init+0x1e4>)
 8007448:	7819      	ldrb	r1, [r3, #0]
 800744a:	2340      	movs	r3, #64	; 0x40
 800744c:	2202      	movs	r2, #2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f002 fb37 	bl	8009ac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007454:	4b3e      	ldr	r3, [pc, #248]	; (8007550 <USBD_CDC_Init+0x1e4>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 020f 	and.w	r2, r3, #15
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	3324      	adds	r3, #36	; 0x24
 800746a:	2201      	movs	r2, #1
 800746c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800746e:	4b39      	ldr	r3, [pc, #228]	; (8007554 <USBD_CDC_Init+0x1e8>)
 8007470:	7819      	ldrb	r1, [r3, #0]
 8007472:	2340      	movs	r3, #64	; 0x40
 8007474:	2202      	movs	r2, #2
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f002 fb23 	bl	8009ac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800747c:	4b35      	ldr	r3, [pc, #212]	; (8007554 <USBD_CDC_Init+0x1e8>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007494:	2201      	movs	r2, #1
 8007496:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007498:	4b2f      	ldr	r3, [pc, #188]	; (8007558 <USBD_CDC_Init+0x1ec>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3326      	adds	r3, #38	; 0x26
 80074ae:	2210      	movs	r2, #16
 80074b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074b2:	4b29      	ldr	r3, [pc, #164]	; (8007558 <USBD_CDC_Init+0x1ec>)
 80074b4:	7819      	ldrb	r1, [r3, #0]
 80074b6:	2308      	movs	r3, #8
 80074b8:	2203      	movs	r2, #3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f002 fb01 	bl	8009ac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80074c0:	4b25      	ldr	r3, [pc, #148]	; (8007558 <USBD_CDC_Init+0x1ec>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f003 020f 	and.w	r2, r3, #15
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	3324      	adds	r3, #36	; 0x24
 80074d6:	2201      	movs	r2, #1
 80074d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	33b0      	adds	r3, #176	; 0xb0
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007510:	2302      	movs	r3, #2
 8007512:	e018      	b.n	8007546 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7c1b      	ldrb	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800751c:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <USBD_CDC_Init+0x1e8>)
 800751e:	7819      	ldrb	r1, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f002 fbb8 	bl	8009ca0 <USBD_LL_PrepareReceive>
 8007530:	e008      	b.n	8007544 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007532:	4b08      	ldr	r3, [pc, #32]	; (8007554 <USBD_CDC_Init+0x1e8>)
 8007534:	7819      	ldrb	r1, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f002 fbae 	bl	8009ca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000093 	.word	0x20000093
 8007554:	20000094 	.word	0x20000094
 8007558:	20000095 	.word	0x20000095

0800755c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007568:	4b3a      	ldr	r3, [pc, #232]	; (8007654 <USBD_CDC_DeInit+0xf8>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f002 facd 	bl	8009b0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007574:	4b37      	ldr	r3, [pc, #220]	; (8007654 <USBD_CDC_DeInit+0xf8>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 020f 	and.w	r2, r3, #15
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	3324      	adds	r3, #36	; 0x24
 800758a:	2200      	movs	r2, #0
 800758c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800758e:	4b32      	ldr	r3, [pc, #200]	; (8007658 <USBD_CDC_DeInit+0xfc>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f002 faba 	bl	8009b0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800759a:	4b2f      	ldr	r3, [pc, #188]	; (8007658 <USBD_CDC_DeInit+0xfc>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	f003 020f 	and.w	r2, r3, #15
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075b2:	2200      	movs	r2, #0
 80075b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075b6:	4b29      	ldr	r3, [pc, #164]	; (800765c <USBD_CDC_DeInit+0x100>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f002 faa6 	bl	8009b0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80075c2:	4b26      	ldr	r3, [pc, #152]	; (800765c <USBD_CDC_DeInit+0x100>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	f003 020f 	and.w	r2, r3, #15
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	3324      	adds	r3, #36	; 0x24
 80075d8:	2200      	movs	r2, #0
 80075da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <USBD_CDC_DeInit+0x100>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 020f 	and.w	r2, r3, #15
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3326      	adds	r3, #38	; 0x26
 80075f2:	2200      	movs	r2, #0
 80075f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	32b0      	adds	r2, #176	; 0xb0
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01f      	beq.n	8007648 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	33b0      	adds	r3, #176	; 0xb0
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	32b0      	adds	r2, #176	; 0xb0
 8007626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762a:	4618      	mov	r0, r3
 800762c:	f002 fb7a 	bl	8009d24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32b0      	adds	r2, #176	; 0xb0
 800763a:	2100      	movs	r1, #0
 800763c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000093 	.word	0x20000093
 8007658:	20000094 	.word	0x20000094
 800765c:	20000095 	.word	0x20000095

08007660 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32b0      	adds	r2, #176	; 0xb0
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e0bf      	b.n	8007810 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007698:	2b00      	cmp	r3, #0
 800769a:	d050      	beq.n	800773e <USBD_CDC_Setup+0xde>
 800769c:	2b20      	cmp	r3, #32
 800769e:	f040 80af 	bne.w	8007800 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d03a      	beq.n	8007720 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b25b      	sxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	da1b      	bge.n	80076ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	33b0      	adds	r3, #176	; 0xb0
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80076ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	88d2      	ldrh	r2, [r2, #6]
 80076d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88db      	ldrh	r3, [r3, #6]
 80076d6:	2b07      	cmp	r3, #7
 80076d8:	bf28      	it	cs
 80076da:	2307      	movcs	r3, #7
 80076dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	89fa      	ldrh	r2, [r7, #14]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fd89 	bl	80091fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80076ea:	e090      	b.n	800780e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	785a      	ldrb	r2, [r3, #1]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	2b3f      	cmp	r3, #63	; 0x3f
 80076fc:	d803      	bhi.n	8007706 <USBD_CDC_Setup+0xa6>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	e000      	b.n	8007708 <USBD_CDC_Setup+0xa8>
 8007706:	2240      	movs	r2, #64	; 0x40
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800770e:	6939      	ldr	r1, [r7, #16]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007716:	461a      	mov	r2, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fd9b 	bl	8009254 <USBD_CtlPrepareRx>
      break;
 800771e:	e076      	b.n	800780e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	33b0      	adds	r3, #176	; 0xb0
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	7850      	ldrb	r0, [r2, #1]
 8007736:	2200      	movs	r2, #0
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	4798      	blx	r3
      break;
 800773c:	e067      	b.n	800780e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b0b      	cmp	r3, #11
 8007744:	d851      	bhi.n	80077ea <USBD_CDC_Setup+0x18a>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_CDC_Setup+0xec>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	0800777d 	.word	0x0800777d
 8007750:	080077f9 	.word	0x080077f9
 8007754:	080077eb 	.word	0x080077eb
 8007758:	080077eb 	.word	0x080077eb
 800775c:	080077eb 	.word	0x080077eb
 8007760:	080077eb 	.word	0x080077eb
 8007764:	080077eb 	.word	0x080077eb
 8007768:	080077eb 	.word	0x080077eb
 800776c:	080077eb 	.word	0x080077eb
 8007770:	080077eb 	.word	0x080077eb
 8007774:	080077a7 	.word	0x080077a7
 8007778:	080077d1 	.word	0x080077d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b03      	cmp	r3, #3
 8007786:	d107      	bne.n	8007798 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007788:	f107 030a 	add.w	r3, r7, #10
 800778c:	2202      	movs	r2, #2
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fd33 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007796:	e032      	b.n	80077fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fcbd 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	75fb      	strb	r3, [r7, #23]
          break;
 80077a4:	e02b      	b.n	80077fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d107      	bne.n	80077c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077b2:	f107 030d 	add.w	r3, r7, #13
 80077b6:	2201      	movs	r2, #1
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fd1e 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c0:	e01d      	b.n	80077fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 fca8 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 80077ca:	2303      	movs	r3, #3
 80077cc:	75fb      	strb	r3, [r7, #23]
          break;
 80077ce:	e016      	b.n	80077fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d00f      	beq.n	80077fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fc9b 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077e8:	e008      	b.n	80077fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fc94 	bl	800911a <USBD_CtlError>
          ret = USBD_FAIL;
 80077f2:	2303      	movs	r3, #3
 80077f4:	75fb      	strb	r3, [r7, #23]
          break;
 80077f6:	e002      	b.n	80077fe <USBD_CDC_Setup+0x19e>
          break;
 80077f8:	bf00      	nop
 80077fa:	e008      	b.n	800780e <USBD_CDC_Setup+0x1ae>
          break;
 80077fc:	bf00      	nop
      }
      break;
 80077fe:	e006      	b.n	800780e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fc89 	bl	800911a <USBD_CtlError>
      ret = USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	75fb      	strb	r3, [r7, #23]
      break;
 800780c:	bf00      	nop
  }

  return (uint8_t)ret;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800782a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	32b0      	adds	r2, #176	; 0xb0
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800783e:	2303      	movs	r3, #3
 8007840:	e065      	b.n	800790e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	32b0      	adds	r2, #176	; 0xb0
 800784c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007850:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 020f 	and.w	r2, r3, #15
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	3318      	adds	r3, #24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d02f      	beq.n	80078cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	f003 020f 	and.w	r2, r3, #15
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	3318      	adds	r3, #24
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	f003 010f 	and.w	r1, r3, #15
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	460b      	mov	r3, r1
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	440b      	add	r3, r1
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4403      	add	r3, r0
 8007894:	3348      	adds	r3, #72	; 0x48
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	fbb2 f1f3 	udiv	r1, r2, r3
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d112      	bne.n	80078cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	3318      	adds	r3, #24
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078be:	78f9      	ldrb	r1, [r7, #3]
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f002 f9ca 	bl	8009c5e <USBD_LL_Transmit>
 80078ca:	e01f      	b.n	800790c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	33b0      	adds	r3, #176	; 0xb0
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	33b0      	adds	r3, #176	; 0xb0
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	32b0      	adds	r2, #176	; 0xb0
 800792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007930:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	32b0      	adds	r2, #176	; 0xb0
 800793c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e01a      	b.n	800797e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f002 f9c8 	bl	8009ce2 <USBD_LL_GetRxDataSize>
 8007952:	4602      	mov	r2, r0
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	33b0      	adds	r3, #176	; 0xb0
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007978:	4611      	mov	r1, r2
 800797a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32b0      	adds	r2, #176	; 0xb0
 8007998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e025      	b.n	80079f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	33b0      	adds	r3, #176	; 0xb0
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01a      	beq.n	80079f2 <USBD_CDC_EP0_RxReady+0x6c>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079c2:	2bff      	cmp	r3, #255	; 0xff
 80079c4:	d015      	beq.n	80079f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	33b0      	adds	r3, #176	; 0xb0
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80079de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079e6:	b292      	uxth	r2, r2
 80079e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a04:	2182      	movs	r1, #130	; 0x82
 8007a06:	4818      	ldr	r0, [pc, #96]	; (8007a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a08:	f000 fd4f 	bl	80084aa <USBD_GetEpDesc>
 8007a0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4815      	ldr	r0, [pc, #84]	; (8007a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a12:	f000 fd4a 	bl	80084aa <USBD_GetEpDesc>
 8007a16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a18:	2181      	movs	r1, #129	; 0x81
 8007a1a:	4813      	ldr	r0, [pc, #76]	; (8007a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a1c:	f000 fd45 	bl	80084aa <USBD_GetEpDesc>
 8007a20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a3c:	711a      	strb	r2, [r3, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d006      	beq.n	8007a56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a50:	711a      	strb	r2, [r3, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2243      	movs	r2, #67	; 0x43
 8007a5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a5c:	4b02      	ldr	r3, [pc, #8]	; (8007a68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000050 	.word	0x20000050

08007a6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a74:	2182      	movs	r1, #130	; 0x82
 8007a76:	4818      	ldr	r0, [pc, #96]	; (8007ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a78:	f000 fd17 	bl	80084aa <USBD_GetEpDesc>
 8007a7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4815      	ldr	r0, [pc, #84]	; (8007ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a82:	f000 fd12 	bl	80084aa <USBD_GetEpDesc>
 8007a86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a88:	2181      	movs	r1, #129	; 0x81
 8007a8a:	4813      	ldr	r0, [pc, #76]	; (8007ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a8c:	f000 fd0d 	bl	80084aa <USBD_GetEpDesc>
 8007a90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	711a      	strb	r2, [r3, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f042 0202 	orr.w	r2, r2, #2
 8007ab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	711a      	strb	r2, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f042 0202 	orr.w	r2, r2, #2
 8007ac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2243      	movs	r2, #67	; 0x43
 8007aca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000050 	.word	0x20000050

08007adc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ae4:	2182      	movs	r1, #130	; 0x82
 8007ae6:	4818      	ldr	r0, [pc, #96]	; (8007b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ae8:	f000 fcdf 	bl	80084aa <USBD_GetEpDesc>
 8007aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aee:	2101      	movs	r1, #1
 8007af0:	4815      	ldr	r0, [pc, #84]	; (8007b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007af2:	f000 fcda 	bl	80084aa <USBD_GetEpDesc>
 8007af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007af8:	2181      	movs	r1, #129	; 0x81
 8007afa:	4813      	ldr	r0, [pc, #76]	; (8007b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007afc:	f000 fcd5 	bl	80084aa <USBD_GetEpDesc>
 8007b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2210      	movs	r2, #16
 8007b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1c:	711a      	strb	r2, [r3, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d006      	beq.n	8007b36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b30:	711a      	strb	r2, [r3, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2243      	movs	r2, #67	; 0x43
 8007b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000050 	.word	0x20000050

08007b4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	220a      	movs	r2, #10
 8007b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	2000000c 	.word	0x2000000c

08007b6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e009      	b.n	8007b94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	33b0      	adds	r3, #176	; 0xb0
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	32b0      	adds	r2, #176	; 0xb0
 8007bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e008      	b.n	8007bd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	32b0      	adds	r2, #176	; 0xb0
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e004      	b.n	8007c12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32b0      	adds	r2, #176	; 0xb0
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32b0      	adds	r2, #176	; 0xb0
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e025      	b.n	8007c9e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11f      	bne.n	8007c9c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c64:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <USBD_CDC_TransmitPacket+0x88>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4403      	add	r3, r0
 8007c7e:	3318      	adds	r3, #24
 8007c80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <USBD_CDC_TransmitPacket+0x88>)
 8007c84:	7819      	ldrb	r1, [r3, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 ffe3 	bl	8009c5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000093 	.word	0x20000093

08007cac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	32b0      	adds	r2, #176	; 0xb0
 8007cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	32b0      	adds	r2, #176	; 0xb0
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e018      	b.n	8007d0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7c1b      	ldrb	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <USBD_CDC_ReceivePacket+0x68>)
 8007ce4:	7819      	ldrb	r1, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 ffd5 	bl	8009ca0 <USBD_LL_PrepareReceive>
 8007cf6:	e008      	b.n	8007d0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <USBD_CDC_ReceivePacket+0x68>)
 8007cfa:	7819      	ldrb	r1, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 ffcb 	bl	8009ca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000094 	.word	0x20000094

08007d18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e01f      	b.n	8007d70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	79fa      	ldrb	r2, [r7, #7]
 8007d62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 fe45 	bl	80099f4 <USBD_LL_Init>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e025      	b.n	8007ddc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32ae      	adds	r2, #174	; 0xae
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00f      	beq.n	8007dcc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	; 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	f107 020e 	add.w	r2, r7, #14
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fe4d 	bl	8009a8c <USBD_LL_Start>
 8007df2:	4603      	mov	r3, r0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d009      	beq.n	8007e40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	4611      	mov	r1, r2
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e70:	2303      	movs	r3, #3
 8007e72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 f908 	bl	80090a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d01a      	beq.n	8007ef0 <USBD_LL_SetupStage+0x72>
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d822      	bhi.n	8007f04 <USBD_LL_SetupStage+0x86>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <USBD_LL_SetupStage+0x4a>
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d00a      	beq.n	8007edc <USBD_LL_SetupStage+0x5e>
 8007ec6:	e01d      	b.n	8007f04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb5f 	bl	8008594 <USBD_StdDevReq>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eda:	e020      	b.n	8007f1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fbc7 	bl	8008678 <USBD_StdItfReq>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
      break;
 8007eee:	e016      	b.n	8007f1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc29 	bl	8008750 <USBD_StdEPReq>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
      break;
 8007f02:	e00c      	b.n	8007f1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fe1a 	bl	8009b4c <USBD_LL_StallEP>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	bf00      	nop
  }

  return ret;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	460b      	mov	r3, r1
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d16e      	bne.n	800801e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	f040 8098 	bne.w	8008084 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d913      	bls.n	8007f88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	1ad2      	subs	r2, r2, r3
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4293      	cmp	r3, r2
 8007f78:	bf28      	it	cs
 8007f7a:	4613      	movcs	r3, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f001 f984 	bl	800928e <USBD_CtlContinueRx>
 8007f86:	e07d      	b.n	8008084 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f8e:	f003 031f 	and.w	r3, r3, #31
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d014      	beq.n	8007fc0 <USBD_LL_DataOutStage+0x98>
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d81d      	bhi.n	8007fd6 <USBD_LL_DataOutStage+0xae>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <USBD_LL_DataOutStage+0x7c>
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d003      	beq.n	8007faa <USBD_LL_DataOutStage+0x82>
 8007fa2:	e018      	b.n	8007fd6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75bb      	strb	r3, [r7, #22]
            break;
 8007fa8:	e018      	b.n	8007fdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fa5e 	bl	8008476 <USBD_CoreFindIF>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75bb      	strb	r3, [r7, #22]
            break;
 8007fbe:	e00d      	b.n	8007fdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	4619      	mov	r1, r3
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fa60 	bl	8008490 <USBD_CoreFindEP>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75bb      	strb	r3, [r7, #22]
            break;
 8007fd4:	e002      	b.n	8007fdc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75bb      	strb	r3, [r7, #22]
            break;
 8007fda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d119      	bne.n	8008016 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d113      	bne.n	8008016 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fee:	7dba      	ldrb	r2, [r7, #22]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	32ae      	adds	r2, #174	; 0xae
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ffe:	7dba      	ldrb	r2, [r7, #22]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008006:	7dba      	ldrb	r2, [r7, #22]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	32ae      	adds	r2, #174	; 0xae
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f001 f94a 	bl	80092b0 <USBD_CtlSendStatus>
 800801c:	e032      	b.n	8008084 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008024:	b2db      	uxtb	r3, r3
 8008026:	4619      	mov	r1, r3
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fa31 	bl	8008490 <USBD_CoreFindEP>
 800802e:	4603      	mov	r3, r0
 8008030:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008032:	7dbb      	ldrb	r3, [r7, #22]
 8008034:	2bff      	cmp	r3, #255	; 0xff
 8008036:	d025      	beq.n	8008084 <USBD_LL_DataOutStage+0x15c>
 8008038:	7dbb      	ldrb	r3, [r7, #22]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d122      	bne.n	8008084 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d117      	bne.n	800807a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800804a:	7dba      	ldrb	r2, [r7, #22]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	32ae      	adds	r2, #174	; 0xae
 8008050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00f      	beq.n	800807a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800805a:	7dba      	ldrb	r2, [r7, #22]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008062:	7dba      	ldrb	r2, [r7, #22]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	32ae      	adds	r2, #174	; 0xae
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	7afa      	ldrb	r2, [r7, #11]
 8008070:	4611      	mov	r1, r2
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	4798      	blx	r3
 8008076:	4603      	mov	r3, r0
 8008078:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	e000      	b.n	8008086 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b086      	sub	sp, #24
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	460b      	mov	r3, r1
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d16f      	bne.n	8008182 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3314      	adds	r3, #20
 80080a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d15a      	bne.n	8008168 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d914      	bls.n	80080e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f001 f8ac 	bl	8009232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080da:	2300      	movs	r3, #0
 80080dc:	2200      	movs	r2, #0
 80080de:	2100      	movs	r1, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f001 fddd 	bl	8009ca0 <USBD_LL_PrepareReceive>
 80080e6:	e03f      	b.n	8008168 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d11c      	bne.n	800812e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d316      	bcc.n	800812e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800810a:	429a      	cmp	r2, r3
 800810c:	d20f      	bcs.n	800812e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f001 f88d 	bl	8009232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008120:	2300      	movs	r3, #0
 8008122:	2200      	movs	r2, #0
 8008124:	2100      	movs	r1, #0
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f001 fdba 	bl	8009ca0 <USBD_LL_PrepareReceive>
 800812c:	e01c      	b.n	8008168 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d10f      	bne.n	800815a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800815a:	2180      	movs	r1, #128	; 0x80
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f001 fcf5 	bl	8009b4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f001 f8b7 	bl	80092d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d03a      	beq.n	80081e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff fe42 	bl	8007dfc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008180:	e032      	b.n	80081e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008182:	7afb      	ldrb	r3, [r7, #11]
 8008184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008188:	b2db      	uxtb	r3, r3
 800818a:	4619      	mov	r1, r3
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f97f 	bl	8008490 <USBD_CoreFindEP>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	2bff      	cmp	r3, #255	; 0xff
 800819a:	d025      	beq.n	80081e8 <USBD_LL_DataInStage+0x15a>
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d122      	bne.n	80081e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d11c      	bne.n	80081e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081ae:	7dfa      	ldrb	r2, [r7, #23]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	32ae      	adds	r2, #174	; 0xae
 80081b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d014      	beq.n	80081e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081be:	7dfa      	ldrb	r2, [r7, #23]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081c6:	7dfa      	ldrb	r2, [r7, #23]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	32ae      	adds	r2, #174	; 0xae
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	7afa      	ldrb	r2, [r7, #11]
 80081d4:	4611      	mov	r1, r2
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	4798      	blx	r3
 80081da:	4603      	mov	r3, r0
 80081dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80081de:	7dbb      	ldrb	r3, [r7, #22]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081e4:	7dbb      	ldrb	r3, [r7, #22]
 80081e6:	e000      	b.n	80081ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d014      	beq.n	8008258 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6852      	ldr	r2, [r2, #4]
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	4611      	mov	r1, r2
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008254:	2303      	movs	r3, #3
 8008256:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008258:	2340      	movs	r3, #64	; 0x40
 800825a:	2200      	movs	r2, #0
 800825c:	2100      	movs	r1, #0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 fc2f 	bl	8009ac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2240      	movs	r2, #64	; 0x40
 8008270:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008274:	2340      	movs	r3, #64	; 0x40
 8008276:	2200      	movs	r2, #0
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fc21 	bl	8009ac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2240      	movs	r2, #64	; 0x40
 800828a:	621a      	str	r2, [r3, #32]

  return ret;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2204      	movs	r2, #4
 80082d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d106      	bne.n	8008304 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d110      	bne.n	8008348 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	32ae      	adds	r2, #174	; 0xae
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008370:	2303      	movs	r3, #3
 8008372:	e01c      	b.n	80083ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b03      	cmp	r3, #3
 800837e:	d115      	bne.n	80083ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	32ae      	adds	r2, #174	; 0xae
 800838a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	32ae      	adds	r2, #174	; 0xae
 800839e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	4611      	mov	r1, r2
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	32ae      	adds	r2, #174	; 0xae
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e01c      	b.n	8008412 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d115      	bne.n	8008410 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	32ae      	adds	r2, #174	; 0xae
 80083ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	32ae      	adds	r2, #174	; 0xae
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	4611      	mov	r1, r2
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00e      	beq.n	800846c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6852      	ldr	r2, [r2, #4]
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	4611      	mov	r1, r2
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008482:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800849c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d920      	bls.n	8008514 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80084da:	e013      	b.n	8008504 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80084dc:	f107 030a 	add.w	r3, r7, #10
 80084e0:	4619      	mov	r1, r3
 80084e2:	6978      	ldr	r0, [r7, #20]
 80084e4:	f000 f81b 	bl	800851e <USBD_GetNextDesc>
 80084e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d108      	bne.n	8008504 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	789b      	ldrb	r3, [r3, #2]
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d008      	beq.n	8008512 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008500:	2300      	movs	r3, #0
 8008502:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	885b      	ldrh	r3, [r3, #2]
 8008508:	b29a      	uxth	r2, r3
 800850a:	897b      	ldrh	r3, [r7, #10]
 800850c:	429a      	cmp	r2, r3
 800850e:	d8e5      	bhi.n	80084dc <USBD_GetEpDesc+0x32>
 8008510:	e000      	b.n	8008514 <USBD_GetEpDesc+0x6a>
          break;
 8008512:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008514:	693b      	ldr	r3, [r7, #16]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	881a      	ldrh	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	4413      	add	r3, r2
 8008538:	b29a      	uxth	r2, r3
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4413      	add	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	3301      	adds	r3, #1
 800856e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008576:	8a3b      	ldrh	r3, [r7, #16]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	b21a      	sxth	r2, r3
 800857c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008580:	4313      	orrs	r3, r2
 8008582:	b21b      	sxth	r3, r3
 8008584:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008586:	89fb      	ldrh	r3, [r7, #14]
}
 8008588:	4618      	mov	r0, r3
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085aa:	2b40      	cmp	r3, #64	; 0x40
 80085ac:	d005      	beq.n	80085ba <USBD_StdDevReq+0x26>
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d857      	bhi.n	8008662 <USBD_StdDevReq+0xce>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <USBD_StdDevReq+0x42>
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d153      	bne.n	8008662 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	32ae      	adds	r2, #174	; 0xae
 80085c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
      break;
 80085d4:	e04a      	b.n	800866c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d83b      	bhi.n	8008656 <USBD_StdDevReq+0xc2>
 80085de:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <USBD_StdDevReq+0x50>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008639 	.word	0x08008639
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	08008657 	.word	0x08008657
 80085f0:	08008643 	.word	0x08008643
 80085f4:	08008657 	.word	0x08008657
 80085f8:	08008617 	.word	0x08008617
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008657 	.word	0x08008657
 8008604:	0800862f 	.word	0x0800862f
 8008608:	08008621 	.word	0x08008621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa3c 	bl	8008a8c <USBD_GetDescriptor>
          break;
 8008614:	e024      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fba1 	bl	8008d60 <USBD_SetAddress>
          break;
 800861e:	e01f      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fbe0 	bl	8008de8 <USBD_SetConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
          break;
 800862c:	e018      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc83 	bl	8008f3c <USBD_GetConfig>
          break;
 8008636:	e013      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fcb4 	bl	8008fa8 <USBD_GetStatus>
          break;
 8008640:	e00e      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fce3 	bl	8009010 <USBD_SetFeature>
          break;
 800864a:	e009      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fd07 	bl	8009062 <USBD_ClrFeature>
          break;
 8008654:	e004      	b.n	8008660 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fd5e 	bl	800911a <USBD_CtlError>
          break;
 800865e:	bf00      	nop
      }
      break;
 8008660:	e004      	b.n	800866c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fd58 	bl	800911a <USBD_CtlError>
      break;
 800866a:	bf00      	nop
  }

  return ret;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop

08008678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800868e:	2b40      	cmp	r3, #64	; 0x40
 8008690:	d005      	beq.n	800869e <USBD_StdItfReq+0x26>
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d852      	bhi.n	800873c <USBD_StdItfReq+0xc4>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <USBD_StdItfReq+0x26>
 800869a:	2b20      	cmp	r3, #32
 800869c:	d14e      	bne.n	800873c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d840      	bhi.n	800872e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	889b      	ldrh	r3, [r3, #4]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d836      	bhi.n	8008724 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fed9 	bl	8008476 <USBD_CoreFindIF>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2bff      	cmp	r3, #255	; 0xff
 80086cc:	d01d      	beq.n	800870a <USBD_StdItfReq+0x92>
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11a      	bne.n	800870a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	32ae      	adds	r2, #174	; 0xae
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00f      	beq.n	8008704 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80086e4:	7bba      	ldrb	r2, [r7, #14]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086ec:	7bba      	ldrb	r2, [r7, #14]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32ae      	adds	r2, #174	; 0xae
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008702:	e004      	b.n	800870e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008708:	e001      	b.n	800870e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	88db      	ldrh	r3, [r3, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d110      	bne.n	8008738 <USBD_StdItfReq+0xc0>
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10d      	bne.n	8008738 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fdc7 	bl	80092b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008722:	e009      	b.n	8008738 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fcf7 	bl	800911a <USBD_CtlError>
          break;
 800872c:	e004      	b.n	8008738 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fcf2 	bl	800911a <USBD_CtlError>
          break;
 8008736:	e000      	b.n	800873a <USBD_StdItfReq+0xc2>
          break;
 8008738:	bf00      	nop
      }
      break;
 800873a:	e004      	b.n	8008746 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fceb 	bl	800911a <USBD_CtlError>
      break;
 8008744:	bf00      	nop
  }

  return ret;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d007      	beq.n	8008780 <USBD_StdEPReq+0x30>
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	f200 817f 	bhi.w	8008a74 <USBD_StdEPReq+0x324>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d02a      	beq.n	80087d0 <USBD_StdEPReq+0x80>
 800877a:	2b20      	cmp	r3, #32
 800877c:	f040 817a 	bne.w	8008a74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fe83 	bl	8008490 <USBD_CoreFindEP>
 800878a:	4603      	mov	r3, r0
 800878c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800878e:	7b7b      	ldrb	r3, [r7, #13]
 8008790:	2bff      	cmp	r3, #255	; 0xff
 8008792:	f000 8174 	beq.w	8008a7e <USBD_StdEPReq+0x32e>
 8008796:	7b7b      	ldrb	r3, [r7, #13]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f040 8170 	bne.w	8008a7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800879e:	7b7a      	ldrb	r2, [r7, #13]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087a6:	7b7a      	ldrb	r2, [r7, #13]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	32ae      	adds	r2, #174	; 0xae
 80087ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8163 	beq.w	8008a7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087b8:	7b7a      	ldrb	r2, [r7, #13]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	32ae      	adds	r2, #174	; 0xae
 80087be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087ce:	e156      	b.n	8008a7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d008      	beq.n	80087ea <USBD_StdEPReq+0x9a>
 80087d8:	2b03      	cmp	r3, #3
 80087da:	f300 8145 	bgt.w	8008a68 <USBD_StdEPReq+0x318>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 809b 	beq.w	800891a <USBD_StdEPReq+0x1ca>
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d03c      	beq.n	8008862 <USBD_StdEPReq+0x112>
 80087e8:	e13e      	b.n	8008a68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d002      	beq.n	80087fc <USBD_StdEPReq+0xac>
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d016      	beq.n	8008828 <USBD_StdEPReq+0xd8>
 80087fa:	e02c      	b.n	8008856 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00d      	beq.n	800881e <USBD_StdEPReq+0xce>
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b80      	cmp	r3, #128	; 0x80
 8008806:	d00a      	beq.n	800881e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f99d 	bl	8009b4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008812:	2180      	movs	r1, #128	; 0x80
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f999 	bl	8009b4c <USBD_LL_StallEP>
 800881a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800881c:	e020      	b.n	8008860 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fc7a 	bl	800911a <USBD_CtlError>
              break;
 8008826:	e01b      	b.n	8008860 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10e      	bne.n	800884e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <USBD_StdEPReq+0xfe>
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b80      	cmp	r3, #128	; 0x80
 800883a:	d008      	beq.n	800884e <USBD_StdEPReq+0xfe>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	88db      	ldrh	r3, [r3, #6]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 f97f 	bl	8009b4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fd2e 	bl	80092b0 <USBD_CtlSendStatus>

              break;
 8008854:	e004      	b.n	8008860 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fc5e 	bl	800911a <USBD_CtlError>
              break;
 800885e:	bf00      	nop
          }
          break;
 8008860:	e107      	b.n	8008a72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d002      	beq.n	8008874 <USBD_StdEPReq+0x124>
 800886e:	2b03      	cmp	r3, #3
 8008870:	d016      	beq.n	80088a0 <USBD_StdEPReq+0x150>
 8008872:	e04b      	b.n	800890c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00d      	beq.n	8008896 <USBD_StdEPReq+0x146>
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	2b80      	cmp	r3, #128	; 0x80
 800887e:	d00a      	beq.n	8008896 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 f961 	bl	8009b4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800888a:	2180      	movs	r1, #128	; 0x80
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f95d 	bl	8009b4c <USBD_LL_StallEP>
 8008892:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008894:	e040      	b.n	8008918 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc3e 	bl	800911a <USBD_CtlError>
              break;
 800889e:	e03b      	b.n	8008918 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d136      	bne.n	8008916 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 f967 	bl	8009b8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fcf7 	bl	80092b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff fde2 	bl	8008490 <USBD_CoreFindEP>
 80088cc:	4603      	mov	r3, r0
 80088ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088d0:	7b7b      	ldrb	r3, [r7, #13]
 80088d2:	2bff      	cmp	r3, #255	; 0xff
 80088d4:	d01f      	beq.n	8008916 <USBD_StdEPReq+0x1c6>
 80088d6:	7b7b      	ldrb	r3, [r7, #13]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11c      	bne.n	8008916 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80088dc:	7b7a      	ldrb	r2, [r7, #13]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80088e4:	7b7a      	ldrb	r2, [r7, #13]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32ae      	adds	r2, #174	; 0xae
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088f4:	7b7a      	ldrb	r2, [r7, #13]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	32ae      	adds	r2, #174	; 0xae
 80088fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800890a:	e004      	b.n	8008916 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fc03 	bl	800911a <USBD_CtlError>
              break;
 8008914:	e000      	b.n	8008918 <USBD_StdEPReq+0x1c8>
              break;
 8008916:	bf00      	nop
          }
          break;
 8008918:	e0ab      	b.n	8008a72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d002      	beq.n	800892c <USBD_StdEPReq+0x1dc>
 8008926:	2b03      	cmp	r3, #3
 8008928:	d032      	beq.n	8008990 <USBD_StdEPReq+0x240>
 800892a:	e097      	b.n	8008a5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <USBD_StdEPReq+0x1f2>
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b80      	cmp	r3, #128	; 0x80
 8008936:	d004      	beq.n	8008942 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fbed 	bl	800911a <USBD_CtlError>
                break;
 8008940:	e091      	b.n	8008a66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	da0b      	bge.n	8008962 <USBD_StdEPReq+0x212>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008950:	4613      	mov	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	3310      	adds	r3, #16
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4413      	add	r3, r2
 800895e:	3304      	adds	r3, #4
 8008960:	e00b      	b.n	800897a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2202      	movs	r2, #2
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc37 	bl	80091fc <USBD_CtlSendData>
              break;
 800898e:	e06a      	b.n	8008a66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da11      	bge.n	80089bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	f003 020f 	and.w	r2, r3, #15
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	3324      	adds	r3, #36	; 0x24
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d117      	bne.n	80089e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fbb0 	bl	800911a <USBD_CtlError>
                  break;
 80089ba:	e054      	b.n	8008a66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	f003 020f 	and.w	r2, r3, #15
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fb9d 	bl	800911a <USBD_CtlError>
                  break;
 80089e0:	e041      	b.n	8008a66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da0b      	bge.n	8008a02 <USBD_StdEPReq+0x2b2>
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	3310      	adds	r3, #16
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	e00b      	b.n	8008a1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4413      	add	r3, r2
 8008a18:	3304      	adds	r3, #4
 8008a1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <USBD_StdEPReq+0x2d8>
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b80      	cmp	r3, #128	; 0x80
 8008a26:	d103      	bne.n	8008a30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e00e      	b.n	8008a4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f8c7 	bl	8009bc8 <USBD_LL_IsStallEP>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2202      	movs	r2, #2
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fbd1 	bl	80091fc <USBD_CtlSendData>
              break;
 8008a5a:	e004      	b.n	8008a66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fb5b 	bl	800911a <USBD_CtlError>
              break;
 8008a64:	bf00      	nop
          }
          break;
 8008a66:	e004      	b.n	8008a72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fb55 	bl	800911a <USBD_CtlError>
          break;
 8008a70:	bf00      	nop
      }
      break;
 8008a72:	e005      	b.n	8008a80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fb4f 	bl	800911a <USBD_CtlError>
      break;
 8008a7c:	e000      	b.n	8008a80 <USBD_StdEPReq+0x330>
      break;
 8008a7e:	bf00      	nop
  }

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	2b06      	cmp	r3, #6
 8008aae:	f200 8128 	bhi.w	8008d02 <USBD_GetDescriptor+0x276>
 8008ab2:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <USBD_GetDescriptor+0x2c>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008aed 	.word	0x08008aed
 8008ac0:	08008b2d 	.word	0x08008b2d
 8008ac4:	08008d03 	.word	0x08008d03
 8008ac8:	08008d03 	.word	0x08008d03
 8008acc:	08008ca3 	.word	0x08008ca3
 8008ad0:	08008ccf 	.word	0x08008ccf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
      break;
 8008aea:	e112      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7c1b      	ldrb	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10d      	bne.n	8008b10 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	f107 0208 	add.w	r2, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b0e:	e100      	b.n	8008d12 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	f107 0208 	add.w	r2, r7, #8
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	2202      	movs	r2, #2
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	e0f2      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	885b      	ldrh	r3, [r3, #2]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	f200 80ac 	bhi.w	8008c90 <USBD_GetDescriptor+0x204>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <USBD_GetDescriptor+0xb4>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b8d 	.word	0x08008b8d
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008bf5 	.word	0x08008bf5
 8008b50:	08008c29 	.word	0x08008c29
 8008b54:	08008c5d 	.word	0x08008c5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7a:	e091      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 facb 	bl	800911a <USBD_CtlError>
            err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8a:	e089      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bae:	e077      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fab1 	bl	800911a <USBD_CtlError>
            err++;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bbe:	e06f      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be2:	e05d      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa97 	bl	800911a <USBD_CtlError>
            err++;
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf2:	e055      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7c12      	ldrb	r2, [r2, #16]
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c16:	e043      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa7d 	bl	800911a <USBD_CtlError>
            err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
          break;
 8008c26:	e03b      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4a:	e029      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa63 	bl	800911a <USBD_CtlError>
            err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5a:	e021      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	7c12      	ldrb	r2, [r2, #16]
 8008c74:	f107 0108 	add.w	r1, r7, #8
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7e:	e00f      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa49 	bl	800911a <USBD_CtlError>
            err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8e:	e007      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa41 	bl	800911a <USBD_CtlError>
          err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c9e:	bf00      	nop
      }
      break;
 8008ca0:	e037      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7c1b      	ldrb	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb2:	f107 0208 	add.w	r2, r7, #8
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4798      	blx	r3
 8008cba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cbc:	e029      	b.n	8008d12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fa2a 	bl	800911a <USBD_CtlError>
        err++;
 8008cc6:	7afb      	ldrb	r3, [r7, #11]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ccc:	e021      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7c1b      	ldrb	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f107 0208 	add.w	r2, r7, #8
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4798      	blx	r3
 8008ce6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	2207      	movs	r2, #7
 8008cee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf0:	e00f      	b.n	8008d12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa10 	bl	800911a <USBD_CtlError>
        err++;
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008d00:	e007      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa08 	bl	800911a <USBD_CtlError>
      err++;
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d10:	bf00      	nop
  }

  if (err != 0U)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11e      	bne.n	8008d56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d016      	beq.n	8008d4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d20:	893b      	ldrh	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	88da      	ldrh	r2, [r3, #6]
 8008d2a:	893b      	ldrh	r3, [r7, #8]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	bf28      	it	cs
 8008d30:	4613      	movcs	r3, r2
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d36:	893b      	ldrh	r3, [r7, #8]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa5d 	bl	80091fc <USBD_CtlSendData>
 8008d42:	e009      	b.n	8008d58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9e7 	bl	800911a <USBD_CtlError>
 8008d4c:	e004      	b.n	8008d58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 faae 	bl	80092b0 <USBD_CtlSendStatus>
 8008d54:	e000      	b.n	8008d58 <USBD_GetDescriptor+0x2cc>
    return;
 8008d56:	bf00      	nop
  }
}
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	889b      	ldrh	r3, [r3, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d131      	bne.n	8008dd6 <USBD_SetAddress+0x76>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d12d      	bne.n	8008dd6 <USBD_SetAddress+0x76>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d80:	d829      	bhi.n	8008dd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d104      	bne.n	8008da4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9bc 	bl	800911a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da2:	e01d      	b.n	8008de0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7bfa      	ldrb	r2, [r7, #15]
 8008da8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 ff35 	bl	8009c20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa7a 	bl	80092b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dca:	e009      	b.n	8008de0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd4:	e004      	b.n	8008de0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f99e 	bl	800911a <USBD_CtlError>
  }
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	4b4e      	ldr	r3, [pc, #312]	; (8008f38 <USBD_SetConfig+0x150>)
 8008dfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e00:	4b4d      	ldr	r3, [pc, #308]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d905      	bls.n	8008e14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f985 	bl	800911a <USBD_CtlError>
    return USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e08c      	b.n	8008f2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d002      	beq.n	8008e26 <USBD_SetConfig+0x3e>
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d029      	beq.n	8008e78 <USBD_SetConfig+0x90>
 8008e24:	e075      	b.n	8008f12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e26:	4b44      	ldr	r3, [pc, #272]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e2e:	4b42      	ldr	r3, [pc, #264]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e38:	4b3f      	ldr	r3, [pc, #252]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7fe ffe7 	bl	8007e12 <USBD_SetClassConfig>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f962 	bl	800911a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e5e:	e065      	b.n	8008f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa25 	bl	80092b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e6e:	e05d      	b.n	8008f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa1d 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008e76:	e059      	b.n	8008f2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e78:	4b2f      	ldr	r3, [pc, #188]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d112      	bne.n	8008ea6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e88:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e92:	4b29      	ldr	r3, [pc, #164]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fe ffd6 	bl	8007e4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa06 	bl	80092b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ea4:	e042      	b.n	8008f2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <USBD_SetConfig+0x150>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d02a      	beq.n	8008f0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe ffc4 	bl	8007e4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <USBD_SetConfig+0x150>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <USBD_SetConfig+0x150>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fe ff9d 	bl	8007e12 <USBD_SetClassConfig>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f918 	bl	800911a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fe ffa9 	bl	8007e4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f00:	e014      	b.n	8008f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9d4 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008f08:	e010      	b.n	8008f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9d0 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008f10:	e00c      	b.n	8008f2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f900 	bl	800911a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f1a:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <USBD_SetConfig+0x150>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ff92 	bl	8007e4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f26:	2303      	movs	r3, #3
 8008f28:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2a:	bf00      	nop
  }

  return ret;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000400 	.word	0x20000400

08008f3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	88db      	ldrh	r3, [r3, #6]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d004      	beq.n	8008f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8e2 	bl	800911a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f56:	e023      	b.n	8008fa0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	dc02      	bgt.n	8008f6a <USBD_GetConfig+0x2e>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc03      	bgt.n	8008f70 <USBD_GetConfig+0x34>
 8008f68:	e015      	b.n	8008f96 <USBD_GetConfig+0x5a>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d00b      	beq.n	8008f86 <USBD_GetConfig+0x4a>
 8008f6e:	e012      	b.n	8008f96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f93c 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f84:	e00c      	b.n	8008fa0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f934 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f94:	e004      	b.n	8008fa0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8be 	bl	800911a <USBD_CtlError>
        break;
 8008f9e:	bf00      	nop
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d81e      	bhi.n	8008ffe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d004      	beq.n	8008fd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f8a5 	bl	800911a <USBD_CtlError>
        break;
 8008fd0:	e01a      	b.n	8009008 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f043 0202 	orr.w	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f900 	bl	80091fc <USBD_CtlSendData>
      break;
 8008ffc:	e004      	b.n	8009008 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f88a 	bl	800911a <USBD_CtlError>
      break;
 8009006:	bf00      	nop
  }
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d107      	bne.n	8009032 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f940 	bl	80092b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009030:	e013      	b.n	800905a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d10b      	bne.n	8009052 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	889b      	ldrh	r3, [r3, #4]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	b29b      	uxth	r3, r3
 8009042:	b2da      	uxtb	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f930 	bl	80092b0 <USBD_CtlSendStatus>
}
 8009050:	e003      	b.n	800905a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f860 	bl	800911a <USBD_CtlError>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009072:	b2db      	uxtb	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	2b02      	cmp	r3, #2
 8009078:	d80b      	bhi.n	8009092 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10c      	bne.n	800909c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f910 	bl	80092b0 <USBD_CtlSendStatus>
      }
      break;
 8009090:	e004      	b.n	800909c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f840 	bl	800911a <USBD_CtlError>
      break;
 800909a:	e000      	b.n	800909e <USBD_ClrFeature+0x3c>
      break;
 800909c:	bf00      	nop
  }
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7ff fa41 	bl	8008558 <SWAPBYTE>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fa34 	bl	8008558 <SWAPBYTE>
 80090f0:	4603      	mov	r3, r0
 80090f2:	461a      	mov	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fa27 	bl	8008558 <SWAPBYTE>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	80da      	strh	r2, [r3, #6]
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009124:	2180      	movs	r1, #128	; 0x80
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fd10 	bl	8009b4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fd0c 	bl	8009b4c <USBD_LL_StallEP>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d036      	beq.n	80091c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f000 f836 	bl	80091c8 <USBD_GetLen>
 800915c:	4603      	mov	r3, r0
 800915e:	3301      	adds	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4413      	add	r3, r2
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
  idx++;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	3301      	adds	r3, #1
 800917a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	2203      	movs	r2, #3
 8009184:	701a      	strb	r2, [r3, #0]
  idx++;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	3301      	adds	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800918c:	e013      	b.n	80091b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	4413      	add	r3, r2
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3301      	adds	r3, #1
 800919e:	613b      	str	r3, [r7, #16]
    idx++;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	3301      	adds	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	4413      	add	r3, r2
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	3301      	adds	r3, #1
 80091b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e7      	bne.n	800918e <USBD_GetString+0x52>
 80091be:	e000      	b.n	80091c2 <USBD_GetString+0x86>
    return;
 80091c0:	bf00      	nop
  }
}
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091d8:	e005      	b.n	80091e6 <USBD_GetLen+0x1e>
  {
    len++;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3301      	adds	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f5      	bne.n	80091da <USBD_GetLen+0x12>
  }

  return len;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2202      	movs	r2, #2
 800920c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fd1b 	bl	8009c5e <USBD_LL_Transmit>

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fd0a 	bl	8009c5e <USBD_LL_Transmit>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2203      	movs	r2, #3
 8009264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	2100      	movs	r1, #0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fd0e 	bl	8009ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	2100      	movs	r1, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fcfd 	bl	8009ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fcc9 	bl	8009c5e <USBD_LL_Transmit>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fcd7 	bl	8009ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009300:	2200      	movs	r2, #0
 8009302:	4912      	ldr	r1, [pc, #72]	; (800934c <MX_USB_DEVICE_Init+0x50>)
 8009304:	4812      	ldr	r0, [pc, #72]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009306:	f7fe fd07 	bl	8007d18 <USBD_Init>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009310:	f7f8 fa9e 	bl	8001850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009314:	490f      	ldr	r1, [pc, #60]	; (8009354 <MX_USB_DEVICE_Init+0x58>)
 8009316:	480e      	ldr	r0, [pc, #56]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009318:	f7fe fd2e 	bl	8007d78 <USBD_RegisterClass>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009322:	f7f8 fa95 	bl	8001850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009326:	490c      	ldr	r1, [pc, #48]	; (8009358 <MX_USB_DEVICE_Init+0x5c>)
 8009328:	4809      	ldr	r0, [pc, #36]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 800932a:	f7fe fc1f 	bl	8007b6c <USBD_CDC_RegisterInterface>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009334:	f7f8 fa8c 	bl	8001850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009338:	4805      	ldr	r0, [pc, #20]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 800933a:	f7fe fd53 	bl	8007de4 <USBD_Start>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009344:	f7f8 fa84 	bl	8001850 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}
 800934c:	200000ac 	.word	0x200000ac
 8009350:	20000404 	.word	0x20000404
 8009354:	20000018 	.word	0x20000018
 8009358:	20000098 	.word	0x20000098

0800935c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	4905      	ldr	r1, [pc, #20]	; (8009378 <CDC_Init_FS+0x1c>)
 8009364:	4805      	ldr	r0, [pc, #20]	; (800937c <CDC_Init_FS+0x20>)
 8009366:	f7fe fc1b 	bl	8007ba0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936a:	4905      	ldr	r1, [pc, #20]	; (8009380 <CDC_Init_FS+0x24>)
 800936c:	4803      	ldr	r0, [pc, #12]	; (800937c <CDC_Init_FS+0x20>)
 800936e:	f7fe fc39 	bl	8007be4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009374:	4618      	mov	r0, r3
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000ee0 	.word	0x20000ee0
 800937c:	20000404 	.word	0x20000404
 8009380:	200006e0 	.word	0x200006e0

08009384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800938a:	4618      	mov	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b23      	cmp	r3, #35	; 0x23
 80093a8:	d84a      	bhi.n	8009440 <CDC_Control_FS+0xac>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <CDC_Control_FS+0x1c>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009441 	.word	0x08009441
 80093b8:	08009441 	.word	0x08009441
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009441 	.word	0x08009441
 80093c4:	08009441 	.word	0x08009441
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009441 	.word	0x08009441
 80093d0:	08009441 	.word	0x08009441
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	08009441 	.word	0x08009441
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009441 	.word	0x08009441
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009441 	.word	0x08009441
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009441 	.word	0x08009441
 8009400:	08009441 	.word	0x08009441
 8009404:	08009441 	.word	0x08009441
 8009408:	08009441 	.word	0x08009441
 800940c:	08009441 	.word	0x08009441
 8009410:	08009441 	.word	0x08009441
 8009414:	08009441 	.word	0x08009441
 8009418:	08009441 	.word	0x08009441
 800941c:	08009441 	.word	0x08009441
 8009420:	08009441 	.word	0x08009441
 8009424:	08009441 	.word	0x08009441
 8009428:	08009441 	.word	0x08009441
 800942c:	08009441 	.word	0x08009441
 8009430:	08009441 	.word	0x08009441
 8009434:	08009441 	.word	0x08009441
 8009438:	08009441 	.word	0x08009441
 800943c:	08009441 	.word	0x08009441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009440:	bf00      	nop
  }

  return (USBD_OK);
 8009442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4813      	ldr	r0, [pc, #76]	; (80094ac <CDC_Receive_FS+0x5c>)
 800945e:	f7fe fbc1 	bl	8007be4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009462:	4812      	ldr	r0, [pc, #72]	; (80094ac <CDC_Receive_FS+0x5c>)
 8009464:	f7fe fc22 	bl	8007cac <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f81f 	bl	80094b4 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b31      	cmp	r3, #49	; 0x31
 800947c:	d106      	bne.n	800948c <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800947e:	2201      	movs	r2, #1
 8009480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009484:	480a      	ldr	r0, [pc, #40]	; (80094b0 <CDC_Receive_FS+0x60>)
 8009486:	f7f9 fb3f 	bl	8002b08 <HAL_GPIO_WritePin>
 800948a:	e009      	b.n	80094a0 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b30      	cmp	r3, #48	; 0x30
 8009492:	d105      	bne.n	80094a0 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8009494:	2200      	movs	r2, #0
 8009496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800949a:	4805      	ldr	r0, [pc, #20]	; (80094b0 <CDC_Receive_FS+0x60>)
 800949c:	f7f9 fb34 	bl	8002b08 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 80094a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000404 	.word	0x20000404
 80094b0:	40020c00 	.word	0x40020c00

080094b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094c4:	4b0d      	ldr	r3, [pc, #52]	; (80094fc <CDC_Transmit_FS+0x48>)
 80094c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e00b      	b.n	80094f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094da:	887b      	ldrh	r3, [r7, #2]
 80094dc:	461a      	mov	r2, r3
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4806      	ldr	r0, [pc, #24]	; (80094fc <CDC_Transmit_FS+0x48>)
 80094e2:	f7fe fb5d 	bl	8007ba0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094e6:	4805      	ldr	r0, [pc, #20]	; (80094fc <CDC_Transmit_FS+0x48>)
 80094e8:	f7fe fb9a 	bl	8007c20 <USBD_CDC_TransmitPacket>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000404 	.word	0x20000404

08009500 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009516:	4618      	mov	r0, r3
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2212      	movs	r2, #18
 8009534:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009536:	4b03      	ldr	r3, [pc, #12]	; (8009544 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	200000c8 	.word	0x200000c8

08009548 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2204      	movs	r2, #4
 8009558:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800955a:	4b03      	ldr	r3, [pc, #12]	; (8009568 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	200000dc 	.word	0x200000dc

0800956c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d105      	bne.n	800958a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4907      	ldr	r1, [pc, #28]	; (80095a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009582:	4808      	ldr	r0, [pc, #32]	; (80095a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009584:	f7ff fdda 	bl	800913c <USBD_GetString>
 8009588:	e004      	b.n	8009594 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	4904      	ldr	r1, [pc, #16]	; (80095a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800958e:	4805      	ldr	r0, [pc, #20]	; (80095a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009590:	f7ff fdd4 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009594:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200016e0 	.word	0x200016e0
 80095a4:	0800daf8 	.word	0x0800daf8

080095a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	6039      	str	r1, [r7, #0]
 80095b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	4904      	ldr	r1, [pc, #16]	; (80095c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095b8:	4804      	ldr	r0, [pc, #16]	; (80095cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095ba:	f7ff fdbf 	bl	800913c <USBD_GetString>
  return USBD_StrDesc;
 80095be:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	200016e0 	.word	0x200016e0
 80095cc:	0800db10 	.word	0x0800db10

080095d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	6039      	str	r1, [r7, #0]
 80095da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	221a      	movs	r2, #26
 80095e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095e2:	f000 f843 	bl	800966c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095e6:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	200000e0 	.word	0x200000e0

080095f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d105      	bne.n	8009612 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4907      	ldr	r1, [pc, #28]	; (8009628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800960a:	4808      	ldr	r0, [pc, #32]	; (800962c <USBD_FS_ConfigStrDescriptor+0x38>)
 800960c:	f7ff fd96 	bl	800913c <USBD_GetString>
 8009610:	e004      	b.n	800961c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	4904      	ldr	r1, [pc, #16]	; (8009628 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009616:	4805      	ldr	r0, [pc, #20]	; (800962c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009618:	f7ff fd90 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 800961c:	4b02      	ldr	r3, [pc, #8]	; (8009628 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	200016e0 	.word	0x200016e0
 800962c:	0800db24 	.word	0x0800db24

08009630 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	6039      	str	r1, [r7, #0]
 800963a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d105      	bne.n	800964e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	4907      	ldr	r1, [pc, #28]	; (8009664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009646:	4808      	ldr	r0, [pc, #32]	; (8009668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009648:	f7ff fd78 	bl	800913c <USBD_GetString>
 800964c:	e004      	b.n	8009658 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4904      	ldr	r1, [pc, #16]	; (8009664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009652:	4805      	ldr	r0, [pc, #20]	; (8009668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009654:	f7ff fd72 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	200016e0 	.word	0x200016e0
 8009668:	0800db30 	.word	0x0800db30

0800966c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009672:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <Get_SerialNum+0x44>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009678:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <Get_SerialNum+0x48>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800967e:	4b0e      	ldr	r3, [pc, #56]	; (80096b8 <Get_SerialNum+0x4c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d009      	beq.n	80096a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009692:	2208      	movs	r2, #8
 8009694:	4909      	ldr	r1, [pc, #36]	; (80096bc <Get_SerialNum+0x50>)
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 f814 	bl	80096c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800969c:	2204      	movs	r2, #4
 800969e:	4908      	ldr	r1, [pc, #32]	; (80096c0 <Get_SerialNum+0x54>)
 80096a0:	68b8      	ldr	r0, [r7, #8]
 80096a2:	f000 f80f 	bl	80096c4 <IntToUnicode>
  }
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	1fff7a10 	.word	0x1fff7a10
 80096b4:	1fff7a14 	.word	0x1fff7a14
 80096b8:	1fff7a18 	.word	0x1fff7a18
 80096bc:	200000e2 	.word	0x200000e2
 80096c0:	200000f2 	.word	0x200000f2

080096c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096d6:	2300      	movs	r3, #0
 80096d8:	75fb      	strb	r3, [r7, #23]
 80096da:	e027      	b.n	800972c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0f1b      	lsrs	r3, r3, #28
 80096e0:	2b09      	cmp	r3, #9
 80096e2:	d80b      	bhi.n	80096fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	0f1b      	lsrs	r3, r3, #28
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	4619      	mov	r1, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	440b      	add	r3, r1
 80096f4:	3230      	adds	r2, #48	; 0x30
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	e00a      	b.n	8009712 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	0f1b      	lsrs	r3, r3, #28
 8009700:	b2da      	uxtb	r2, r3
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	4619      	mov	r1, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	440b      	add	r3, r1
 800970c:	3237      	adds	r2, #55	; 0x37
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	3301      	adds	r3, #1
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	3301      	adds	r3, #1
 800972a:	75fb      	strb	r3, [r7, #23]
 800972c:	7dfa      	ldrb	r2, [r7, #23]
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	429a      	cmp	r2, r3
 8009732:	d3d3      	bcc.n	80096dc <IntToUnicode+0x18>
  }
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	; 0x28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800974c:	f107 0314 	add.w	r3, r7, #20
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	605a      	str	r2, [r3, #4]
 8009756:	609a      	str	r2, [r3, #8]
 8009758:	60da      	str	r2, [r3, #12]
 800975a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009764:	d14b      	bne.n	80097fe <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	4b27      	ldr	r3, [pc, #156]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 800976c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976e:	4a26      	ldr	r2, [pc, #152]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	6313      	str	r3, [r2, #48]	; 0x30
 8009776:	4b24      	ldr	r3, [pc, #144]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009788:	2302      	movs	r3, #2
 800978a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978c:	2300      	movs	r3, #0
 800978e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009790:	2300      	movs	r3, #0
 8009792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009794:	230a      	movs	r3, #10
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009798:	f107 0314 	add.w	r3, r7, #20
 800979c:	4619      	mov	r1, r3
 800979e:	481b      	ldr	r0, [pc, #108]	; (800980c <HAL_PCD_MspInit+0xc8>)
 80097a0:	f7f8 fffe 	bl	80027a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80097a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097aa:	2302      	movs	r3, #2
 80097ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097ae:	2301      	movs	r3, #1
 80097b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097b2:	2300      	movs	r3, #0
 80097b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097b6:	230a      	movs	r3, #10
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ba:	f107 0314 	add.w	r3, r7, #20
 80097be:	4619      	mov	r1, r3
 80097c0:	4812      	ldr	r0, [pc, #72]	; (800980c <HAL_PCD_MspInit+0xc8>)
 80097c2:	f7f8 ffed 	bl	80027a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097c6:	4b10      	ldr	r3, [pc, #64]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	4a0f      	ldr	r2, [pc, #60]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 80097cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d0:	6353      	str	r3, [r2, #52]	; 0x34
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 80097d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097da:	4a0b      	ldr	r2, [pc, #44]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 80097dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097e0:	6453      	str	r3, [r2, #68]	; 0x44
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <HAL_PCD_MspInit+0xc4>)
 80097e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097ee:	2200      	movs	r2, #0
 80097f0:	2100      	movs	r1, #0
 80097f2:	2043      	movs	r0, #67	; 0x43
 80097f4:	f7f8 ff0b 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097f8:	2043      	movs	r0, #67	; 0x43
 80097fa:	f7f8 ff24 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097fe:	bf00      	nop
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	40023800 	.word	0x40023800
 800980c:	40020000 	.word	0x40020000

08009810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7fe fb29 	bl	8007e7e <USBD_LL_SetupStage>
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	4619      	mov	r1, r3
 800985e:	f7fe fb63 	bl	8007f28 <USBD_LL_DataOutStage>
}
 8009862:	bf00      	nop
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	334c      	adds	r3, #76	; 0x4c
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	4619      	mov	r1, r3
 8009892:	f7fe fbfc 	bl	800808e <USBD_LL_DataInStage>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fd30 	bl	8008312 <USBD_LL_SOF>
}
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098c2:	2301      	movs	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
 80098d2:	e008      	b.n	80098e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d102      	bne.n	80098e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
 80098e0:	e001      	b.n	80098e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80098e2:	f7f7 ffb5 	bl	8001850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ec:	7bfa      	ldrb	r2, [r7, #15]
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe fcd0 	bl	8008296 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe fc78 	bl	80081f2 <USBD_LL_Reset>
}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fccb 	bl	80082b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009940:	4b04      	ldr	r3, [pc, #16]	; (8009954 <HAL_PCD_SuspendCallback+0x48>)
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	4a03      	ldr	r2, [pc, #12]	; (8009954 <HAL_PCD_SuspendCallback+0x48>)
 8009946:	f043 0306 	orr.w	r3, r3, #6
 800994a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	e000ed00 	.word	0xe000ed00

08009958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fcbb 	bl	80082e2 <USBD_LL_Resume>
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fd13 	bl	80083b6 <USBD_LL_IsoOUTIncomplete>
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fccf 	bl	8008352 <USBD_LL_IsoINIncomplete>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fd25 	bl	800841a <USBD_LL_DevConnected>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fd22 	bl	8008430 <USBD_LL_DevDisconnected>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d13c      	bne.n	8009a7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a04:	4a20      	ldr	r2, [pc, #128]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a14:	4b1c      	ldr	r3, [pc, #112]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a1c:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a1e:	2204      	movs	r2, #4
 8009a20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a22:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a24:	2202      	movs	r2, #2
 8009a26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a28:	4b17      	ldr	r3, [pc, #92]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a2e:	4b16      	ldr	r3, [pc, #88]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a30:	2202      	movs	r2, #2
 8009a32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a34:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a40:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a46:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a4c:	4b0e      	ldr	r3, [pc, #56]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a52:	480d      	ldr	r0, [pc, #52]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a54:	f7f9 f871 	bl	8002b3a <HAL_PCD_Init>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a5e:	f7f7 fef7 	bl	8001850 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	4808      	ldr	r0, [pc, #32]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a66:	f7fa fac8 	bl	8003ffa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a6a:	2240      	movs	r2, #64	; 0x40
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	4806      	ldr	r0, [pc, #24]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a70:	f7fa fa7c 	bl	8003f6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a74:	2280      	movs	r2, #128	; 0x80
 8009a76:	2101      	movs	r1, #1
 8009a78:	4803      	ldr	r0, [pc, #12]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a7a:	f7fa fa77 	bl	8003f6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	200018e0 	.word	0x200018e0

08009a8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7f9 f966 	bl	8002d74 <HAL_PCD_Start>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 f942 	bl	8009d38 <USBD_Get_USB_Status>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	4608      	mov	r0, r1
 8009acc:	4611      	mov	r1, r2
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	70fb      	strb	r3, [r7, #3]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70bb      	strb	r3, [r7, #2]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009aea:	78bb      	ldrb	r3, [r7, #2]
 8009aec:	883a      	ldrh	r2, [r7, #0]
 8009aee:	78f9      	ldrb	r1, [r7, #3]
 8009af0:	f7f9 fe37 	bl	8003762 <HAL_PCD_EP_Open>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 f91c 	bl	8009d38 <USBD_Get_USB_Status>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b28:	78fa      	ldrb	r2, [r7, #3]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7f9 fe80 	bl	8003832 <HAL_PCD_EP_Close>
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f8fd 	bl	8009d38 <USBD_Get_USB_Status>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7f9 ff58 	bl	8003a20 <HAL_PCD_EP_SetStall>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 f8de 	bl	8009d38 <USBD_Get_USB_Status>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ba4:	78fa      	ldrb	r2, [r7, #3]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7f9 ff9d 	bl	8003ae8 <HAL_PCD_EP_ClrStall>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f8bf 	bl	8009d38 <USBD_Get_USB_Status>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	da0b      	bge.n	8009bfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bea:	68f9      	ldr	r1, [r7, #12]
 8009bec:	4613      	mov	r3, r2
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	440b      	add	r3, r1
 8009bf6:	333e      	adds	r3, #62	; 0x3e
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	e00b      	b.n	8009c14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	4613      	mov	r3, r2
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009c12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c3a:	78fa      	ldrb	r2, [r7, #3]
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7f9 fd6a 	bl	8003718 <HAL_PCD_SetAddress>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f874 	bl	8009d38 <USBD_Get_USB_Status>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c7c:	7af9      	ldrb	r1, [r7, #11]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	f7f9 fe83 	bl	800398c <HAL_PCD_EP_Transmit>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 f853 	bl	8009d38 <USBD_Get_USB_Status>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c96:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	460b      	mov	r3, r1
 8009cae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009cbe:	7af9      	ldrb	r1, [r7, #11]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	f7f9 fdff 	bl	80038c6 <HAL_PCD_EP_Receive>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f832 	bl	8009d38 <USBD_Get_USB_Status>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f9 fe2f 	bl	800395c <HAL_PCD_EP_GetRxCount>
 8009cfe:	4603      	mov	r3, r0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d10:	4b03      	ldr	r3, [pc, #12]	; (8009d20 <USBD_static_malloc+0x18>)
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	20001dec 	.word	0x20001dec

08009d24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]

}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d817      	bhi.n	8009d7c <USBD_Get_USB_Status+0x44>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USBD_Get_USB_Status+0x1c>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d6b 	.word	0x08009d6b
 8009d5c:	08009d71 	.word	0x08009d71
 8009d60:	08009d77 	.word	0x08009d77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
    break;
 8009d68:	e00b      	b.n	8009d82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d6e:	e008      	b.n	8009d82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
    break;
 8009d74:	e005      	b.n	8009d82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d76:	2303      	movs	r3, #3
 8009d78:	73fb      	strb	r3, [r7, #15]
    break;
 8009d7a:	e002      	b.n	8009d82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d80:	bf00      	nop
  }
  return usb_status;
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <atof>:
 8009d90:	2100      	movs	r1, #0
 8009d92:	f000 be0d 	b.w	800a9b0 <strtod>

08009d96 <sulp>:
 8009d96:	b570      	push	{r4, r5, r6, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	ec45 4b10 	vmov	d0, r4, r5
 8009da0:	4616      	mov	r6, r2
 8009da2:	f002 f82d 	bl	800be00 <__ulp>
 8009da6:	ec51 0b10 	vmov	r0, r1, d0
 8009daa:	b17e      	cbz	r6, 8009dcc <sulp+0x36>
 8009dac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009db0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dd09      	ble.n	8009dcc <sulp+0x36>
 8009db8:	051b      	lsls	r3, r3, #20
 8009dba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009dd0 <_strtod_l>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	ed2d 8b02 	vpush	{d8}
 8009dd8:	b09b      	sub	sp, #108	; 0x6c
 8009dda:	4604      	mov	r4, r0
 8009ddc:	9213      	str	r2, [sp, #76]	; 0x4c
 8009dde:	2200      	movs	r2, #0
 8009de0:	9216      	str	r2, [sp, #88]	; 0x58
 8009de2:	460d      	mov	r5, r1
 8009de4:	f04f 0800 	mov.w	r8, #0
 8009de8:	f04f 0900 	mov.w	r9, #0
 8009dec:	460a      	mov	r2, r1
 8009dee:	9215      	str	r2, [sp, #84]	; 0x54
 8009df0:	7811      	ldrb	r1, [r2, #0]
 8009df2:	292b      	cmp	r1, #43	; 0x2b
 8009df4:	d04c      	beq.n	8009e90 <_strtod_l+0xc0>
 8009df6:	d83a      	bhi.n	8009e6e <_strtod_l+0x9e>
 8009df8:	290d      	cmp	r1, #13
 8009dfa:	d834      	bhi.n	8009e66 <_strtod_l+0x96>
 8009dfc:	2908      	cmp	r1, #8
 8009dfe:	d834      	bhi.n	8009e6a <_strtod_l+0x9a>
 8009e00:	2900      	cmp	r1, #0
 8009e02:	d03d      	beq.n	8009e80 <_strtod_l+0xb0>
 8009e04:	2200      	movs	r2, #0
 8009e06:	920a      	str	r2, [sp, #40]	; 0x28
 8009e08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009e0a:	7832      	ldrb	r2, [r6, #0]
 8009e0c:	2a30      	cmp	r2, #48	; 0x30
 8009e0e:	f040 80b4 	bne.w	8009f7a <_strtod_l+0x1aa>
 8009e12:	7872      	ldrb	r2, [r6, #1]
 8009e14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009e18:	2a58      	cmp	r2, #88	; 0x58
 8009e1a:	d170      	bne.n	8009efe <_strtod_l+0x12e>
 8009e1c:	9302      	str	r3, [sp, #8]
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	ab16      	add	r3, sp, #88	; 0x58
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	4a8e      	ldr	r2, [pc, #568]	; (800a060 <_strtod_l+0x290>)
 8009e28:	ab17      	add	r3, sp, #92	; 0x5c
 8009e2a:	a915      	add	r1, sp, #84	; 0x54
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f001 f8c5 	bl	800afbc <__gethex>
 8009e32:	f010 070f 	ands.w	r7, r0, #15
 8009e36:	4605      	mov	r5, r0
 8009e38:	d005      	beq.n	8009e46 <_strtod_l+0x76>
 8009e3a:	2f06      	cmp	r7, #6
 8009e3c:	d12a      	bne.n	8009e94 <_strtod_l+0xc4>
 8009e3e:	3601      	adds	r6, #1
 8009e40:	2300      	movs	r3, #0
 8009e42:	9615      	str	r6, [sp, #84]	; 0x54
 8009e44:	930a      	str	r3, [sp, #40]	; 0x28
 8009e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f040 857f 	bne.w	800a94c <_strtod_l+0xb7c>
 8009e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e50:	b1db      	cbz	r3, 8009e8a <_strtod_l+0xba>
 8009e52:	4642      	mov	r2, r8
 8009e54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e58:	ec43 2b10 	vmov	d0, r2, r3
 8009e5c:	b01b      	add	sp, #108	; 0x6c
 8009e5e:	ecbd 8b02 	vpop	{d8}
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	2920      	cmp	r1, #32
 8009e68:	d1cc      	bne.n	8009e04 <_strtod_l+0x34>
 8009e6a:	3201      	adds	r2, #1
 8009e6c:	e7bf      	b.n	8009dee <_strtod_l+0x1e>
 8009e6e:	292d      	cmp	r1, #45	; 0x2d
 8009e70:	d1c8      	bne.n	8009e04 <_strtod_l+0x34>
 8009e72:	2101      	movs	r1, #1
 8009e74:	910a      	str	r1, [sp, #40]	; 0x28
 8009e76:	1c51      	adds	r1, r2, #1
 8009e78:	9115      	str	r1, [sp, #84]	; 0x54
 8009e7a:	7852      	ldrb	r2, [r2, #1]
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	d1c3      	bne.n	8009e08 <_strtod_l+0x38>
 8009e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e82:	9515      	str	r5, [sp, #84]	; 0x54
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f040 855f 	bne.w	800a948 <_strtod_l+0xb78>
 8009e8a:	4642      	mov	r2, r8
 8009e8c:	464b      	mov	r3, r9
 8009e8e:	e7e3      	b.n	8009e58 <_strtod_l+0x88>
 8009e90:	2100      	movs	r1, #0
 8009e92:	e7ef      	b.n	8009e74 <_strtod_l+0xa4>
 8009e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e96:	b13a      	cbz	r2, 8009ea8 <_strtod_l+0xd8>
 8009e98:	2135      	movs	r1, #53	; 0x35
 8009e9a:	a818      	add	r0, sp, #96	; 0x60
 8009e9c:	f002 f8ad 	bl	800bffa <__copybits>
 8009ea0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f001 fc80 	bl	800b7a8 <_Bfree>
 8009ea8:	3f01      	subs	r7, #1
 8009eaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009eac:	2f04      	cmp	r7, #4
 8009eae:	d806      	bhi.n	8009ebe <_strtod_l+0xee>
 8009eb0:	e8df f007 	tbb	[pc, r7]
 8009eb4:	201d0314 	.word	0x201d0314
 8009eb8:	14          	.byte	0x14
 8009eb9:	00          	.byte	0x00
 8009eba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009ebe:	05e9      	lsls	r1, r5, #23
 8009ec0:	bf48      	it	mi
 8009ec2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009eca:	0d1b      	lsrs	r3, r3, #20
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1b9      	bne.n	8009e46 <_strtod_l+0x76>
 8009ed2:	f000 ff5f 	bl	800ad94 <__errno>
 8009ed6:	2322      	movs	r3, #34	; 0x22
 8009ed8:	6003      	str	r3, [r0, #0]
 8009eda:	e7b4      	b.n	8009e46 <_strtod_l+0x76>
 8009edc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009ee0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ee8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009eec:	e7e7      	b.n	8009ebe <_strtod_l+0xee>
 8009eee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a068 <_strtod_l+0x298>
 8009ef2:	e7e4      	b.n	8009ebe <_strtod_l+0xee>
 8009ef4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009ef8:	f04f 38ff 	mov.w	r8, #4294967295
 8009efc:	e7df      	b.n	8009ebe <_strtod_l+0xee>
 8009efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	9215      	str	r2, [sp, #84]	; 0x54
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b30      	cmp	r3, #48	; 0x30
 8009f08:	d0f9      	beq.n	8009efe <_strtod_l+0x12e>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d09b      	beq.n	8009e46 <_strtod_l+0x76>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f04f 0a00 	mov.w	sl, #0
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009f1e:	46d3      	mov	fp, sl
 8009f20:	220a      	movs	r2, #10
 8009f22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009f24:	7806      	ldrb	r6, [r0, #0]
 8009f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009f2a:	b2d9      	uxtb	r1, r3
 8009f2c:	2909      	cmp	r1, #9
 8009f2e:	d926      	bls.n	8009f7e <_strtod_l+0x1ae>
 8009f30:	494c      	ldr	r1, [pc, #304]	; (800a064 <_strtod_l+0x294>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	f000 fe63 	bl	800abfe <strncmp>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d030      	beq.n	8009f9e <_strtod_l+0x1ce>
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	4632      	mov	r2, r6
 8009f40:	9005      	str	r0, [sp, #20]
 8009f42:	465e      	mov	r6, fp
 8009f44:	4603      	mov	r3, r0
 8009f46:	2a65      	cmp	r2, #101	; 0x65
 8009f48:	d001      	beq.n	8009f4e <_strtod_l+0x17e>
 8009f4a:	2a45      	cmp	r2, #69	; 0x45
 8009f4c:	d113      	bne.n	8009f76 <_strtod_l+0x1a6>
 8009f4e:	b91e      	cbnz	r6, 8009f58 <_strtod_l+0x188>
 8009f50:	9a04      	ldr	r2, [sp, #16]
 8009f52:	4302      	orrs	r2, r0
 8009f54:	d094      	beq.n	8009e80 <_strtod_l+0xb0>
 8009f56:	2600      	movs	r6, #0
 8009f58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009f5a:	1c6a      	adds	r2, r5, #1
 8009f5c:	9215      	str	r2, [sp, #84]	; 0x54
 8009f5e:	786a      	ldrb	r2, [r5, #1]
 8009f60:	2a2b      	cmp	r2, #43	; 0x2b
 8009f62:	d074      	beq.n	800a04e <_strtod_l+0x27e>
 8009f64:	2a2d      	cmp	r2, #45	; 0x2d
 8009f66:	d078      	beq.n	800a05a <_strtod_l+0x28a>
 8009f68:	f04f 0c00 	mov.w	ip, #0
 8009f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009f70:	2909      	cmp	r1, #9
 8009f72:	d97f      	bls.n	800a074 <_strtod_l+0x2a4>
 8009f74:	9515      	str	r5, [sp, #84]	; 0x54
 8009f76:	2700      	movs	r7, #0
 8009f78:	e09e      	b.n	800a0b8 <_strtod_l+0x2e8>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e7c8      	b.n	8009f10 <_strtod_l+0x140>
 8009f7e:	f1bb 0f08 	cmp.w	fp, #8
 8009f82:	bfd8      	it	le
 8009f84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009f86:	f100 0001 	add.w	r0, r0, #1
 8009f8a:	bfda      	itte	le
 8009f8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f90:	9309      	strle	r3, [sp, #36]	; 0x24
 8009f92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009f96:	f10b 0b01 	add.w	fp, fp, #1
 8009f9a:	9015      	str	r0, [sp, #84]	; 0x54
 8009f9c:	e7c1      	b.n	8009f22 <_strtod_l+0x152>
 8009f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	9215      	str	r2, [sp, #84]	; 0x54
 8009fa4:	785a      	ldrb	r2, [r3, #1]
 8009fa6:	f1bb 0f00 	cmp.w	fp, #0
 8009faa:	d037      	beq.n	800a01c <_strtod_l+0x24c>
 8009fac:	9005      	str	r0, [sp, #20]
 8009fae:	465e      	mov	r6, fp
 8009fb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d912      	bls.n	8009fde <_strtod_l+0x20e>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e7c4      	b.n	8009f46 <_strtod_l+0x176>
 8009fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	9215      	str	r2, [sp, #84]	; 0x54
 8009fc2:	785a      	ldrb	r2, [r3, #1]
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	2a30      	cmp	r2, #48	; 0x30
 8009fc8:	d0f8      	beq.n	8009fbc <_strtod_l+0x1ec>
 8009fca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009fce:	2b08      	cmp	r3, #8
 8009fd0:	f200 84c1 	bhi.w	800a956 <_strtod_l+0xb86>
 8009fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fd6:	9005      	str	r0, [sp, #20]
 8009fd8:	2000      	movs	r0, #0
 8009fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fdc:	4606      	mov	r6, r0
 8009fde:	3a30      	subs	r2, #48	; 0x30
 8009fe0:	f100 0301 	add.w	r3, r0, #1
 8009fe4:	d014      	beq.n	800a010 <_strtod_l+0x240>
 8009fe6:	9905      	ldr	r1, [sp, #20]
 8009fe8:	4419      	add	r1, r3
 8009fea:	9105      	str	r1, [sp, #20]
 8009fec:	4633      	mov	r3, r6
 8009fee:	eb00 0c06 	add.w	ip, r0, r6
 8009ff2:	210a      	movs	r1, #10
 8009ff4:	4563      	cmp	r3, ip
 8009ff6:	d113      	bne.n	800a020 <_strtod_l+0x250>
 8009ff8:	1833      	adds	r3, r6, r0
 8009ffa:	2b08      	cmp	r3, #8
 8009ffc:	f106 0601 	add.w	r6, r6, #1
 800a000:	4406      	add	r6, r0
 800a002:	dc1a      	bgt.n	800a03a <_strtod_l+0x26a>
 800a004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a006:	230a      	movs	r3, #10
 800a008:	fb03 2301 	mla	r3, r3, r1, r2
 800a00c:	9309      	str	r3, [sp, #36]	; 0x24
 800a00e:	2300      	movs	r3, #0
 800a010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a012:	1c51      	adds	r1, r2, #1
 800a014:	9115      	str	r1, [sp, #84]	; 0x54
 800a016:	7852      	ldrb	r2, [r2, #1]
 800a018:	4618      	mov	r0, r3
 800a01a:	e7c9      	b.n	8009fb0 <_strtod_l+0x1e0>
 800a01c:	4658      	mov	r0, fp
 800a01e:	e7d2      	b.n	8009fc6 <_strtod_l+0x1f6>
 800a020:	2b08      	cmp	r3, #8
 800a022:	f103 0301 	add.w	r3, r3, #1
 800a026:	dc03      	bgt.n	800a030 <_strtod_l+0x260>
 800a028:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a02a:	434f      	muls	r7, r1
 800a02c:	9709      	str	r7, [sp, #36]	; 0x24
 800a02e:	e7e1      	b.n	8009ff4 <_strtod_l+0x224>
 800a030:	2b10      	cmp	r3, #16
 800a032:	bfd8      	it	le
 800a034:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a038:	e7dc      	b.n	8009ff4 <_strtod_l+0x224>
 800a03a:	2e10      	cmp	r6, #16
 800a03c:	bfdc      	itt	le
 800a03e:	230a      	movle	r3, #10
 800a040:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a044:	e7e3      	b.n	800a00e <_strtod_l+0x23e>
 800a046:	2300      	movs	r3, #0
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	2301      	movs	r3, #1
 800a04c:	e780      	b.n	8009f50 <_strtod_l+0x180>
 800a04e:	f04f 0c00 	mov.w	ip, #0
 800a052:	1caa      	adds	r2, r5, #2
 800a054:	9215      	str	r2, [sp, #84]	; 0x54
 800a056:	78aa      	ldrb	r2, [r5, #2]
 800a058:	e788      	b.n	8009f6c <_strtod_l+0x19c>
 800a05a:	f04f 0c01 	mov.w	ip, #1
 800a05e:	e7f8      	b.n	800a052 <_strtod_l+0x282>
 800a060:	0800db68 	.word	0x0800db68
 800a064:	0800db58 	.word	0x0800db58
 800a068:	7ff00000 	.word	0x7ff00000
 800a06c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a06e:	1c51      	adds	r1, r2, #1
 800a070:	9115      	str	r1, [sp, #84]	; 0x54
 800a072:	7852      	ldrb	r2, [r2, #1]
 800a074:	2a30      	cmp	r2, #48	; 0x30
 800a076:	d0f9      	beq.n	800a06c <_strtod_l+0x29c>
 800a078:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a07c:	2908      	cmp	r1, #8
 800a07e:	f63f af7a 	bhi.w	8009f76 <_strtod_l+0x1a6>
 800a082:	3a30      	subs	r2, #48	; 0x30
 800a084:	9208      	str	r2, [sp, #32]
 800a086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a088:	920c      	str	r2, [sp, #48]	; 0x30
 800a08a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a08c:	1c57      	adds	r7, r2, #1
 800a08e:	9715      	str	r7, [sp, #84]	; 0x54
 800a090:	7852      	ldrb	r2, [r2, #1]
 800a092:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a096:	f1be 0f09 	cmp.w	lr, #9
 800a09a:	d938      	bls.n	800a10e <_strtod_l+0x33e>
 800a09c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a09e:	1a7f      	subs	r7, r7, r1
 800a0a0:	2f08      	cmp	r7, #8
 800a0a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a0a6:	dc03      	bgt.n	800a0b0 <_strtod_l+0x2e0>
 800a0a8:	9908      	ldr	r1, [sp, #32]
 800a0aa:	428f      	cmp	r7, r1
 800a0ac:	bfa8      	it	ge
 800a0ae:	460f      	movge	r7, r1
 800a0b0:	f1bc 0f00 	cmp.w	ip, #0
 800a0b4:	d000      	beq.n	800a0b8 <_strtod_l+0x2e8>
 800a0b6:	427f      	negs	r7, r7
 800a0b8:	2e00      	cmp	r6, #0
 800a0ba:	d14f      	bne.n	800a15c <_strtod_l+0x38c>
 800a0bc:	9904      	ldr	r1, [sp, #16]
 800a0be:	4301      	orrs	r1, r0
 800a0c0:	f47f aec1 	bne.w	8009e46 <_strtod_l+0x76>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f47f aedb 	bne.w	8009e80 <_strtod_l+0xb0>
 800a0ca:	2a69      	cmp	r2, #105	; 0x69
 800a0cc:	d029      	beq.n	800a122 <_strtod_l+0x352>
 800a0ce:	dc26      	bgt.n	800a11e <_strtod_l+0x34e>
 800a0d0:	2a49      	cmp	r2, #73	; 0x49
 800a0d2:	d026      	beq.n	800a122 <_strtod_l+0x352>
 800a0d4:	2a4e      	cmp	r2, #78	; 0x4e
 800a0d6:	f47f aed3 	bne.w	8009e80 <_strtod_l+0xb0>
 800a0da:	499b      	ldr	r1, [pc, #620]	; (800a348 <_strtod_l+0x578>)
 800a0dc:	a815      	add	r0, sp, #84	; 0x54
 800a0de:	f001 f9ad 	bl	800b43c <__match>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f43f aecc 	beq.w	8009e80 <_strtod_l+0xb0>
 800a0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b28      	cmp	r3, #40	; 0x28
 800a0ee:	d12f      	bne.n	800a150 <_strtod_l+0x380>
 800a0f0:	4996      	ldr	r1, [pc, #600]	; (800a34c <_strtod_l+0x57c>)
 800a0f2:	aa18      	add	r2, sp, #96	; 0x60
 800a0f4:	a815      	add	r0, sp, #84	; 0x54
 800a0f6:	f001 f9b5 	bl	800b464 <__hexnan>
 800a0fa:	2805      	cmp	r0, #5
 800a0fc:	d128      	bne.n	800a150 <_strtod_l+0x380>
 800a0fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a104:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a108:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a10c:	e69b      	b.n	8009e46 <_strtod_l+0x76>
 800a10e:	9f08      	ldr	r7, [sp, #32]
 800a110:	210a      	movs	r1, #10
 800a112:	fb01 2107 	mla	r1, r1, r7, r2
 800a116:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a11a:	9208      	str	r2, [sp, #32]
 800a11c:	e7b5      	b.n	800a08a <_strtod_l+0x2ba>
 800a11e:	2a6e      	cmp	r2, #110	; 0x6e
 800a120:	e7d9      	b.n	800a0d6 <_strtod_l+0x306>
 800a122:	498b      	ldr	r1, [pc, #556]	; (800a350 <_strtod_l+0x580>)
 800a124:	a815      	add	r0, sp, #84	; 0x54
 800a126:	f001 f989 	bl	800b43c <__match>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f43f aea8 	beq.w	8009e80 <_strtod_l+0xb0>
 800a130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a132:	4988      	ldr	r1, [pc, #544]	; (800a354 <_strtod_l+0x584>)
 800a134:	3b01      	subs	r3, #1
 800a136:	a815      	add	r0, sp, #84	; 0x54
 800a138:	9315      	str	r3, [sp, #84]	; 0x54
 800a13a:	f001 f97f 	bl	800b43c <__match>
 800a13e:	b910      	cbnz	r0, 800a146 <_strtod_l+0x376>
 800a140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a142:	3301      	adds	r3, #1
 800a144:	9315      	str	r3, [sp, #84]	; 0x54
 800a146:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a364 <_strtod_l+0x594>
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	e67a      	b.n	8009e46 <_strtod_l+0x76>
 800a150:	4881      	ldr	r0, [pc, #516]	; (800a358 <_strtod_l+0x588>)
 800a152:	f000 fe59 	bl	800ae08 <nan>
 800a156:	ec59 8b10 	vmov	r8, r9, d0
 800a15a:	e674      	b.n	8009e46 <_strtod_l+0x76>
 800a15c:	9b05      	ldr	r3, [sp, #20]
 800a15e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a160:	1afb      	subs	r3, r7, r3
 800a162:	f1bb 0f00 	cmp.w	fp, #0
 800a166:	bf08      	it	eq
 800a168:	46b3      	moveq	fp, r6
 800a16a:	2e10      	cmp	r6, #16
 800a16c:	9308      	str	r3, [sp, #32]
 800a16e:	4635      	mov	r5, r6
 800a170:	bfa8      	it	ge
 800a172:	2510      	movge	r5, #16
 800a174:	f7f6 f9c6 	bl	8000504 <__aeabi_ui2d>
 800a178:	2e09      	cmp	r6, #9
 800a17a:	4680      	mov	r8, r0
 800a17c:	4689      	mov	r9, r1
 800a17e:	dd13      	ble.n	800a1a8 <_strtod_l+0x3d8>
 800a180:	4b76      	ldr	r3, [pc, #472]	; (800a35c <_strtod_l+0x58c>)
 800a182:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a18a:	f7f6 fa35 	bl	80005f8 <__aeabi_dmul>
 800a18e:	4680      	mov	r8, r0
 800a190:	4650      	mov	r0, sl
 800a192:	4689      	mov	r9, r1
 800a194:	f7f6 f9b6 	bl	8000504 <__aeabi_ui2d>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f6 f874 	bl	800028c <__adddf3>
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4689      	mov	r9, r1
 800a1a8:	2e0f      	cmp	r6, #15
 800a1aa:	dc38      	bgt.n	800a21e <_strtod_l+0x44e>
 800a1ac:	9b08      	ldr	r3, [sp, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f43f ae49 	beq.w	8009e46 <_strtod_l+0x76>
 800a1b4:	dd24      	ble.n	800a200 <_strtod_l+0x430>
 800a1b6:	2b16      	cmp	r3, #22
 800a1b8:	dc0b      	bgt.n	800a1d2 <_strtod_l+0x402>
 800a1ba:	4968      	ldr	r1, [pc, #416]	; (800a35c <_strtod_l+0x58c>)
 800a1bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	464b      	mov	r3, r9
 800a1c8:	f7f6 fa16 	bl	80005f8 <__aeabi_dmul>
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	4689      	mov	r9, r1
 800a1d0:	e639      	b.n	8009e46 <_strtod_l+0x76>
 800a1d2:	9a08      	ldr	r2, [sp, #32]
 800a1d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	db20      	blt.n	800a21e <_strtod_l+0x44e>
 800a1dc:	4c5f      	ldr	r4, [pc, #380]	; (800a35c <_strtod_l+0x58c>)
 800a1de:	f1c6 060f 	rsb	r6, r6, #15
 800a1e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a1e6:	4642      	mov	r2, r8
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ee:	f7f6 fa03 	bl	80005f8 <__aeabi_dmul>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	1b9e      	subs	r6, r3, r6
 800a1f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a1fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1fe:	e7e3      	b.n	800a1c8 <_strtod_l+0x3f8>
 800a200:	9b08      	ldr	r3, [sp, #32]
 800a202:	3316      	adds	r3, #22
 800a204:	db0b      	blt.n	800a21e <_strtod_l+0x44e>
 800a206:	9b05      	ldr	r3, [sp, #20]
 800a208:	1bdf      	subs	r7, r3, r7
 800a20a:	4b54      	ldr	r3, [pc, #336]	; (800a35c <_strtod_l+0x58c>)
 800a20c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a214:	4640      	mov	r0, r8
 800a216:	4649      	mov	r1, r9
 800a218:	f7f6 fb18 	bl	800084c <__aeabi_ddiv>
 800a21c:	e7d6      	b.n	800a1cc <_strtod_l+0x3fc>
 800a21e:	9b08      	ldr	r3, [sp, #32]
 800a220:	1b75      	subs	r5, r6, r5
 800a222:	441d      	add	r5, r3
 800a224:	2d00      	cmp	r5, #0
 800a226:	dd70      	ble.n	800a30a <_strtod_l+0x53a>
 800a228:	f015 030f 	ands.w	r3, r5, #15
 800a22c:	d00a      	beq.n	800a244 <_strtod_l+0x474>
 800a22e:	494b      	ldr	r1, [pc, #300]	; (800a35c <_strtod_l+0x58c>)
 800a230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a234:	4642      	mov	r2, r8
 800a236:	464b      	mov	r3, r9
 800a238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a23c:	f7f6 f9dc 	bl	80005f8 <__aeabi_dmul>
 800a240:	4680      	mov	r8, r0
 800a242:	4689      	mov	r9, r1
 800a244:	f035 050f 	bics.w	r5, r5, #15
 800a248:	d04d      	beq.n	800a2e6 <_strtod_l+0x516>
 800a24a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a24e:	dd22      	ble.n	800a296 <_strtod_l+0x4c6>
 800a250:	2500      	movs	r5, #0
 800a252:	46ab      	mov	fp, r5
 800a254:	9509      	str	r5, [sp, #36]	; 0x24
 800a256:	9505      	str	r5, [sp, #20]
 800a258:	2322      	movs	r3, #34	; 0x22
 800a25a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a364 <_strtod_l+0x594>
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	f04f 0800 	mov.w	r8, #0
 800a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a266:	2b00      	cmp	r3, #0
 800a268:	f43f aded 	beq.w	8009e46 <_strtod_l+0x76>
 800a26c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a26e:	4620      	mov	r0, r4
 800a270:	f001 fa9a 	bl	800b7a8 <_Bfree>
 800a274:	9905      	ldr	r1, [sp, #20]
 800a276:	4620      	mov	r0, r4
 800a278:	f001 fa96 	bl	800b7a8 <_Bfree>
 800a27c:	4659      	mov	r1, fp
 800a27e:	4620      	mov	r0, r4
 800a280:	f001 fa92 	bl	800b7a8 <_Bfree>
 800a284:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a286:	4620      	mov	r0, r4
 800a288:	f001 fa8e 	bl	800b7a8 <_Bfree>
 800a28c:	4629      	mov	r1, r5
 800a28e:	4620      	mov	r0, r4
 800a290:	f001 fa8a 	bl	800b7a8 <_Bfree>
 800a294:	e5d7      	b.n	8009e46 <_strtod_l+0x76>
 800a296:	4b32      	ldr	r3, [pc, #200]	; (800a360 <_strtod_l+0x590>)
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	2300      	movs	r3, #0
 800a29c:	112d      	asrs	r5, r5, #4
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	469a      	mov	sl, r3
 800a2a4:	2d01      	cmp	r5, #1
 800a2a6:	dc21      	bgt.n	800a2ec <_strtod_l+0x51c>
 800a2a8:	b10b      	cbz	r3, 800a2ae <_strtod_l+0x4de>
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	4689      	mov	r9, r1
 800a2ae:	492c      	ldr	r1, [pc, #176]	; (800a360 <_strtod_l+0x590>)
 800a2b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a2b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a2b8:	4642      	mov	r2, r8
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c0:	f7f6 f99a 	bl	80005f8 <__aeabi_dmul>
 800a2c4:	4b27      	ldr	r3, [pc, #156]	; (800a364 <_strtod_l+0x594>)
 800a2c6:	460a      	mov	r2, r1
 800a2c8:	400b      	ands	r3, r1
 800a2ca:	4927      	ldr	r1, [pc, #156]	; (800a368 <_strtod_l+0x598>)
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	d8be      	bhi.n	800a250 <_strtod_l+0x480>
 800a2d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a2d6:	428b      	cmp	r3, r1
 800a2d8:	bf86      	itte	hi
 800a2da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a36c <_strtod_l+0x59c>
 800a2de:	f04f 38ff 	movhi.w	r8, #4294967295
 800a2e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	e07b      	b.n	800a3e4 <_strtod_l+0x614>
 800a2ec:	07ea      	lsls	r2, r5, #31
 800a2ee:	d505      	bpl.n	800a2fc <_strtod_l+0x52c>
 800a2f0:	9b04      	ldr	r3, [sp, #16]
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f6 f97f 	bl	80005f8 <__aeabi_dmul>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	9a04      	ldr	r2, [sp, #16]
 800a2fe:	3208      	adds	r2, #8
 800a300:	f10a 0a01 	add.w	sl, sl, #1
 800a304:	106d      	asrs	r5, r5, #1
 800a306:	9204      	str	r2, [sp, #16]
 800a308:	e7cc      	b.n	800a2a4 <_strtod_l+0x4d4>
 800a30a:	d0ec      	beq.n	800a2e6 <_strtod_l+0x516>
 800a30c:	426d      	negs	r5, r5
 800a30e:	f015 020f 	ands.w	r2, r5, #15
 800a312:	d00a      	beq.n	800a32a <_strtod_l+0x55a>
 800a314:	4b11      	ldr	r3, [pc, #68]	; (800a35c <_strtod_l+0x58c>)
 800a316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a31a:	4640      	mov	r0, r8
 800a31c:	4649      	mov	r1, r9
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	f7f6 fa93 	bl	800084c <__aeabi_ddiv>
 800a326:	4680      	mov	r8, r0
 800a328:	4689      	mov	r9, r1
 800a32a:	112d      	asrs	r5, r5, #4
 800a32c:	d0db      	beq.n	800a2e6 <_strtod_l+0x516>
 800a32e:	2d1f      	cmp	r5, #31
 800a330:	dd1e      	ble.n	800a370 <_strtod_l+0x5a0>
 800a332:	2500      	movs	r5, #0
 800a334:	46ab      	mov	fp, r5
 800a336:	9509      	str	r5, [sp, #36]	; 0x24
 800a338:	9505      	str	r5, [sp, #20]
 800a33a:	2322      	movs	r3, #34	; 0x22
 800a33c:	f04f 0800 	mov.w	r8, #0
 800a340:	f04f 0900 	mov.w	r9, #0
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	e78d      	b.n	800a264 <_strtod_l+0x494>
 800a348:	0800db63 	.word	0x0800db63
 800a34c:	0800db7c 	.word	0x0800db7c
 800a350:	0800db5a 	.word	0x0800db5a
 800a354:	0800db5d 	.word	0x0800db5d
 800a358:	0800dc6c 	.word	0x0800dc6c
 800a35c:	0800dd60 	.word	0x0800dd60
 800a360:	0800dd38 	.word	0x0800dd38
 800a364:	7ff00000 	.word	0x7ff00000
 800a368:	7ca00000 	.word	0x7ca00000
 800a36c:	7fefffff 	.word	0x7fefffff
 800a370:	f015 0310 	ands.w	r3, r5, #16
 800a374:	bf18      	it	ne
 800a376:	236a      	movne	r3, #106	; 0x6a
 800a378:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a71c <_strtod_l+0x94c>
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	2300      	movs	r3, #0
 800a384:	07ea      	lsls	r2, r5, #31
 800a386:	d504      	bpl.n	800a392 <_strtod_l+0x5c2>
 800a388:	e9da 2300 	ldrd	r2, r3, [sl]
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	2301      	movs	r3, #1
 800a392:	106d      	asrs	r5, r5, #1
 800a394:	f10a 0a08 	add.w	sl, sl, #8
 800a398:	d1f4      	bne.n	800a384 <_strtod_l+0x5b4>
 800a39a:	b10b      	cbz	r3, 800a3a0 <_strtod_l+0x5d0>
 800a39c:	4680      	mov	r8, r0
 800a39e:	4689      	mov	r9, r1
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	b1bb      	cbz	r3, 800a3d4 <_strtod_l+0x604>
 800a3a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a3a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	dd10      	ble.n	800a3d4 <_strtod_l+0x604>
 800a3b2:	2b1f      	cmp	r3, #31
 800a3b4:	f340 811e 	ble.w	800a5f4 <_strtod_l+0x824>
 800a3b8:	2b34      	cmp	r3, #52	; 0x34
 800a3ba:	bfde      	ittt	le
 800a3bc:	f04f 33ff 	movle.w	r3, #4294967295
 800a3c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a3c4:	4093      	lslle	r3, r2
 800a3c6:	f04f 0800 	mov.w	r8, #0
 800a3ca:	bfcc      	ite	gt
 800a3cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a3d0:	ea03 0901 	andle.w	r9, r3, r1
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f6 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d1a6      	bne.n	800a332 <_strtod_l+0x562>
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3ea:	4633      	mov	r3, r6
 800a3ec:	465a      	mov	r2, fp
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f001 fa42 	bl	800b878 <__s2b>
 800a3f4:	9009      	str	r0, [sp, #36]	; 0x24
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f af2a 	beq.w	800a250 <_strtod_l+0x480>
 800a3fc:	9a08      	ldr	r2, [sp, #32]
 800a3fe:	9b05      	ldr	r3, [sp, #20]
 800a400:	2a00      	cmp	r2, #0
 800a402:	eba3 0307 	sub.w	r3, r3, r7
 800a406:	bfa8      	it	ge
 800a408:	2300      	movge	r3, #0
 800a40a:	930c      	str	r3, [sp, #48]	; 0x30
 800a40c:	2500      	movs	r5, #0
 800a40e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a412:	9312      	str	r3, [sp, #72]	; 0x48
 800a414:	46ab      	mov	fp, r5
 800a416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a418:	4620      	mov	r0, r4
 800a41a:	6859      	ldr	r1, [r3, #4]
 800a41c:	f001 f984 	bl	800b728 <_Balloc>
 800a420:	9005      	str	r0, [sp, #20]
 800a422:	2800      	cmp	r0, #0
 800a424:	f43f af18 	beq.w	800a258 <_strtod_l+0x488>
 800a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42a:	691a      	ldr	r2, [r3, #16]
 800a42c:	3202      	adds	r2, #2
 800a42e:	f103 010c 	add.w	r1, r3, #12
 800a432:	0092      	lsls	r2, r2, #2
 800a434:	300c      	adds	r0, #12
 800a436:	f000 fcd9 	bl	800adec <memcpy>
 800a43a:	ec49 8b10 	vmov	d0, r8, r9
 800a43e:	aa18      	add	r2, sp, #96	; 0x60
 800a440:	a917      	add	r1, sp, #92	; 0x5c
 800a442:	4620      	mov	r0, r4
 800a444:	f001 fd4c 	bl	800bee0 <__d2b>
 800a448:	ec49 8b18 	vmov	d8, r8, r9
 800a44c:	9016      	str	r0, [sp, #88]	; 0x58
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f af02 	beq.w	800a258 <_strtod_l+0x488>
 800a454:	2101      	movs	r1, #1
 800a456:	4620      	mov	r0, r4
 800a458:	f001 faa6 	bl	800b9a8 <__i2b>
 800a45c:	4683      	mov	fp, r0
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f aefa 	beq.w	800a258 <_strtod_l+0x488>
 800a464:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a466:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a468:	2e00      	cmp	r6, #0
 800a46a:	bfab      	itete	ge
 800a46c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a46e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a470:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a472:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a476:	bfac      	ite	ge
 800a478:	eb06 0a03 	addge.w	sl, r6, r3
 800a47c:	1b9f      	sublt	r7, r3, r6
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	1af6      	subs	r6, r6, r3
 800a482:	4416      	add	r6, r2
 800a484:	4ba0      	ldr	r3, [pc, #640]	; (800a708 <_strtod_l+0x938>)
 800a486:	3e01      	subs	r6, #1
 800a488:	429e      	cmp	r6, r3
 800a48a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a48e:	f280 80c4 	bge.w	800a61a <_strtod_l+0x84a>
 800a492:	1b9b      	subs	r3, r3, r6
 800a494:	2b1f      	cmp	r3, #31
 800a496:	eba2 0203 	sub.w	r2, r2, r3
 800a49a:	f04f 0101 	mov.w	r1, #1
 800a49e:	f300 80b0 	bgt.w	800a602 <_strtod_l+0x832>
 800a4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a6:	930e      	str	r3, [sp, #56]	; 0x38
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ac:	eb0a 0602 	add.w	r6, sl, r2
 800a4b0:	9b04      	ldr	r3, [sp, #16]
 800a4b2:	45b2      	cmp	sl, r6
 800a4b4:	4417      	add	r7, r2
 800a4b6:	441f      	add	r7, r3
 800a4b8:	4653      	mov	r3, sl
 800a4ba:	bfa8      	it	ge
 800a4bc:	4633      	movge	r3, r6
 800a4be:	42bb      	cmp	r3, r7
 800a4c0:	bfa8      	it	ge
 800a4c2:	463b      	movge	r3, r7
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bfc2      	ittt	gt
 800a4c8:	1af6      	subgt	r6, r6, r3
 800a4ca:	1aff      	subgt	r7, r7, r3
 800a4cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a4d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	dd17      	ble.n	800a506 <_strtod_l+0x736>
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f001 fb24 	bl	800bb28 <__pow5mult>
 800a4e0:	4683      	mov	fp, r0
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	f43f aeb8 	beq.w	800a258 <_strtod_l+0x488>
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f001 fa71 	bl	800b9d4 <__multiply>
 800a4f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f43f aeaf 	beq.w	800a258 <_strtod_l+0x488>
 800a4fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f001 f953 	bl	800b7a8 <_Bfree>
 800a502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a504:	9316      	str	r3, [sp, #88]	; 0x58
 800a506:	2e00      	cmp	r6, #0
 800a508:	f300 808c 	bgt.w	800a624 <_strtod_l+0x854>
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dd08      	ble.n	800a524 <_strtod_l+0x754>
 800a512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a514:	9905      	ldr	r1, [sp, #20]
 800a516:	4620      	mov	r0, r4
 800a518:	f001 fb06 	bl	800bb28 <__pow5mult>
 800a51c:	9005      	str	r0, [sp, #20]
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f ae9a 	beq.w	800a258 <_strtod_l+0x488>
 800a524:	2f00      	cmp	r7, #0
 800a526:	dd08      	ble.n	800a53a <_strtod_l+0x76a>
 800a528:	9905      	ldr	r1, [sp, #20]
 800a52a:	463a      	mov	r2, r7
 800a52c:	4620      	mov	r0, r4
 800a52e:	f001 fb55 	bl	800bbdc <__lshift>
 800a532:	9005      	str	r0, [sp, #20]
 800a534:	2800      	cmp	r0, #0
 800a536:	f43f ae8f 	beq.w	800a258 <_strtod_l+0x488>
 800a53a:	f1ba 0f00 	cmp.w	sl, #0
 800a53e:	dd08      	ble.n	800a552 <_strtod_l+0x782>
 800a540:	4659      	mov	r1, fp
 800a542:	4652      	mov	r2, sl
 800a544:	4620      	mov	r0, r4
 800a546:	f001 fb49 	bl	800bbdc <__lshift>
 800a54a:	4683      	mov	fp, r0
 800a54c:	2800      	cmp	r0, #0
 800a54e:	f43f ae83 	beq.w	800a258 <_strtod_l+0x488>
 800a552:	9a05      	ldr	r2, [sp, #20]
 800a554:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a556:	4620      	mov	r0, r4
 800a558:	f001 fbc8 	bl	800bcec <__mdiff>
 800a55c:	4605      	mov	r5, r0
 800a55e:	2800      	cmp	r0, #0
 800a560:	f43f ae7a 	beq.w	800a258 <_strtod_l+0x488>
 800a564:	68c3      	ldr	r3, [r0, #12]
 800a566:	930b      	str	r3, [sp, #44]	; 0x2c
 800a568:	2300      	movs	r3, #0
 800a56a:	60c3      	str	r3, [r0, #12]
 800a56c:	4659      	mov	r1, fp
 800a56e:	f001 fba1 	bl	800bcb4 <__mcmp>
 800a572:	2800      	cmp	r0, #0
 800a574:	da60      	bge.n	800a638 <_strtod_l+0x868>
 800a576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a578:	ea53 0308 	orrs.w	r3, r3, r8
 800a57c:	f040 8084 	bne.w	800a688 <_strtod_l+0x8b8>
 800a580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a584:	2b00      	cmp	r3, #0
 800a586:	d17f      	bne.n	800a688 <_strtod_l+0x8b8>
 800a588:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a58c:	0d1b      	lsrs	r3, r3, #20
 800a58e:	051b      	lsls	r3, r3, #20
 800a590:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a594:	d978      	bls.n	800a688 <_strtod_l+0x8b8>
 800a596:	696b      	ldr	r3, [r5, #20]
 800a598:	b913      	cbnz	r3, 800a5a0 <_strtod_l+0x7d0>
 800a59a:	692b      	ldr	r3, [r5, #16]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	dd73      	ble.n	800a688 <_strtod_l+0x8b8>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f001 fb19 	bl	800bbdc <__lshift>
 800a5aa:	4659      	mov	r1, fp
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	f001 fb81 	bl	800bcb4 <__mcmp>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	dd68      	ble.n	800a688 <_strtod_l+0x8b8>
 800a5b6:	9904      	ldr	r1, [sp, #16]
 800a5b8:	4a54      	ldr	r2, [pc, #336]	; (800a70c <_strtod_l+0x93c>)
 800a5ba:	464b      	mov	r3, r9
 800a5bc:	2900      	cmp	r1, #0
 800a5be:	f000 8084 	beq.w	800a6ca <_strtod_l+0x8fa>
 800a5c2:	ea02 0109 	and.w	r1, r2, r9
 800a5c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a5ca:	dc7e      	bgt.n	800a6ca <_strtod_l+0x8fa>
 800a5cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a5d0:	f77f aeb3 	ble.w	800a33a <_strtod_l+0x56a>
 800a5d4:	4b4e      	ldr	r3, [pc, #312]	; (800a710 <_strtod_l+0x940>)
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	4649      	mov	r1, r9
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f7f6 f80c 	bl	80005f8 <__aeabi_dmul>
 800a5e0:	4b4a      	ldr	r3, [pc, #296]	; (800a70c <_strtod_l+0x93c>)
 800a5e2:	400b      	ands	r3, r1
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f47f ae3f 	bne.w	800a26c <_strtod_l+0x49c>
 800a5ee:	2322      	movs	r3, #34	; 0x22
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	e63b      	b.n	800a26c <_strtod_l+0x49c>
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fc:	ea03 0808 	and.w	r8, r3, r8
 800a600:	e6e8      	b.n	800a3d4 <_strtod_l+0x604>
 800a602:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a606:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a60a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a60e:	36e2      	adds	r6, #226	; 0xe2
 800a610:	fa01 f306 	lsl.w	r3, r1, r6
 800a614:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a618:	e748      	b.n	800a4ac <_strtod_l+0x6dc>
 800a61a:	2100      	movs	r1, #0
 800a61c:	2301      	movs	r3, #1
 800a61e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a622:	e743      	b.n	800a4ac <_strtod_l+0x6dc>
 800a624:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a626:	4632      	mov	r2, r6
 800a628:	4620      	mov	r0, r4
 800a62a:	f001 fad7 	bl	800bbdc <__lshift>
 800a62e:	9016      	str	r0, [sp, #88]	; 0x58
 800a630:	2800      	cmp	r0, #0
 800a632:	f47f af6b 	bne.w	800a50c <_strtod_l+0x73c>
 800a636:	e60f      	b.n	800a258 <_strtod_l+0x488>
 800a638:	46ca      	mov	sl, r9
 800a63a:	d171      	bne.n	800a720 <_strtod_l+0x950>
 800a63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a63e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a642:	b352      	cbz	r2, 800a69a <_strtod_l+0x8ca>
 800a644:	4a33      	ldr	r2, [pc, #204]	; (800a714 <_strtod_l+0x944>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d12a      	bne.n	800a6a0 <_strtod_l+0x8d0>
 800a64a:	9b04      	ldr	r3, [sp, #16]
 800a64c:	4641      	mov	r1, r8
 800a64e:	b1fb      	cbz	r3, 800a690 <_strtod_l+0x8c0>
 800a650:	4b2e      	ldr	r3, [pc, #184]	; (800a70c <_strtod_l+0x93c>)
 800a652:	ea09 0303 	and.w	r3, r9, r3
 800a656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a65a:	f04f 32ff 	mov.w	r2, #4294967295
 800a65e:	d81a      	bhi.n	800a696 <_strtod_l+0x8c6>
 800a660:	0d1b      	lsrs	r3, r3, #20
 800a662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a666:	fa02 f303 	lsl.w	r3, r2, r3
 800a66a:	4299      	cmp	r1, r3
 800a66c:	d118      	bne.n	800a6a0 <_strtod_l+0x8d0>
 800a66e:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <_strtod_l+0x948>)
 800a670:	459a      	cmp	sl, r3
 800a672:	d102      	bne.n	800a67a <_strtod_l+0x8aa>
 800a674:	3101      	adds	r1, #1
 800a676:	f43f adef 	beq.w	800a258 <_strtod_l+0x488>
 800a67a:	4b24      	ldr	r3, [pc, #144]	; (800a70c <_strtod_l+0x93c>)
 800a67c:	ea0a 0303 	and.w	r3, sl, r3
 800a680:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a684:	f04f 0800 	mov.w	r8, #0
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1a2      	bne.n	800a5d4 <_strtod_l+0x804>
 800a68e:	e5ed      	b.n	800a26c <_strtod_l+0x49c>
 800a690:	f04f 33ff 	mov.w	r3, #4294967295
 800a694:	e7e9      	b.n	800a66a <_strtod_l+0x89a>
 800a696:	4613      	mov	r3, r2
 800a698:	e7e7      	b.n	800a66a <_strtod_l+0x89a>
 800a69a:	ea53 0308 	orrs.w	r3, r3, r8
 800a69e:	d08a      	beq.n	800a5b6 <_strtod_l+0x7e6>
 800a6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6a2:	b1e3      	cbz	r3, 800a6de <_strtod_l+0x90e>
 800a6a4:	ea13 0f0a 	tst.w	r3, sl
 800a6a8:	d0ee      	beq.n	800a688 <_strtod_l+0x8b8>
 800a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	b1c3      	cbz	r3, 800a6e6 <_strtod_l+0x916>
 800a6b4:	f7ff fb6f 	bl	8009d96 <sulp>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	ec51 0b18 	vmov	r0, r1, d8
 800a6c0:	f7f5 fde4 	bl	800028c <__adddf3>
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	4689      	mov	r9, r1
 800a6c8:	e7de      	b.n	800a688 <_strtod_l+0x8b8>
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a6d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a6d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a6d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a6dc:	e7d4      	b.n	800a688 <_strtod_l+0x8b8>
 800a6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6e0:	ea13 0f08 	tst.w	r3, r8
 800a6e4:	e7e0      	b.n	800a6a8 <_strtod_l+0x8d8>
 800a6e6:	f7ff fb56 	bl	8009d96 <sulp>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	ec51 0b18 	vmov	r0, r1, d8
 800a6f2:	f7f5 fdc9 	bl	8000288 <__aeabi_dsub>
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4680      	mov	r8, r0
 800a6fc:	4689      	mov	r9, r1
 800a6fe:	f7f6 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a702:	2800      	cmp	r0, #0
 800a704:	d0c0      	beq.n	800a688 <_strtod_l+0x8b8>
 800a706:	e618      	b.n	800a33a <_strtod_l+0x56a>
 800a708:	fffffc02 	.word	0xfffffc02
 800a70c:	7ff00000 	.word	0x7ff00000
 800a710:	39500000 	.word	0x39500000
 800a714:	000fffff 	.word	0x000fffff
 800a718:	7fefffff 	.word	0x7fefffff
 800a71c:	0800db90 	.word	0x0800db90
 800a720:	4659      	mov	r1, fp
 800a722:	4628      	mov	r0, r5
 800a724:	f001 fc36 	bl	800bf94 <__ratio>
 800a728:	ec57 6b10 	vmov	r6, r7, d0
 800a72c:	ee10 0a10 	vmov	r0, s0
 800a730:	2200      	movs	r2, #0
 800a732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a736:	4639      	mov	r1, r7
 800a738:	f7f6 f9da 	bl	8000af0 <__aeabi_dcmple>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d071      	beq.n	800a824 <_strtod_l+0xa54>
 800a740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d17c      	bne.n	800a840 <_strtod_l+0xa70>
 800a746:	f1b8 0f00 	cmp.w	r8, #0
 800a74a:	d15a      	bne.n	800a802 <_strtod_l+0xa32>
 800a74c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a750:	2b00      	cmp	r3, #0
 800a752:	d15d      	bne.n	800a810 <_strtod_l+0xa40>
 800a754:	4b90      	ldr	r3, [pc, #576]	; (800a998 <_strtod_l+0xbc8>)
 800a756:	2200      	movs	r2, #0
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f6 f9be 	bl	8000adc <__aeabi_dcmplt>
 800a760:	2800      	cmp	r0, #0
 800a762:	d15c      	bne.n	800a81e <_strtod_l+0xa4e>
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	4b8c      	ldr	r3, [pc, #560]	; (800a99c <_strtod_l+0xbcc>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	f7f5 ff44 	bl	80005f8 <__aeabi_dmul>
 800a770:	4606      	mov	r6, r0
 800a772:	460f      	mov	r7, r1
 800a774:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a778:	9606      	str	r6, [sp, #24]
 800a77a:	9307      	str	r3, [sp, #28]
 800a77c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a780:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a784:	4b86      	ldr	r3, [pc, #536]	; (800a9a0 <_strtod_l+0xbd0>)
 800a786:	ea0a 0303 	and.w	r3, sl, r3
 800a78a:	930d      	str	r3, [sp, #52]	; 0x34
 800a78c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a78e:	4b85      	ldr	r3, [pc, #532]	; (800a9a4 <_strtod_l+0xbd4>)
 800a790:	429a      	cmp	r2, r3
 800a792:	f040 8090 	bne.w	800a8b6 <_strtod_l+0xae6>
 800a796:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a79a:	ec49 8b10 	vmov	d0, r8, r9
 800a79e:	f001 fb2f 	bl	800be00 <__ulp>
 800a7a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7a6:	ec51 0b10 	vmov	r0, r1, d0
 800a7aa:	f7f5 ff25 	bl	80005f8 <__aeabi_dmul>
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	f7f5 fd6b 	bl	800028c <__adddf3>
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4979      	ldr	r1, [pc, #484]	; (800a9a0 <_strtod_l+0xbd0>)
 800a7ba:	4a7b      	ldr	r2, [pc, #492]	; (800a9a8 <_strtod_l+0xbd8>)
 800a7bc:	4019      	ands	r1, r3
 800a7be:	4291      	cmp	r1, r2
 800a7c0:	4680      	mov	r8, r0
 800a7c2:	d944      	bls.n	800a84e <_strtod_l+0xa7e>
 800a7c4:	ee18 2a90 	vmov	r2, s17
 800a7c8:	4b78      	ldr	r3, [pc, #480]	; (800a9ac <_strtod_l+0xbdc>)
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d104      	bne.n	800a7d8 <_strtod_l+0xa08>
 800a7ce:	ee18 3a10 	vmov	r3, s16
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	f43f ad40 	beq.w	800a258 <_strtod_l+0x488>
 800a7d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a9ac <_strtod_l+0xbdc>
 800a7dc:	f04f 38ff 	mov.w	r8, #4294967295
 800a7e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 ffe0 	bl	800b7a8 <_Bfree>
 800a7e8:	9905      	ldr	r1, [sp, #20]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 ffdc 	bl	800b7a8 <_Bfree>
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 ffd8 	bl	800b7a8 <_Bfree>
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 ffd4 	bl	800b7a8 <_Bfree>
 800a800:	e609      	b.n	800a416 <_strtod_l+0x646>
 800a802:	f1b8 0f01 	cmp.w	r8, #1
 800a806:	d103      	bne.n	800a810 <_strtod_l+0xa40>
 800a808:	f1b9 0f00 	cmp.w	r9, #0
 800a80c:	f43f ad95 	beq.w	800a33a <_strtod_l+0x56a>
 800a810:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a968 <_strtod_l+0xb98>
 800a814:	4f60      	ldr	r7, [pc, #384]	; (800a998 <_strtod_l+0xbc8>)
 800a816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a81a:	2600      	movs	r6, #0
 800a81c:	e7ae      	b.n	800a77c <_strtod_l+0x9ac>
 800a81e:	4f5f      	ldr	r7, [pc, #380]	; (800a99c <_strtod_l+0xbcc>)
 800a820:	2600      	movs	r6, #0
 800a822:	e7a7      	b.n	800a774 <_strtod_l+0x9a4>
 800a824:	4b5d      	ldr	r3, [pc, #372]	; (800a99c <_strtod_l+0xbcc>)
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	2200      	movs	r2, #0
 800a82c:	f7f5 fee4 	bl	80005f8 <__aeabi_dmul>
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	4606      	mov	r6, r0
 800a834:	460f      	mov	r7, r1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d09c      	beq.n	800a774 <_strtod_l+0x9a4>
 800a83a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a83e:	e79d      	b.n	800a77c <_strtod_l+0x9ac>
 800a840:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a970 <_strtod_l+0xba0>
 800a844:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a848:	ec57 6b17 	vmov	r6, r7, d7
 800a84c:	e796      	b.n	800a77c <_strtod_l+0x9ac>
 800a84e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	46ca      	mov	sl, r9
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1c2      	bne.n	800a7e0 <_strtod_l+0xa10>
 800a85a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a85e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a860:	0d1b      	lsrs	r3, r3, #20
 800a862:	051b      	lsls	r3, r3, #20
 800a864:	429a      	cmp	r2, r3
 800a866:	d1bb      	bne.n	800a7e0 <_strtod_l+0xa10>
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f6 f9ac 	bl	8000bc8 <__aeabi_d2lz>
 800a870:	f7f5 fe94 	bl	800059c <__aeabi_l2d>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f5 fd04 	bl	8000288 <__aeabi_dsub>
 800a880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a886:	ea43 0308 	orr.w	r3, r3, r8
 800a88a:	4313      	orrs	r3, r2
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	d054      	beq.n	800a93c <_strtod_l+0xb6c>
 800a892:	a339      	add	r3, pc, #228	; (adr r3, 800a978 <_strtod_l+0xba8>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	f7f6 f920 	bl	8000adc <__aeabi_dcmplt>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f47f ace5 	bne.w	800a26c <_strtod_l+0x49c>
 800a8a2:	a337      	add	r3, pc, #220	; (adr r3, 800a980 <_strtod_l+0xbb0>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f6 f934 	bl	8000b18 <__aeabi_dcmpgt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d095      	beq.n	800a7e0 <_strtod_l+0xa10>
 800a8b4:	e4da      	b.n	800a26c <_strtod_l+0x49c>
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	b333      	cbz	r3, 800a908 <_strtod_l+0xb38>
 800a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8c0:	d822      	bhi.n	800a908 <_strtod_l+0xb38>
 800a8c2:	a331      	add	r3, pc, #196	; (adr r3, 800a988 <_strtod_l+0xbb8>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f6 f910 	bl	8000af0 <__aeabi_dcmple>
 800a8d0:	b1a0      	cbz	r0, 800a8fc <_strtod_l+0xb2c>
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f7f6 f93f 	bl	8000b58 <__aeabi_d2uiz>
 800a8da:	2801      	cmp	r0, #1
 800a8dc:	bf38      	it	cc
 800a8de:	2001      	movcc	r0, #1
 800a8e0:	f7f5 fe10 	bl	8000504 <__aeabi_ui2d>
 800a8e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	bb23      	cbnz	r3, 800a936 <_strtod_l+0xb66>
 800a8ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8f0:	9010      	str	r0, [sp, #64]	; 0x40
 800a8f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a8f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a900:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	930f      	str	r3, [sp, #60]	; 0x3c
 800a908:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a90c:	eeb0 0a48 	vmov.f32	s0, s16
 800a910:	eef0 0a68 	vmov.f32	s1, s17
 800a914:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a918:	f001 fa72 	bl	800be00 <__ulp>
 800a91c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a920:	ec53 2b10 	vmov	r2, r3, d0
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	ec53 2b18 	vmov	r2, r3, d8
 800a92c:	f7f5 fcae 	bl	800028c <__adddf3>
 800a930:	4680      	mov	r8, r0
 800a932:	4689      	mov	r9, r1
 800a934:	e78d      	b.n	800a852 <_strtod_l+0xa82>
 800a936:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a93a:	e7db      	b.n	800a8f4 <_strtod_l+0xb24>
 800a93c:	a314      	add	r3, pc, #80	; (adr r3, 800a990 <_strtod_l+0xbc0>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f6 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800a946:	e7b3      	b.n	800a8b0 <_strtod_l+0xae0>
 800a948:	2300      	movs	r3, #0
 800a94a:	930a      	str	r3, [sp, #40]	; 0x28
 800a94c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	f7ff ba7c 	b.w	8009e4e <_strtod_l+0x7e>
 800a956:	2a65      	cmp	r2, #101	; 0x65
 800a958:	f43f ab75 	beq.w	800a046 <_strtod_l+0x276>
 800a95c:	2a45      	cmp	r2, #69	; 0x45
 800a95e:	f43f ab72 	beq.w	800a046 <_strtod_l+0x276>
 800a962:	2301      	movs	r3, #1
 800a964:	f7ff bbaa 	b.w	800a0bc <_strtod_l+0x2ec>
 800a968:	00000000 	.word	0x00000000
 800a96c:	bff00000 	.word	0xbff00000
 800a970:	00000000 	.word	0x00000000
 800a974:	3ff00000 	.word	0x3ff00000
 800a978:	94a03595 	.word	0x94a03595
 800a97c:	3fdfffff 	.word	0x3fdfffff
 800a980:	35afe535 	.word	0x35afe535
 800a984:	3fe00000 	.word	0x3fe00000
 800a988:	ffc00000 	.word	0xffc00000
 800a98c:	41dfffff 	.word	0x41dfffff
 800a990:	94a03595 	.word	0x94a03595
 800a994:	3fcfffff 	.word	0x3fcfffff
 800a998:	3ff00000 	.word	0x3ff00000
 800a99c:	3fe00000 	.word	0x3fe00000
 800a9a0:	7ff00000 	.word	0x7ff00000
 800a9a4:	7fe00000 	.word	0x7fe00000
 800a9a8:	7c9fffff 	.word	0x7c9fffff
 800a9ac:	7fefffff 	.word	0x7fefffff

0800a9b0 <strtod>:
 800a9b0:	460a      	mov	r2, r1
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4802      	ldr	r0, [pc, #8]	; (800a9c0 <strtod+0x10>)
 800a9b6:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <strtod+0x14>)
 800a9b8:	6800      	ldr	r0, [r0, #0]
 800a9ba:	f7ff ba09 	b.w	8009dd0 <_strtod_l>
 800a9be:	bf00      	nop
 800a9c0:	200002c0 	.word	0x200002c0
 800a9c4:	20000108 	.word	0x20000108

0800a9c8 <std>:
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	b510      	push	{r4, lr}
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a9d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9d6:	6083      	str	r3, [r0, #8]
 800a9d8:	8181      	strh	r1, [r0, #12]
 800a9da:	6643      	str	r3, [r0, #100]	; 0x64
 800a9dc:	81c2      	strh	r2, [r0, #14]
 800a9de:	6183      	str	r3, [r0, #24]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	2208      	movs	r2, #8
 800a9e4:	305c      	adds	r0, #92	; 0x5c
 800a9e6:	f000 f902 	bl	800abee <memset>
 800a9ea:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <std+0x38>)
 800a9ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <std+0x3c>)
 800a9f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <std+0x40>)
 800a9f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <std+0x44>)
 800a9f8:	6224      	str	r4, [r4, #32]
 800a9fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	bf00      	nop
 800aa00:	0800ab69 	.word	0x0800ab69
 800aa04:	0800ab8b 	.word	0x0800ab8b
 800aa08:	0800abc3 	.word	0x0800abc3
 800aa0c:	0800abe7 	.word	0x0800abe7

0800aa10 <stdio_exit_handler>:
 800aa10:	4a02      	ldr	r2, [pc, #8]	; (800aa1c <stdio_exit_handler+0xc>)
 800aa12:	4903      	ldr	r1, [pc, #12]	; (800aa20 <stdio_exit_handler+0x10>)
 800aa14:	4803      	ldr	r0, [pc, #12]	; (800aa24 <stdio_exit_handler+0x14>)
 800aa16:	f000 b869 	b.w	800aaec <_fwalk_sglue>
 800aa1a:	bf00      	nop
 800aa1c:	200000fc 	.word	0x200000fc
 800aa20:	0800c779 	.word	0x0800c779
 800aa24:	20000274 	.word	0x20000274

0800aa28 <cleanup_stdio>:
 800aa28:	6841      	ldr	r1, [r0, #4]
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <cleanup_stdio+0x34>)
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	d001      	beq.n	800aa38 <cleanup_stdio+0x10>
 800aa34:	f001 fea0 	bl	800c778 <_fflush_r>
 800aa38:	68a1      	ldr	r1, [r4, #8]
 800aa3a:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <cleanup_stdio+0x38>)
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	d002      	beq.n	800aa46 <cleanup_stdio+0x1e>
 800aa40:	4620      	mov	r0, r4
 800aa42:	f001 fe99 	bl	800c778 <_fflush_r>
 800aa46:	68e1      	ldr	r1, [r4, #12]
 800aa48:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <cleanup_stdio+0x3c>)
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	d004      	beq.n	800aa58 <cleanup_stdio+0x30>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa54:	f001 be90 	b.w	800c778 <_fflush_r>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2000200c 	.word	0x2000200c
 800aa60:	20002074 	.word	0x20002074
 800aa64:	200020dc 	.word	0x200020dc

0800aa68 <global_stdio_init.part.0>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <global_stdio_init.part.0+0x30>)
 800aa6c:	4c0b      	ldr	r4, [pc, #44]	; (800aa9c <global_stdio_init.part.0+0x34>)
 800aa6e:	4a0c      	ldr	r2, [pc, #48]	; (800aaa0 <global_stdio_init.part.0+0x38>)
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	4620      	mov	r0, r4
 800aa74:	2200      	movs	r2, #0
 800aa76:	2104      	movs	r1, #4
 800aa78:	f7ff ffa6 	bl	800a9c8 <std>
 800aa7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa80:	2201      	movs	r2, #1
 800aa82:	2109      	movs	r1, #9
 800aa84:	f7ff ffa0 	bl	800a9c8 <std>
 800aa88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa92:	2112      	movs	r1, #18
 800aa94:	f7ff bf98 	b.w	800a9c8 <std>
 800aa98:	20002144 	.word	0x20002144
 800aa9c:	2000200c 	.word	0x2000200c
 800aaa0:	0800aa11 	.word	0x0800aa11

0800aaa4 <__sfp_lock_acquire>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__sfp_lock_acquire+0x8>)
 800aaa6:	f000 b99f 	b.w	800ade8 <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	2000214d 	.word	0x2000214d

0800aab0 <__sfp_lock_release>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__sfp_lock_release+0x8>)
 800aab2:	f000 b99a 	b.w	800adea <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	2000214d 	.word	0x2000214d

0800aabc <__sinit>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4604      	mov	r4, r0
 800aac0:	f7ff fff0 	bl	800aaa4 <__sfp_lock_acquire>
 800aac4:	6a23      	ldr	r3, [r4, #32]
 800aac6:	b11b      	cbz	r3, 800aad0 <__sinit+0x14>
 800aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aacc:	f7ff bff0 	b.w	800aab0 <__sfp_lock_release>
 800aad0:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <__sinit+0x28>)
 800aad2:	6223      	str	r3, [r4, #32]
 800aad4:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <__sinit+0x2c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f5      	bne.n	800aac8 <__sinit+0xc>
 800aadc:	f7ff ffc4 	bl	800aa68 <global_stdio_init.part.0>
 800aae0:	e7f2      	b.n	800aac8 <__sinit+0xc>
 800aae2:	bf00      	nop
 800aae4:	0800aa29 	.word	0x0800aa29
 800aae8:	20002144 	.word	0x20002144

0800aaec <_fwalk_sglue>:
 800aaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4688      	mov	r8, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	2600      	movs	r6, #0
 800aaf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aafc:	f1b9 0901 	subs.w	r9, r9, #1
 800ab00:	d505      	bpl.n	800ab0e <_fwalk_sglue+0x22>
 800ab02:	6824      	ldr	r4, [r4, #0]
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	d1f7      	bne.n	800aaf8 <_fwalk_sglue+0xc>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d907      	bls.n	800ab24 <_fwalk_sglue+0x38>
 800ab14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	d003      	beq.n	800ab24 <_fwalk_sglue+0x38>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c0      	blx	r8
 800ab22:	4306      	orrs	r6, r0
 800ab24:	3568      	adds	r5, #104	; 0x68
 800ab26:	e7e9      	b.n	800aafc <_fwalk_sglue+0x10>

0800ab28 <siprintf>:
 800ab28:	b40e      	push	{r1, r2, r3}
 800ab2a:	b500      	push	{lr}
 800ab2c:	b09c      	sub	sp, #112	; 0x70
 800ab2e:	ab1d      	add	r3, sp, #116	; 0x74
 800ab30:	9002      	str	r0, [sp, #8]
 800ab32:	9006      	str	r0, [sp, #24]
 800ab34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab38:	4809      	ldr	r0, [pc, #36]	; (800ab60 <siprintf+0x38>)
 800ab3a:	9107      	str	r1, [sp, #28]
 800ab3c:	9104      	str	r1, [sp, #16]
 800ab3e:	4909      	ldr	r1, [pc, #36]	; (800ab64 <siprintf+0x3c>)
 800ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab44:	9105      	str	r1, [sp, #20]
 800ab46:	6800      	ldr	r0, [r0, #0]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	a902      	add	r1, sp, #8
 800ab4c:	f001 fb00 	bl	800c150 <_svfiprintf_r>
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	2200      	movs	r2, #0
 800ab54:	701a      	strb	r2, [r3, #0]
 800ab56:	b01c      	add	sp, #112	; 0x70
 800ab58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab5c:	b003      	add	sp, #12
 800ab5e:	4770      	bx	lr
 800ab60:	200002c0 	.word	0x200002c0
 800ab64:	ffff0208 	.word	0xffff0208

0800ab68 <__sread>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab70:	f000 f8ec 	bl	800ad4c <_read_r>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	bfab      	itete	ge
 800ab78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab7c:	181b      	addge	r3, r3, r0
 800ab7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab82:	bfac      	ite	ge
 800ab84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab86:	81a3      	strhlt	r3, [r4, #12]
 800ab88:	bd10      	pop	{r4, pc}

0800ab8a <__swrite>:
 800ab8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8e:	461f      	mov	r7, r3
 800ab90:	898b      	ldrh	r3, [r1, #12]
 800ab92:	05db      	lsls	r3, r3, #23
 800ab94:	4605      	mov	r5, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	4616      	mov	r6, r2
 800ab9a:	d505      	bpl.n	800aba8 <__swrite+0x1e>
 800ab9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba0:	2302      	movs	r3, #2
 800aba2:	2200      	movs	r2, #0
 800aba4:	f000 f8c0 	bl	800ad28 <_lseek_r>
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	4632      	mov	r2, r6
 800abb6:	463b      	mov	r3, r7
 800abb8:	4628      	mov	r0, r5
 800abba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abbe:	f000 b8d7 	b.w	800ad70 <_write_r>

0800abc2 <__sseek>:
 800abc2:	b510      	push	{r4, lr}
 800abc4:	460c      	mov	r4, r1
 800abc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abca:	f000 f8ad 	bl	800ad28 <_lseek_r>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	bf15      	itete	ne
 800abd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abde:	81a3      	strheq	r3, [r4, #12]
 800abe0:	bf18      	it	ne
 800abe2:	81a3      	strhne	r3, [r4, #12]
 800abe4:	bd10      	pop	{r4, pc}

0800abe6 <__sclose>:
 800abe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abea:	f000 b88d 	b.w	800ad08 <_close_r>

0800abee <memset>:
 800abee:	4402      	add	r2, r0
 800abf0:	4603      	mov	r3, r0
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d100      	bne.n	800abf8 <memset+0xa>
 800abf6:	4770      	bx	lr
 800abf8:	f803 1b01 	strb.w	r1, [r3], #1
 800abfc:	e7f9      	b.n	800abf2 <memset+0x4>

0800abfe <strncmp>:
 800abfe:	b510      	push	{r4, lr}
 800ac00:	b16a      	cbz	r2, 800ac1e <strncmp+0x20>
 800ac02:	3901      	subs	r1, #1
 800ac04:	1884      	adds	r4, r0, r2
 800ac06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d103      	bne.n	800ac1a <strncmp+0x1c>
 800ac12:	42a0      	cmp	r0, r4
 800ac14:	d001      	beq.n	800ac1a <strncmp+0x1c>
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	d1f5      	bne.n	800ac06 <strncmp+0x8>
 800ac1a:	1ad0      	subs	r0, r2, r3
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	4610      	mov	r0, r2
 800ac20:	e7fc      	b.n	800ac1c <strncmp+0x1e>
	...

0800ac24 <strtok>:
 800ac24:	4b16      	ldr	r3, [pc, #88]	; (800ac80 <strtok+0x5c>)
 800ac26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac28:	681e      	ldr	r6, [r3, #0]
 800ac2a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	b9fc      	cbnz	r4, 800ac70 <strtok+0x4c>
 800ac30:	2050      	movs	r0, #80	; 0x50
 800ac32:	9101      	str	r1, [sp, #4]
 800ac34:	f000 fcb2 	bl	800b59c <malloc>
 800ac38:	9901      	ldr	r1, [sp, #4]
 800ac3a:	6470      	str	r0, [r6, #68]	; 0x44
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	b920      	cbnz	r0, 800ac4a <strtok+0x26>
 800ac40:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <strtok+0x60>)
 800ac42:	4811      	ldr	r0, [pc, #68]	; (800ac88 <strtok+0x64>)
 800ac44:	215b      	movs	r1, #91	; 0x5b
 800ac46:	f000 f8e7 	bl	800ae18 <__assert_func>
 800ac4a:	e9c0 4400 	strd	r4, r4, [r0]
 800ac4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ac5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ac5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ac62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ac66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ac6a:	6184      	str	r4, [r0, #24]
 800ac6c:	7704      	strb	r4, [r0, #28]
 800ac6e:	6244      	str	r4, [r0, #36]	; 0x24
 800ac70:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ac72:	2301      	movs	r3, #1
 800ac74:	4628      	mov	r0, r5
 800ac76:	b002      	add	sp, #8
 800ac78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac7c:	f000 b806 	b.w	800ac8c <__strtok_r>
 800ac80:	200002c0 	.word	0x200002c0
 800ac84:	0800dbb8 	.word	0x0800dbb8
 800ac88:	0800dbcf 	.word	0x0800dbcf

0800ac8c <__strtok_r>:
 800ac8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac8e:	b908      	cbnz	r0, 800ac94 <__strtok_r+0x8>
 800ac90:	6810      	ldr	r0, [r2, #0]
 800ac92:	b188      	cbz	r0, 800acb8 <__strtok_r+0x2c>
 800ac94:	4604      	mov	r4, r0
 800ac96:	4620      	mov	r0, r4
 800ac98:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aca2:	b91e      	cbnz	r6, 800acac <__strtok_r+0x20>
 800aca4:	b965      	cbnz	r5, 800acc0 <__strtok_r+0x34>
 800aca6:	6015      	str	r5, [r2, #0]
 800aca8:	4628      	mov	r0, r5
 800acaa:	e005      	b.n	800acb8 <__strtok_r+0x2c>
 800acac:	42b5      	cmp	r5, r6
 800acae:	d1f6      	bne.n	800ac9e <__strtok_r+0x12>
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1f0      	bne.n	800ac96 <__strtok_r+0xa>
 800acb4:	6014      	str	r4, [r2, #0]
 800acb6:	7003      	strb	r3, [r0, #0]
 800acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acba:	461c      	mov	r4, r3
 800acbc:	e00c      	b.n	800acd8 <__strtok_r+0x4c>
 800acbe:	b915      	cbnz	r5, 800acc6 <__strtok_r+0x3a>
 800acc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acc4:	460e      	mov	r6, r1
 800acc6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800acca:	42ab      	cmp	r3, r5
 800accc:	d1f7      	bne.n	800acbe <__strtok_r+0x32>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0f3      	beq.n	800acba <__strtok_r+0x2e>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acd8:	6014      	str	r4, [r2, #0]
 800acda:	e7ed      	b.n	800acb8 <__strtok_r+0x2c>

0800acdc <strstr>:
 800acdc:	780a      	ldrb	r2, [r1, #0]
 800acde:	b570      	push	{r4, r5, r6, lr}
 800ace0:	b96a      	cbnz	r2, 800acfe <strstr+0x22>
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d109      	bne.n	800acfc <strstr+0x20>
 800ace8:	460c      	mov	r4, r1
 800acea:	4605      	mov	r5, r0
 800acec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0f6      	beq.n	800ace2 <strstr+0x6>
 800acf4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800acf8:	429e      	cmp	r6, r3
 800acfa:	d0f7      	beq.n	800acec <strstr+0x10>
 800acfc:	3001      	adds	r0, #1
 800acfe:	7803      	ldrb	r3, [r0, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1ef      	bne.n	800ace4 <strstr+0x8>
 800ad04:	4618      	mov	r0, r3
 800ad06:	e7ec      	b.n	800ace2 <strstr+0x6>

0800ad08 <_close_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d06      	ldr	r5, [pc, #24]	; (800ad24 <_close_r+0x1c>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7f6 ff21 	bl	8001b5a <_close>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_close_r+0x1a>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_close_r+0x1a>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	20002148 	.word	0x20002148

0800ad28 <_lseek_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d07      	ldr	r5, [pc, #28]	; (800ad48 <_lseek_r+0x20>)
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f7f6 ff36 	bl	8001ba8 <_lseek>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_lseek_r+0x1e>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_lseek_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20002148 	.word	0x20002148

0800ad4c <_read_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d07      	ldr	r5, [pc, #28]	; (800ad6c <_read_r+0x20>)
 800ad50:	4604      	mov	r4, r0
 800ad52:	4608      	mov	r0, r1
 800ad54:	4611      	mov	r1, r2
 800ad56:	2200      	movs	r2, #0
 800ad58:	602a      	str	r2, [r5, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f7f6 fec4 	bl	8001ae8 <_read>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_read_r+0x1e>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_read_r+0x1e>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20002148 	.word	0x20002148

0800ad70 <_write_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_write_r+0x20>)
 800ad74:	4604      	mov	r4, r0
 800ad76:	4608      	mov	r0, r1
 800ad78:	4611      	mov	r1, r2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	602a      	str	r2, [r5, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f7f6 fecf 	bl	8001b22 <_write>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_write_r+0x1e>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_write_r+0x1e>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20002148 	.word	0x20002148

0800ad94 <__errno>:
 800ad94:	4b01      	ldr	r3, [pc, #4]	; (800ad9c <__errno+0x8>)
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	200002c0 	.word	0x200002c0

0800ada0 <__libc_init_array>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4d0d      	ldr	r5, [pc, #52]	; (800add8 <__libc_init_array+0x38>)
 800ada4:	4c0d      	ldr	r4, [pc, #52]	; (800addc <__libc_init_array+0x3c>)
 800ada6:	1b64      	subs	r4, r4, r5
 800ada8:	10a4      	asrs	r4, r4, #2
 800adaa:	2600      	movs	r6, #0
 800adac:	42a6      	cmp	r6, r4
 800adae:	d109      	bne.n	800adc4 <__libc_init_array+0x24>
 800adb0:	4d0b      	ldr	r5, [pc, #44]	; (800ade0 <__libc_init_array+0x40>)
 800adb2:	4c0c      	ldr	r4, [pc, #48]	; (800ade4 <__libc_init_array+0x44>)
 800adb4:	f002 fdfc 	bl	800d9b0 <_init>
 800adb8:	1b64      	subs	r4, r4, r5
 800adba:	10a4      	asrs	r4, r4, #2
 800adbc:	2600      	movs	r6, #0
 800adbe:	42a6      	cmp	r6, r4
 800adc0:	d105      	bne.n	800adce <__libc_init_array+0x2e>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc8:	4798      	blx	r3
 800adca:	3601      	adds	r6, #1
 800adcc:	e7ee      	b.n	800adac <__libc_init_array+0xc>
 800adce:	f855 3b04 	ldr.w	r3, [r5], #4
 800add2:	4798      	blx	r3
 800add4:	3601      	adds	r6, #1
 800add6:	e7f2      	b.n	800adbe <__libc_init_array+0x1e>
 800add8:	0800dfe0 	.word	0x0800dfe0
 800addc:	0800dfe0 	.word	0x0800dfe0
 800ade0:	0800dfe0 	.word	0x0800dfe0
 800ade4:	0800dfe4 	.word	0x0800dfe4

0800ade8 <__retarget_lock_acquire_recursive>:
 800ade8:	4770      	bx	lr

0800adea <__retarget_lock_release_recursive>:
 800adea:	4770      	bx	lr

0800adec <memcpy>:
 800adec:	440a      	add	r2, r1
 800adee:	4291      	cmp	r1, r2
 800adf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800adf4:	d100      	bne.n	800adf8 <memcpy+0xc>
 800adf6:	4770      	bx	lr
 800adf8:	b510      	push	{r4, lr}
 800adfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae02:	4291      	cmp	r1, r2
 800ae04:	d1f9      	bne.n	800adfa <memcpy+0xe>
 800ae06:	bd10      	pop	{r4, pc}

0800ae08 <nan>:
 800ae08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae10 <nan+0x8>
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	00000000 	.word	0x00000000
 800ae14:	7ff80000 	.word	0x7ff80000

0800ae18 <__assert_func>:
 800ae18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae1a:	4614      	mov	r4, r2
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <__assert_func+0x2c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4605      	mov	r5, r0
 800ae24:	68d8      	ldr	r0, [r3, #12]
 800ae26:	b14c      	cbz	r4, 800ae3c <__assert_func+0x24>
 800ae28:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <__assert_func+0x30>)
 800ae2a:	9100      	str	r1, [sp, #0]
 800ae2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae30:	4906      	ldr	r1, [pc, #24]	; (800ae4c <__assert_func+0x34>)
 800ae32:	462b      	mov	r3, r5
 800ae34:	f001 fcc8 	bl	800c7c8 <fiprintf>
 800ae38:	f001 fd02 	bl	800c840 <abort>
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <__assert_func+0x38>)
 800ae3e:	461c      	mov	r4, r3
 800ae40:	e7f3      	b.n	800ae2a <__assert_func+0x12>
 800ae42:	bf00      	nop
 800ae44:	200002c0 	.word	0x200002c0
 800ae48:	0800dc31 	.word	0x0800dc31
 800ae4c:	0800dc3e 	.word	0x0800dc3e
 800ae50:	0800dc6c 	.word	0x0800dc6c

0800ae54 <_free_r>:
 800ae54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d044      	beq.n	800aee4 <_free_r+0x90>
 800ae5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5e:	9001      	str	r0, [sp, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f1a1 0404 	sub.w	r4, r1, #4
 800ae66:	bfb8      	it	lt
 800ae68:	18e4      	addlt	r4, r4, r3
 800ae6a:	f000 fc51 	bl	800b710 <__malloc_lock>
 800ae6e:	4a1e      	ldr	r2, [pc, #120]	; (800aee8 <_free_r+0x94>)
 800ae70:	9801      	ldr	r0, [sp, #4]
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	b933      	cbnz	r3, 800ae84 <_free_r+0x30>
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	6014      	str	r4, [r2, #0]
 800ae7a:	b003      	add	sp, #12
 800ae7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae80:	f000 bc4c 	b.w	800b71c <__malloc_unlock>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d908      	bls.n	800ae9a <_free_r+0x46>
 800ae88:	6825      	ldr	r5, [r4, #0]
 800ae8a:	1961      	adds	r1, r4, r5
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	bf01      	itttt	eq
 800ae90:	6819      	ldreq	r1, [r3, #0]
 800ae92:	685b      	ldreq	r3, [r3, #4]
 800ae94:	1949      	addeq	r1, r1, r5
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	e7ed      	b.n	800ae76 <_free_r+0x22>
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	b10b      	cbz	r3, 800aea4 <_free_r+0x50>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d9fa      	bls.n	800ae9a <_free_r+0x46>
 800aea4:	6811      	ldr	r1, [r2, #0]
 800aea6:	1855      	adds	r5, r2, r1
 800aea8:	42a5      	cmp	r5, r4
 800aeaa:	d10b      	bne.n	800aec4 <_free_r+0x70>
 800aeac:	6824      	ldr	r4, [r4, #0]
 800aeae:	4421      	add	r1, r4
 800aeb0:	1854      	adds	r4, r2, r1
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	6011      	str	r1, [r2, #0]
 800aeb6:	d1e0      	bne.n	800ae7a <_free_r+0x26>
 800aeb8:	681c      	ldr	r4, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	6053      	str	r3, [r2, #4]
 800aebe:	440c      	add	r4, r1
 800aec0:	6014      	str	r4, [r2, #0]
 800aec2:	e7da      	b.n	800ae7a <_free_r+0x26>
 800aec4:	d902      	bls.n	800aecc <_free_r+0x78>
 800aec6:	230c      	movs	r3, #12
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	e7d6      	b.n	800ae7a <_free_r+0x26>
 800aecc:	6825      	ldr	r5, [r4, #0]
 800aece:	1961      	adds	r1, r4, r5
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf04      	itt	eq
 800aed4:	6819      	ldreq	r1, [r3, #0]
 800aed6:	685b      	ldreq	r3, [r3, #4]
 800aed8:	6063      	str	r3, [r4, #4]
 800aeda:	bf04      	itt	eq
 800aedc:	1949      	addeq	r1, r1, r5
 800aede:	6021      	streq	r1, [r4, #0]
 800aee0:	6054      	str	r4, [r2, #4]
 800aee2:	e7ca      	b.n	800ae7a <_free_r+0x26>
 800aee4:	b003      	add	sp, #12
 800aee6:	bd30      	pop	{r4, r5, pc}
 800aee8:	20002150 	.word	0x20002150

0800aeec <rshift>:
 800aeec:	6903      	ldr	r3, [r0, #16]
 800aeee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aefa:	f100 0414 	add.w	r4, r0, #20
 800aefe:	dd45      	ble.n	800af8c <rshift+0xa0>
 800af00:	f011 011f 	ands.w	r1, r1, #31
 800af04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af0c:	d10c      	bne.n	800af28 <rshift+0x3c>
 800af0e:	f100 0710 	add.w	r7, r0, #16
 800af12:	4629      	mov	r1, r5
 800af14:	42b1      	cmp	r1, r6
 800af16:	d334      	bcc.n	800af82 <rshift+0x96>
 800af18:	1a9b      	subs	r3, r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	1eea      	subs	r2, r5, #3
 800af1e:	4296      	cmp	r6, r2
 800af20:	bf38      	it	cc
 800af22:	2300      	movcc	r3, #0
 800af24:	4423      	add	r3, r4
 800af26:	e015      	b.n	800af54 <rshift+0x68>
 800af28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af2c:	f1c1 0820 	rsb	r8, r1, #32
 800af30:	40cf      	lsrs	r7, r1
 800af32:	f105 0e04 	add.w	lr, r5, #4
 800af36:	46a1      	mov	r9, r4
 800af38:	4576      	cmp	r6, lr
 800af3a:	46f4      	mov	ip, lr
 800af3c:	d815      	bhi.n	800af6a <rshift+0x7e>
 800af3e:	1a9a      	subs	r2, r3, r2
 800af40:	0092      	lsls	r2, r2, #2
 800af42:	3a04      	subs	r2, #4
 800af44:	3501      	adds	r5, #1
 800af46:	42ae      	cmp	r6, r5
 800af48:	bf38      	it	cc
 800af4a:	2200      	movcc	r2, #0
 800af4c:	18a3      	adds	r3, r4, r2
 800af4e:	50a7      	str	r7, [r4, r2]
 800af50:	b107      	cbz	r7, 800af54 <rshift+0x68>
 800af52:	3304      	adds	r3, #4
 800af54:	1b1a      	subs	r2, r3, r4
 800af56:	42a3      	cmp	r3, r4
 800af58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af5c:	bf08      	it	eq
 800af5e:	2300      	moveq	r3, #0
 800af60:	6102      	str	r2, [r0, #16]
 800af62:	bf08      	it	eq
 800af64:	6143      	streq	r3, [r0, #20]
 800af66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af6a:	f8dc c000 	ldr.w	ip, [ip]
 800af6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800af72:	ea4c 0707 	orr.w	r7, ip, r7
 800af76:	f849 7b04 	str.w	r7, [r9], #4
 800af7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af7e:	40cf      	lsrs	r7, r1
 800af80:	e7da      	b.n	800af38 <rshift+0x4c>
 800af82:	f851 cb04 	ldr.w	ip, [r1], #4
 800af86:	f847 cf04 	str.w	ip, [r7, #4]!
 800af8a:	e7c3      	b.n	800af14 <rshift+0x28>
 800af8c:	4623      	mov	r3, r4
 800af8e:	e7e1      	b.n	800af54 <rshift+0x68>

0800af90 <__hexdig_fun>:
 800af90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af94:	2b09      	cmp	r3, #9
 800af96:	d802      	bhi.n	800af9e <__hexdig_fun+0xe>
 800af98:	3820      	subs	r0, #32
 800af9a:	b2c0      	uxtb	r0, r0
 800af9c:	4770      	bx	lr
 800af9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afa2:	2b05      	cmp	r3, #5
 800afa4:	d801      	bhi.n	800afaa <__hexdig_fun+0x1a>
 800afa6:	3847      	subs	r0, #71	; 0x47
 800afa8:	e7f7      	b.n	800af9a <__hexdig_fun+0xa>
 800afaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afae:	2b05      	cmp	r3, #5
 800afb0:	d801      	bhi.n	800afb6 <__hexdig_fun+0x26>
 800afb2:	3827      	subs	r0, #39	; 0x27
 800afb4:	e7f1      	b.n	800af9a <__hexdig_fun+0xa>
 800afb6:	2000      	movs	r0, #0
 800afb8:	4770      	bx	lr
	...

0800afbc <__gethex>:
 800afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	4617      	mov	r7, r2
 800afc2:	680a      	ldr	r2, [r1, #0]
 800afc4:	b085      	sub	sp, #20
 800afc6:	f102 0b02 	add.w	fp, r2, #2
 800afca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800afce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800afd2:	4681      	mov	r9, r0
 800afd4:	468a      	mov	sl, r1
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	32fe      	adds	r2, #254	; 0xfe
 800afda:	eb02 030b 	add.w	r3, r2, fp
 800afde:	46d8      	mov	r8, fp
 800afe0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	2830      	cmp	r0, #48	; 0x30
 800afe8:	d0f7      	beq.n	800afda <__gethex+0x1e>
 800afea:	f7ff ffd1 	bl	800af90 <__hexdig_fun>
 800afee:	4604      	mov	r4, r0
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d138      	bne.n	800b066 <__gethex+0xaa>
 800aff4:	49a7      	ldr	r1, [pc, #668]	; (800b294 <__gethex+0x2d8>)
 800aff6:	2201      	movs	r2, #1
 800aff8:	4640      	mov	r0, r8
 800affa:	f7ff fe00 	bl	800abfe <strncmp>
 800affe:	4606      	mov	r6, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	d169      	bne.n	800b0d8 <__gethex+0x11c>
 800b004:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b008:	465d      	mov	r5, fp
 800b00a:	f7ff ffc1 	bl	800af90 <__hexdig_fun>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d064      	beq.n	800b0dc <__gethex+0x120>
 800b012:	465a      	mov	r2, fp
 800b014:	7810      	ldrb	r0, [r2, #0]
 800b016:	2830      	cmp	r0, #48	; 0x30
 800b018:	4690      	mov	r8, r2
 800b01a:	f102 0201 	add.w	r2, r2, #1
 800b01e:	d0f9      	beq.n	800b014 <__gethex+0x58>
 800b020:	f7ff ffb6 	bl	800af90 <__hexdig_fun>
 800b024:	2301      	movs	r3, #1
 800b026:	fab0 f480 	clz	r4, r0
 800b02a:	0964      	lsrs	r4, r4, #5
 800b02c:	465e      	mov	r6, fp
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	4642      	mov	r2, r8
 800b032:	4615      	mov	r5, r2
 800b034:	3201      	adds	r2, #1
 800b036:	7828      	ldrb	r0, [r5, #0]
 800b038:	f7ff ffaa 	bl	800af90 <__hexdig_fun>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1f8      	bne.n	800b032 <__gethex+0x76>
 800b040:	4994      	ldr	r1, [pc, #592]	; (800b294 <__gethex+0x2d8>)
 800b042:	2201      	movs	r2, #1
 800b044:	4628      	mov	r0, r5
 800b046:	f7ff fdda 	bl	800abfe <strncmp>
 800b04a:	b978      	cbnz	r0, 800b06c <__gethex+0xb0>
 800b04c:	b946      	cbnz	r6, 800b060 <__gethex+0xa4>
 800b04e:	1c6e      	adds	r6, r5, #1
 800b050:	4632      	mov	r2, r6
 800b052:	4615      	mov	r5, r2
 800b054:	3201      	adds	r2, #1
 800b056:	7828      	ldrb	r0, [r5, #0]
 800b058:	f7ff ff9a 	bl	800af90 <__hexdig_fun>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d1f8      	bne.n	800b052 <__gethex+0x96>
 800b060:	1b73      	subs	r3, r6, r5
 800b062:	009e      	lsls	r6, r3, #2
 800b064:	e004      	b.n	800b070 <__gethex+0xb4>
 800b066:	2400      	movs	r4, #0
 800b068:	4626      	mov	r6, r4
 800b06a:	e7e1      	b.n	800b030 <__gethex+0x74>
 800b06c:	2e00      	cmp	r6, #0
 800b06e:	d1f7      	bne.n	800b060 <__gethex+0xa4>
 800b070:	782b      	ldrb	r3, [r5, #0]
 800b072:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b076:	2b50      	cmp	r3, #80	; 0x50
 800b078:	d13d      	bne.n	800b0f6 <__gethex+0x13a>
 800b07a:	786b      	ldrb	r3, [r5, #1]
 800b07c:	2b2b      	cmp	r3, #43	; 0x2b
 800b07e:	d02f      	beq.n	800b0e0 <__gethex+0x124>
 800b080:	2b2d      	cmp	r3, #45	; 0x2d
 800b082:	d031      	beq.n	800b0e8 <__gethex+0x12c>
 800b084:	1c69      	adds	r1, r5, #1
 800b086:	f04f 0b00 	mov.w	fp, #0
 800b08a:	7808      	ldrb	r0, [r1, #0]
 800b08c:	f7ff ff80 	bl	800af90 <__hexdig_fun>
 800b090:	1e42      	subs	r2, r0, #1
 800b092:	b2d2      	uxtb	r2, r2
 800b094:	2a18      	cmp	r2, #24
 800b096:	d82e      	bhi.n	800b0f6 <__gethex+0x13a>
 800b098:	f1a0 0210 	sub.w	r2, r0, #16
 800b09c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0a0:	f7ff ff76 	bl	800af90 <__hexdig_fun>
 800b0a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b0a8:	fa5f fc8c 	uxtb.w	ip, ip
 800b0ac:	f1bc 0f18 	cmp.w	ip, #24
 800b0b0:	d91d      	bls.n	800b0ee <__gethex+0x132>
 800b0b2:	f1bb 0f00 	cmp.w	fp, #0
 800b0b6:	d000      	beq.n	800b0ba <__gethex+0xfe>
 800b0b8:	4252      	negs	r2, r2
 800b0ba:	4416      	add	r6, r2
 800b0bc:	f8ca 1000 	str.w	r1, [sl]
 800b0c0:	b1dc      	cbz	r4, 800b0fa <__gethex+0x13e>
 800b0c2:	9b01      	ldr	r3, [sp, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	bf14      	ite	ne
 800b0c8:	f04f 0800 	movne.w	r8, #0
 800b0cc:	f04f 0806 	moveq.w	r8, #6
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	b005      	add	sp, #20
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	4645      	mov	r5, r8
 800b0da:	4626      	mov	r6, r4
 800b0dc:	2401      	movs	r4, #1
 800b0de:	e7c7      	b.n	800b070 <__gethex+0xb4>
 800b0e0:	f04f 0b00 	mov.w	fp, #0
 800b0e4:	1ca9      	adds	r1, r5, #2
 800b0e6:	e7d0      	b.n	800b08a <__gethex+0xce>
 800b0e8:	f04f 0b01 	mov.w	fp, #1
 800b0ec:	e7fa      	b.n	800b0e4 <__gethex+0x128>
 800b0ee:	230a      	movs	r3, #10
 800b0f0:	fb03 0002 	mla	r0, r3, r2, r0
 800b0f4:	e7d0      	b.n	800b098 <__gethex+0xdc>
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	e7e0      	b.n	800b0bc <__gethex+0x100>
 800b0fa:	eba5 0308 	sub.w	r3, r5, r8
 800b0fe:	3b01      	subs	r3, #1
 800b100:	4621      	mov	r1, r4
 800b102:	2b07      	cmp	r3, #7
 800b104:	dc0a      	bgt.n	800b11c <__gethex+0x160>
 800b106:	4648      	mov	r0, r9
 800b108:	f000 fb0e 	bl	800b728 <_Balloc>
 800b10c:	4604      	mov	r4, r0
 800b10e:	b940      	cbnz	r0, 800b122 <__gethex+0x166>
 800b110:	4b61      	ldr	r3, [pc, #388]	; (800b298 <__gethex+0x2dc>)
 800b112:	4602      	mov	r2, r0
 800b114:	21e4      	movs	r1, #228	; 0xe4
 800b116:	4861      	ldr	r0, [pc, #388]	; (800b29c <__gethex+0x2e0>)
 800b118:	f7ff fe7e 	bl	800ae18 <__assert_func>
 800b11c:	3101      	adds	r1, #1
 800b11e:	105b      	asrs	r3, r3, #1
 800b120:	e7ef      	b.n	800b102 <__gethex+0x146>
 800b122:	f100 0a14 	add.w	sl, r0, #20
 800b126:	2300      	movs	r3, #0
 800b128:	495a      	ldr	r1, [pc, #360]	; (800b294 <__gethex+0x2d8>)
 800b12a:	f8cd a004 	str.w	sl, [sp, #4]
 800b12e:	469b      	mov	fp, r3
 800b130:	45a8      	cmp	r8, r5
 800b132:	d342      	bcc.n	800b1ba <__gethex+0x1fe>
 800b134:	9801      	ldr	r0, [sp, #4]
 800b136:	f840 bb04 	str.w	fp, [r0], #4
 800b13a:	eba0 000a 	sub.w	r0, r0, sl
 800b13e:	1080      	asrs	r0, r0, #2
 800b140:	6120      	str	r0, [r4, #16]
 800b142:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b146:	4658      	mov	r0, fp
 800b148:	f000 fbe0 	bl	800b90c <__hi0bits>
 800b14c:	683d      	ldr	r5, [r7, #0]
 800b14e:	eba8 0000 	sub.w	r0, r8, r0
 800b152:	42a8      	cmp	r0, r5
 800b154:	dd59      	ble.n	800b20a <__gethex+0x24e>
 800b156:	eba0 0805 	sub.w	r8, r0, r5
 800b15a:	4641      	mov	r1, r8
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 ff6f 	bl	800c040 <__any_on>
 800b162:	4683      	mov	fp, r0
 800b164:	b1b8      	cbz	r0, 800b196 <__gethex+0x1da>
 800b166:	f108 33ff 	add.w	r3, r8, #4294967295
 800b16a:	1159      	asrs	r1, r3, #5
 800b16c:	f003 021f 	and.w	r2, r3, #31
 800b170:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b174:	f04f 0b01 	mov.w	fp, #1
 800b178:	fa0b f202 	lsl.w	r2, fp, r2
 800b17c:	420a      	tst	r2, r1
 800b17e:	d00a      	beq.n	800b196 <__gethex+0x1da>
 800b180:	455b      	cmp	r3, fp
 800b182:	dd06      	ble.n	800b192 <__gethex+0x1d6>
 800b184:	f1a8 0102 	sub.w	r1, r8, #2
 800b188:	4620      	mov	r0, r4
 800b18a:	f000 ff59 	bl	800c040 <__any_on>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d138      	bne.n	800b204 <__gethex+0x248>
 800b192:	f04f 0b02 	mov.w	fp, #2
 800b196:	4641      	mov	r1, r8
 800b198:	4620      	mov	r0, r4
 800b19a:	f7ff fea7 	bl	800aeec <rshift>
 800b19e:	4446      	add	r6, r8
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	42b3      	cmp	r3, r6
 800b1a4:	da41      	bge.n	800b22a <__gethex+0x26e>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4648      	mov	r0, r9
 800b1aa:	f000 fafd 	bl	800b7a8 <_Bfree>
 800b1ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b1b8:	e78a      	b.n	800b0d0 <__gethex+0x114>
 800b1ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b1be:	2a2e      	cmp	r2, #46	; 0x2e
 800b1c0:	d014      	beq.n	800b1ec <__gethex+0x230>
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	d106      	bne.n	800b1d4 <__gethex+0x218>
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	f843 bb04 	str.w	fp, [r3], #4
 800b1cc:	f04f 0b00 	mov.w	fp, #0
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	465b      	mov	r3, fp
 800b1d4:	7828      	ldrb	r0, [r5, #0]
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	f7ff feda 	bl	800af90 <__hexdig_fun>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	f000 000f 	and.w	r0, r0, #15
 800b1e2:	4098      	lsls	r0, r3
 800b1e4:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	e7a1      	b.n	800b130 <__gethex+0x174>
 800b1ec:	45a8      	cmp	r8, r5
 800b1ee:	d8e8      	bhi.n	800b1c2 <__gethex+0x206>
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	9303      	str	r3, [sp, #12]
 800b1f6:	f7ff fd02 	bl	800abfe <strncmp>
 800b1fa:	4926      	ldr	r1, [pc, #152]	; (800b294 <__gethex+0x2d8>)
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d1df      	bne.n	800b1c2 <__gethex+0x206>
 800b202:	e795      	b.n	800b130 <__gethex+0x174>
 800b204:	f04f 0b03 	mov.w	fp, #3
 800b208:	e7c5      	b.n	800b196 <__gethex+0x1da>
 800b20a:	da0b      	bge.n	800b224 <__gethex+0x268>
 800b20c:	eba5 0800 	sub.w	r8, r5, r0
 800b210:	4621      	mov	r1, r4
 800b212:	4642      	mov	r2, r8
 800b214:	4648      	mov	r0, r9
 800b216:	f000 fce1 	bl	800bbdc <__lshift>
 800b21a:	eba6 0608 	sub.w	r6, r6, r8
 800b21e:	4604      	mov	r4, r0
 800b220:	f100 0a14 	add.w	sl, r0, #20
 800b224:	f04f 0b00 	mov.w	fp, #0
 800b228:	e7ba      	b.n	800b1a0 <__gethex+0x1e4>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	42b3      	cmp	r3, r6
 800b22e:	dd73      	ble.n	800b318 <__gethex+0x35c>
 800b230:	1b9e      	subs	r6, r3, r6
 800b232:	42b5      	cmp	r5, r6
 800b234:	dc34      	bgt.n	800b2a0 <__gethex+0x2e4>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d023      	beq.n	800b284 <__gethex+0x2c8>
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d025      	beq.n	800b28c <__gethex+0x2d0>
 800b240:	2b01      	cmp	r3, #1
 800b242:	d115      	bne.n	800b270 <__gethex+0x2b4>
 800b244:	42b5      	cmp	r5, r6
 800b246:	d113      	bne.n	800b270 <__gethex+0x2b4>
 800b248:	2d01      	cmp	r5, #1
 800b24a:	d10b      	bne.n	800b264 <__gethex+0x2a8>
 800b24c:	9a02      	ldr	r2, [sp, #8]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	2301      	movs	r3, #1
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	f8ca 3000 	str.w	r3, [sl]
 800b25a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b25c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b260:	601c      	str	r4, [r3, #0]
 800b262:	e735      	b.n	800b0d0 <__gethex+0x114>
 800b264:	1e69      	subs	r1, r5, #1
 800b266:	4620      	mov	r0, r4
 800b268:	f000 feea 	bl	800c040 <__any_on>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d1ed      	bne.n	800b24c <__gethex+0x290>
 800b270:	4621      	mov	r1, r4
 800b272:	4648      	mov	r0, r9
 800b274:	f000 fa98 	bl	800b7a8 <_Bfree>
 800b278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b27a:	2300      	movs	r3, #0
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b282:	e725      	b.n	800b0d0 <__gethex+0x114>
 800b284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f2      	bne.n	800b270 <__gethex+0x2b4>
 800b28a:	e7df      	b.n	800b24c <__gethex+0x290>
 800b28c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1dc      	bne.n	800b24c <__gethex+0x290>
 800b292:	e7ed      	b.n	800b270 <__gethex+0x2b4>
 800b294:	0800db58 	.word	0x0800db58
 800b298:	0800dc6d 	.word	0x0800dc6d
 800b29c:	0800dc7e 	.word	0x0800dc7e
 800b2a0:	f106 38ff 	add.w	r8, r6, #4294967295
 800b2a4:	f1bb 0f00 	cmp.w	fp, #0
 800b2a8:	d133      	bne.n	800b312 <__gethex+0x356>
 800b2aa:	f1b8 0f00 	cmp.w	r8, #0
 800b2ae:	d004      	beq.n	800b2ba <__gethex+0x2fe>
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 fec4 	bl	800c040 <__any_on>
 800b2b8:	4683      	mov	fp, r0
 800b2ba:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b2be:	2301      	movs	r3, #1
 800b2c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2c4:	f008 081f 	and.w	r8, r8, #31
 800b2c8:	fa03 f308 	lsl.w	r3, r3, r8
 800b2cc:	4213      	tst	r3, r2
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bf18      	it	ne
 800b2d4:	f04b 0b02 	orrne.w	fp, fp, #2
 800b2d8:	1bad      	subs	r5, r5, r6
 800b2da:	f7ff fe07 	bl	800aeec <rshift>
 800b2de:	687e      	ldr	r6, [r7, #4]
 800b2e0:	f04f 0802 	mov.w	r8, #2
 800b2e4:	f1bb 0f00 	cmp.w	fp, #0
 800b2e8:	d04a      	beq.n	800b380 <__gethex+0x3c4>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d016      	beq.n	800b31e <__gethex+0x362>
 800b2f0:	2b03      	cmp	r3, #3
 800b2f2:	d018      	beq.n	800b326 <__gethex+0x36a>
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d109      	bne.n	800b30c <__gethex+0x350>
 800b2f8:	f01b 0f02 	tst.w	fp, #2
 800b2fc:	d006      	beq.n	800b30c <__gethex+0x350>
 800b2fe:	f8da 3000 	ldr.w	r3, [sl]
 800b302:	ea4b 0b03 	orr.w	fp, fp, r3
 800b306:	f01b 0f01 	tst.w	fp, #1
 800b30a:	d10f      	bne.n	800b32c <__gethex+0x370>
 800b30c:	f048 0810 	orr.w	r8, r8, #16
 800b310:	e036      	b.n	800b380 <__gethex+0x3c4>
 800b312:	f04f 0b01 	mov.w	fp, #1
 800b316:	e7d0      	b.n	800b2ba <__gethex+0x2fe>
 800b318:	f04f 0801 	mov.w	r8, #1
 800b31c:	e7e2      	b.n	800b2e4 <__gethex+0x328>
 800b31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b320:	f1c3 0301 	rsb	r3, r3, #1
 800b324:	930f      	str	r3, [sp, #60]	; 0x3c
 800b326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0ef      	beq.n	800b30c <__gethex+0x350>
 800b32c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b330:	f104 0214 	add.w	r2, r4, #20
 800b334:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b33e:	2300      	movs	r3, #0
 800b340:	4694      	mov	ip, r2
 800b342:	f852 1b04 	ldr.w	r1, [r2], #4
 800b346:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b34a:	d01e      	beq.n	800b38a <__gethex+0x3ce>
 800b34c:	3101      	adds	r1, #1
 800b34e:	f8cc 1000 	str.w	r1, [ip]
 800b352:	f1b8 0f02 	cmp.w	r8, #2
 800b356:	f104 0214 	add.w	r2, r4, #20
 800b35a:	d13d      	bne.n	800b3d8 <__gethex+0x41c>
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	3b01      	subs	r3, #1
 800b360:	42ab      	cmp	r3, r5
 800b362:	d10b      	bne.n	800b37c <__gethex+0x3c0>
 800b364:	1169      	asrs	r1, r5, #5
 800b366:	2301      	movs	r3, #1
 800b368:	f005 051f 	and.w	r5, r5, #31
 800b36c:	fa03 f505 	lsl.w	r5, r3, r5
 800b370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b374:	421d      	tst	r5, r3
 800b376:	bf18      	it	ne
 800b378:	f04f 0801 	movne.w	r8, #1
 800b37c:	f048 0820 	orr.w	r8, r8, #32
 800b380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b382:	601c      	str	r4, [r3, #0]
 800b384:	9b02      	ldr	r3, [sp, #8]
 800b386:	601e      	str	r6, [r3, #0]
 800b388:	e6a2      	b.n	800b0d0 <__gethex+0x114>
 800b38a:	4290      	cmp	r0, r2
 800b38c:	f842 3c04 	str.w	r3, [r2, #-4]
 800b390:	d8d6      	bhi.n	800b340 <__gethex+0x384>
 800b392:	68a2      	ldr	r2, [r4, #8]
 800b394:	4593      	cmp	fp, r2
 800b396:	db17      	blt.n	800b3c8 <__gethex+0x40c>
 800b398:	6861      	ldr	r1, [r4, #4]
 800b39a:	4648      	mov	r0, r9
 800b39c:	3101      	adds	r1, #1
 800b39e:	f000 f9c3 	bl	800b728 <_Balloc>
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	b918      	cbnz	r0, 800b3ae <__gethex+0x3f2>
 800b3a6:	4b1b      	ldr	r3, [pc, #108]	; (800b414 <__gethex+0x458>)
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	2184      	movs	r1, #132	; 0x84
 800b3ac:	e6b3      	b.n	800b116 <__gethex+0x15a>
 800b3ae:	6922      	ldr	r2, [r4, #16]
 800b3b0:	3202      	adds	r2, #2
 800b3b2:	f104 010c 	add.w	r1, r4, #12
 800b3b6:	0092      	lsls	r2, r2, #2
 800b3b8:	300c      	adds	r0, #12
 800b3ba:	f7ff fd17 	bl	800adec <memcpy>
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4648      	mov	r0, r9
 800b3c2:	f000 f9f1 	bl	800b7a8 <_Bfree>
 800b3c6:	4654      	mov	r4, sl
 800b3c8:	6922      	ldr	r2, [r4, #16]
 800b3ca:	1c51      	adds	r1, r2, #1
 800b3cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3d0:	6121      	str	r1, [r4, #16]
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	6151      	str	r1, [r2, #20]
 800b3d6:	e7bc      	b.n	800b352 <__gethex+0x396>
 800b3d8:	6921      	ldr	r1, [r4, #16]
 800b3da:	4559      	cmp	r1, fp
 800b3dc:	dd0b      	ble.n	800b3f6 <__gethex+0x43a>
 800b3de:	2101      	movs	r1, #1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f7ff fd83 	bl	800aeec <rshift>
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	3601      	adds	r6, #1
 800b3ea:	42b3      	cmp	r3, r6
 800b3ec:	f6ff aedb 	blt.w	800b1a6 <__gethex+0x1ea>
 800b3f0:	f04f 0801 	mov.w	r8, #1
 800b3f4:	e7c2      	b.n	800b37c <__gethex+0x3c0>
 800b3f6:	f015 051f 	ands.w	r5, r5, #31
 800b3fa:	d0f9      	beq.n	800b3f0 <__gethex+0x434>
 800b3fc:	9b01      	ldr	r3, [sp, #4]
 800b3fe:	441a      	add	r2, r3
 800b400:	f1c5 0520 	rsb	r5, r5, #32
 800b404:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b408:	f000 fa80 	bl	800b90c <__hi0bits>
 800b40c:	42a8      	cmp	r0, r5
 800b40e:	dbe6      	blt.n	800b3de <__gethex+0x422>
 800b410:	e7ee      	b.n	800b3f0 <__gethex+0x434>
 800b412:	bf00      	nop
 800b414:	0800dc6d 	.word	0x0800dc6d

0800b418 <L_shift>:
 800b418:	f1c2 0208 	rsb	r2, r2, #8
 800b41c:	0092      	lsls	r2, r2, #2
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	f1c2 0620 	rsb	r6, r2, #32
 800b424:	6843      	ldr	r3, [r0, #4]
 800b426:	6804      	ldr	r4, [r0, #0]
 800b428:	fa03 f506 	lsl.w	r5, r3, r6
 800b42c:	432c      	orrs	r4, r5
 800b42e:	40d3      	lsrs	r3, r2
 800b430:	6004      	str	r4, [r0, #0]
 800b432:	f840 3f04 	str.w	r3, [r0, #4]!
 800b436:	4288      	cmp	r0, r1
 800b438:	d3f4      	bcc.n	800b424 <L_shift+0xc>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}

0800b43c <__match>:
 800b43c:	b530      	push	{r4, r5, lr}
 800b43e:	6803      	ldr	r3, [r0, #0]
 800b440:	3301      	adds	r3, #1
 800b442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b446:	b914      	cbnz	r4, 800b44e <__match+0x12>
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	2001      	movs	r0, #1
 800b44c:	bd30      	pop	{r4, r5, pc}
 800b44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b452:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b456:	2d19      	cmp	r5, #25
 800b458:	bf98      	it	ls
 800b45a:	3220      	addls	r2, #32
 800b45c:	42a2      	cmp	r2, r4
 800b45e:	d0f0      	beq.n	800b442 <__match+0x6>
 800b460:	2000      	movs	r0, #0
 800b462:	e7f3      	b.n	800b44c <__match+0x10>

0800b464 <__hexnan>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	680b      	ldr	r3, [r1, #0]
 800b46a:	6801      	ldr	r1, [r0, #0]
 800b46c:	115e      	asrs	r6, r3, #5
 800b46e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b472:	f013 031f 	ands.w	r3, r3, #31
 800b476:	b087      	sub	sp, #28
 800b478:	bf18      	it	ne
 800b47a:	3604      	addne	r6, #4
 800b47c:	2500      	movs	r5, #0
 800b47e:	1f37      	subs	r7, r6, #4
 800b480:	4682      	mov	sl, r0
 800b482:	4690      	mov	r8, r2
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	f846 5c04 	str.w	r5, [r6, #-4]
 800b48a:	46b9      	mov	r9, r7
 800b48c:	463c      	mov	r4, r7
 800b48e:	9502      	str	r5, [sp, #8]
 800b490:	46ab      	mov	fp, r5
 800b492:	784a      	ldrb	r2, [r1, #1]
 800b494:	1c4b      	adds	r3, r1, #1
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	b342      	cbz	r2, 800b4ec <__hexnan+0x88>
 800b49a:	4610      	mov	r0, r2
 800b49c:	9105      	str	r1, [sp, #20]
 800b49e:	9204      	str	r2, [sp, #16]
 800b4a0:	f7ff fd76 	bl	800af90 <__hexdig_fun>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d14f      	bne.n	800b548 <__hexnan+0xe4>
 800b4a8:	9a04      	ldr	r2, [sp, #16]
 800b4aa:	9905      	ldr	r1, [sp, #20]
 800b4ac:	2a20      	cmp	r2, #32
 800b4ae:	d818      	bhi.n	800b4e2 <__hexnan+0x7e>
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	459b      	cmp	fp, r3
 800b4b4:	dd13      	ble.n	800b4de <__hexnan+0x7a>
 800b4b6:	454c      	cmp	r4, r9
 800b4b8:	d206      	bcs.n	800b4c8 <__hexnan+0x64>
 800b4ba:	2d07      	cmp	r5, #7
 800b4bc:	dc04      	bgt.n	800b4c8 <__hexnan+0x64>
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7ff ffa8 	bl	800b418 <L_shift>
 800b4c8:	4544      	cmp	r4, r8
 800b4ca:	d950      	bls.n	800b56e <__hexnan+0x10a>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f1a4 0904 	sub.w	r9, r4, #4
 800b4d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4d6:	f8cd b008 	str.w	fp, [sp, #8]
 800b4da:	464c      	mov	r4, r9
 800b4dc:	461d      	mov	r5, r3
 800b4de:	9903      	ldr	r1, [sp, #12]
 800b4e0:	e7d7      	b.n	800b492 <__hexnan+0x2e>
 800b4e2:	2a29      	cmp	r2, #41	; 0x29
 800b4e4:	d155      	bne.n	800b592 <__hexnan+0x12e>
 800b4e6:	3102      	adds	r1, #2
 800b4e8:	f8ca 1000 	str.w	r1, [sl]
 800b4ec:	f1bb 0f00 	cmp.w	fp, #0
 800b4f0:	d04f      	beq.n	800b592 <__hexnan+0x12e>
 800b4f2:	454c      	cmp	r4, r9
 800b4f4:	d206      	bcs.n	800b504 <__hexnan+0xa0>
 800b4f6:	2d07      	cmp	r5, #7
 800b4f8:	dc04      	bgt.n	800b504 <__hexnan+0xa0>
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	4620      	mov	r0, r4
 800b500:	f7ff ff8a 	bl	800b418 <L_shift>
 800b504:	4544      	cmp	r4, r8
 800b506:	d934      	bls.n	800b572 <__hexnan+0x10e>
 800b508:	f1a8 0204 	sub.w	r2, r8, #4
 800b50c:	4623      	mov	r3, r4
 800b50e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b512:	f842 1f04 	str.w	r1, [r2, #4]!
 800b516:	429f      	cmp	r7, r3
 800b518:	d2f9      	bcs.n	800b50e <__hexnan+0xaa>
 800b51a:	1b3b      	subs	r3, r7, r4
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	3304      	adds	r3, #4
 800b522:	3e03      	subs	r6, #3
 800b524:	3401      	adds	r4, #1
 800b526:	42a6      	cmp	r6, r4
 800b528:	bf38      	it	cc
 800b52a:	2304      	movcc	r3, #4
 800b52c:	4443      	add	r3, r8
 800b52e:	2200      	movs	r2, #0
 800b530:	f843 2b04 	str.w	r2, [r3], #4
 800b534:	429f      	cmp	r7, r3
 800b536:	d2fb      	bcs.n	800b530 <__hexnan+0xcc>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	b91b      	cbnz	r3, 800b544 <__hexnan+0xe0>
 800b53c:	4547      	cmp	r7, r8
 800b53e:	d126      	bne.n	800b58e <__hexnan+0x12a>
 800b540:	2301      	movs	r3, #1
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	2005      	movs	r0, #5
 800b546:	e025      	b.n	800b594 <__hexnan+0x130>
 800b548:	3501      	adds	r5, #1
 800b54a:	2d08      	cmp	r5, #8
 800b54c:	f10b 0b01 	add.w	fp, fp, #1
 800b550:	dd06      	ble.n	800b560 <__hexnan+0xfc>
 800b552:	4544      	cmp	r4, r8
 800b554:	d9c3      	bls.n	800b4de <__hexnan+0x7a>
 800b556:	2300      	movs	r3, #0
 800b558:	f844 3c04 	str.w	r3, [r4, #-4]
 800b55c:	2501      	movs	r5, #1
 800b55e:	3c04      	subs	r4, #4
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	f000 000f 	and.w	r0, r0, #15
 800b566:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b56a:	6020      	str	r0, [r4, #0]
 800b56c:	e7b7      	b.n	800b4de <__hexnan+0x7a>
 800b56e:	2508      	movs	r5, #8
 800b570:	e7b5      	b.n	800b4de <__hexnan+0x7a>
 800b572:	9b01      	ldr	r3, [sp, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0df      	beq.n	800b538 <__hexnan+0xd4>
 800b578:	f1c3 0320 	rsb	r3, r3, #32
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	40da      	lsrs	r2, r3
 800b582:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b586:	4013      	ands	r3, r2
 800b588:	f846 3c04 	str.w	r3, [r6, #-4]
 800b58c:	e7d4      	b.n	800b538 <__hexnan+0xd4>
 800b58e:	3f04      	subs	r7, #4
 800b590:	e7d2      	b.n	800b538 <__hexnan+0xd4>
 800b592:	2004      	movs	r0, #4
 800b594:	b007      	add	sp, #28
 800b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b59c <malloc>:
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <malloc+0xc>)
 800b59e:	4601      	mov	r1, r0
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	f000 b823 	b.w	800b5ec <_malloc_r>
 800b5a6:	bf00      	nop
 800b5a8:	200002c0 	.word	0x200002c0

0800b5ac <sbrk_aligned>:
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	4e0e      	ldr	r6, [pc, #56]	; (800b5e8 <sbrk_aligned+0x3c>)
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	6831      	ldr	r1, [r6, #0]
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	b911      	cbnz	r1, 800b5be <sbrk_aligned+0x12>
 800b5b8:	f001 f932 	bl	800c820 <_sbrk_r>
 800b5bc:	6030      	str	r0, [r6, #0]
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f001 f92d 	bl	800c820 <_sbrk_r>
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	d00a      	beq.n	800b5e0 <sbrk_aligned+0x34>
 800b5ca:	1cc4      	adds	r4, r0, #3
 800b5cc:	f024 0403 	bic.w	r4, r4, #3
 800b5d0:	42a0      	cmp	r0, r4
 800b5d2:	d007      	beq.n	800b5e4 <sbrk_aligned+0x38>
 800b5d4:	1a21      	subs	r1, r4, r0
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f001 f922 	bl	800c820 <_sbrk_r>
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d101      	bne.n	800b5e4 <sbrk_aligned+0x38>
 800b5e0:	f04f 34ff 	mov.w	r4, #4294967295
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	20002154 	.word	0x20002154

0800b5ec <_malloc_r>:
 800b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	1ccd      	adds	r5, r1, #3
 800b5f2:	f025 0503 	bic.w	r5, r5, #3
 800b5f6:	3508      	adds	r5, #8
 800b5f8:	2d0c      	cmp	r5, #12
 800b5fa:	bf38      	it	cc
 800b5fc:	250c      	movcc	r5, #12
 800b5fe:	2d00      	cmp	r5, #0
 800b600:	4607      	mov	r7, r0
 800b602:	db01      	blt.n	800b608 <_malloc_r+0x1c>
 800b604:	42a9      	cmp	r1, r5
 800b606:	d905      	bls.n	800b614 <_malloc_r+0x28>
 800b608:	230c      	movs	r3, #12
 800b60a:	603b      	str	r3, [r7, #0]
 800b60c:	2600      	movs	r6, #0
 800b60e:	4630      	mov	r0, r6
 800b610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6e8 <_malloc_r+0xfc>
 800b618:	f000 f87a 	bl	800b710 <__malloc_lock>
 800b61c:	f8d8 3000 	ldr.w	r3, [r8]
 800b620:	461c      	mov	r4, r3
 800b622:	bb5c      	cbnz	r4, 800b67c <_malloc_r+0x90>
 800b624:	4629      	mov	r1, r5
 800b626:	4638      	mov	r0, r7
 800b628:	f7ff ffc0 	bl	800b5ac <sbrk_aligned>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	4604      	mov	r4, r0
 800b630:	d155      	bne.n	800b6de <_malloc_r+0xf2>
 800b632:	f8d8 4000 	ldr.w	r4, [r8]
 800b636:	4626      	mov	r6, r4
 800b638:	2e00      	cmp	r6, #0
 800b63a:	d145      	bne.n	800b6c8 <_malloc_r+0xdc>
 800b63c:	2c00      	cmp	r4, #0
 800b63e:	d048      	beq.n	800b6d2 <_malloc_r+0xe6>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	4631      	mov	r1, r6
 800b644:	4638      	mov	r0, r7
 800b646:	eb04 0903 	add.w	r9, r4, r3
 800b64a:	f001 f8e9 	bl	800c820 <_sbrk_r>
 800b64e:	4581      	cmp	r9, r0
 800b650:	d13f      	bne.n	800b6d2 <_malloc_r+0xe6>
 800b652:	6821      	ldr	r1, [r4, #0]
 800b654:	1a6d      	subs	r5, r5, r1
 800b656:	4629      	mov	r1, r5
 800b658:	4638      	mov	r0, r7
 800b65a:	f7ff ffa7 	bl	800b5ac <sbrk_aligned>
 800b65e:	3001      	adds	r0, #1
 800b660:	d037      	beq.n	800b6d2 <_malloc_r+0xe6>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	442b      	add	r3, r5
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	f8d8 3000 	ldr.w	r3, [r8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d038      	beq.n	800b6e2 <_malloc_r+0xf6>
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	42a2      	cmp	r2, r4
 800b674:	d12b      	bne.n	800b6ce <_malloc_r+0xe2>
 800b676:	2200      	movs	r2, #0
 800b678:	605a      	str	r2, [r3, #4]
 800b67a:	e00f      	b.n	800b69c <_malloc_r+0xb0>
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	1b52      	subs	r2, r2, r5
 800b680:	d41f      	bmi.n	800b6c2 <_malloc_r+0xd6>
 800b682:	2a0b      	cmp	r2, #11
 800b684:	d917      	bls.n	800b6b6 <_malloc_r+0xca>
 800b686:	1961      	adds	r1, r4, r5
 800b688:	42a3      	cmp	r3, r4
 800b68a:	6025      	str	r5, [r4, #0]
 800b68c:	bf18      	it	ne
 800b68e:	6059      	strne	r1, [r3, #4]
 800b690:	6863      	ldr	r3, [r4, #4]
 800b692:	bf08      	it	eq
 800b694:	f8c8 1000 	streq.w	r1, [r8]
 800b698:	5162      	str	r2, [r4, r5]
 800b69a:	604b      	str	r3, [r1, #4]
 800b69c:	4638      	mov	r0, r7
 800b69e:	f104 060b 	add.w	r6, r4, #11
 800b6a2:	f000 f83b 	bl	800b71c <__malloc_unlock>
 800b6a6:	f026 0607 	bic.w	r6, r6, #7
 800b6aa:	1d23      	adds	r3, r4, #4
 800b6ac:	1af2      	subs	r2, r6, r3
 800b6ae:	d0ae      	beq.n	800b60e <_malloc_r+0x22>
 800b6b0:	1b9b      	subs	r3, r3, r6
 800b6b2:	50a3      	str	r3, [r4, r2]
 800b6b4:	e7ab      	b.n	800b60e <_malloc_r+0x22>
 800b6b6:	42a3      	cmp	r3, r4
 800b6b8:	6862      	ldr	r2, [r4, #4]
 800b6ba:	d1dd      	bne.n	800b678 <_malloc_r+0x8c>
 800b6bc:	f8c8 2000 	str.w	r2, [r8]
 800b6c0:	e7ec      	b.n	800b69c <_malloc_r+0xb0>
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	6864      	ldr	r4, [r4, #4]
 800b6c6:	e7ac      	b.n	800b622 <_malloc_r+0x36>
 800b6c8:	4634      	mov	r4, r6
 800b6ca:	6876      	ldr	r6, [r6, #4]
 800b6cc:	e7b4      	b.n	800b638 <_malloc_r+0x4c>
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	e7cc      	b.n	800b66c <_malloc_r+0x80>
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	603b      	str	r3, [r7, #0]
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	f000 f820 	bl	800b71c <__malloc_unlock>
 800b6dc:	e797      	b.n	800b60e <_malloc_r+0x22>
 800b6de:	6025      	str	r5, [r4, #0]
 800b6e0:	e7dc      	b.n	800b69c <_malloc_r+0xb0>
 800b6e2:	605b      	str	r3, [r3, #4]
 800b6e4:	deff      	udf	#255	; 0xff
 800b6e6:	bf00      	nop
 800b6e8:	20002150 	.word	0x20002150

0800b6ec <__ascii_mbtowc>:
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	b901      	cbnz	r1, 800b6f2 <__ascii_mbtowc+0x6>
 800b6f0:	a901      	add	r1, sp, #4
 800b6f2:	b142      	cbz	r2, 800b706 <__ascii_mbtowc+0x1a>
 800b6f4:	b14b      	cbz	r3, 800b70a <__ascii_mbtowc+0x1e>
 800b6f6:	7813      	ldrb	r3, [r2, #0]
 800b6f8:	600b      	str	r3, [r1, #0]
 800b6fa:	7812      	ldrb	r2, [r2, #0]
 800b6fc:	1e10      	subs	r0, r2, #0
 800b6fe:	bf18      	it	ne
 800b700:	2001      	movne	r0, #1
 800b702:	b002      	add	sp, #8
 800b704:	4770      	bx	lr
 800b706:	4610      	mov	r0, r2
 800b708:	e7fb      	b.n	800b702 <__ascii_mbtowc+0x16>
 800b70a:	f06f 0001 	mvn.w	r0, #1
 800b70e:	e7f8      	b.n	800b702 <__ascii_mbtowc+0x16>

0800b710 <__malloc_lock>:
 800b710:	4801      	ldr	r0, [pc, #4]	; (800b718 <__malloc_lock+0x8>)
 800b712:	f7ff bb69 	b.w	800ade8 <__retarget_lock_acquire_recursive>
 800b716:	bf00      	nop
 800b718:	2000214c 	.word	0x2000214c

0800b71c <__malloc_unlock>:
 800b71c:	4801      	ldr	r0, [pc, #4]	; (800b724 <__malloc_unlock+0x8>)
 800b71e:	f7ff bb64 	b.w	800adea <__retarget_lock_release_recursive>
 800b722:	bf00      	nop
 800b724:	2000214c 	.word	0x2000214c

0800b728 <_Balloc>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	69c6      	ldr	r6, [r0, #28]
 800b72c:	4604      	mov	r4, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	b976      	cbnz	r6, 800b750 <_Balloc+0x28>
 800b732:	2010      	movs	r0, #16
 800b734:	f7ff ff32 	bl	800b59c <malloc>
 800b738:	4602      	mov	r2, r0
 800b73a:	61e0      	str	r0, [r4, #28]
 800b73c:	b920      	cbnz	r0, 800b748 <_Balloc+0x20>
 800b73e:	4b18      	ldr	r3, [pc, #96]	; (800b7a0 <_Balloc+0x78>)
 800b740:	4818      	ldr	r0, [pc, #96]	; (800b7a4 <_Balloc+0x7c>)
 800b742:	216b      	movs	r1, #107	; 0x6b
 800b744:	f7ff fb68 	bl	800ae18 <__assert_func>
 800b748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b74c:	6006      	str	r6, [r0, #0]
 800b74e:	60c6      	str	r6, [r0, #12]
 800b750:	69e6      	ldr	r6, [r4, #28]
 800b752:	68f3      	ldr	r3, [r6, #12]
 800b754:	b183      	cbz	r3, 800b778 <_Balloc+0x50>
 800b756:	69e3      	ldr	r3, [r4, #28]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b75e:	b9b8      	cbnz	r0, 800b790 <_Balloc+0x68>
 800b760:	2101      	movs	r1, #1
 800b762:	fa01 f605 	lsl.w	r6, r1, r5
 800b766:	1d72      	adds	r2, r6, #5
 800b768:	0092      	lsls	r2, r2, #2
 800b76a:	4620      	mov	r0, r4
 800b76c:	f001 f86f 	bl	800c84e <_calloc_r>
 800b770:	b160      	cbz	r0, 800b78c <_Balloc+0x64>
 800b772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b776:	e00e      	b.n	800b796 <_Balloc+0x6e>
 800b778:	2221      	movs	r2, #33	; 0x21
 800b77a:	2104      	movs	r1, #4
 800b77c:	4620      	mov	r0, r4
 800b77e:	f001 f866 	bl	800c84e <_calloc_r>
 800b782:	69e3      	ldr	r3, [r4, #28]
 800b784:	60f0      	str	r0, [r6, #12]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e4      	bne.n	800b756 <_Balloc+0x2e>
 800b78c:	2000      	movs	r0, #0
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	6802      	ldr	r2, [r0, #0]
 800b792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b796:	2300      	movs	r3, #0
 800b798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b79c:	e7f7      	b.n	800b78e <_Balloc+0x66>
 800b79e:	bf00      	nop
 800b7a0:	0800dbb8 	.word	0x0800dbb8
 800b7a4:	0800dcde 	.word	0x0800dcde

0800b7a8 <_Bfree>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	69c6      	ldr	r6, [r0, #28]
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	b976      	cbnz	r6, 800b7d0 <_Bfree+0x28>
 800b7b2:	2010      	movs	r0, #16
 800b7b4:	f7ff fef2 	bl	800b59c <malloc>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	61e8      	str	r0, [r5, #28]
 800b7bc:	b920      	cbnz	r0, 800b7c8 <_Bfree+0x20>
 800b7be:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <_Bfree+0x3c>)
 800b7c0:	4809      	ldr	r0, [pc, #36]	; (800b7e8 <_Bfree+0x40>)
 800b7c2:	218f      	movs	r1, #143	; 0x8f
 800b7c4:	f7ff fb28 	bl	800ae18 <__assert_func>
 800b7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7cc:	6006      	str	r6, [r0, #0]
 800b7ce:	60c6      	str	r6, [r0, #12]
 800b7d0:	b13c      	cbz	r4, 800b7e2 <_Bfree+0x3a>
 800b7d2:	69eb      	ldr	r3, [r5, #28]
 800b7d4:	6862      	ldr	r2, [r4, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7dc:	6021      	str	r1, [r4, #0]
 800b7de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	0800dbb8 	.word	0x0800dbb8
 800b7e8:	0800dcde 	.word	0x0800dcde

0800b7ec <__multadd>:
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	690d      	ldr	r5, [r1, #16]
 800b7f2:	4607      	mov	r7, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	461e      	mov	r6, r3
 800b7f8:	f101 0c14 	add.w	ip, r1, #20
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b802:	b299      	uxth	r1, r3
 800b804:	fb02 6101 	mla	r1, r2, r1, r6
 800b808:	0c1e      	lsrs	r6, r3, #16
 800b80a:	0c0b      	lsrs	r3, r1, #16
 800b80c:	fb02 3306 	mla	r3, r2, r6, r3
 800b810:	b289      	uxth	r1, r1
 800b812:	3001      	adds	r0, #1
 800b814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b818:	4285      	cmp	r5, r0
 800b81a:	f84c 1b04 	str.w	r1, [ip], #4
 800b81e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b822:	dcec      	bgt.n	800b7fe <__multadd+0x12>
 800b824:	b30e      	cbz	r6, 800b86a <__multadd+0x7e>
 800b826:	68a3      	ldr	r3, [r4, #8]
 800b828:	42ab      	cmp	r3, r5
 800b82a:	dc19      	bgt.n	800b860 <__multadd+0x74>
 800b82c:	6861      	ldr	r1, [r4, #4]
 800b82e:	4638      	mov	r0, r7
 800b830:	3101      	adds	r1, #1
 800b832:	f7ff ff79 	bl	800b728 <_Balloc>
 800b836:	4680      	mov	r8, r0
 800b838:	b928      	cbnz	r0, 800b846 <__multadd+0x5a>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <__multadd+0x84>)
 800b83e:	480d      	ldr	r0, [pc, #52]	; (800b874 <__multadd+0x88>)
 800b840:	21ba      	movs	r1, #186	; 0xba
 800b842:	f7ff fae9 	bl	800ae18 <__assert_func>
 800b846:	6922      	ldr	r2, [r4, #16]
 800b848:	3202      	adds	r2, #2
 800b84a:	f104 010c 	add.w	r1, r4, #12
 800b84e:	0092      	lsls	r2, r2, #2
 800b850:	300c      	adds	r0, #12
 800b852:	f7ff facb 	bl	800adec <memcpy>
 800b856:	4621      	mov	r1, r4
 800b858:	4638      	mov	r0, r7
 800b85a:	f7ff ffa5 	bl	800b7a8 <_Bfree>
 800b85e:	4644      	mov	r4, r8
 800b860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b864:	3501      	adds	r5, #1
 800b866:	615e      	str	r6, [r3, #20]
 800b868:	6125      	str	r5, [r4, #16]
 800b86a:	4620      	mov	r0, r4
 800b86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b870:	0800dc6d 	.word	0x0800dc6d
 800b874:	0800dcde 	.word	0x0800dcde

0800b878 <__s2b>:
 800b878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b87c:	460c      	mov	r4, r1
 800b87e:	4615      	mov	r5, r2
 800b880:	461f      	mov	r7, r3
 800b882:	2209      	movs	r2, #9
 800b884:	3308      	adds	r3, #8
 800b886:	4606      	mov	r6, r0
 800b888:	fb93 f3f2 	sdiv	r3, r3, r2
 800b88c:	2100      	movs	r1, #0
 800b88e:	2201      	movs	r2, #1
 800b890:	429a      	cmp	r2, r3
 800b892:	db09      	blt.n	800b8a8 <__s2b+0x30>
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff ff47 	bl	800b728 <_Balloc>
 800b89a:	b940      	cbnz	r0, 800b8ae <__s2b+0x36>
 800b89c:	4602      	mov	r2, r0
 800b89e:	4b19      	ldr	r3, [pc, #100]	; (800b904 <__s2b+0x8c>)
 800b8a0:	4819      	ldr	r0, [pc, #100]	; (800b908 <__s2b+0x90>)
 800b8a2:	21d3      	movs	r1, #211	; 0xd3
 800b8a4:	f7ff fab8 	bl	800ae18 <__assert_func>
 800b8a8:	0052      	lsls	r2, r2, #1
 800b8aa:	3101      	adds	r1, #1
 800b8ac:	e7f0      	b.n	800b890 <__s2b+0x18>
 800b8ae:	9b08      	ldr	r3, [sp, #32]
 800b8b0:	6143      	str	r3, [r0, #20]
 800b8b2:	2d09      	cmp	r5, #9
 800b8b4:	f04f 0301 	mov.w	r3, #1
 800b8b8:	6103      	str	r3, [r0, #16]
 800b8ba:	dd16      	ble.n	800b8ea <__s2b+0x72>
 800b8bc:	f104 0909 	add.w	r9, r4, #9
 800b8c0:	46c8      	mov	r8, r9
 800b8c2:	442c      	add	r4, r5
 800b8c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	3b30      	subs	r3, #48	; 0x30
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7ff ff8c 	bl	800b7ec <__multadd>
 800b8d4:	45a0      	cmp	r8, r4
 800b8d6:	d1f5      	bne.n	800b8c4 <__s2b+0x4c>
 800b8d8:	f1a5 0408 	sub.w	r4, r5, #8
 800b8dc:	444c      	add	r4, r9
 800b8de:	1b2d      	subs	r5, r5, r4
 800b8e0:	1963      	adds	r3, r4, r5
 800b8e2:	42bb      	cmp	r3, r7
 800b8e4:	db04      	blt.n	800b8f0 <__s2b+0x78>
 800b8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ea:	340a      	adds	r4, #10
 800b8ec:	2509      	movs	r5, #9
 800b8ee:	e7f6      	b.n	800b8de <__s2b+0x66>
 800b8f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	3b30      	subs	r3, #48	; 0x30
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ff76 	bl	800b7ec <__multadd>
 800b900:	e7ee      	b.n	800b8e0 <__s2b+0x68>
 800b902:	bf00      	nop
 800b904:	0800dc6d 	.word	0x0800dc6d
 800b908:	0800dcde 	.word	0x0800dcde

0800b90c <__hi0bits>:
 800b90c:	0c03      	lsrs	r3, r0, #16
 800b90e:	041b      	lsls	r3, r3, #16
 800b910:	b9d3      	cbnz	r3, 800b948 <__hi0bits+0x3c>
 800b912:	0400      	lsls	r0, r0, #16
 800b914:	2310      	movs	r3, #16
 800b916:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b91a:	bf04      	itt	eq
 800b91c:	0200      	lsleq	r0, r0, #8
 800b91e:	3308      	addeq	r3, #8
 800b920:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b924:	bf04      	itt	eq
 800b926:	0100      	lsleq	r0, r0, #4
 800b928:	3304      	addeq	r3, #4
 800b92a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b92e:	bf04      	itt	eq
 800b930:	0080      	lsleq	r0, r0, #2
 800b932:	3302      	addeq	r3, #2
 800b934:	2800      	cmp	r0, #0
 800b936:	db05      	blt.n	800b944 <__hi0bits+0x38>
 800b938:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b93c:	f103 0301 	add.w	r3, r3, #1
 800b940:	bf08      	it	eq
 800b942:	2320      	moveq	r3, #32
 800b944:	4618      	mov	r0, r3
 800b946:	4770      	bx	lr
 800b948:	2300      	movs	r3, #0
 800b94a:	e7e4      	b.n	800b916 <__hi0bits+0xa>

0800b94c <__lo0bits>:
 800b94c:	6803      	ldr	r3, [r0, #0]
 800b94e:	f013 0207 	ands.w	r2, r3, #7
 800b952:	d00c      	beq.n	800b96e <__lo0bits+0x22>
 800b954:	07d9      	lsls	r1, r3, #31
 800b956:	d422      	bmi.n	800b99e <__lo0bits+0x52>
 800b958:	079a      	lsls	r2, r3, #30
 800b95a:	bf49      	itett	mi
 800b95c:	085b      	lsrmi	r3, r3, #1
 800b95e:	089b      	lsrpl	r3, r3, #2
 800b960:	6003      	strmi	r3, [r0, #0]
 800b962:	2201      	movmi	r2, #1
 800b964:	bf5c      	itt	pl
 800b966:	6003      	strpl	r3, [r0, #0]
 800b968:	2202      	movpl	r2, #2
 800b96a:	4610      	mov	r0, r2
 800b96c:	4770      	bx	lr
 800b96e:	b299      	uxth	r1, r3
 800b970:	b909      	cbnz	r1, 800b976 <__lo0bits+0x2a>
 800b972:	0c1b      	lsrs	r3, r3, #16
 800b974:	2210      	movs	r2, #16
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	b909      	cbnz	r1, 800b97e <__lo0bits+0x32>
 800b97a:	3208      	adds	r2, #8
 800b97c:	0a1b      	lsrs	r3, r3, #8
 800b97e:	0719      	lsls	r1, r3, #28
 800b980:	bf04      	itt	eq
 800b982:	091b      	lsreq	r3, r3, #4
 800b984:	3204      	addeq	r2, #4
 800b986:	0799      	lsls	r1, r3, #30
 800b988:	bf04      	itt	eq
 800b98a:	089b      	lsreq	r3, r3, #2
 800b98c:	3202      	addeq	r2, #2
 800b98e:	07d9      	lsls	r1, r3, #31
 800b990:	d403      	bmi.n	800b99a <__lo0bits+0x4e>
 800b992:	085b      	lsrs	r3, r3, #1
 800b994:	f102 0201 	add.w	r2, r2, #1
 800b998:	d003      	beq.n	800b9a2 <__lo0bits+0x56>
 800b99a:	6003      	str	r3, [r0, #0]
 800b99c:	e7e5      	b.n	800b96a <__lo0bits+0x1e>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	e7e3      	b.n	800b96a <__lo0bits+0x1e>
 800b9a2:	2220      	movs	r2, #32
 800b9a4:	e7e1      	b.n	800b96a <__lo0bits+0x1e>
	...

0800b9a8 <__i2b>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f7ff febb 	bl	800b728 <_Balloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <__i2b+0x1a>
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <__i2b+0x24>)
 800b9b8:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <__i2b+0x28>)
 800b9ba:	f240 1145 	movw	r1, #325	; 0x145
 800b9be:	f7ff fa2b 	bl	800ae18 <__assert_func>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	6144      	str	r4, [r0, #20]
 800b9c6:	6103      	str	r3, [r0, #16]
 800b9c8:	bd10      	pop	{r4, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0800dc6d 	.word	0x0800dc6d
 800b9d0:	0800dcde 	.word	0x0800dcde

0800b9d4 <__multiply>:
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4691      	mov	r9, r2
 800b9da:	690a      	ldr	r2, [r1, #16]
 800b9dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	bfb8      	it	lt
 800b9e4:	460b      	movlt	r3, r1
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	bfbc      	itt	lt
 800b9ea:	464c      	movlt	r4, r9
 800b9ec:	4699      	movlt	r9, r3
 800b9ee:	6927      	ldr	r7, [r4, #16]
 800b9f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9f4:	68a3      	ldr	r3, [r4, #8]
 800b9f6:	6861      	ldr	r1, [r4, #4]
 800b9f8:	eb07 060a 	add.w	r6, r7, sl
 800b9fc:	42b3      	cmp	r3, r6
 800b9fe:	b085      	sub	sp, #20
 800ba00:	bfb8      	it	lt
 800ba02:	3101      	addlt	r1, #1
 800ba04:	f7ff fe90 	bl	800b728 <_Balloc>
 800ba08:	b930      	cbnz	r0, 800ba18 <__multiply+0x44>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	4b44      	ldr	r3, [pc, #272]	; (800bb20 <__multiply+0x14c>)
 800ba0e:	4845      	ldr	r0, [pc, #276]	; (800bb24 <__multiply+0x150>)
 800ba10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba14:	f7ff fa00 	bl	800ae18 <__assert_func>
 800ba18:	f100 0514 	add.w	r5, r0, #20
 800ba1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba20:	462b      	mov	r3, r5
 800ba22:	2200      	movs	r2, #0
 800ba24:	4543      	cmp	r3, r8
 800ba26:	d321      	bcc.n	800ba6c <__multiply+0x98>
 800ba28:	f104 0314 	add.w	r3, r4, #20
 800ba2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba30:	f109 0314 	add.w	r3, r9, #20
 800ba34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba38:	9202      	str	r2, [sp, #8]
 800ba3a:	1b3a      	subs	r2, r7, r4
 800ba3c:	3a15      	subs	r2, #21
 800ba3e:	f022 0203 	bic.w	r2, r2, #3
 800ba42:	3204      	adds	r2, #4
 800ba44:	f104 0115 	add.w	r1, r4, #21
 800ba48:	428f      	cmp	r7, r1
 800ba4a:	bf38      	it	cc
 800ba4c:	2204      	movcc	r2, #4
 800ba4e:	9201      	str	r2, [sp, #4]
 800ba50:	9a02      	ldr	r2, [sp, #8]
 800ba52:	9303      	str	r3, [sp, #12]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d80c      	bhi.n	800ba72 <__multiply+0x9e>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	dd03      	ble.n	800ba64 <__multiply+0x90>
 800ba5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d05b      	beq.n	800bb1c <__multiply+0x148>
 800ba64:	6106      	str	r6, [r0, #16]
 800ba66:	b005      	add	sp, #20
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	f843 2b04 	str.w	r2, [r3], #4
 800ba70:	e7d8      	b.n	800ba24 <__multiply+0x50>
 800ba72:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba76:	f1ba 0f00 	cmp.w	sl, #0
 800ba7a:	d024      	beq.n	800bac6 <__multiply+0xf2>
 800ba7c:	f104 0e14 	add.w	lr, r4, #20
 800ba80:	46a9      	mov	r9, r5
 800ba82:	f04f 0c00 	mov.w	ip, #0
 800ba86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba8a:	f8d9 1000 	ldr.w	r1, [r9]
 800ba8e:	fa1f fb82 	uxth.w	fp, r2
 800ba92:	b289      	uxth	r1, r1
 800ba94:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba9c:	f8d9 2000 	ldr.w	r2, [r9]
 800baa0:	4461      	add	r1, ip
 800baa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baa6:	fb0a c20b 	mla	r2, sl, fp, ip
 800baaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800baae:	b289      	uxth	r1, r1
 800bab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bab4:	4577      	cmp	r7, lr
 800bab6:	f849 1b04 	str.w	r1, [r9], #4
 800baba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800babe:	d8e2      	bhi.n	800ba86 <__multiply+0xb2>
 800bac0:	9a01      	ldr	r2, [sp, #4]
 800bac2:	f845 c002 	str.w	ip, [r5, r2]
 800bac6:	9a03      	ldr	r2, [sp, #12]
 800bac8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bacc:	3304      	adds	r3, #4
 800bace:	f1b9 0f00 	cmp.w	r9, #0
 800bad2:	d021      	beq.n	800bb18 <__multiply+0x144>
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	f104 0c14 	add.w	ip, r4, #20
 800bada:	46ae      	mov	lr, r5
 800badc:	f04f 0a00 	mov.w	sl, #0
 800bae0:	f8bc b000 	ldrh.w	fp, [ip]
 800bae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bae8:	fb09 220b 	mla	r2, r9, fp, r2
 800baec:	4452      	add	r2, sl
 800baee:	b289      	uxth	r1, r1
 800baf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800baf4:	f84e 1b04 	str.w	r1, [lr], #4
 800baf8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bafc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb00:	f8be 1000 	ldrh.w	r1, [lr]
 800bb04:	fb09 110a 	mla	r1, r9, sl, r1
 800bb08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb0c:	4567      	cmp	r7, ip
 800bb0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb12:	d8e5      	bhi.n	800bae0 <__multiply+0x10c>
 800bb14:	9a01      	ldr	r2, [sp, #4]
 800bb16:	50a9      	str	r1, [r5, r2]
 800bb18:	3504      	adds	r5, #4
 800bb1a:	e799      	b.n	800ba50 <__multiply+0x7c>
 800bb1c:	3e01      	subs	r6, #1
 800bb1e:	e79b      	b.n	800ba58 <__multiply+0x84>
 800bb20:	0800dc6d 	.word	0x0800dc6d
 800bb24:	0800dcde 	.word	0x0800dcde

0800bb28 <__pow5mult>:
 800bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	4615      	mov	r5, r2
 800bb2e:	f012 0203 	ands.w	r2, r2, #3
 800bb32:	4606      	mov	r6, r0
 800bb34:	460f      	mov	r7, r1
 800bb36:	d007      	beq.n	800bb48 <__pow5mult+0x20>
 800bb38:	4c25      	ldr	r4, [pc, #148]	; (800bbd0 <__pow5mult+0xa8>)
 800bb3a:	3a01      	subs	r2, #1
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb42:	f7ff fe53 	bl	800b7ec <__multadd>
 800bb46:	4607      	mov	r7, r0
 800bb48:	10ad      	asrs	r5, r5, #2
 800bb4a:	d03d      	beq.n	800bbc8 <__pow5mult+0xa0>
 800bb4c:	69f4      	ldr	r4, [r6, #28]
 800bb4e:	b97c      	cbnz	r4, 800bb70 <__pow5mult+0x48>
 800bb50:	2010      	movs	r0, #16
 800bb52:	f7ff fd23 	bl	800b59c <malloc>
 800bb56:	4602      	mov	r2, r0
 800bb58:	61f0      	str	r0, [r6, #28]
 800bb5a:	b928      	cbnz	r0, 800bb68 <__pow5mult+0x40>
 800bb5c:	4b1d      	ldr	r3, [pc, #116]	; (800bbd4 <__pow5mult+0xac>)
 800bb5e:	481e      	ldr	r0, [pc, #120]	; (800bbd8 <__pow5mult+0xb0>)
 800bb60:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bb64:	f7ff f958 	bl	800ae18 <__assert_func>
 800bb68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb6c:	6004      	str	r4, [r0, #0]
 800bb6e:	60c4      	str	r4, [r0, #12]
 800bb70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bb74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb78:	b94c      	cbnz	r4, 800bb8e <__pow5mult+0x66>
 800bb7a:	f240 2171 	movw	r1, #625	; 0x271
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ff12 	bl	800b9a8 <__i2b>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	07eb      	lsls	r3, r5, #31
 800bb94:	d50a      	bpl.n	800bbac <__pow5mult+0x84>
 800bb96:	4639      	mov	r1, r7
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ff1a 	bl	800b9d4 <__multiply>
 800bba0:	4639      	mov	r1, r7
 800bba2:	4680      	mov	r8, r0
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff fdff 	bl	800b7a8 <_Bfree>
 800bbaa:	4647      	mov	r7, r8
 800bbac:	106d      	asrs	r5, r5, #1
 800bbae:	d00b      	beq.n	800bbc8 <__pow5mult+0xa0>
 800bbb0:	6820      	ldr	r0, [r4, #0]
 800bbb2:	b938      	cbnz	r0, 800bbc4 <__pow5mult+0x9c>
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff ff0b 	bl	800b9d4 <__multiply>
 800bbbe:	6020      	str	r0, [r4, #0]
 800bbc0:	f8c0 9000 	str.w	r9, [r0]
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	e7e4      	b.n	800bb92 <__pow5mult+0x6a>
 800bbc8:	4638      	mov	r0, r7
 800bbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbce:	bf00      	nop
 800bbd0:	0800de28 	.word	0x0800de28
 800bbd4:	0800dbb8 	.word	0x0800dbb8
 800bbd8:	0800dcde 	.word	0x0800dcde

0800bbdc <__lshift>:
 800bbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	6849      	ldr	r1, [r1, #4]
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	4607      	mov	r7, r0
 800bbee:	4691      	mov	r9, r2
 800bbf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbf4:	f108 0601 	add.w	r6, r8, #1
 800bbf8:	42b3      	cmp	r3, r6
 800bbfa:	db0b      	blt.n	800bc14 <__lshift+0x38>
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff fd93 	bl	800b728 <_Balloc>
 800bc02:	4605      	mov	r5, r0
 800bc04:	b948      	cbnz	r0, 800bc1a <__lshift+0x3e>
 800bc06:	4602      	mov	r2, r0
 800bc08:	4b28      	ldr	r3, [pc, #160]	; (800bcac <__lshift+0xd0>)
 800bc0a:	4829      	ldr	r0, [pc, #164]	; (800bcb0 <__lshift+0xd4>)
 800bc0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc10:	f7ff f902 	bl	800ae18 <__assert_func>
 800bc14:	3101      	adds	r1, #1
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	e7ee      	b.n	800bbf8 <__lshift+0x1c>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f100 0114 	add.w	r1, r0, #20
 800bc20:	f100 0210 	add.w	r2, r0, #16
 800bc24:	4618      	mov	r0, r3
 800bc26:	4553      	cmp	r3, sl
 800bc28:	db33      	blt.n	800bc92 <__lshift+0xb6>
 800bc2a:	6920      	ldr	r0, [r4, #16]
 800bc2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc30:	f104 0314 	add.w	r3, r4, #20
 800bc34:	f019 091f 	ands.w	r9, r9, #31
 800bc38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc40:	d02b      	beq.n	800bc9a <__lshift+0xbe>
 800bc42:	f1c9 0e20 	rsb	lr, r9, #32
 800bc46:	468a      	mov	sl, r1
 800bc48:	2200      	movs	r2, #0
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc50:	4310      	orrs	r0, r2
 800bc52:	f84a 0b04 	str.w	r0, [sl], #4
 800bc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5a:	459c      	cmp	ip, r3
 800bc5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc60:	d8f3      	bhi.n	800bc4a <__lshift+0x6e>
 800bc62:	ebac 0304 	sub.w	r3, ip, r4
 800bc66:	3b15      	subs	r3, #21
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	f104 0015 	add.w	r0, r4, #21
 800bc72:	4584      	cmp	ip, r0
 800bc74:	bf38      	it	cc
 800bc76:	2304      	movcc	r3, #4
 800bc78:	50ca      	str	r2, [r1, r3]
 800bc7a:	b10a      	cbz	r2, 800bc80 <__lshift+0xa4>
 800bc7c:	f108 0602 	add.w	r6, r8, #2
 800bc80:	3e01      	subs	r6, #1
 800bc82:	4638      	mov	r0, r7
 800bc84:	612e      	str	r6, [r5, #16]
 800bc86:	4621      	mov	r1, r4
 800bc88:	f7ff fd8e 	bl	800b7a8 <_Bfree>
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc92:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc96:	3301      	adds	r3, #1
 800bc98:	e7c5      	b.n	800bc26 <__lshift+0x4a>
 800bc9a:	3904      	subs	r1, #4
 800bc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bca4:	459c      	cmp	ip, r3
 800bca6:	d8f9      	bhi.n	800bc9c <__lshift+0xc0>
 800bca8:	e7ea      	b.n	800bc80 <__lshift+0xa4>
 800bcaa:	bf00      	nop
 800bcac:	0800dc6d 	.word	0x0800dc6d
 800bcb0:	0800dcde 	.word	0x0800dcde

0800bcb4 <__mcmp>:
 800bcb4:	b530      	push	{r4, r5, lr}
 800bcb6:	6902      	ldr	r2, [r0, #16]
 800bcb8:	690c      	ldr	r4, [r1, #16]
 800bcba:	1b12      	subs	r2, r2, r4
 800bcbc:	d10e      	bne.n	800bcdc <__mcmp+0x28>
 800bcbe:	f100 0314 	add.w	r3, r0, #20
 800bcc2:	3114      	adds	r1, #20
 800bcc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bcc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bcd4:	42a5      	cmp	r5, r4
 800bcd6:	d003      	beq.n	800bce0 <__mcmp+0x2c>
 800bcd8:	d305      	bcc.n	800bce6 <__mcmp+0x32>
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4610      	mov	r0, r2
 800bcde:	bd30      	pop	{r4, r5, pc}
 800bce0:	4283      	cmp	r3, r0
 800bce2:	d3f3      	bcc.n	800bccc <__mcmp+0x18>
 800bce4:	e7fa      	b.n	800bcdc <__mcmp+0x28>
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	e7f7      	b.n	800bcdc <__mcmp+0x28>

0800bcec <__mdiff>:
 800bcec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4690      	mov	r8, r2
 800bcfa:	f7ff ffdb 	bl	800bcb4 <__mcmp>
 800bcfe:	1e05      	subs	r5, r0, #0
 800bd00:	d110      	bne.n	800bd24 <__mdiff+0x38>
 800bd02:	4629      	mov	r1, r5
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fd0f 	bl	800b728 <_Balloc>
 800bd0a:	b930      	cbnz	r0, 800bd1a <__mdiff+0x2e>
 800bd0c:	4b3a      	ldr	r3, [pc, #232]	; (800bdf8 <__mdiff+0x10c>)
 800bd0e:	4602      	mov	r2, r0
 800bd10:	f240 2137 	movw	r1, #567	; 0x237
 800bd14:	4839      	ldr	r0, [pc, #228]	; (800bdfc <__mdiff+0x110>)
 800bd16:	f7ff f87f 	bl	800ae18 <__assert_func>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	bfa4      	itt	ge
 800bd26:	4643      	movge	r3, r8
 800bd28:	46a0      	movge	r8, r4
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd30:	bfa6      	itte	ge
 800bd32:	461c      	movge	r4, r3
 800bd34:	2500      	movge	r5, #0
 800bd36:	2501      	movlt	r5, #1
 800bd38:	f7ff fcf6 	bl	800b728 <_Balloc>
 800bd3c:	b920      	cbnz	r0, 800bd48 <__mdiff+0x5c>
 800bd3e:	4b2e      	ldr	r3, [pc, #184]	; (800bdf8 <__mdiff+0x10c>)
 800bd40:	4602      	mov	r2, r0
 800bd42:	f240 2145 	movw	r1, #581	; 0x245
 800bd46:	e7e5      	b.n	800bd14 <__mdiff+0x28>
 800bd48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd4c:	6926      	ldr	r6, [r4, #16]
 800bd4e:	60c5      	str	r5, [r0, #12]
 800bd50:	f104 0914 	add.w	r9, r4, #20
 800bd54:	f108 0514 	add.w	r5, r8, #20
 800bd58:	f100 0e14 	add.w	lr, r0, #20
 800bd5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd64:	f108 0210 	add.w	r2, r8, #16
 800bd68:	46f2      	mov	sl, lr
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd74:	fa11 f88b 	uxtah	r8, r1, fp
 800bd78:	b299      	uxth	r1, r3
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	eba8 0801 	sub.w	r8, r8, r1
 800bd80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd88:	fa1f f888 	uxth.w	r8, r8
 800bd8c:	1419      	asrs	r1, r3, #16
 800bd8e:	454e      	cmp	r6, r9
 800bd90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd94:	f84a 3b04 	str.w	r3, [sl], #4
 800bd98:	d8e8      	bhi.n	800bd6c <__mdiff+0x80>
 800bd9a:	1b33      	subs	r3, r6, r4
 800bd9c:	3b15      	subs	r3, #21
 800bd9e:	f023 0303 	bic.w	r3, r3, #3
 800bda2:	3304      	adds	r3, #4
 800bda4:	3415      	adds	r4, #21
 800bda6:	42a6      	cmp	r6, r4
 800bda8:	bf38      	it	cc
 800bdaa:	2304      	movcc	r3, #4
 800bdac:	441d      	add	r5, r3
 800bdae:	4473      	add	r3, lr
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	462e      	mov	r6, r5
 800bdb4:	4566      	cmp	r6, ip
 800bdb6:	d30e      	bcc.n	800bdd6 <__mdiff+0xea>
 800bdb8:	f10c 0203 	add.w	r2, ip, #3
 800bdbc:	1b52      	subs	r2, r2, r5
 800bdbe:	f022 0203 	bic.w	r2, r2, #3
 800bdc2:	3d03      	subs	r5, #3
 800bdc4:	45ac      	cmp	ip, r5
 800bdc6:	bf38      	it	cc
 800bdc8:	2200      	movcc	r2, #0
 800bdca:	4413      	add	r3, r2
 800bdcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bdd0:	b17a      	cbz	r2, 800bdf2 <__mdiff+0x106>
 800bdd2:	6107      	str	r7, [r0, #16]
 800bdd4:	e7a4      	b.n	800bd20 <__mdiff+0x34>
 800bdd6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdda:	fa11 f288 	uxtah	r2, r1, r8
 800bdde:	1414      	asrs	r4, r2, #16
 800bde0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bde4:	b292      	uxth	r2, r2
 800bde6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdea:	f84e 2b04 	str.w	r2, [lr], #4
 800bdee:	1421      	asrs	r1, r4, #16
 800bdf0:	e7e0      	b.n	800bdb4 <__mdiff+0xc8>
 800bdf2:	3f01      	subs	r7, #1
 800bdf4:	e7ea      	b.n	800bdcc <__mdiff+0xe0>
 800bdf6:	bf00      	nop
 800bdf8:	0800dc6d 	.word	0x0800dc6d
 800bdfc:	0800dcde 	.word	0x0800dcde

0800be00 <__ulp>:
 800be00:	b082      	sub	sp, #8
 800be02:	ed8d 0b00 	vstr	d0, [sp]
 800be06:	9a01      	ldr	r2, [sp, #4]
 800be08:	4b0f      	ldr	r3, [pc, #60]	; (800be48 <__ulp+0x48>)
 800be0a:	4013      	ands	r3, r2
 800be0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be10:	2b00      	cmp	r3, #0
 800be12:	dc08      	bgt.n	800be26 <__ulp+0x26>
 800be14:	425b      	negs	r3, r3
 800be16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800be1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be1e:	da04      	bge.n	800be2a <__ulp+0x2a>
 800be20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be24:	4113      	asrs	r3, r2
 800be26:	2200      	movs	r2, #0
 800be28:	e008      	b.n	800be3c <__ulp+0x3c>
 800be2a:	f1a2 0314 	sub.w	r3, r2, #20
 800be2e:	2b1e      	cmp	r3, #30
 800be30:	bfda      	itte	le
 800be32:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800be36:	40da      	lsrle	r2, r3
 800be38:	2201      	movgt	r2, #1
 800be3a:	2300      	movs	r3, #0
 800be3c:	4619      	mov	r1, r3
 800be3e:	4610      	mov	r0, r2
 800be40:	ec41 0b10 	vmov	d0, r0, r1
 800be44:	b002      	add	sp, #8
 800be46:	4770      	bx	lr
 800be48:	7ff00000 	.word	0x7ff00000

0800be4c <__b2d>:
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	6906      	ldr	r6, [r0, #16]
 800be52:	f100 0814 	add.w	r8, r0, #20
 800be56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be5a:	1f37      	subs	r7, r6, #4
 800be5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be60:	4610      	mov	r0, r2
 800be62:	f7ff fd53 	bl	800b90c <__hi0bits>
 800be66:	f1c0 0320 	rsb	r3, r0, #32
 800be6a:	280a      	cmp	r0, #10
 800be6c:	600b      	str	r3, [r1, #0]
 800be6e:	491b      	ldr	r1, [pc, #108]	; (800bedc <__b2d+0x90>)
 800be70:	dc15      	bgt.n	800be9e <__b2d+0x52>
 800be72:	f1c0 0c0b 	rsb	ip, r0, #11
 800be76:	fa22 f30c 	lsr.w	r3, r2, ip
 800be7a:	45b8      	cmp	r8, r7
 800be7c:	ea43 0501 	orr.w	r5, r3, r1
 800be80:	bf34      	ite	cc
 800be82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be86:	2300      	movcs	r3, #0
 800be88:	3015      	adds	r0, #21
 800be8a:	fa02 f000 	lsl.w	r0, r2, r0
 800be8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800be92:	4303      	orrs	r3, r0
 800be94:	461c      	mov	r4, r3
 800be96:	ec45 4b10 	vmov	d0, r4, r5
 800be9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9e:	45b8      	cmp	r8, r7
 800bea0:	bf3a      	itte	cc
 800bea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bea6:	f1a6 0708 	subcc.w	r7, r6, #8
 800beaa:	2300      	movcs	r3, #0
 800beac:	380b      	subs	r0, #11
 800beae:	d012      	beq.n	800bed6 <__b2d+0x8a>
 800beb0:	f1c0 0120 	rsb	r1, r0, #32
 800beb4:	fa23 f401 	lsr.w	r4, r3, r1
 800beb8:	4082      	lsls	r2, r0
 800beba:	4322      	orrs	r2, r4
 800bebc:	4547      	cmp	r7, r8
 800bebe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bec2:	bf8c      	ite	hi
 800bec4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bec8:	2200      	movls	r2, #0
 800beca:	4083      	lsls	r3, r0
 800becc:	40ca      	lsrs	r2, r1
 800bece:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bed2:	4313      	orrs	r3, r2
 800bed4:	e7de      	b.n	800be94 <__b2d+0x48>
 800bed6:	ea42 0501 	orr.w	r5, r2, r1
 800beda:	e7db      	b.n	800be94 <__b2d+0x48>
 800bedc:	3ff00000 	.word	0x3ff00000

0800bee0 <__d2b>:
 800bee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee4:	460f      	mov	r7, r1
 800bee6:	2101      	movs	r1, #1
 800bee8:	ec59 8b10 	vmov	r8, r9, d0
 800beec:	4616      	mov	r6, r2
 800beee:	f7ff fc1b 	bl	800b728 <_Balloc>
 800bef2:	4604      	mov	r4, r0
 800bef4:	b930      	cbnz	r0, 800bf04 <__d2b+0x24>
 800bef6:	4602      	mov	r2, r0
 800bef8:	4b24      	ldr	r3, [pc, #144]	; (800bf8c <__d2b+0xac>)
 800befa:	4825      	ldr	r0, [pc, #148]	; (800bf90 <__d2b+0xb0>)
 800befc:	f240 310f 	movw	r1, #783	; 0x30f
 800bf00:	f7fe ff8a 	bl	800ae18 <__assert_func>
 800bf04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf0c:	bb2d      	cbnz	r5, 800bf5a <__d2b+0x7a>
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f1b8 0300 	subs.w	r3, r8, #0
 800bf14:	d026      	beq.n	800bf64 <__d2b+0x84>
 800bf16:	4668      	mov	r0, sp
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f7ff fd17 	bl	800b94c <__lo0bits>
 800bf1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf22:	b1e8      	cbz	r0, 800bf60 <__d2b+0x80>
 800bf24:	f1c0 0320 	rsb	r3, r0, #32
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	40c2      	lsrs	r2, r0
 800bf30:	6163      	str	r3, [r4, #20]
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	61a3      	str	r3, [r4, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bf14      	ite	ne
 800bf3c:	2202      	movne	r2, #2
 800bf3e:	2201      	moveq	r2, #1
 800bf40:	6122      	str	r2, [r4, #16]
 800bf42:	b1bd      	cbz	r5, 800bf74 <__d2b+0x94>
 800bf44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf48:	4405      	add	r5, r0
 800bf4a:	603d      	str	r5, [r7, #0]
 800bf4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf50:	6030      	str	r0, [r6, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b003      	add	sp, #12
 800bf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5e:	e7d6      	b.n	800bf0e <__d2b+0x2e>
 800bf60:	6161      	str	r1, [r4, #20]
 800bf62:	e7e7      	b.n	800bf34 <__d2b+0x54>
 800bf64:	a801      	add	r0, sp, #4
 800bf66:	f7ff fcf1 	bl	800b94c <__lo0bits>
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	6163      	str	r3, [r4, #20]
 800bf6e:	3020      	adds	r0, #32
 800bf70:	2201      	movs	r2, #1
 800bf72:	e7e5      	b.n	800bf40 <__d2b+0x60>
 800bf74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf7c:	6038      	str	r0, [r7, #0]
 800bf7e:	6918      	ldr	r0, [r3, #16]
 800bf80:	f7ff fcc4 	bl	800b90c <__hi0bits>
 800bf84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf88:	e7e2      	b.n	800bf50 <__d2b+0x70>
 800bf8a:	bf00      	nop
 800bf8c:	0800dc6d 	.word	0x0800dc6d
 800bf90:	0800dcde 	.word	0x0800dcde

0800bf94 <__ratio>:
 800bf94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	4688      	mov	r8, r1
 800bf9a:	4669      	mov	r1, sp
 800bf9c:	4681      	mov	r9, r0
 800bf9e:	f7ff ff55 	bl	800be4c <__b2d>
 800bfa2:	a901      	add	r1, sp, #4
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	ec55 4b10 	vmov	r4, r5, d0
 800bfaa:	f7ff ff4f 	bl	800be4c <__b2d>
 800bfae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfb6:	eba3 0c02 	sub.w	ip, r3, r2
 800bfba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfbe:	1a9b      	subs	r3, r3, r2
 800bfc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfc4:	ec51 0b10 	vmov	r0, r1, d0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bfd6      	itet	le
 800bfcc:	460a      	movle	r2, r1
 800bfce:	462a      	movgt	r2, r5
 800bfd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfd4:	468b      	mov	fp, r1
 800bfd6:	462f      	mov	r7, r5
 800bfd8:	bfd4      	ite	le
 800bfda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bfde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	ee10 2a10 	vmov	r2, s0
 800bfe8:	465b      	mov	r3, fp
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 fc2e 	bl	800084c <__aeabi_ddiv>
 800bff0:	ec41 0b10 	vmov	d0, r0, r1
 800bff4:	b003      	add	sp, #12
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bffa <__copybits>:
 800bffa:	3901      	subs	r1, #1
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	1149      	asrs	r1, r1, #5
 800c000:	6914      	ldr	r4, [r2, #16]
 800c002:	3101      	adds	r1, #1
 800c004:	f102 0314 	add.w	r3, r2, #20
 800c008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c00c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c010:	1f05      	subs	r5, r0, #4
 800c012:	42a3      	cmp	r3, r4
 800c014:	d30c      	bcc.n	800c030 <__copybits+0x36>
 800c016:	1aa3      	subs	r3, r4, r2
 800c018:	3b11      	subs	r3, #17
 800c01a:	f023 0303 	bic.w	r3, r3, #3
 800c01e:	3211      	adds	r2, #17
 800c020:	42a2      	cmp	r2, r4
 800c022:	bf88      	it	hi
 800c024:	2300      	movhi	r3, #0
 800c026:	4418      	add	r0, r3
 800c028:	2300      	movs	r3, #0
 800c02a:	4288      	cmp	r0, r1
 800c02c:	d305      	bcc.n	800c03a <__copybits+0x40>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f853 6b04 	ldr.w	r6, [r3], #4
 800c034:	f845 6f04 	str.w	r6, [r5, #4]!
 800c038:	e7eb      	b.n	800c012 <__copybits+0x18>
 800c03a:	f840 3b04 	str.w	r3, [r0], #4
 800c03e:	e7f4      	b.n	800c02a <__copybits+0x30>

0800c040 <__any_on>:
 800c040:	f100 0214 	add.w	r2, r0, #20
 800c044:	6900      	ldr	r0, [r0, #16]
 800c046:	114b      	asrs	r3, r1, #5
 800c048:	4298      	cmp	r0, r3
 800c04a:	b510      	push	{r4, lr}
 800c04c:	db11      	blt.n	800c072 <__any_on+0x32>
 800c04e:	dd0a      	ble.n	800c066 <__any_on+0x26>
 800c050:	f011 011f 	ands.w	r1, r1, #31
 800c054:	d007      	beq.n	800c066 <__any_on+0x26>
 800c056:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c05a:	fa24 f001 	lsr.w	r0, r4, r1
 800c05e:	fa00 f101 	lsl.w	r1, r0, r1
 800c062:	428c      	cmp	r4, r1
 800c064:	d10b      	bne.n	800c07e <__any_on+0x3e>
 800c066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d803      	bhi.n	800c076 <__any_on+0x36>
 800c06e:	2000      	movs	r0, #0
 800c070:	bd10      	pop	{r4, pc}
 800c072:	4603      	mov	r3, r0
 800c074:	e7f7      	b.n	800c066 <__any_on+0x26>
 800c076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c07a:	2900      	cmp	r1, #0
 800c07c:	d0f5      	beq.n	800c06a <__any_on+0x2a>
 800c07e:	2001      	movs	r0, #1
 800c080:	e7f6      	b.n	800c070 <__any_on+0x30>

0800c082 <__ascii_wctomb>:
 800c082:	b149      	cbz	r1, 800c098 <__ascii_wctomb+0x16>
 800c084:	2aff      	cmp	r2, #255	; 0xff
 800c086:	bf85      	ittet	hi
 800c088:	238a      	movhi	r3, #138	; 0x8a
 800c08a:	6003      	strhi	r3, [r0, #0]
 800c08c:	700a      	strbls	r2, [r1, #0]
 800c08e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c092:	bf98      	it	ls
 800c094:	2001      	movls	r0, #1
 800c096:	4770      	bx	lr
 800c098:	4608      	mov	r0, r1
 800c09a:	4770      	bx	lr

0800c09c <__ssputs_r>:
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a0:	688e      	ldr	r6, [r1, #8]
 800c0a2:	461f      	mov	r7, r3
 800c0a4:	42be      	cmp	r6, r7
 800c0a6:	680b      	ldr	r3, [r1, #0]
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	4690      	mov	r8, r2
 800c0ae:	d82c      	bhi.n	800c10a <__ssputs_r+0x6e>
 800c0b0:	898a      	ldrh	r2, [r1, #12]
 800c0b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0b6:	d026      	beq.n	800c106 <__ssputs_r+0x6a>
 800c0b8:	6965      	ldr	r5, [r4, #20]
 800c0ba:	6909      	ldr	r1, [r1, #16]
 800c0bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0c0:	eba3 0901 	sub.w	r9, r3, r1
 800c0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0c8:	1c7b      	adds	r3, r7, #1
 800c0ca:	444b      	add	r3, r9
 800c0cc:	106d      	asrs	r5, r5, #1
 800c0ce:	429d      	cmp	r5, r3
 800c0d0:	bf38      	it	cc
 800c0d2:	461d      	movcc	r5, r3
 800c0d4:	0553      	lsls	r3, r2, #21
 800c0d6:	d527      	bpl.n	800c128 <__ssputs_r+0x8c>
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f7ff fa87 	bl	800b5ec <_malloc_r>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	b360      	cbz	r0, 800c13c <__ssputs_r+0xa0>
 800c0e2:	6921      	ldr	r1, [r4, #16]
 800c0e4:	464a      	mov	r2, r9
 800c0e6:	f7fe fe81 	bl	800adec <memcpy>
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	6126      	str	r6, [r4, #16]
 800c0f8:	6165      	str	r5, [r4, #20]
 800c0fa:	444e      	add	r6, r9
 800c0fc:	eba5 0509 	sub.w	r5, r5, r9
 800c100:	6026      	str	r6, [r4, #0]
 800c102:	60a5      	str	r5, [r4, #8]
 800c104:	463e      	mov	r6, r7
 800c106:	42be      	cmp	r6, r7
 800c108:	d900      	bls.n	800c10c <__ssputs_r+0x70>
 800c10a:	463e      	mov	r6, r7
 800c10c:	6820      	ldr	r0, [r4, #0]
 800c10e:	4632      	mov	r2, r6
 800c110:	4641      	mov	r1, r8
 800c112:	f000 fb6b 	bl	800c7ec <memmove>
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	60a3      	str	r3, [r4, #8]
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	4433      	add	r3, r6
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	2000      	movs	r0, #0
 800c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c128:	462a      	mov	r2, r5
 800c12a:	f000 fba6 	bl	800c87a <_realloc_r>
 800c12e:	4606      	mov	r6, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d1e0      	bne.n	800c0f6 <__ssputs_r+0x5a>
 800c134:	6921      	ldr	r1, [r4, #16]
 800c136:	4650      	mov	r0, sl
 800c138:	f7fe fe8c 	bl	800ae54 <_free_r>
 800c13c:	230c      	movs	r3, #12
 800c13e:	f8ca 3000 	str.w	r3, [sl]
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e7e9      	b.n	800c124 <__ssputs_r+0x88>

0800c150 <_svfiprintf_r>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	4698      	mov	r8, r3
 800c156:	898b      	ldrh	r3, [r1, #12]
 800c158:	061b      	lsls	r3, r3, #24
 800c15a:	b09d      	sub	sp, #116	; 0x74
 800c15c:	4607      	mov	r7, r0
 800c15e:	460d      	mov	r5, r1
 800c160:	4614      	mov	r4, r2
 800c162:	d50e      	bpl.n	800c182 <_svfiprintf_r+0x32>
 800c164:	690b      	ldr	r3, [r1, #16]
 800c166:	b963      	cbnz	r3, 800c182 <_svfiprintf_r+0x32>
 800c168:	2140      	movs	r1, #64	; 0x40
 800c16a:	f7ff fa3f 	bl	800b5ec <_malloc_r>
 800c16e:	6028      	str	r0, [r5, #0]
 800c170:	6128      	str	r0, [r5, #16]
 800c172:	b920      	cbnz	r0, 800c17e <_svfiprintf_r+0x2e>
 800c174:	230c      	movs	r3, #12
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	e0d0      	b.n	800c320 <_svfiprintf_r+0x1d0>
 800c17e:	2340      	movs	r3, #64	; 0x40
 800c180:	616b      	str	r3, [r5, #20]
 800c182:	2300      	movs	r3, #0
 800c184:	9309      	str	r3, [sp, #36]	; 0x24
 800c186:	2320      	movs	r3, #32
 800c188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c190:	2330      	movs	r3, #48	; 0x30
 800c192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c338 <_svfiprintf_r+0x1e8>
 800c196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c19a:	f04f 0901 	mov.w	r9, #1
 800c19e:	4623      	mov	r3, r4
 800c1a0:	469a      	mov	sl, r3
 800c1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a6:	b10a      	cbz	r2, 800c1ac <_svfiprintf_r+0x5c>
 800c1a8:	2a25      	cmp	r2, #37	; 0x25
 800c1aa:	d1f9      	bne.n	800c1a0 <_svfiprintf_r+0x50>
 800c1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c1b0:	d00b      	beq.n	800c1ca <_svfiprintf_r+0x7a>
 800c1b2:	465b      	mov	r3, fp
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f7ff ff6f 	bl	800c09c <__ssputs_r>
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f000 80a9 	beq.w	800c316 <_svfiprintf_r+0x1c6>
 800c1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1c6:	445a      	add	r2, fp
 800c1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 80a1 	beq.w	800c316 <_svfiprintf_r+0x1c6>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1de:	f10a 0a01 	add.w	sl, sl, #1
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	9307      	str	r3, [sp, #28]
 800c1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ec:	4654      	mov	r4, sl
 800c1ee:	2205      	movs	r2, #5
 800c1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f4:	4850      	ldr	r0, [pc, #320]	; (800c338 <_svfiprintf_r+0x1e8>)
 800c1f6:	f7f3 fff3 	bl	80001e0 <memchr>
 800c1fa:	9a04      	ldr	r2, [sp, #16]
 800c1fc:	b9d8      	cbnz	r0, 800c236 <_svfiprintf_r+0xe6>
 800c1fe:	06d0      	lsls	r0, r2, #27
 800c200:	bf44      	itt	mi
 800c202:	2320      	movmi	r3, #32
 800c204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c208:	0711      	lsls	r1, r2, #28
 800c20a:	bf44      	itt	mi
 800c20c:	232b      	movmi	r3, #43	; 0x2b
 800c20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c212:	f89a 3000 	ldrb.w	r3, [sl]
 800c216:	2b2a      	cmp	r3, #42	; 0x2a
 800c218:	d015      	beq.n	800c246 <_svfiprintf_r+0xf6>
 800c21a:	9a07      	ldr	r2, [sp, #28]
 800c21c:	4654      	mov	r4, sl
 800c21e:	2000      	movs	r0, #0
 800c220:	f04f 0c0a 	mov.w	ip, #10
 800c224:	4621      	mov	r1, r4
 800c226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c22a:	3b30      	subs	r3, #48	; 0x30
 800c22c:	2b09      	cmp	r3, #9
 800c22e:	d94d      	bls.n	800c2cc <_svfiprintf_r+0x17c>
 800c230:	b1b0      	cbz	r0, 800c260 <_svfiprintf_r+0x110>
 800c232:	9207      	str	r2, [sp, #28]
 800c234:	e014      	b.n	800c260 <_svfiprintf_r+0x110>
 800c236:	eba0 0308 	sub.w	r3, r0, r8
 800c23a:	fa09 f303 	lsl.w	r3, r9, r3
 800c23e:	4313      	orrs	r3, r2
 800c240:	9304      	str	r3, [sp, #16]
 800c242:	46a2      	mov	sl, r4
 800c244:	e7d2      	b.n	800c1ec <_svfiprintf_r+0x9c>
 800c246:	9b03      	ldr	r3, [sp, #12]
 800c248:	1d19      	adds	r1, r3, #4
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	9103      	str	r1, [sp, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	bfbb      	ittet	lt
 800c252:	425b      	neglt	r3, r3
 800c254:	f042 0202 	orrlt.w	r2, r2, #2
 800c258:	9307      	strge	r3, [sp, #28]
 800c25a:	9307      	strlt	r3, [sp, #28]
 800c25c:	bfb8      	it	lt
 800c25e:	9204      	strlt	r2, [sp, #16]
 800c260:	7823      	ldrb	r3, [r4, #0]
 800c262:	2b2e      	cmp	r3, #46	; 0x2e
 800c264:	d10c      	bne.n	800c280 <_svfiprintf_r+0x130>
 800c266:	7863      	ldrb	r3, [r4, #1]
 800c268:	2b2a      	cmp	r3, #42	; 0x2a
 800c26a:	d134      	bne.n	800c2d6 <_svfiprintf_r+0x186>
 800c26c:	9b03      	ldr	r3, [sp, #12]
 800c26e:	1d1a      	adds	r2, r3, #4
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	9203      	str	r2, [sp, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	bfb8      	it	lt
 800c278:	f04f 33ff 	movlt.w	r3, #4294967295
 800c27c:	3402      	adds	r4, #2
 800c27e:	9305      	str	r3, [sp, #20]
 800c280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c348 <_svfiprintf_r+0x1f8>
 800c284:	7821      	ldrb	r1, [r4, #0]
 800c286:	2203      	movs	r2, #3
 800c288:	4650      	mov	r0, sl
 800c28a:	f7f3 ffa9 	bl	80001e0 <memchr>
 800c28e:	b138      	cbz	r0, 800c2a0 <_svfiprintf_r+0x150>
 800c290:	9b04      	ldr	r3, [sp, #16]
 800c292:	eba0 000a 	sub.w	r0, r0, sl
 800c296:	2240      	movs	r2, #64	; 0x40
 800c298:	4082      	lsls	r2, r0
 800c29a:	4313      	orrs	r3, r2
 800c29c:	3401      	adds	r4, #1
 800c29e:	9304      	str	r3, [sp, #16]
 800c2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a4:	4825      	ldr	r0, [pc, #148]	; (800c33c <_svfiprintf_r+0x1ec>)
 800c2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2aa:	2206      	movs	r2, #6
 800c2ac:	f7f3 ff98 	bl	80001e0 <memchr>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d038      	beq.n	800c326 <_svfiprintf_r+0x1d6>
 800c2b4:	4b22      	ldr	r3, [pc, #136]	; (800c340 <_svfiprintf_r+0x1f0>)
 800c2b6:	bb1b      	cbnz	r3, 800c300 <_svfiprintf_r+0x1b0>
 800c2b8:	9b03      	ldr	r3, [sp, #12]
 800c2ba:	3307      	adds	r3, #7
 800c2bc:	f023 0307 	bic.w	r3, r3, #7
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	9303      	str	r3, [sp, #12]
 800c2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c6:	4433      	add	r3, r6
 800c2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ca:	e768      	b.n	800c19e <_svfiprintf_r+0x4e>
 800c2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	e7a6      	b.n	800c224 <_svfiprintf_r+0xd4>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	3401      	adds	r4, #1
 800c2da:	9305      	str	r3, [sp, #20]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f04f 0c0a 	mov.w	ip, #10
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e8:	3a30      	subs	r2, #48	; 0x30
 800c2ea:	2a09      	cmp	r2, #9
 800c2ec:	d903      	bls.n	800c2f6 <_svfiprintf_r+0x1a6>
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0c6      	beq.n	800c280 <_svfiprintf_r+0x130>
 800c2f2:	9105      	str	r1, [sp, #20]
 800c2f4:	e7c4      	b.n	800c280 <_svfiprintf_r+0x130>
 800c2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e7f0      	b.n	800c2e2 <_svfiprintf_r+0x192>
 800c300:	ab03      	add	r3, sp, #12
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	462a      	mov	r2, r5
 800c306:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <_svfiprintf_r+0x1f4>)
 800c308:	a904      	add	r1, sp, #16
 800c30a:	4638      	mov	r0, r7
 800c30c:	f3af 8000 	nop.w
 800c310:	1c42      	adds	r2, r0, #1
 800c312:	4606      	mov	r6, r0
 800c314:	d1d6      	bne.n	800c2c4 <_svfiprintf_r+0x174>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	065b      	lsls	r3, r3, #25
 800c31a:	f53f af2d 	bmi.w	800c178 <_svfiprintf_r+0x28>
 800c31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c320:	b01d      	add	sp, #116	; 0x74
 800c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c326:	ab03      	add	r3, sp, #12
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	462a      	mov	r2, r5
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <_svfiprintf_r+0x1f4>)
 800c32e:	a904      	add	r1, sp, #16
 800c330:	4638      	mov	r0, r7
 800c332:	f000 f879 	bl	800c428 <_printf_i>
 800c336:	e7eb      	b.n	800c310 <_svfiprintf_r+0x1c0>
 800c338:	0800df35 	.word	0x0800df35
 800c33c:	0800df3f 	.word	0x0800df3f
 800c340:	00000000 	.word	0x00000000
 800c344:	0800c09d 	.word	0x0800c09d
 800c348:	0800df3b 	.word	0x0800df3b

0800c34c <_printf_common>:
 800c34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c350:	4616      	mov	r6, r2
 800c352:	4699      	mov	r9, r3
 800c354:	688a      	ldr	r2, [r1, #8]
 800c356:	690b      	ldr	r3, [r1, #16]
 800c358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c35c:	4293      	cmp	r3, r2
 800c35e:	bfb8      	it	lt
 800c360:	4613      	movlt	r3, r2
 800c362:	6033      	str	r3, [r6, #0]
 800c364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c368:	4607      	mov	r7, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	b10a      	cbz	r2, 800c372 <_printf_common+0x26>
 800c36e:	3301      	adds	r3, #1
 800c370:	6033      	str	r3, [r6, #0]
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	0699      	lsls	r1, r3, #26
 800c376:	bf42      	ittt	mi
 800c378:	6833      	ldrmi	r3, [r6, #0]
 800c37a:	3302      	addmi	r3, #2
 800c37c:	6033      	strmi	r3, [r6, #0]
 800c37e:	6825      	ldr	r5, [r4, #0]
 800c380:	f015 0506 	ands.w	r5, r5, #6
 800c384:	d106      	bne.n	800c394 <_printf_common+0x48>
 800c386:	f104 0a19 	add.w	sl, r4, #25
 800c38a:	68e3      	ldr	r3, [r4, #12]
 800c38c:	6832      	ldr	r2, [r6, #0]
 800c38e:	1a9b      	subs	r3, r3, r2
 800c390:	42ab      	cmp	r3, r5
 800c392:	dc26      	bgt.n	800c3e2 <_printf_common+0x96>
 800c394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c398:	1e13      	subs	r3, r2, #0
 800c39a:	6822      	ldr	r2, [r4, #0]
 800c39c:	bf18      	it	ne
 800c39e:	2301      	movne	r3, #1
 800c3a0:	0692      	lsls	r2, r2, #26
 800c3a2:	d42b      	bmi.n	800c3fc <_printf_common+0xb0>
 800c3a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	47c0      	blx	r8
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	d01e      	beq.n	800c3f0 <_printf_common+0xa4>
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	6922      	ldr	r2, [r4, #16]
 800c3b6:	f003 0306 	and.w	r3, r3, #6
 800c3ba:	2b04      	cmp	r3, #4
 800c3bc:	bf02      	ittt	eq
 800c3be:	68e5      	ldreq	r5, [r4, #12]
 800c3c0:	6833      	ldreq	r3, [r6, #0]
 800c3c2:	1aed      	subeq	r5, r5, r3
 800c3c4:	68a3      	ldr	r3, [r4, #8]
 800c3c6:	bf0c      	ite	eq
 800c3c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3cc:	2500      	movne	r5, #0
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	bfc4      	itt	gt
 800c3d2:	1a9b      	subgt	r3, r3, r2
 800c3d4:	18ed      	addgt	r5, r5, r3
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	341a      	adds	r4, #26
 800c3da:	42b5      	cmp	r5, r6
 800c3dc:	d11a      	bne.n	800c414 <_printf_common+0xc8>
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e008      	b.n	800c3f4 <_printf_common+0xa8>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4652      	mov	r2, sl
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	47c0      	blx	r8
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	d103      	bne.n	800c3f8 <_printf_common+0xac>
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f8:	3501      	adds	r5, #1
 800c3fa:	e7c6      	b.n	800c38a <_printf_common+0x3e>
 800c3fc:	18e1      	adds	r1, r4, r3
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	2030      	movs	r0, #48	; 0x30
 800c402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c406:	4422      	add	r2, r4
 800c408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c40c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c410:	3302      	adds	r3, #2
 800c412:	e7c7      	b.n	800c3a4 <_printf_common+0x58>
 800c414:	2301      	movs	r3, #1
 800c416:	4622      	mov	r2, r4
 800c418:	4649      	mov	r1, r9
 800c41a:	4638      	mov	r0, r7
 800c41c:	47c0      	blx	r8
 800c41e:	3001      	adds	r0, #1
 800c420:	d0e6      	beq.n	800c3f0 <_printf_common+0xa4>
 800c422:	3601      	adds	r6, #1
 800c424:	e7d9      	b.n	800c3da <_printf_common+0x8e>
	...

0800c428 <_printf_i>:
 800c428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c42c:	7e0f      	ldrb	r7, [r1, #24]
 800c42e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c430:	2f78      	cmp	r7, #120	; 0x78
 800c432:	4691      	mov	r9, r2
 800c434:	4680      	mov	r8, r0
 800c436:	460c      	mov	r4, r1
 800c438:	469a      	mov	sl, r3
 800c43a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c43e:	d807      	bhi.n	800c450 <_printf_i+0x28>
 800c440:	2f62      	cmp	r7, #98	; 0x62
 800c442:	d80a      	bhi.n	800c45a <_printf_i+0x32>
 800c444:	2f00      	cmp	r7, #0
 800c446:	f000 80d4 	beq.w	800c5f2 <_printf_i+0x1ca>
 800c44a:	2f58      	cmp	r7, #88	; 0x58
 800c44c:	f000 80c0 	beq.w	800c5d0 <_printf_i+0x1a8>
 800c450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c458:	e03a      	b.n	800c4d0 <_printf_i+0xa8>
 800c45a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c45e:	2b15      	cmp	r3, #21
 800c460:	d8f6      	bhi.n	800c450 <_printf_i+0x28>
 800c462:	a101      	add	r1, pc, #4	; (adr r1, 800c468 <_printf_i+0x40>)
 800c464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c468:	0800c4c1 	.word	0x0800c4c1
 800c46c:	0800c4d5 	.word	0x0800c4d5
 800c470:	0800c451 	.word	0x0800c451
 800c474:	0800c451 	.word	0x0800c451
 800c478:	0800c451 	.word	0x0800c451
 800c47c:	0800c451 	.word	0x0800c451
 800c480:	0800c4d5 	.word	0x0800c4d5
 800c484:	0800c451 	.word	0x0800c451
 800c488:	0800c451 	.word	0x0800c451
 800c48c:	0800c451 	.word	0x0800c451
 800c490:	0800c451 	.word	0x0800c451
 800c494:	0800c5d9 	.word	0x0800c5d9
 800c498:	0800c501 	.word	0x0800c501
 800c49c:	0800c593 	.word	0x0800c593
 800c4a0:	0800c451 	.word	0x0800c451
 800c4a4:	0800c451 	.word	0x0800c451
 800c4a8:	0800c5fb 	.word	0x0800c5fb
 800c4ac:	0800c451 	.word	0x0800c451
 800c4b0:	0800c501 	.word	0x0800c501
 800c4b4:	0800c451 	.word	0x0800c451
 800c4b8:	0800c451 	.word	0x0800c451
 800c4bc:	0800c59b 	.word	0x0800c59b
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	1d1a      	adds	r2, r3, #4
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	602a      	str	r2, [r5, #0]
 800c4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e09f      	b.n	800c614 <_printf_i+0x1ec>
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	682b      	ldr	r3, [r5, #0]
 800c4d8:	0607      	lsls	r7, r0, #24
 800c4da:	f103 0104 	add.w	r1, r3, #4
 800c4de:	6029      	str	r1, [r5, #0]
 800c4e0:	d501      	bpl.n	800c4e6 <_printf_i+0xbe>
 800c4e2:	681e      	ldr	r6, [r3, #0]
 800c4e4:	e003      	b.n	800c4ee <_printf_i+0xc6>
 800c4e6:	0646      	lsls	r6, r0, #25
 800c4e8:	d5fb      	bpl.n	800c4e2 <_printf_i+0xba>
 800c4ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c4ee:	2e00      	cmp	r6, #0
 800c4f0:	da03      	bge.n	800c4fa <_printf_i+0xd2>
 800c4f2:	232d      	movs	r3, #45	; 0x2d
 800c4f4:	4276      	negs	r6, r6
 800c4f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4fa:	485a      	ldr	r0, [pc, #360]	; (800c664 <_printf_i+0x23c>)
 800c4fc:	230a      	movs	r3, #10
 800c4fe:	e012      	b.n	800c526 <_printf_i+0xfe>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	6820      	ldr	r0, [r4, #0]
 800c504:	1d19      	adds	r1, r3, #4
 800c506:	6029      	str	r1, [r5, #0]
 800c508:	0605      	lsls	r5, r0, #24
 800c50a:	d501      	bpl.n	800c510 <_printf_i+0xe8>
 800c50c:	681e      	ldr	r6, [r3, #0]
 800c50e:	e002      	b.n	800c516 <_printf_i+0xee>
 800c510:	0641      	lsls	r1, r0, #25
 800c512:	d5fb      	bpl.n	800c50c <_printf_i+0xe4>
 800c514:	881e      	ldrh	r6, [r3, #0]
 800c516:	4853      	ldr	r0, [pc, #332]	; (800c664 <_printf_i+0x23c>)
 800c518:	2f6f      	cmp	r7, #111	; 0x6f
 800c51a:	bf0c      	ite	eq
 800c51c:	2308      	moveq	r3, #8
 800c51e:	230a      	movne	r3, #10
 800c520:	2100      	movs	r1, #0
 800c522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c526:	6865      	ldr	r5, [r4, #4]
 800c528:	60a5      	str	r5, [r4, #8]
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	bfa2      	ittt	ge
 800c52e:	6821      	ldrge	r1, [r4, #0]
 800c530:	f021 0104 	bicge.w	r1, r1, #4
 800c534:	6021      	strge	r1, [r4, #0]
 800c536:	b90e      	cbnz	r6, 800c53c <_printf_i+0x114>
 800c538:	2d00      	cmp	r5, #0
 800c53a:	d04b      	beq.n	800c5d4 <_printf_i+0x1ac>
 800c53c:	4615      	mov	r5, r2
 800c53e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c542:	fb03 6711 	mls	r7, r3, r1, r6
 800c546:	5dc7      	ldrb	r7, [r0, r7]
 800c548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c54c:	4637      	mov	r7, r6
 800c54e:	42bb      	cmp	r3, r7
 800c550:	460e      	mov	r6, r1
 800c552:	d9f4      	bls.n	800c53e <_printf_i+0x116>
 800c554:	2b08      	cmp	r3, #8
 800c556:	d10b      	bne.n	800c570 <_printf_i+0x148>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	07de      	lsls	r6, r3, #31
 800c55c:	d508      	bpl.n	800c570 <_printf_i+0x148>
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	6861      	ldr	r1, [r4, #4]
 800c562:	4299      	cmp	r1, r3
 800c564:	bfde      	ittt	le
 800c566:	2330      	movle	r3, #48	; 0x30
 800c568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c56c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c570:	1b52      	subs	r2, r2, r5
 800c572:	6122      	str	r2, [r4, #16]
 800c574:	f8cd a000 	str.w	sl, [sp]
 800c578:	464b      	mov	r3, r9
 800c57a:	aa03      	add	r2, sp, #12
 800c57c:	4621      	mov	r1, r4
 800c57e:	4640      	mov	r0, r8
 800c580:	f7ff fee4 	bl	800c34c <_printf_common>
 800c584:	3001      	adds	r0, #1
 800c586:	d14a      	bne.n	800c61e <_printf_i+0x1f6>
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	b004      	add	sp, #16
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	f043 0320 	orr.w	r3, r3, #32
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	4833      	ldr	r0, [pc, #204]	; (800c668 <_printf_i+0x240>)
 800c59c:	2778      	movs	r7, #120	; 0x78
 800c59e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	6829      	ldr	r1, [r5, #0]
 800c5a6:	061f      	lsls	r7, r3, #24
 800c5a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5ac:	d402      	bmi.n	800c5b4 <_printf_i+0x18c>
 800c5ae:	065f      	lsls	r7, r3, #25
 800c5b0:	bf48      	it	mi
 800c5b2:	b2b6      	uxthmi	r6, r6
 800c5b4:	07df      	lsls	r7, r3, #31
 800c5b6:	bf48      	it	mi
 800c5b8:	f043 0320 	orrmi.w	r3, r3, #32
 800c5bc:	6029      	str	r1, [r5, #0]
 800c5be:	bf48      	it	mi
 800c5c0:	6023      	strmi	r3, [r4, #0]
 800c5c2:	b91e      	cbnz	r6, 800c5cc <_printf_i+0x1a4>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	f023 0320 	bic.w	r3, r3, #32
 800c5ca:	6023      	str	r3, [r4, #0]
 800c5cc:	2310      	movs	r3, #16
 800c5ce:	e7a7      	b.n	800c520 <_printf_i+0xf8>
 800c5d0:	4824      	ldr	r0, [pc, #144]	; (800c664 <_printf_i+0x23c>)
 800c5d2:	e7e4      	b.n	800c59e <_printf_i+0x176>
 800c5d4:	4615      	mov	r5, r2
 800c5d6:	e7bd      	b.n	800c554 <_printf_i+0x12c>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	6826      	ldr	r6, [r4, #0]
 800c5dc:	6961      	ldr	r1, [r4, #20]
 800c5de:	1d18      	adds	r0, r3, #4
 800c5e0:	6028      	str	r0, [r5, #0]
 800c5e2:	0635      	lsls	r5, r6, #24
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	d501      	bpl.n	800c5ec <_printf_i+0x1c4>
 800c5e8:	6019      	str	r1, [r3, #0]
 800c5ea:	e002      	b.n	800c5f2 <_printf_i+0x1ca>
 800c5ec:	0670      	lsls	r0, r6, #25
 800c5ee:	d5fb      	bpl.n	800c5e8 <_printf_i+0x1c0>
 800c5f0:	8019      	strh	r1, [r3, #0]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	4615      	mov	r5, r2
 800c5f8:	e7bc      	b.n	800c574 <_printf_i+0x14c>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	1d1a      	adds	r2, r3, #4
 800c5fe:	602a      	str	r2, [r5, #0]
 800c600:	681d      	ldr	r5, [r3, #0]
 800c602:	6862      	ldr	r2, [r4, #4]
 800c604:	2100      	movs	r1, #0
 800c606:	4628      	mov	r0, r5
 800c608:	f7f3 fdea 	bl	80001e0 <memchr>
 800c60c:	b108      	cbz	r0, 800c612 <_printf_i+0x1ea>
 800c60e:	1b40      	subs	r0, r0, r5
 800c610:	6060      	str	r0, [r4, #4]
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	6123      	str	r3, [r4, #16]
 800c616:	2300      	movs	r3, #0
 800c618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c61c:	e7aa      	b.n	800c574 <_printf_i+0x14c>
 800c61e:	6923      	ldr	r3, [r4, #16]
 800c620:	462a      	mov	r2, r5
 800c622:	4649      	mov	r1, r9
 800c624:	4640      	mov	r0, r8
 800c626:	47d0      	blx	sl
 800c628:	3001      	adds	r0, #1
 800c62a:	d0ad      	beq.n	800c588 <_printf_i+0x160>
 800c62c:	6823      	ldr	r3, [r4, #0]
 800c62e:	079b      	lsls	r3, r3, #30
 800c630:	d413      	bmi.n	800c65a <_printf_i+0x232>
 800c632:	68e0      	ldr	r0, [r4, #12]
 800c634:	9b03      	ldr	r3, [sp, #12]
 800c636:	4298      	cmp	r0, r3
 800c638:	bfb8      	it	lt
 800c63a:	4618      	movlt	r0, r3
 800c63c:	e7a6      	b.n	800c58c <_printf_i+0x164>
 800c63e:	2301      	movs	r3, #1
 800c640:	4632      	mov	r2, r6
 800c642:	4649      	mov	r1, r9
 800c644:	4640      	mov	r0, r8
 800c646:	47d0      	blx	sl
 800c648:	3001      	adds	r0, #1
 800c64a:	d09d      	beq.n	800c588 <_printf_i+0x160>
 800c64c:	3501      	adds	r5, #1
 800c64e:	68e3      	ldr	r3, [r4, #12]
 800c650:	9903      	ldr	r1, [sp, #12]
 800c652:	1a5b      	subs	r3, r3, r1
 800c654:	42ab      	cmp	r3, r5
 800c656:	dcf2      	bgt.n	800c63e <_printf_i+0x216>
 800c658:	e7eb      	b.n	800c632 <_printf_i+0x20a>
 800c65a:	2500      	movs	r5, #0
 800c65c:	f104 0619 	add.w	r6, r4, #25
 800c660:	e7f5      	b.n	800c64e <_printf_i+0x226>
 800c662:	bf00      	nop
 800c664:	0800df46 	.word	0x0800df46
 800c668:	0800df57 	.word	0x0800df57

0800c66c <__sflush_r>:
 800c66c:	898a      	ldrh	r2, [r1, #12]
 800c66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c672:	4605      	mov	r5, r0
 800c674:	0710      	lsls	r0, r2, #28
 800c676:	460c      	mov	r4, r1
 800c678:	d458      	bmi.n	800c72c <__sflush_r+0xc0>
 800c67a:	684b      	ldr	r3, [r1, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	dc05      	bgt.n	800c68c <__sflush_r+0x20>
 800c680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c682:	2b00      	cmp	r3, #0
 800c684:	dc02      	bgt.n	800c68c <__sflush_r+0x20>
 800c686:	2000      	movs	r0, #0
 800c688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c68e:	2e00      	cmp	r6, #0
 800c690:	d0f9      	beq.n	800c686 <__sflush_r+0x1a>
 800c692:	2300      	movs	r3, #0
 800c694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c698:	682f      	ldr	r7, [r5, #0]
 800c69a:	6a21      	ldr	r1, [r4, #32]
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	d032      	beq.n	800c706 <__sflush_r+0x9a>
 800c6a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6a2:	89a3      	ldrh	r3, [r4, #12]
 800c6a4:	075a      	lsls	r2, r3, #29
 800c6a6:	d505      	bpl.n	800c6b4 <__sflush_r+0x48>
 800c6a8:	6863      	ldr	r3, [r4, #4]
 800c6aa:	1ac0      	subs	r0, r0, r3
 800c6ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6ae:	b10b      	cbz	r3, 800c6b4 <__sflush_r+0x48>
 800c6b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6b2:	1ac0      	subs	r0, r0, r3
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6ba:	6a21      	ldr	r1, [r4, #32]
 800c6bc:	4628      	mov	r0, r5
 800c6be:	47b0      	blx	r6
 800c6c0:	1c43      	adds	r3, r0, #1
 800c6c2:	89a3      	ldrh	r3, [r4, #12]
 800c6c4:	d106      	bne.n	800c6d4 <__sflush_r+0x68>
 800c6c6:	6829      	ldr	r1, [r5, #0]
 800c6c8:	291d      	cmp	r1, #29
 800c6ca:	d82b      	bhi.n	800c724 <__sflush_r+0xb8>
 800c6cc:	4a29      	ldr	r2, [pc, #164]	; (800c774 <__sflush_r+0x108>)
 800c6ce:	410a      	asrs	r2, r1
 800c6d0:	07d6      	lsls	r6, r2, #31
 800c6d2:	d427      	bmi.n	800c724 <__sflush_r+0xb8>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	6062      	str	r2, [r4, #4]
 800c6d8:	04d9      	lsls	r1, r3, #19
 800c6da:	6922      	ldr	r2, [r4, #16]
 800c6dc:	6022      	str	r2, [r4, #0]
 800c6de:	d504      	bpl.n	800c6ea <__sflush_r+0x7e>
 800c6e0:	1c42      	adds	r2, r0, #1
 800c6e2:	d101      	bne.n	800c6e8 <__sflush_r+0x7c>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	b903      	cbnz	r3, 800c6ea <__sflush_r+0x7e>
 800c6e8:	6560      	str	r0, [r4, #84]	; 0x54
 800c6ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ec:	602f      	str	r7, [r5, #0]
 800c6ee:	2900      	cmp	r1, #0
 800c6f0:	d0c9      	beq.n	800c686 <__sflush_r+0x1a>
 800c6f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f6:	4299      	cmp	r1, r3
 800c6f8:	d002      	beq.n	800c700 <__sflush_r+0x94>
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f7fe fbaa 	bl	800ae54 <_free_r>
 800c700:	2000      	movs	r0, #0
 800c702:	6360      	str	r0, [r4, #52]	; 0x34
 800c704:	e7c0      	b.n	800c688 <__sflush_r+0x1c>
 800c706:	2301      	movs	r3, #1
 800c708:	4628      	mov	r0, r5
 800c70a:	47b0      	blx	r6
 800c70c:	1c41      	adds	r1, r0, #1
 800c70e:	d1c8      	bne.n	800c6a2 <__sflush_r+0x36>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0c5      	beq.n	800c6a2 <__sflush_r+0x36>
 800c716:	2b1d      	cmp	r3, #29
 800c718:	d001      	beq.n	800c71e <__sflush_r+0xb2>
 800c71a:	2b16      	cmp	r3, #22
 800c71c:	d101      	bne.n	800c722 <__sflush_r+0xb6>
 800c71e:	602f      	str	r7, [r5, #0]
 800c720:	e7b1      	b.n	800c686 <__sflush_r+0x1a>
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	e7ad      	b.n	800c688 <__sflush_r+0x1c>
 800c72c:	690f      	ldr	r7, [r1, #16]
 800c72e:	2f00      	cmp	r7, #0
 800c730:	d0a9      	beq.n	800c686 <__sflush_r+0x1a>
 800c732:	0793      	lsls	r3, r2, #30
 800c734:	680e      	ldr	r6, [r1, #0]
 800c736:	bf08      	it	eq
 800c738:	694b      	ldreq	r3, [r1, #20]
 800c73a:	600f      	str	r7, [r1, #0]
 800c73c:	bf18      	it	ne
 800c73e:	2300      	movne	r3, #0
 800c740:	eba6 0807 	sub.w	r8, r6, r7
 800c744:	608b      	str	r3, [r1, #8]
 800c746:	f1b8 0f00 	cmp.w	r8, #0
 800c74a:	dd9c      	ble.n	800c686 <__sflush_r+0x1a>
 800c74c:	6a21      	ldr	r1, [r4, #32]
 800c74e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c750:	4643      	mov	r3, r8
 800c752:	463a      	mov	r2, r7
 800c754:	4628      	mov	r0, r5
 800c756:	47b0      	blx	r6
 800c758:	2800      	cmp	r0, #0
 800c75a:	dc06      	bgt.n	800c76a <__sflush_r+0xfe>
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c762:	81a3      	strh	r3, [r4, #12]
 800c764:	f04f 30ff 	mov.w	r0, #4294967295
 800c768:	e78e      	b.n	800c688 <__sflush_r+0x1c>
 800c76a:	4407      	add	r7, r0
 800c76c:	eba8 0800 	sub.w	r8, r8, r0
 800c770:	e7e9      	b.n	800c746 <__sflush_r+0xda>
 800c772:	bf00      	nop
 800c774:	dfbffffe 	.word	0xdfbffffe

0800c778 <_fflush_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	690b      	ldr	r3, [r1, #16]
 800c77c:	4605      	mov	r5, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	b913      	cbnz	r3, 800c788 <_fflush_r+0x10>
 800c782:	2500      	movs	r5, #0
 800c784:	4628      	mov	r0, r5
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	b118      	cbz	r0, 800c792 <_fflush_r+0x1a>
 800c78a:	6a03      	ldr	r3, [r0, #32]
 800c78c:	b90b      	cbnz	r3, 800c792 <_fflush_r+0x1a>
 800c78e:	f7fe f995 	bl	800aabc <__sinit>
 800c792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d0f3      	beq.n	800c782 <_fflush_r+0xa>
 800c79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c79c:	07d0      	lsls	r0, r2, #31
 800c79e:	d404      	bmi.n	800c7aa <_fflush_r+0x32>
 800c7a0:	0599      	lsls	r1, r3, #22
 800c7a2:	d402      	bmi.n	800c7aa <_fflush_r+0x32>
 800c7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7a6:	f7fe fb1f 	bl	800ade8 <__retarget_lock_acquire_recursive>
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	f7ff ff5d 	bl	800c66c <__sflush_r>
 800c7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7b4:	07da      	lsls	r2, r3, #31
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	d4e4      	bmi.n	800c784 <_fflush_r+0xc>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	059b      	lsls	r3, r3, #22
 800c7be:	d4e1      	bmi.n	800c784 <_fflush_r+0xc>
 800c7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7c2:	f7fe fb12 	bl	800adea <__retarget_lock_release_recursive>
 800c7c6:	e7dd      	b.n	800c784 <_fflush_r+0xc>

0800c7c8 <fiprintf>:
 800c7c8:	b40e      	push	{r1, r2, r3}
 800c7ca:	b503      	push	{r0, r1, lr}
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	ab03      	add	r3, sp, #12
 800c7d0:	4805      	ldr	r0, [pc, #20]	; (800c7e8 <fiprintf+0x20>)
 800c7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d6:	6800      	ldr	r0, [r0, #0]
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	f000 f8a7 	bl	800c92c <_vfiprintf_r>
 800c7de:	b002      	add	sp, #8
 800c7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7e4:	b003      	add	sp, #12
 800c7e6:	4770      	bx	lr
 800c7e8:	200002c0 	.word	0x200002c0

0800c7ec <memmove>:
 800c7ec:	4288      	cmp	r0, r1
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	eb01 0402 	add.w	r4, r1, r2
 800c7f4:	d902      	bls.n	800c7fc <memmove+0x10>
 800c7f6:	4284      	cmp	r4, r0
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	d807      	bhi.n	800c80c <memmove+0x20>
 800c7fc:	1e43      	subs	r3, r0, #1
 800c7fe:	42a1      	cmp	r1, r4
 800c800:	d008      	beq.n	800c814 <memmove+0x28>
 800c802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c80a:	e7f8      	b.n	800c7fe <memmove+0x12>
 800c80c:	4402      	add	r2, r0
 800c80e:	4601      	mov	r1, r0
 800c810:	428a      	cmp	r2, r1
 800c812:	d100      	bne.n	800c816 <memmove+0x2a>
 800c814:	bd10      	pop	{r4, pc}
 800c816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c81e:	e7f7      	b.n	800c810 <memmove+0x24>

0800c820 <_sbrk_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d06      	ldr	r5, [pc, #24]	; (800c83c <_sbrk_r+0x1c>)
 800c824:	2300      	movs	r3, #0
 800c826:	4604      	mov	r4, r0
 800c828:	4608      	mov	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f5 f9ca 	bl	8001bc4 <_sbrk>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d102      	bne.n	800c83a <_sbrk_r+0x1a>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	b103      	cbz	r3, 800c83a <_sbrk_r+0x1a>
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}
 800c83c:	20002148 	.word	0x20002148

0800c840 <abort>:
 800c840:	b508      	push	{r3, lr}
 800c842:	2006      	movs	r0, #6
 800c844:	f000 fa4a 	bl	800ccdc <raise>
 800c848:	2001      	movs	r0, #1
 800c84a:	f7f5 f943 	bl	8001ad4 <_exit>

0800c84e <_calloc_r>:
 800c84e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c850:	fba1 2402 	umull	r2, r4, r1, r2
 800c854:	b94c      	cbnz	r4, 800c86a <_calloc_r+0x1c>
 800c856:	4611      	mov	r1, r2
 800c858:	9201      	str	r2, [sp, #4]
 800c85a:	f7fe fec7 	bl	800b5ec <_malloc_r>
 800c85e:	9a01      	ldr	r2, [sp, #4]
 800c860:	4605      	mov	r5, r0
 800c862:	b930      	cbnz	r0, 800c872 <_calloc_r+0x24>
 800c864:	4628      	mov	r0, r5
 800c866:	b003      	add	sp, #12
 800c868:	bd30      	pop	{r4, r5, pc}
 800c86a:	220c      	movs	r2, #12
 800c86c:	6002      	str	r2, [r0, #0]
 800c86e:	2500      	movs	r5, #0
 800c870:	e7f8      	b.n	800c864 <_calloc_r+0x16>
 800c872:	4621      	mov	r1, r4
 800c874:	f7fe f9bb 	bl	800abee <memset>
 800c878:	e7f4      	b.n	800c864 <_calloc_r+0x16>

0800c87a <_realloc_r>:
 800c87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c87e:	4680      	mov	r8, r0
 800c880:	4614      	mov	r4, r2
 800c882:	460e      	mov	r6, r1
 800c884:	b921      	cbnz	r1, 800c890 <_realloc_r+0x16>
 800c886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c88a:	4611      	mov	r1, r2
 800c88c:	f7fe beae 	b.w	800b5ec <_malloc_r>
 800c890:	b92a      	cbnz	r2, 800c89e <_realloc_r+0x24>
 800c892:	f7fe fadf 	bl	800ae54 <_free_r>
 800c896:	4625      	mov	r5, r4
 800c898:	4628      	mov	r0, r5
 800c89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89e:	f000 fa39 	bl	800cd14 <_malloc_usable_size_r>
 800c8a2:	4284      	cmp	r4, r0
 800c8a4:	4607      	mov	r7, r0
 800c8a6:	d802      	bhi.n	800c8ae <_realloc_r+0x34>
 800c8a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8ac:	d812      	bhi.n	800c8d4 <_realloc_r+0x5a>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	f7fe fe9b 	bl	800b5ec <_malloc_r>
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d0ed      	beq.n	800c898 <_realloc_r+0x1e>
 800c8bc:	42bc      	cmp	r4, r7
 800c8be:	4622      	mov	r2, r4
 800c8c0:	4631      	mov	r1, r6
 800c8c2:	bf28      	it	cs
 800c8c4:	463a      	movcs	r2, r7
 800c8c6:	f7fe fa91 	bl	800adec <memcpy>
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	4640      	mov	r0, r8
 800c8ce:	f7fe fac1 	bl	800ae54 <_free_r>
 800c8d2:	e7e1      	b.n	800c898 <_realloc_r+0x1e>
 800c8d4:	4635      	mov	r5, r6
 800c8d6:	e7df      	b.n	800c898 <_realloc_r+0x1e>

0800c8d8 <__sfputc_r>:
 800c8d8:	6893      	ldr	r3, [r2, #8]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	b410      	push	{r4}
 800c8e0:	6093      	str	r3, [r2, #8]
 800c8e2:	da08      	bge.n	800c8f6 <__sfputc_r+0x1e>
 800c8e4:	6994      	ldr	r4, [r2, #24]
 800c8e6:	42a3      	cmp	r3, r4
 800c8e8:	db01      	blt.n	800c8ee <__sfputc_r+0x16>
 800c8ea:	290a      	cmp	r1, #10
 800c8ec:	d103      	bne.n	800c8f6 <__sfputc_r+0x1e>
 800c8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f2:	f000 b935 	b.w	800cb60 <__swbuf_r>
 800c8f6:	6813      	ldr	r3, [r2, #0]
 800c8f8:	1c58      	adds	r0, r3, #1
 800c8fa:	6010      	str	r0, [r2, #0]
 800c8fc:	7019      	strb	r1, [r3, #0]
 800c8fe:	4608      	mov	r0, r1
 800c900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <__sfputs_r>:
 800c906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c908:	4606      	mov	r6, r0
 800c90a:	460f      	mov	r7, r1
 800c90c:	4614      	mov	r4, r2
 800c90e:	18d5      	adds	r5, r2, r3
 800c910:	42ac      	cmp	r4, r5
 800c912:	d101      	bne.n	800c918 <__sfputs_r+0x12>
 800c914:	2000      	movs	r0, #0
 800c916:	e007      	b.n	800c928 <__sfputs_r+0x22>
 800c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c91c:	463a      	mov	r2, r7
 800c91e:	4630      	mov	r0, r6
 800c920:	f7ff ffda 	bl	800c8d8 <__sfputc_r>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d1f3      	bne.n	800c910 <__sfputs_r+0xa>
 800c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c92c <_vfiprintf_r>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	460d      	mov	r5, r1
 800c932:	b09d      	sub	sp, #116	; 0x74
 800c934:	4614      	mov	r4, r2
 800c936:	4698      	mov	r8, r3
 800c938:	4606      	mov	r6, r0
 800c93a:	b118      	cbz	r0, 800c944 <_vfiprintf_r+0x18>
 800c93c:	6a03      	ldr	r3, [r0, #32]
 800c93e:	b90b      	cbnz	r3, 800c944 <_vfiprintf_r+0x18>
 800c940:	f7fe f8bc 	bl	800aabc <__sinit>
 800c944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c946:	07d9      	lsls	r1, r3, #31
 800c948:	d405      	bmi.n	800c956 <_vfiprintf_r+0x2a>
 800c94a:	89ab      	ldrh	r3, [r5, #12]
 800c94c:	059a      	lsls	r2, r3, #22
 800c94e:	d402      	bmi.n	800c956 <_vfiprintf_r+0x2a>
 800c950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c952:	f7fe fa49 	bl	800ade8 <__retarget_lock_acquire_recursive>
 800c956:	89ab      	ldrh	r3, [r5, #12]
 800c958:	071b      	lsls	r3, r3, #28
 800c95a:	d501      	bpl.n	800c960 <_vfiprintf_r+0x34>
 800c95c:	692b      	ldr	r3, [r5, #16]
 800c95e:	b99b      	cbnz	r3, 800c988 <_vfiprintf_r+0x5c>
 800c960:	4629      	mov	r1, r5
 800c962:	4630      	mov	r0, r6
 800c964:	f000 f93a 	bl	800cbdc <__swsetup_r>
 800c968:	b170      	cbz	r0, 800c988 <_vfiprintf_r+0x5c>
 800c96a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c96c:	07dc      	lsls	r4, r3, #31
 800c96e:	d504      	bpl.n	800c97a <_vfiprintf_r+0x4e>
 800c970:	f04f 30ff 	mov.w	r0, #4294967295
 800c974:	b01d      	add	sp, #116	; 0x74
 800c976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97a:	89ab      	ldrh	r3, [r5, #12]
 800c97c:	0598      	lsls	r0, r3, #22
 800c97e:	d4f7      	bmi.n	800c970 <_vfiprintf_r+0x44>
 800c980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c982:	f7fe fa32 	bl	800adea <__retarget_lock_release_recursive>
 800c986:	e7f3      	b.n	800c970 <_vfiprintf_r+0x44>
 800c988:	2300      	movs	r3, #0
 800c98a:	9309      	str	r3, [sp, #36]	; 0x24
 800c98c:	2320      	movs	r3, #32
 800c98e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c992:	f8cd 800c 	str.w	r8, [sp, #12]
 800c996:	2330      	movs	r3, #48	; 0x30
 800c998:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb4c <_vfiprintf_r+0x220>
 800c99c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9a0:	f04f 0901 	mov.w	r9, #1
 800c9a4:	4623      	mov	r3, r4
 800c9a6:	469a      	mov	sl, r3
 800c9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ac:	b10a      	cbz	r2, 800c9b2 <_vfiprintf_r+0x86>
 800c9ae:	2a25      	cmp	r2, #37	; 0x25
 800c9b0:	d1f9      	bne.n	800c9a6 <_vfiprintf_r+0x7a>
 800c9b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b6:	d00b      	beq.n	800c9d0 <_vfiprintf_r+0xa4>
 800c9b8:	465b      	mov	r3, fp
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	4629      	mov	r1, r5
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f7ff ffa1 	bl	800c906 <__sfputs_r>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	f000 80a9 	beq.w	800cb1c <_vfiprintf_r+0x1f0>
 800c9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9cc:	445a      	add	r2, fp
 800c9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 80a1 	beq.w	800cb1c <_vfiprintf_r+0x1f0>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e4:	f10a 0a01 	add.w	sl, sl, #1
 800c9e8:	9304      	str	r3, [sp, #16]
 800c9ea:	9307      	str	r3, [sp, #28]
 800c9ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c9f2:	4654      	mov	r4, sl
 800c9f4:	2205      	movs	r2, #5
 800c9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9fa:	4854      	ldr	r0, [pc, #336]	; (800cb4c <_vfiprintf_r+0x220>)
 800c9fc:	f7f3 fbf0 	bl	80001e0 <memchr>
 800ca00:	9a04      	ldr	r2, [sp, #16]
 800ca02:	b9d8      	cbnz	r0, 800ca3c <_vfiprintf_r+0x110>
 800ca04:	06d1      	lsls	r1, r2, #27
 800ca06:	bf44      	itt	mi
 800ca08:	2320      	movmi	r3, #32
 800ca0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca0e:	0713      	lsls	r3, r2, #28
 800ca10:	bf44      	itt	mi
 800ca12:	232b      	movmi	r3, #43	; 0x2b
 800ca14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca18:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca1e:	d015      	beq.n	800ca4c <_vfiprintf_r+0x120>
 800ca20:	9a07      	ldr	r2, [sp, #28]
 800ca22:	4654      	mov	r4, sl
 800ca24:	2000      	movs	r0, #0
 800ca26:	f04f 0c0a 	mov.w	ip, #10
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca30:	3b30      	subs	r3, #48	; 0x30
 800ca32:	2b09      	cmp	r3, #9
 800ca34:	d94d      	bls.n	800cad2 <_vfiprintf_r+0x1a6>
 800ca36:	b1b0      	cbz	r0, 800ca66 <_vfiprintf_r+0x13a>
 800ca38:	9207      	str	r2, [sp, #28]
 800ca3a:	e014      	b.n	800ca66 <_vfiprintf_r+0x13a>
 800ca3c:	eba0 0308 	sub.w	r3, r0, r8
 800ca40:	fa09 f303 	lsl.w	r3, r9, r3
 800ca44:	4313      	orrs	r3, r2
 800ca46:	9304      	str	r3, [sp, #16]
 800ca48:	46a2      	mov	sl, r4
 800ca4a:	e7d2      	b.n	800c9f2 <_vfiprintf_r+0xc6>
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	1d19      	adds	r1, r3, #4
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	9103      	str	r1, [sp, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfbb      	ittet	lt
 800ca58:	425b      	neglt	r3, r3
 800ca5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca5e:	9307      	strge	r3, [sp, #28]
 800ca60:	9307      	strlt	r3, [sp, #28]
 800ca62:	bfb8      	it	lt
 800ca64:	9204      	strlt	r2, [sp, #16]
 800ca66:	7823      	ldrb	r3, [r4, #0]
 800ca68:	2b2e      	cmp	r3, #46	; 0x2e
 800ca6a:	d10c      	bne.n	800ca86 <_vfiprintf_r+0x15a>
 800ca6c:	7863      	ldrb	r3, [r4, #1]
 800ca6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca70:	d134      	bne.n	800cadc <_vfiprintf_r+0x1b0>
 800ca72:	9b03      	ldr	r3, [sp, #12]
 800ca74:	1d1a      	adds	r2, r3, #4
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	9203      	str	r2, [sp, #12]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	bfb8      	it	lt
 800ca7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca82:	3402      	adds	r4, #2
 800ca84:	9305      	str	r3, [sp, #20]
 800ca86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb5c <_vfiprintf_r+0x230>
 800ca8a:	7821      	ldrb	r1, [r4, #0]
 800ca8c:	2203      	movs	r2, #3
 800ca8e:	4650      	mov	r0, sl
 800ca90:	f7f3 fba6 	bl	80001e0 <memchr>
 800ca94:	b138      	cbz	r0, 800caa6 <_vfiprintf_r+0x17a>
 800ca96:	9b04      	ldr	r3, [sp, #16]
 800ca98:	eba0 000a 	sub.w	r0, r0, sl
 800ca9c:	2240      	movs	r2, #64	; 0x40
 800ca9e:	4082      	lsls	r2, r0
 800caa0:	4313      	orrs	r3, r2
 800caa2:	3401      	adds	r4, #1
 800caa4:	9304      	str	r3, [sp, #16]
 800caa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caaa:	4829      	ldr	r0, [pc, #164]	; (800cb50 <_vfiprintf_r+0x224>)
 800caac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cab0:	2206      	movs	r2, #6
 800cab2:	f7f3 fb95 	bl	80001e0 <memchr>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d03f      	beq.n	800cb3a <_vfiprintf_r+0x20e>
 800caba:	4b26      	ldr	r3, [pc, #152]	; (800cb54 <_vfiprintf_r+0x228>)
 800cabc:	bb1b      	cbnz	r3, 800cb06 <_vfiprintf_r+0x1da>
 800cabe:	9b03      	ldr	r3, [sp, #12]
 800cac0:	3307      	adds	r3, #7
 800cac2:	f023 0307 	bic.w	r3, r3, #7
 800cac6:	3308      	adds	r3, #8
 800cac8:	9303      	str	r3, [sp, #12]
 800caca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cacc:	443b      	add	r3, r7
 800cace:	9309      	str	r3, [sp, #36]	; 0x24
 800cad0:	e768      	b.n	800c9a4 <_vfiprintf_r+0x78>
 800cad2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad6:	460c      	mov	r4, r1
 800cad8:	2001      	movs	r0, #1
 800cada:	e7a6      	b.n	800ca2a <_vfiprintf_r+0xfe>
 800cadc:	2300      	movs	r3, #0
 800cade:	3401      	adds	r4, #1
 800cae0:	9305      	str	r3, [sp, #20]
 800cae2:	4619      	mov	r1, r3
 800cae4:	f04f 0c0a 	mov.w	ip, #10
 800cae8:	4620      	mov	r0, r4
 800caea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caee:	3a30      	subs	r2, #48	; 0x30
 800caf0:	2a09      	cmp	r2, #9
 800caf2:	d903      	bls.n	800cafc <_vfiprintf_r+0x1d0>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d0c6      	beq.n	800ca86 <_vfiprintf_r+0x15a>
 800caf8:	9105      	str	r1, [sp, #20]
 800cafa:	e7c4      	b.n	800ca86 <_vfiprintf_r+0x15a>
 800cafc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb00:	4604      	mov	r4, r0
 800cb02:	2301      	movs	r3, #1
 800cb04:	e7f0      	b.n	800cae8 <_vfiprintf_r+0x1bc>
 800cb06:	ab03      	add	r3, sp, #12
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <_vfiprintf_r+0x22c>)
 800cb0e:	a904      	add	r1, sp, #16
 800cb10:	4630      	mov	r0, r6
 800cb12:	f3af 8000 	nop.w
 800cb16:	4607      	mov	r7, r0
 800cb18:	1c78      	adds	r0, r7, #1
 800cb1a:	d1d6      	bne.n	800caca <_vfiprintf_r+0x19e>
 800cb1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb1e:	07d9      	lsls	r1, r3, #31
 800cb20:	d405      	bmi.n	800cb2e <_vfiprintf_r+0x202>
 800cb22:	89ab      	ldrh	r3, [r5, #12]
 800cb24:	059a      	lsls	r2, r3, #22
 800cb26:	d402      	bmi.n	800cb2e <_vfiprintf_r+0x202>
 800cb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb2a:	f7fe f95e 	bl	800adea <__retarget_lock_release_recursive>
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	065b      	lsls	r3, r3, #25
 800cb32:	f53f af1d 	bmi.w	800c970 <_vfiprintf_r+0x44>
 800cb36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb38:	e71c      	b.n	800c974 <_vfiprintf_r+0x48>
 800cb3a:	ab03      	add	r3, sp, #12
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	462a      	mov	r2, r5
 800cb40:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <_vfiprintf_r+0x22c>)
 800cb42:	a904      	add	r1, sp, #16
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7ff fc6f 	bl	800c428 <_printf_i>
 800cb4a:	e7e4      	b.n	800cb16 <_vfiprintf_r+0x1ea>
 800cb4c:	0800df35 	.word	0x0800df35
 800cb50:	0800df3f 	.word	0x0800df3f
 800cb54:	00000000 	.word	0x00000000
 800cb58:	0800c907 	.word	0x0800c907
 800cb5c:	0800df3b 	.word	0x0800df3b

0800cb60 <__swbuf_r>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	460e      	mov	r6, r1
 800cb64:	4614      	mov	r4, r2
 800cb66:	4605      	mov	r5, r0
 800cb68:	b118      	cbz	r0, 800cb72 <__swbuf_r+0x12>
 800cb6a:	6a03      	ldr	r3, [r0, #32]
 800cb6c:	b90b      	cbnz	r3, 800cb72 <__swbuf_r+0x12>
 800cb6e:	f7fd ffa5 	bl	800aabc <__sinit>
 800cb72:	69a3      	ldr	r3, [r4, #24]
 800cb74:	60a3      	str	r3, [r4, #8]
 800cb76:	89a3      	ldrh	r3, [r4, #12]
 800cb78:	071a      	lsls	r2, r3, #28
 800cb7a:	d525      	bpl.n	800cbc8 <__swbuf_r+0x68>
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	b31b      	cbz	r3, 800cbc8 <__swbuf_r+0x68>
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	6922      	ldr	r2, [r4, #16]
 800cb84:	1a98      	subs	r0, r3, r2
 800cb86:	6963      	ldr	r3, [r4, #20]
 800cb88:	b2f6      	uxtb	r6, r6
 800cb8a:	4283      	cmp	r3, r0
 800cb8c:	4637      	mov	r7, r6
 800cb8e:	dc04      	bgt.n	800cb9a <__swbuf_r+0x3a>
 800cb90:	4621      	mov	r1, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7ff fdf0 	bl	800c778 <_fflush_r>
 800cb98:	b9e0      	cbnz	r0, 800cbd4 <__swbuf_r+0x74>
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	60a3      	str	r3, [r4, #8]
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	701e      	strb	r6, [r3, #0]
 800cba8:	6962      	ldr	r2, [r4, #20]
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d004      	beq.n	800cbba <__swbuf_r+0x5a>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	07db      	lsls	r3, r3, #31
 800cbb4:	d506      	bpl.n	800cbc4 <__swbuf_r+0x64>
 800cbb6:	2e0a      	cmp	r6, #10
 800cbb8:	d104      	bne.n	800cbc4 <__swbuf_r+0x64>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f7ff fddb 	bl	800c778 <_fflush_r>
 800cbc2:	b938      	cbnz	r0, 800cbd4 <__swbuf_r+0x74>
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc8:	4621      	mov	r1, r4
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f000 f806 	bl	800cbdc <__swsetup_r>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d0d5      	beq.n	800cb80 <__swbuf_r+0x20>
 800cbd4:	f04f 37ff 	mov.w	r7, #4294967295
 800cbd8:	e7f4      	b.n	800cbc4 <__swbuf_r+0x64>
	...

0800cbdc <__swsetup_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4b2a      	ldr	r3, [pc, #168]	; (800cc88 <__swsetup_r+0xac>)
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	6818      	ldr	r0, [r3, #0]
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	b118      	cbz	r0, 800cbf0 <__swsetup_r+0x14>
 800cbe8:	6a03      	ldr	r3, [r0, #32]
 800cbea:	b90b      	cbnz	r3, 800cbf0 <__swsetup_r+0x14>
 800cbec:	f7fd ff66 	bl	800aabc <__sinit>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbf6:	0718      	lsls	r0, r3, #28
 800cbf8:	d422      	bmi.n	800cc40 <__swsetup_r+0x64>
 800cbfa:	06d9      	lsls	r1, r3, #27
 800cbfc:	d407      	bmi.n	800cc0e <__swsetup_r+0x32>
 800cbfe:	2309      	movs	r3, #9
 800cc00:	602b      	str	r3, [r5, #0]
 800cc02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0c:	e034      	b.n	800cc78 <__swsetup_r+0x9c>
 800cc0e:	0758      	lsls	r0, r3, #29
 800cc10:	d512      	bpl.n	800cc38 <__swsetup_r+0x5c>
 800cc12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc14:	b141      	cbz	r1, 800cc28 <__swsetup_r+0x4c>
 800cc16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc1a:	4299      	cmp	r1, r3
 800cc1c:	d002      	beq.n	800cc24 <__swsetup_r+0x48>
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f7fe f918 	bl	800ae54 <_free_r>
 800cc24:	2300      	movs	r3, #0
 800cc26:	6363      	str	r3, [r4, #52]	; 0x34
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	2300      	movs	r3, #0
 800cc32:	6063      	str	r3, [r4, #4]
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	f043 0308 	orr.w	r3, r3, #8
 800cc3e:	81a3      	strh	r3, [r4, #12]
 800cc40:	6923      	ldr	r3, [r4, #16]
 800cc42:	b94b      	cbnz	r3, 800cc58 <__swsetup_r+0x7c>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc4e:	d003      	beq.n	800cc58 <__swsetup_r+0x7c>
 800cc50:	4621      	mov	r1, r4
 800cc52:	4628      	mov	r0, r5
 800cc54:	f000 f88c 	bl	800cd70 <__smakebuf_r>
 800cc58:	89a0      	ldrh	r0, [r4, #12]
 800cc5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc5e:	f010 0301 	ands.w	r3, r0, #1
 800cc62:	d00a      	beq.n	800cc7a <__swsetup_r+0x9e>
 800cc64:	2300      	movs	r3, #0
 800cc66:	60a3      	str	r3, [r4, #8]
 800cc68:	6963      	ldr	r3, [r4, #20]
 800cc6a:	425b      	negs	r3, r3
 800cc6c:	61a3      	str	r3, [r4, #24]
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	b943      	cbnz	r3, 800cc84 <__swsetup_r+0xa8>
 800cc72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc76:	d1c4      	bne.n	800cc02 <__swsetup_r+0x26>
 800cc78:	bd38      	pop	{r3, r4, r5, pc}
 800cc7a:	0781      	lsls	r1, r0, #30
 800cc7c:	bf58      	it	pl
 800cc7e:	6963      	ldrpl	r3, [r4, #20]
 800cc80:	60a3      	str	r3, [r4, #8]
 800cc82:	e7f4      	b.n	800cc6e <__swsetup_r+0x92>
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7f7      	b.n	800cc78 <__swsetup_r+0x9c>
 800cc88:	200002c0 	.word	0x200002c0

0800cc8c <_raise_r>:
 800cc8c:	291f      	cmp	r1, #31
 800cc8e:	b538      	push	{r3, r4, r5, lr}
 800cc90:	4604      	mov	r4, r0
 800cc92:	460d      	mov	r5, r1
 800cc94:	d904      	bls.n	800cca0 <_raise_r+0x14>
 800cc96:	2316      	movs	r3, #22
 800cc98:	6003      	str	r3, [r0, #0]
 800cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cca2:	b112      	cbz	r2, 800ccaa <_raise_r+0x1e>
 800cca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cca8:	b94b      	cbnz	r3, 800ccbe <_raise_r+0x32>
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 f830 	bl	800cd10 <_getpid_r>
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4601      	mov	r1, r0
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccba:	f000 b817 	b.w	800ccec <_kill_r>
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d00a      	beq.n	800ccd8 <_raise_r+0x4c>
 800ccc2:	1c59      	adds	r1, r3, #1
 800ccc4:	d103      	bne.n	800ccce <_raise_r+0x42>
 800ccc6:	2316      	movs	r3, #22
 800ccc8:	6003      	str	r3, [r0, #0]
 800ccca:	2001      	movs	r0, #1
 800cccc:	e7e7      	b.n	800cc9e <_raise_r+0x12>
 800ccce:	2400      	movs	r4, #0
 800ccd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	4798      	blx	r3
 800ccd8:	2000      	movs	r0, #0
 800ccda:	e7e0      	b.n	800cc9e <_raise_r+0x12>

0800ccdc <raise>:
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <raise+0xc>)
 800ccde:	4601      	mov	r1, r0
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	f7ff bfd3 	b.w	800cc8c <_raise_r>
 800cce6:	bf00      	nop
 800cce8:	200002c0 	.word	0x200002c0

0800ccec <_kill_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	; (800cd0c <_kill_r+0x20>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	f7f4 fedb 	bl	8001ab4 <_kill>
 800ccfe:	1c43      	adds	r3, r0, #1
 800cd00:	d102      	bne.n	800cd08 <_kill_r+0x1c>
 800cd02:	682b      	ldr	r3, [r5, #0]
 800cd04:	b103      	cbz	r3, 800cd08 <_kill_r+0x1c>
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	bd38      	pop	{r3, r4, r5, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20002148 	.word	0x20002148

0800cd10 <_getpid_r>:
 800cd10:	f7f4 bec8 	b.w	8001aa4 <_getpid>

0800cd14 <_malloc_usable_size_r>:
 800cd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd18:	1f18      	subs	r0, r3, #4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	bfbc      	itt	lt
 800cd1e:	580b      	ldrlt	r3, [r1, r0]
 800cd20:	18c0      	addlt	r0, r0, r3
 800cd22:	4770      	bx	lr

0800cd24 <__swhatbuf_r>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	460c      	mov	r4, r1
 800cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	b096      	sub	sp, #88	; 0x58
 800cd30:	4615      	mov	r5, r2
 800cd32:	461e      	mov	r6, r3
 800cd34:	da0d      	bge.n	800cd52 <__swhatbuf_r+0x2e>
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd3c:	f04f 0100 	mov.w	r1, #0
 800cd40:	bf0c      	ite	eq
 800cd42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd46:	2340      	movne	r3, #64	; 0x40
 800cd48:	2000      	movs	r0, #0
 800cd4a:	6031      	str	r1, [r6, #0]
 800cd4c:	602b      	str	r3, [r5, #0]
 800cd4e:	b016      	add	sp, #88	; 0x58
 800cd50:	bd70      	pop	{r4, r5, r6, pc}
 800cd52:	466a      	mov	r2, sp
 800cd54:	f000 f848 	bl	800cde8 <_fstat_r>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	dbec      	blt.n	800cd36 <__swhatbuf_r+0x12>
 800cd5c:	9901      	ldr	r1, [sp, #4]
 800cd5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cd62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cd66:	4259      	negs	r1, r3
 800cd68:	4159      	adcs	r1, r3
 800cd6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd6e:	e7eb      	b.n	800cd48 <__swhatbuf_r+0x24>

0800cd70 <__smakebuf_r>:
 800cd70:	898b      	ldrh	r3, [r1, #12]
 800cd72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd74:	079d      	lsls	r5, r3, #30
 800cd76:	4606      	mov	r6, r0
 800cd78:	460c      	mov	r4, r1
 800cd7a:	d507      	bpl.n	800cd8c <__smakebuf_r+0x1c>
 800cd7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	2301      	movs	r3, #1
 800cd86:	6163      	str	r3, [r4, #20]
 800cd88:	b002      	add	sp, #8
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	ab01      	add	r3, sp, #4
 800cd8e:	466a      	mov	r2, sp
 800cd90:	f7ff ffc8 	bl	800cd24 <__swhatbuf_r>
 800cd94:	9900      	ldr	r1, [sp, #0]
 800cd96:	4605      	mov	r5, r0
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7fe fc27 	bl	800b5ec <_malloc_r>
 800cd9e:	b948      	cbnz	r0, 800cdb4 <__smakebuf_r+0x44>
 800cda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda4:	059a      	lsls	r2, r3, #22
 800cda6:	d4ef      	bmi.n	800cd88 <__smakebuf_r+0x18>
 800cda8:	f023 0303 	bic.w	r3, r3, #3
 800cdac:	f043 0302 	orr.w	r3, r3, #2
 800cdb0:	81a3      	strh	r3, [r4, #12]
 800cdb2:	e7e3      	b.n	800cd7c <__smakebuf_r+0xc>
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	6020      	str	r0, [r4, #0]
 800cdb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdbc:	81a3      	strh	r3, [r4, #12]
 800cdbe:	9b00      	ldr	r3, [sp, #0]
 800cdc0:	6163      	str	r3, [r4, #20]
 800cdc2:	9b01      	ldr	r3, [sp, #4]
 800cdc4:	6120      	str	r0, [r4, #16]
 800cdc6:	b15b      	cbz	r3, 800cde0 <__smakebuf_r+0x70>
 800cdc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f000 f81d 	bl	800ce0c <_isatty_r>
 800cdd2:	b128      	cbz	r0, 800cde0 <__smakebuf_r+0x70>
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	f023 0303 	bic.w	r3, r3, #3
 800cdda:	f043 0301 	orr.w	r3, r3, #1
 800cdde:	81a3      	strh	r3, [r4, #12]
 800cde0:	89a3      	ldrh	r3, [r4, #12]
 800cde2:	431d      	orrs	r5, r3
 800cde4:	81a5      	strh	r5, [r4, #12]
 800cde6:	e7cf      	b.n	800cd88 <__smakebuf_r+0x18>

0800cde8 <_fstat_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d07      	ldr	r5, [pc, #28]	; (800ce08 <_fstat_r+0x20>)
 800cdec:	2300      	movs	r3, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	602b      	str	r3, [r5, #0]
 800cdf6:	f7f4 febc 	bl	8001b72 <_fstat>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	d102      	bne.n	800ce04 <_fstat_r+0x1c>
 800cdfe:	682b      	ldr	r3, [r5, #0]
 800ce00:	b103      	cbz	r3, 800ce04 <_fstat_r+0x1c>
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	bd38      	pop	{r3, r4, r5, pc}
 800ce06:	bf00      	nop
 800ce08:	20002148 	.word	0x20002148

0800ce0c <_isatty_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	4d06      	ldr	r5, [pc, #24]	; (800ce28 <_isatty_r+0x1c>)
 800ce10:	2300      	movs	r3, #0
 800ce12:	4604      	mov	r4, r0
 800ce14:	4608      	mov	r0, r1
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	f7f4 febb 	bl	8001b92 <_isatty>
 800ce1c:	1c43      	adds	r3, r0, #1
 800ce1e:	d102      	bne.n	800ce26 <_isatty_r+0x1a>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	b103      	cbz	r3, 800ce26 <_isatty_r+0x1a>
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	20002148 	.word	0x20002148

0800ce2c <asin>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	ed2d 8b02 	vpush	{d8}
 800ce32:	ec55 4b10 	vmov	r4, r5, d0
 800ce36:	f000 f93f 	bl	800d0b8 <__ieee754_asin>
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	462b      	mov	r3, r5
 800ce3e:	4620      	mov	r0, r4
 800ce40:	4629      	mov	r1, r5
 800ce42:	eeb0 8a40 	vmov.f32	s16, s0
 800ce46:	eef0 8a60 	vmov.f32	s17, s1
 800ce4a:	f7f3 fe6f 	bl	8000b2c <__aeabi_dcmpun>
 800ce4e:	b9a8      	cbnz	r0, 800ce7c <asin+0x50>
 800ce50:	ec45 4b10 	vmov	d0, r4, r5
 800ce54:	f000 f84c 	bl	800cef0 <fabs>
 800ce58:	4b0c      	ldr	r3, [pc, #48]	; (800ce8c <asin+0x60>)
 800ce5a:	ec51 0b10 	vmov	r0, r1, d0
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f7f3 fe5a 	bl	8000b18 <__aeabi_dcmpgt>
 800ce64:	b150      	cbz	r0, 800ce7c <asin+0x50>
 800ce66:	f7fd ff95 	bl	800ad94 <__errno>
 800ce6a:	ecbd 8b02 	vpop	{d8}
 800ce6e:	2321      	movs	r3, #33	; 0x21
 800ce70:	6003      	str	r3, [r0, #0]
 800ce72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce76:	4806      	ldr	r0, [pc, #24]	; (800ce90 <asin+0x64>)
 800ce78:	f7fd bfc6 	b.w	800ae08 <nan>
 800ce7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ce80:	eef0 0a68 	vmov.f32	s1, s17
 800ce84:	ecbd 8b02 	vpop	{d8}
 800ce88:	bd38      	pop	{r3, r4, r5, pc}
 800ce8a:	bf00      	nop
 800ce8c:	3ff00000 	.word	0x3ff00000
 800ce90:	0800dc6c 	.word	0x0800dc6c

0800ce94 <atan2>:
 800ce94:	f000 bb24 	b.w	800d4e0 <__ieee754_atan2>

0800ce98 <sqrt>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	ed2d 8b02 	vpush	{d8}
 800ce9e:	ec55 4b10 	vmov	r4, r5, d0
 800cea2:	f000 f82f 	bl	800cf04 <__ieee754_sqrt>
 800cea6:	4622      	mov	r2, r4
 800cea8:	462b      	mov	r3, r5
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4629      	mov	r1, r5
 800ceae:	eeb0 8a40 	vmov.f32	s16, s0
 800ceb2:	eef0 8a60 	vmov.f32	s17, s1
 800ceb6:	f7f3 fe39 	bl	8000b2c <__aeabi_dcmpun>
 800ceba:	b990      	cbnz	r0, 800cee2 <sqrt+0x4a>
 800cebc:	2200      	movs	r2, #0
 800cebe:	2300      	movs	r3, #0
 800cec0:	4620      	mov	r0, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7f3 fe0a 	bl	8000adc <__aeabi_dcmplt>
 800cec8:	b158      	cbz	r0, 800cee2 <sqrt+0x4a>
 800ceca:	f7fd ff63 	bl	800ad94 <__errno>
 800cece:	2321      	movs	r3, #33	; 0x21
 800ced0:	6003      	str	r3, [r0, #0]
 800ced2:	2200      	movs	r2, #0
 800ced4:	2300      	movs	r3, #0
 800ced6:	4610      	mov	r0, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	f7f3 fcb7 	bl	800084c <__aeabi_ddiv>
 800cede:	ec41 0b18 	vmov	d8, r0, r1
 800cee2:	eeb0 0a48 	vmov.f32	s0, s16
 800cee6:	eef0 0a68 	vmov.f32	s1, s17
 800ceea:	ecbd 8b02 	vpop	{d8}
 800ceee:	bd38      	pop	{r3, r4, r5, pc}

0800cef0 <fabs>:
 800cef0:	ec51 0b10 	vmov	r0, r1, d0
 800cef4:	ee10 2a10 	vmov	r2, s0
 800cef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cefc:	ec43 2b10 	vmov	d0, r2, r3
 800cf00:	4770      	bx	lr
	...

0800cf04 <__ieee754_sqrt>:
 800cf04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf08:	ec55 4b10 	vmov	r4, r5, d0
 800cf0c:	4e67      	ldr	r6, [pc, #412]	; (800d0ac <__ieee754_sqrt+0x1a8>)
 800cf0e:	43ae      	bics	r6, r5
 800cf10:	ee10 0a10 	vmov	r0, s0
 800cf14:	ee10 2a10 	vmov	r2, s0
 800cf18:	4629      	mov	r1, r5
 800cf1a:	462b      	mov	r3, r5
 800cf1c:	d10d      	bne.n	800cf3a <__ieee754_sqrt+0x36>
 800cf1e:	f7f3 fb6b 	bl	80005f8 <__aeabi_dmul>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4620      	mov	r0, r4
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7f3 f9af 	bl	800028c <__adddf3>
 800cf2e:	4604      	mov	r4, r0
 800cf30:	460d      	mov	r5, r1
 800cf32:	ec45 4b10 	vmov	d0, r4, r5
 800cf36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3a:	2d00      	cmp	r5, #0
 800cf3c:	dc0b      	bgt.n	800cf56 <__ieee754_sqrt+0x52>
 800cf3e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf42:	4326      	orrs	r6, r4
 800cf44:	d0f5      	beq.n	800cf32 <__ieee754_sqrt+0x2e>
 800cf46:	b135      	cbz	r5, 800cf56 <__ieee754_sqrt+0x52>
 800cf48:	f7f3 f99e 	bl	8000288 <__aeabi_dsub>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	f7f3 fc7c 	bl	800084c <__aeabi_ddiv>
 800cf54:	e7eb      	b.n	800cf2e <__ieee754_sqrt+0x2a>
 800cf56:	1509      	asrs	r1, r1, #20
 800cf58:	f000 808d 	beq.w	800d076 <__ieee754_sqrt+0x172>
 800cf5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf60:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cf64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf68:	07c9      	lsls	r1, r1, #31
 800cf6a:	bf5c      	itt	pl
 800cf6c:	005b      	lslpl	r3, r3, #1
 800cf6e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cf72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf76:	bf58      	it	pl
 800cf78:	0052      	lslpl	r2, r2, #1
 800cf7a:	2500      	movs	r5, #0
 800cf7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf80:	1076      	asrs	r6, r6, #1
 800cf82:	0052      	lsls	r2, r2, #1
 800cf84:	f04f 0e16 	mov.w	lr, #22
 800cf88:	46ac      	mov	ip, r5
 800cf8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf8e:	eb0c 0001 	add.w	r0, ip, r1
 800cf92:	4298      	cmp	r0, r3
 800cf94:	bfde      	ittt	le
 800cf96:	1a1b      	suble	r3, r3, r0
 800cf98:	eb00 0c01 	addle.w	ip, r0, r1
 800cf9c:	186d      	addle	r5, r5, r1
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	f1be 0e01 	subs.w	lr, lr, #1
 800cfa4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cfa8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cfb0:	d1ed      	bne.n	800cf8e <__ieee754_sqrt+0x8a>
 800cfb2:	4674      	mov	r4, lr
 800cfb4:	2720      	movs	r7, #32
 800cfb6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cfba:	4563      	cmp	r3, ip
 800cfbc:	eb01 000e 	add.w	r0, r1, lr
 800cfc0:	dc02      	bgt.n	800cfc8 <__ieee754_sqrt+0xc4>
 800cfc2:	d113      	bne.n	800cfec <__ieee754_sqrt+0xe8>
 800cfc4:	4290      	cmp	r0, r2
 800cfc6:	d811      	bhi.n	800cfec <__ieee754_sqrt+0xe8>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	eb00 0e01 	add.w	lr, r0, r1
 800cfce:	da57      	bge.n	800d080 <__ieee754_sqrt+0x17c>
 800cfd0:	f1be 0f00 	cmp.w	lr, #0
 800cfd4:	db54      	blt.n	800d080 <__ieee754_sqrt+0x17c>
 800cfd6:	f10c 0801 	add.w	r8, ip, #1
 800cfda:	eba3 030c 	sub.w	r3, r3, ip
 800cfde:	4290      	cmp	r0, r2
 800cfe0:	bf88      	it	hi
 800cfe2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cfe6:	1a12      	subs	r2, r2, r0
 800cfe8:	440c      	add	r4, r1
 800cfea:	46c4      	mov	ip, r8
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	3f01      	subs	r7, #1
 800cff0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cff4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cff8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cffc:	d1dd      	bne.n	800cfba <__ieee754_sqrt+0xb6>
 800cffe:	4313      	orrs	r3, r2
 800d000:	d01b      	beq.n	800d03a <__ieee754_sqrt+0x136>
 800d002:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d0b0 <__ieee754_sqrt+0x1ac>
 800d006:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d0b4 <__ieee754_sqrt+0x1b0>
 800d00a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d00e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d012:	f7f3 f939 	bl	8000288 <__aeabi_dsub>
 800d016:	e9da 8900 	ldrd	r8, r9, [sl]
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4640      	mov	r0, r8
 800d020:	4649      	mov	r1, r9
 800d022:	f7f3 fd65 	bl	8000af0 <__aeabi_dcmple>
 800d026:	b140      	cbz	r0, 800d03a <__ieee754_sqrt+0x136>
 800d028:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d02c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d030:	e9db 2300 	ldrd	r2, r3, [fp]
 800d034:	d126      	bne.n	800d084 <__ieee754_sqrt+0x180>
 800d036:	3501      	adds	r5, #1
 800d038:	463c      	mov	r4, r7
 800d03a:	106a      	asrs	r2, r5, #1
 800d03c:	0863      	lsrs	r3, r4, #1
 800d03e:	07e9      	lsls	r1, r5, #31
 800d040:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d044:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d048:	bf48      	it	mi
 800d04a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d04e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d052:	461c      	mov	r4, r3
 800d054:	e76d      	b.n	800cf32 <__ieee754_sqrt+0x2e>
 800d056:	0ad3      	lsrs	r3, r2, #11
 800d058:	3815      	subs	r0, #21
 800d05a:	0552      	lsls	r2, r2, #21
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0fa      	beq.n	800d056 <__ieee754_sqrt+0x152>
 800d060:	02dc      	lsls	r4, r3, #11
 800d062:	d50a      	bpl.n	800d07a <__ieee754_sqrt+0x176>
 800d064:	f1c1 0420 	rsb	r4, r1, #32
 800d068:	fa22 f404 	lsr.w	r4, r2, r4
 800d06c:	1e4d      	subs	r5, r1, #1
 800d06e:	408a      	lsls	r2, r1
 800d070:	4323      	orrs	r3, r4
 800d072:	1b41      	subs	r1, r0, r5
 800d074:	e772      	b.n	800cf5c <__ieee754_sqrt+0x58>
 800d076:	4608      	mov	r0, r1
 800d078:	e7f0      	b.n	800d05c <__ieee754_sqrt+0x158>
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	3101      	adds	r1, #1
 800d07e:	e7ef      	b.n	800d060 <__ieee754_sqrt+0x15c>
 800d080:	46e0      	mov	r8, ip
 800d082:	e7aa      	b.n	800cfda <__ieee754_sqrt+0xd6>
 800d084:	f7f3 f902 	bl	800028c <__adddf3>
 800d088:	e9da 8900 	ldrd	r8, r9, [sl]
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4640      	mov	r0, r8
 800d092:	4649      	mov	r1, r9
 800d094:	f7f3 fd22 	bl	8000adc <__aeabi_dcmplt>
 800d098:	b120      	cbz	r0, 800d0a4 <__ieee754_sqrt+0x1a0>
 800d09a:	1ca0      	adds	r0, r4, #2
 800d09c:	bf08      	it	eq
 800d09e:	3501      	addeq	r5, #1
 800d0a0:	3402      	adds	r4, #2
 800d0a2:	e7ca      	b.n	800d03a <__ieee754_sqrt+0x136>
 800d0a4:	3401      	adds	r4, #1
 800d0a6:	f024 0401 	bic.w	r4, r4, #1
 800d0aa:	e7c6      	b.n	800d03a <__ieee754_sqrt+0x136>
 800d0ac:	7ff00000 	.word	0x7ff00000
 800d0b0:	200002c8 	.word	0x200002c8
 800d0b4:	200002d0 	.word	0x200002d0

0800d0b8 <__ieee754_asin>:
 800d0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	ed2d 8b04 	vpush	{d8-d9}
 800d0c0:	ec55 4b10 	vmov	r4, r5, d0
 800d0c4:	4bcc      	ldr	r3, [pc, #816]	; (800d3f8 <__ieee754_asin+0x340>)
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d0cc:	4598      	cmp	r8, r3
 800d0ce:	9501      	str	r5, [sp, #4]
 800d0d0:	dd33      	ble.n	800d13a <__ieee754_asin+0x82>
 800d0d2:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800d0d6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800d0da:	ea58 0804 	orrs.w	r8, r8, r4
 800d0de:	d117      	bne.n	800d110 <__ieee754_asin+0x58>
 800d0e0:	a3ab      	add	r3, pc, #684	; (adr r3, 800d390 <__ieee754_asin+0x2d8>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	ee10 0a10 	vmov	r0, s0
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	f7f3 fa84 	bl	80005f8 <__aeabi_dmul>
 800d0f0:	a3a9      	add	r3, pc, #676	; (adr r3, 800d398 <__ieee754_asin+0x2e0>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7f3 fa7b 	bl	80005f8 <__aeabi_dmul>
 800d102:	4602      	mov	r2, r0
 800d104:	460b      	mov	r3, r1
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 f8bf 	bl	800028c <__adddf3>
 800d10e:	e00b      	b.n	800d128 <__ieee754_asin+0x70>
 800d110:	ee10 2a10 	vmov	r2, s0
 800d114:	462b      	mov	r3, r5
 800d116:	ee10 0a10 	vmov	r0, s0
 800d11a:	4629      	mov	r1, r5
 800d11c:	f7f3 f8b4 	bl	8000288 <__aeabi_dsub>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	f7f3 fb92 	bl	800084c <__aeabi_ddiv>
 800d128:	4604      	mov	r4, r0
 800d12a:	460d      	mov	r5, r1
 800d12c:	ec45 4b10 	vmov	d0, r4, r5
 800d130:	b003      	add	sp, #12
 800d132:	ecbd 8b04 	vpop	{d8-d9}
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	4bb0      	ldr	r3, [pc, #704]	; (800d3fc <__ieee754_asin+0x344>)
 800d13c:	4598      	cmp	r8, r3
 800d13e:	dc11      	bgt.n	800d164 <__ieee754_asin+0xac>
 800d140:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d144:	f280 80ae 	bge.w	800d2a4 <__ieee754_asin+0x1ec>
 800d148:	a395      	add	r3, pc, #596	; (adr r3, 800d3a0 <__ieee754_asin+0x2e8>)
 800d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14e:	ee10 0a10 	vmov	r0, s0
 800d152:	4629      	mov	r1, r5
 800d154:	f7f3 f89a 	bl	800028c <__adddf3>
 800d158:	4ba9      	ldr	r3, [pc, #676]	; (800d400 <__ieee754_asin+0x348>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	f7f3 fcdc 	bl	8000b18 <__aeabi_dcmpgt>
 800d160:	2800      	cmp	r0, #0
 800d162:	d1e3      	bne.n	800d12c <__ieee754_asin+0x74>
 800d164:	ec45 4b10 	vmov	d0, r4, r5
 800d168:	f7ff fec2 	bl	800cef0 <fabs>
 800d16c:	49a4      	ldr	r1, [pc, #656]	; (800d400 <__ieee754_asin+0x348>)
 800d16e:	ec53 2b10 	vmov	r2, r3, d0
 800d172:	2000      	movs	r0, #0
 800d174:	f7f3 f888 	bl	8000288 <__aeabi_dsub>
 800d178:	4ba2      	ldr	r3, [pc, #648]	; (800d404 <__ieee754_asin+0x34c>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	a389      	add	r3, pc, #548	; (adr r3, 800d3a8 <__ieee754_asin+0x2f0>)
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	f7f3 fa35 	bl	80005f8 <__aeabi_dmul>
 800d18e:	a388      	add	r3, pc, #544	; (adr r3, 800d3b0 <__ieee754_asin+0x2f8>)
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	f7f3 f87a 	bl	800028c <__adddf3>
 800d198:	4622      	mov	r2, r4
 800d19a:	462b      	mov	r3, r5
 800d19c:	f7f3 fa2c 	bl	80005f8 <__aeabi_dmul>
 800d1a0:	a385      	add	r3, pc, #532	; (adr r3, 800d3b8 <__ieee754_asin+0x300>)
 800d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a6:	f7f3 f86f 	bl	8000288 <__aeabi_dsub>
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	462b      	mov	r3, r5
 800d1ae:	f7f3 fa23 	bl	80005f8 <__aeabi_dmul>
 800d1b2:	a383      	add	r3, pc, #524	; (adr r3, 800d3c0 <__ieee754_asin+0x308>)
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f7f3 f868 	bl	800028c <__adddf3>
 800d1bc:	4622      	mov	r2, r4
 800d1be:	462b      	mov	r3, r5
 800d1c0:	f7f3 fa1a 	bl	80005f8 <__aeabi_dmul>
 800d1c4:	a380      	add	r3, pc, #512	; (adr r3, 800d3c8 <__ieee754_asin+0x310>)
 800d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ca:	f7f3 f85d 	bl	8000288 <__aeabi_dsub>
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	462b      	mov	r3, r5
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	a37e      	add	r3, pc, #504	; (adr r3, 800d3d0 <__ieee754_asin+0x318>)
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	f7f3 f856 	bl	800028c <__adddf3>
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	f7f3 fa08 	bl	80005f8 <__aeabi_dmul>
 800d1e8:	a37b      	add	r3, pc, #492	; (adr r3, 800d3d8 <__ieee754_asin+0x320>)
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	ec41 0b18 	vmov	d8, r0, r1
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	f7f3 f9ff 	bl	80005f8 <__aeabi_dmul>
 800d1fa:	a379      	add	r3, pc, #484	; (adr r3, 800d3e0 <__ieee754_asin+0x328>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	f7f3 f842 	bl	8000288 <__aeabi_dsub>
 800d204:	4622      	mov	r2, r4
 800d206:	462b      	mov	r3, r5
 800d208:	f7f3 f9f6 	bl	80005f8 <__aeabi_dmul>
 800d20c:	a376      	add	r3, pc, #472	; (adr r3, 800d3e8 <__ieee754_asin+0x330>)
 800d20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d212:	f7f3 f83b 	bl	800028c <__adddf3>
 800d216:	4622      	mov	r2, r4
 800d218:	462b      	mov	r3, r5
 800d21a:	f7f3 f9ed 	bl	80005f8 <__aeabi_dmul>
 800d21e:	a374      	add	r3, pc, #464	; (adr r3, 800d3f0 <__ieee754_asin+0x338>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f7f3 f830 	bl	8000288 <__aeabi_dsub>
 800d228:	4622      	mov	r2, r4
 800d22a:	462b      	mov	r3, r5
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	4b73      	ldr	r3, [pc, #460]	; (800d400 <__ieee754_asin+0x348>)
 800d232:	2200      	movs	r2, #0
 800d234:	f7f3 f82a 	bl	800028c <__adddf3>
 800d238:	ec45 4b10 	vmov	d0, r4, r5
 800d23c:	4606      	mov	r6, r0
 800d23e:	460f      	mov	r7, r1
 800d240:	f7ff fe60 	bl	800cf04 <__ieee754_sqrt>
 800d244:	4b70      	ldr	r3, [pc, #448]	; (800d408 <__ieee754_asin+0x350>)
 800d246:	4598      	cmp	r8, r3
 800d248:	ec5b ab10 	vmov	sl, fp, d0
 800d24c:	f340 80de 	ble.w	800d40c <__ieee754_asin+0x354>
 800d250:	4632      	mov	r2, r6
 800d252:	463b      	mov	r3, r7
 800d254:	ec51 0b18 	vmov	r0, r1, d8
 800d258:	f7f3 faf8 	bl	800084c <__aeabi_ddiv>
 800d25c:	4652      	mov	r2, sl
 800d25e:	465b      	mov	r3, fp
 800d260:	f7f3 f9ca 	bl	80005f8 <__aeabi_dmul>
 800d264:	4652      	mov	r2, sl
 800d266:	465b      	mov	r3, fp
 800d268:	f7f3 f810 	bl	800028c <__adddf3>
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	f7f3 f80c 	bl	800028c <__adddf3>
 800d274:	a348      	add	r3, pc, #288	; (adr r3, 800d398 <__ieee754_asin+0x2e0>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	f7f3 f805 	bl	8000288 <__aeabi_dsub>
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	a143      	add	r1, pc, #268	; (adr r1, 800d390 <__ieee754_asin+0x2d8>)
 800d284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d288:	f7f2 fffe 	bl	8000288 <__aeabi_dsub>
 800d28c:	9b01      	ldr	r3, [sp, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfdc      	itt	le
 800d292:	4602      	movle	r2, r0
 800d294:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800d298:	4604      	mov	r4, r0
 800d29a:	460d      	mov	r5, r1
 800d29c:	bfdc      	itt	le
 800d29e:	4614      	movle	r4, r2
 800d2a0:	461d      	movle	r5, r3
 800d2a2:	e743      	b.n	800d12c <__ieee754_asin+0x74>
 800d2a4:	ee10 2a10 	vmov	r2, s0
 800d2a8:	ee10 0a10 	vmov	r0, s0
 800d2ac:	462b      	mov	r3, r5
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	f7f3 f9a2 	bl	80005f8 <__aeabi_dmul>
 800d2b4:	a33c      	add	r3, pc, #240	; (adr r3, 800d3a8 <__ieee754_asin+0x2f0>)
 800d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	460f      	mov	r7, r1
 800d2be:	f7f3 f99b 	bl	80005f8 <__aeabi_dmul>
 800d2c2:	a33b      	add	r3, pc, #236	; (adr r3, 800d3b0 <__ieee754_asin+0x2f8>)
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f7f2 ffe0 	bl	800028c <__adddf3>
 800d2cc:	4632      	mov	r2, r6
 800d2ce:	463b      	mov	r3, r7
 800d2d0:	f7f3 f992 	bl	80005f8 <__aeabi_dmul>
 800d2d4:	a338      	add	r3, pc, #224	; (adr r3, 800d3b8 <__ieee754_asin+0x300>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f2 ffd5 	bl	8000288 <__aeabi_dsub>
 800d2de:	4632      	mov	r2, r6
 800d2e0:	463b      	mov	r3, r7
 800d2e2:	f7f3 f989 	bl	80005f8 <__aeabi_dmul>
 800d2e6:	a336      	add	r3, pc, #216	; (adr r3, 800d3c0 <__ieee754_asin+0x308>)
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	f7f2 ffce 	bl	800028c <__adddf3>
 800d2f0:	4632      	mov	r2, r6
 800d2f2:	463b      	mov	r3, r7
 800d2f4:	f7f3 f980 	bl	80005f8 <__aeabi_dmul>
 800d2f8:	a333      	add	r3, pc, #204	; (adr r3, 800d3c8 <__ieee754_asin+0x310>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f7f2 ffc3 	bl	8000288 <__aeabi_dsub>
 800d302:	4632      	mov	r2, r6
 800d304:	463b      	mov	r3, r7
 800d306:	f7f3 f977 	bl	80005f8 <__aeabi_dmul>
 800d30a:	a331      	add	r3, pc, #196	; (adr r3, 800d3d0 <__ieee754_asin+0x318>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	f7f2 ffbc 	bl	800028c <__adddf3>
 800d314:	4632      	mov	r2, r6
 800d316:	463b      	mov	r3, r7
 800d318:	f7f3 f96e 	bl	80005f8 <__aeabi_dmul>
 800d31c:	a32e      	add	r3, pc, #184	; (adr r3, 800d3d8 <__ieee754_asin+0x320>)
 800d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d322:	4680      	mov	r8, r0
 800d324:	4689      	mov	r9, r1
 800d326:	4630      	mov	r0, r6
 800d328:	4639      	mov	r1, r7
 800d32a:	f7f3 f965 	bl	80005f8 <__aeabi_dmul>
 800d32e:	a32c      	add	r3, pc, #176	; (adr r3, 800d3e0 <__ieee754_asin+0x328>)
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	f7f2 ffa8 	bl	8000288 <__aeabi_dsub>
 800d338:	4632      	mov	r2, r6
 800d33a:	463b      	mov	r3, r7
 800d33c:	f7f3 f95c 	bl	80005f8 <__aeabi_dmul>
 800d340:	a329      	add	r3, pc, #164	; (adr r3, 800d3e8 <__ieee754_asin+0x330>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	f7f2 ffa1 	bl	800028c <__adddf3>
 800d34a:	4632      	mov	r2, r6
 800d34c:	463b      	mov	r3, r7
 800d34e:	f7f3 f953 	bl	80005f8 <__aeabi_dmul>
 800d352:	a327      	add	r3, pc, #156	; (adr r3, 800d3f0 <__ieee754_asin+0x338>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f2 ff96 	bl	8000288 <__aeabi_dsub>
 800d35c:	4632      	mov	r2, r6
 800d35e:	463b      	mov	r3, r7
 800d360:	f7f3 f94a 	bl	80005f8 <__aeabi_dmul>
 800d364:	4b26      	ldr	r3, [pc, #152]	; (800d400 <__ieee754_asin+0x348>)
 800d366:	2200      	movs	r2, #0
 800d368:	f7f2 ff90 	bl	800028c <__adddf3>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4640      	mov	r0, r8
 800d372:	4649      	mov	r1, r9
 800d374:	f7f3 fa6a 	bl	800084c <__aeabi_ddiv>
 800d378:	4622      	mov	r2, r4
 800d37a:	462b      	mov	r3, r5
 800d37c:	f7f3 f93c 	bl	80005f8 <__aeabi_dmul>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4620      	mov	r0, r4
 800d386:	4629      	mov	r1, r5
 800d388:	e6bf      	b.n	800d10a <__ieee754_asin+0x52>
 800d38a:	bf00      	nop
 800d38c:	f3af 8000 	nop.w
 800d390:	54442d18 	.word	0x54442d18
 800d394:	3ff921fb 	.word	0x3ff921fb
 800d398:	33145c07 	.word	0x33145c07
 800d39c:	3c91a626 	.word	0x3c91a626
 800d3a0:	8800759c 	.word	0x8800759c
 800d3a4:	7e37e43c 	.word	0x7e37e43c
 800d3a8:	0dfdf709 	.word	0x0dfdf709
 800d3ac:	3f023de1 	.word	0x3f023de1
 800d3b0:	7501b288 	.word	0x7501b288
 800d3b4:	3f49efe0 	.word	0x3f49efe0
 800d3b8:	b5688f3b 	.word	0xb5688f3b
 800d3bc:	3fa48228 	.word	0x3fa48228
 800d3c0:	0e884455 	.word	0x0e884455
 800d3c4:	3fc9c155 	.word	0x3fc9c155
 800d3c8:	03eb6f7d 	.word	0x03eb6f7d
 800d3cc:	3fd4d612 	.word	0x3fd4d612
 800d3d0:	55555555 	.word	0x55555555
 800d3d4:	3fc55555 	.word	0x3fc55555
 800d3d8:	b12e9282 	.word	0xb12e9282
 800d3dc:	3fb3b8c5 	.word	0x3fb3b8c5
 800d3e0:	1b8d0159 	.word	0x1b8d0159
 800d3e4:	3fe6066c 	.word	0x3fe6066c
 800d3e8:	9c598ac8 	.word	0x9c598ac8
 800d3ec:	40002ae5 	.word	0x40002ae5
 800d3f0:	1c8a2d4b 	.word	0x1c8a2d4b
 800d3f4:	40033a27 	.word	0x40033a27
 800d3f8:	3fefffff 	.word	0x3fefffff
 800d3fc:	3fdfffff 	.word	0x3fdfffff
 800d400:	3ff00000 	.word	0x3ff00000
 800d404:	3fe00000 	.word	0x3fe00000
 800d408:	3fef3332 	.word	0x3fef3332
 800d40c:	ee10 2a10 	vmov	r2, s0
 800d410:	ee10 0a10 	vmov	r0, s0
 800d414:	465b      	mov	r3, fp
 800d416:	4659      	mov	r1, fp
 800d418:	f7f2 ff38 	bl	800028c <__adddf3>
 800d41c:	4632      	mov	r2, r6
 800d41e:	463b      	mov	r3, r7
 800d420:	ec41 0b19 	vmov	d9, r0, r1
 800d424:	ec51 0b18 	vmov	r0, r1, d8
 800d428:	f7f3 fa10 	bl	800084c <__aeabi_ddiv>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	ec51 0b19 	vmov	r0, r1, d9
 800d434:	f7f3 f8e0 	bl	80005f8 <__aeabi_dmul>
 800d438:	f04f 0800 	mov.w	r8, #0
 800d43c:	4606      	mov	r6, r0
 800d43e:	460f      	mov	r7, r1
 800d440:	4642      	mov	r2, r8
 800d442:	465b      	mov	r3, fp
 800d444:	4640      	mov	r0, r8
 800d446:	4659      	mov	r1, fp
 800d448:	f7f3 f8d6 	bl	80005f8 <__aeabi_dmul>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4620      	mov	r0, r4
 800d452:	4629      	mov	r1, r5
 800d454:	f7f2 ff18 	bl	8000288 <__aeabi_dsub>
 800d458:	4642      	mov	r2, r8
 800d45a:	4604      	mov	r4, r0
 800d45c:	460d      	mov	r5, r1
 800d45e:	465b      	mov	r3, fp
 800d460:	4650      	mov	r0, sl
 800d462:	4659      	mov	r1, fp
 800d464:	f7f2 ff12 	bl	800028c <__adddf3>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4620      	mov	r0, r4
 800d46e:	4629      	mov	r1, r5
 800d470:	f7f3 f9ec 	bl	800084c <__aeabi_ddiv>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	f7f2 ff08 	bl	800028c <__adddf3>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	a113      	add	r1, pc, #76	; (adr r1, 800d4d0 <__ieee754_asin+0x418>)
 800d482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d486:	f7f2 feff 	bl	8000288 <__aeabi_dsub>
 800d48a:	4602      	mov	r2, r0
 800d48c:	460b      	mov	r3, r1
 800d48e:	4630      	mov	r0, r6
 800d490:	4639      	mov	r1, r7
 800d492:	f7f2 fef9 	bl	8000288 <__aeabi_dsub>
 800d496:	4642      	mov	r2, r8
 800d498:	4604      	mov	r4, r0
 800d49a:	460d      	mov	r5, r1
 800d49c:	465b      	mov	r3, fp
 800d49e:	4640      	mov	r0, r8
 800d4a0:	4659      	mov	r1, fp
 800d4a2:	f7f2 fef3 	bl	800028c <__adddf3>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	a10b      	add	r1, pc, #44	; (adr r1, 800d4d8 <__ieee754_asin+0x420>)
 800d4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4b0:	f7f2 feea 	bl	8000288 <__aeabi_dsub>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	f7f2 fee4 	bl	8000288 <__aeabi_dsub>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	a104      	add	r1, pc, #16	; (adr r1, 800d4d8 <__ieee754_asin+0x420>)
 800d4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4ca:	e6dd      	b.n	800d288 <__ieee754_asin+0x1d0>
 800d4cc:	f3af 8000 	nop.w
 800d4d0:	33145c07 	.word	0x33145c07
 800d4d4:	3c91a626 	.word	0x3c91a626
 800d4d8:	54442d18 	.word	0x54442d18
 800d4dc:	3fe921fb 	.word	0x3fe921fb

0800d4e0 <__ieee754_atan2>:
 800d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e4:	ec57 6b11 	vmov	r6, r7, d1
 800d4e8:	4273      	negs	r3, r6
 800d4ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d668 <__ieee754_atan2+0x188>
 800d4ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d4f2:	4333      	orrs	r3, r6
 800d4f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d4f8:	4543      	cmp	r3, r8
 800d4fa:	ec51 0b10 	vmov	r0, r1, d0
 800d4fe:	ee11 5a10 	vmov	r5, s2
 800d502:	d80a      	bhi.n	800d51a <__ieee754_atan2+0x3a>
 800d504:	4244      	negs	r4, r0
 800d506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d50a:	4304      	orrs	r4, r0
 800d50c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d510:	4544      	cmp	r4, r8
 800d512:	ee10 9a10 	vmov	r9, s0
 800d516:	468e      	mov	lr, r1
 800d518:	d907      	bls.n	800d52a <__ieee754_atan2+0x4a>
 800d51a:	4632      	mov	r2, r6
 800d51c:	463b      	mov	r3, r7
 800d51e:	f7f2 feb5 	bl	800028c <__adddf3>
 800d522:	ec41 0b10 	vmov	d0, r0, r1
 800d526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d52a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d52e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d532:	4334      	orrs	r4, r6
 800d534:	d103      	bne.n	800d53e <__ieee754_atan2+0x5e>
 800d536:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d53a:	f000 b899 	b.w	800d670 <atan>
 800d53e:	17bc      	asrs	r4, r7, #30
 800d540:	f004 0402 	and.w	r4, r4, #2
 800d544:	ea53 0909 	orrs.w	r9, r3, r9
 800d548:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d54c:	d107      	bne.n	800d55e <__ieee754_atan2+0x7e>
 800d54e:	2c02      	cmp	r4, #2
 800d550:	d05f      	beq.n	800d612 <__ieee754_atan2+0x132>
 800d552:	2c03      	cmp	r4, #3
 800d554:	d1e5      	bne.n	800d522 <__ieee754_atan2+0x42>
 800d556:	a140      	add	r1, pc, #256	; (adr r1, 800d658 <__ieee754_atan2+0x178>)
 800d558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d55c:	e7e1      	b.n	800d522 <__ieee754_atan2+0x42>
 800d55e:	4315      	orrs	r5, r2
 800d560:	d106      	bne.n	800d570 <__ieee754_atan2+0x90>
 800d562:	f1be 0f00 	cmp.w	lr, #0
 800d566:	da5f      	bge.n	800d628 <__ieee754_atan2+0x148>
 800d568:	a13d      	add	r1, pc, #244	; (adr r1, 800d660 <__ieee754_atan2+0x180>)
 800d56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d56e:	e7d8      	b.n	800d522 <__ieee754_atan2+0x42>
 800d570:	4542      	cmp	r2, r8
 800d572:	d10f      	bne.n	800d594 <__ieee754_atan2+0xb4>
 800d574:	4293      	cmp	r3, r2
 800d576:	f104 34ff 	add.w	r4, r4, #4294967295
 800d57a:	d107      	bne.n	800d58c <__ieee754_atan2+0xac>
 800d57c:	2c02      	cmp	r4, #2
 800d57e:	d84c      	bhi.n	800d61a <__ieee754_atan2+0x13a>
 800d580:	4b33      	ldr	r3, [pc, #204]	; (800d650 <__ieee754_atan2+0x170>)
 800d582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d58a:	e7ca      	b.n	800d522 <__ieee754_atan2+0x42>
 800d58c:	2c02      	cmp	r4, #2
 800d58e:	d848      	bhi.n	800d622 <__ieee754_atan2+0x142>
 800d590:	4b30      	ldr	r3, [pc, #192]	; (800d654 <__ieee754_atan2+0x174>)
 800d592:	e7f6      	b.n	800d582 <__ieee754_atan2+0xa2>
 800d594:	4543      	cmp	r3, r8
 800d596:	d0e4      	beq.n	800d562 <__ieee754_atan2+0x82>
 800d598:	1a9b      	subs	r3, r3, r2
 800d59a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d59e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5a2:	da1e      	bge.n	800d5e2 <__ieee754_atan2+0x102>
 800d5a4:	2f00      	cmp	r7, #0
 800d5a6:	da01      	bge.n	800d5ac <__ieee754_atan2+0xcc>
 800d5a8:	323c      	adds	r2, #60	; 0x3c
 800d5aa:	db1e      	blt.n	800d5ea <__ieee754_atan2+0x10a>
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	f7f3 f94c 	bl	800084c <__aeabi_ddiv>
 800d5b4:	ec41 0b10 	vmov	d0, r0, r1
 800d5b8:	f7ff fc9a 	bl	800cef0 <fabs>
 800d5bc:	f000 f858 	bl	800d670 <atan>
 800d5c0:	ec51 0b10 	vmov	r0, r1, d0
 800d5c4:	2c01      	cmp	r4, #1
 800d5c6:	d013      	beq.n	800d5f0 <__ieee754_atan2+0x110>
 800d5c8:	2c02      	cmp	r4, #2
 800d5ca:	d015      	beq.n	800d5f8 <__ieee754_atan2+0x118>
 800d5cc:	2c00      	cmp	r4, #0
 800d5ce:	d0a8      	beq.n	800d522 <__ieee754_atan2+0x42>
 800d5d0:	a317      	add	r3, pc, #92	; (adr r3, 800d630 <__ieee754_atan2+0x150>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f7f2 fe57 	bl	8000288 <__aeabi_dsub>
 800d5da:	a317      	add	r3, pc, #92	; (adr r3, 800d638 <__ieee754_atan2+0x158>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	e014      	b.n	800d60c <__ieee754_atan2+0x12c>
 800d5e2:	a117      	add	r1, pc, #92	; (adr r1, 800d640 <__ieee754_atan2+0x160>)
 800d5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e8:	e7ec      	b.n	800d5c4 <__ieee754_atan2+0xe4>
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	e7e9      	b.n	800d5c4 <__ieee754_atan2+0xe4>
 800d5f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	e794      	b.n	800d522 <__ieee754_atan2+0x42>
 800d5f8:	a30d      	add	r3, pc, #52	; (adr r3, 800d630 <__ieee754_atan2+0x150>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 fe43 	bl	8000288 <__aeabi_dsub>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	a10c      	add	r1, pc, #48	; (adr r1, 800d638 <__ieee754_atan2+0x158>)
 800d608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d60c:	f7f2 fe3c 	bl	8000288 <__aeabi_dsub>
 800d610:	e787      	b.n	800d522 <__ieee754_atan2+0x42>
 800d612:	a109      	add	r1, pc, #36	; (adr r1, 800d638 <__ieee754_atan2+0x158>)
 800d614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d618:	e783      	b.n	800d522 <__ieee754_atan2+0x42>
 800d61a:	a10b      	add	r1, pc, #44	; (adr r1, 800d648 <__ieee754_atan2+0x168>)
 800d61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d620:	e77f      	b.n	800d522 <__ieee754_atan2+0x42>
 800d622:	2000      	movs	r0, #0
 800d624:	2100      	movs	r1, #0
 800d626:	e77c      	b.n	800d522 <__ieee754_atan2+0x42>
 800d628:	a105      	add	r1, pc, #20	; (adr r1, 800d640 <__ieee754_atan2+0x160>)
 800d62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d62e:	e778      	b.n	800d522 <__ieee754_atan2+0x42>
 800d630:	33145c07 	.word	0x33145c07
 800d634:	3ca1a626 	.word	0x3ca1a626
 800d638:	54442d18 	.word	0x54442d18
 800d63c:	400921fb 	.word	0x400921fb
 800d640:	54442d18 	.word	0x54442d18
 800d644:	3ff921fb 	.word	0x3ff921fb
 800d648:	54442d18 	.word	0x54442d18
 800d64c:	3fe921fb 	.word	0x3fe921fb
 800d650:	0800df68 	.word	0x0800df68
 800d654:	0800df80 	.word	0x0800df80
 800d658:	54442d18 	.word	0x54442d18
 800d65c:	c00921fb 	.word	0xc00921fb
 800d660:	54442d18 	.word	0x54442d18
 800d664:	bff921fb 	.word	0xbff921fb
 800d668:	7ff00000 	.word	0x7ff00000
 800d66c:	00000000 	.word	0x00000000

0800d670 <atan>:
 800d670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	ec55 4b10 	vmov	r4, r5, d0
 800d678:	4bc3      	ldr	r3, [pc, #780]	; (800d988 <atan+0x318>)
 800d67a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d67e:	429e      	cmp	r6, r3
 800d680:	46ab      	mov	fp, r5
 800d682:	dd18      	ble.n	800d6b6 <atan+0x46>
 800d684:	4bc1      	ldr	r3, [pc, #772]	; (800d98c <atan+0x31c>)
 800d686:	429e      	cmp	r6, r3
 800d688:	dc01      	bgt.n	800d68e <atan+0x1e>
 800d68a:	d109      	bne.n	800d6a0 <atan+0x30>
 800d68c:	b144      	cbz	r4, 800d6a0 <atan+0x30>
 800d68e:	4622      	mov	r2, r4
 800d690:	462b      	mov	r3, r5
 800d692:	4620      	mov	r0, r4
 800d694:	4629      	mov	r1, r5
 800d696:	f7f2 fdf9 	bl	800028c <__adddf3>
 800d69a:	4604      	mov	r4, r0
 800d69c:	460d      	mov	r5, r1
 800d69e:	e006      	b.n	800d6ae <atan+0x3e>
 800d6a0:	f1bb 0f00 	cmp.w	fp, #0
 800d6a4:	f300 8131 	bgt.w	800d90a <atan+0x29a>
 800d6a8:	a59b      	add	r5, pc, #620	; (adr r5, 800d918 <atan+0x2a8>)
 800d6aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6ae:	ec45 4b10 	vmov	d0, r4, r5
 800d6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	4bb6      	ldr	r3, [pc, #728]	; (800d990 <atan+0x320>)
 800d6b8:	429e      	cmp	r6, r3
 800d6ba:	dc14      	bgt.n	800d6e6 <atan+0x76>
 800d6bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d6c0:	429e      	cmp	r6, r3
 800d6c2:	dc0d      	bgt.n	800d6e0 <atan+0x70>
 800d6c4:	a396      	add	r3, pc, #600	; (adr r3, 800d920 <atan+0x2b0>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	ee10 0a10 	vmov	r0, s0
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	f7f2 fddc 	bl	800028c <__adddf3>
 800d6d4:	4baf      	ldr	r3, [pc, #700]	; (800d994 <atan+0x324>)
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f7f3 fa1e 	bl	8000b18 <__aeabi_dcmpgt>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1e6      	bne.n	800d6ae <atan+0x3e>
 800d6e0:	f04f 3aff 	mov.w	sl, #4294967295
 800d6e4:	e02b      	b.n	800d73e <atan+0xce>
 800d6e6:	f7ff fc03 	bl	800cef0 <fabs>
 800d6ea:	4bab      	ldr	r3, [pc, #684]	; (800d998 <atan+0x328>)
 800d6ec:	429e      	cmp	r6, r3
 800d6ee:	ec55 4b10 	vmov	r4, r5, d0
 800d6f2:	f300 80bf 	bgt.w	800d874 <atan+0x204>
 800d6f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d6fa:	429e      	cmp	r6, r3
 800d6fc:	f300 80a0 	bgt.w	800d840 <atan+0x1d0>
 800d700:	ee10 2a10 	vmov	r2, s0
 800d704:	ee10 0a10 	vmov	r0, s0
 800d708:	462b      	mov	r3, r5
 800d70a:	4629      	mov	r1, r5
 800d70c:	f7f2 fdbe 	bl	800028c <__adddf3>
 800d710:	4ba0      	ldr	r3, [pc, #640]	; (800d994 <atan+0x324>)
 800d712:	2200      	movs	r2, #0
 800d714:	f7f2 fdb8 	bl	8000288 <__aeabi_dsub>
 800d718:	2200      	movs	r2, #0
 800d71a:	4606      	mov	r6, r0
 800d71c:	460f      	mov	r7, r1
 800d71e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d722:	4620      	mov	r0, r4
 800d724:	4629      	mov	r1, r5
 800d726:	f7f2 fdb1 	bl	800028c <__adddf3>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	4630      	mov	r0, r6
 800d730:	4639      	mov	r1, r7
 800d732:	f7f3 f88b 	bl	800084c <__aeabi_ddiv>
 800d736:	f04f 0a00 	mov.w	sl, #0
 800d73a:	4604      	mov	r4, r0
 800d73c:	460d      	mov	r5, r1
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	4620      	mov	r0, r4
 800d744:	4629      	mov	r1, r5
 800d746:	f7f2 ff57 	bl	80005f8 <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4680      	mov	r8, r0
 800d750:	4689      	mov	r9, r1
 800d752:	f7f2 ff51 	bl	80005f8 <__aeabi_dmul>
 800d756:	a374      	add	r3, pc, #464	; (adr r3, 800d928 <atan+0x2b8>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	f7f2 ff4a 	bl	80005f8 <__aeabi_dmul>
 800d764:	a372      	add	r3, pc, #456	; (adr r3, 800d930 <atan+0x2c0>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	f7f2 fd8f 	bl	800028c <__adddf3>
 800d76e:	4632      	mov	r2, r6
 800d770:	463b      	mov	r3, r7
 800d772:	f7f2 ff41 	bl	80005f8 <__aeabi_dmul>
 800d776:	a370      	add	r3, pc, #448	; (adr r3, 800d938 <atan+0x2c8>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f2 fd86 	bl	800028c <__adddf3>
 800d780:	4632      	mov	r2, r6
 800d782:	463b      	mov	r3, r7
 800d784:	f7f2 ff38 	bl	80005f8 <__aeabi_dmul>
 800d788:	a36d      	add	r3, pc, #436	; (adr r3, 800d940 <atan+0x2d0>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	f7f2 fd7d 	bl	800028c <__adddf3>
 800d792:	4632      	mov	r2, r6
 800d794:	463b      	mov	r3, r7
 800d796:	f7f2 ff2f 	bl	80005f8 <__aeabi_dmul>
 800d79a:	a36b      	add	r3, pc, #428	; (adr r3, 800d948 <atan+0x2d8>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd74 	bl	800028c <__adddf3>
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	463b      	mov	r3, r7
 800d7a8:	f7f2 ff26 	bl	80005f8 <__aeabi_dmul>
 800d7ac:	a368      	add	r3, pc, #416	; (adr r3, 800d950 <atan+0x2e0>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd6b 	bl	800028c <__adddf3>
 800d7b6:	4642      	mov	r2, r8
 800d7b8:	464b      	mov	r3, r9
 800d7ba:	f7f2 ff1d 	bl	80005f8 <__aeabi_dmul>
 800d7be:	a366      	add	r3, pc, #408	; (adr r3, 800d958 <atan+0x2e8>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	4680      	mov	r8, r0
 800d7c6:	4689      	mov	r9, r1
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	4639      	mov	r1, r7
 800d7cc:	f7f2 ff14 	bl	80005f8 <__aeabi_dmul>
 800d7d0:	a363      	add	r3, pc, #396	; (adr r3, 800d960 <atan+0x2f0>)
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	f7f2 fd57 	bl	8000288 <__aeabi_dsub>
 800d7da:	4632      	mov	r2, r6
 800d7dc:	463b      	mov	r3, r7
 800d7de:	f7f2 ff0b 	bl	80005f8 <__aeabi_dmul>
 800d7e2:	a361      	add	r3, pc, #388	; (adr r3, 800d968 <atan+0x2f8>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	f7f2 fd4e 	bl	8000288 <__aeabi_dsub>
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	f7f2 ff02 	bl	80005f8 <__aeabi_dmul>
 800d7f4:	a35e      	add	r3, pc, #376	; (adr r3, 800d970 <atan+0x300>)
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	f7f2 fd45 	bl	8000288 <__aeabi_dsub>
 800d7fe:	4632      	mov	r2, r6
 800d800:	463b      	mov	r3, r7
 800d802:	f7f2 fef9 	bl	80005f8 <__aeabi_dmul>
 800d806:	a35c      	add	r3, pc, #368	; (adr r3, 800d978 <atan+0x308>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	f7f2 fd3c 	bl	8000288 <__aeabi_dsub>
 800d810:	4632      	mov	r2, r6
 800d812:	463b      	mov	r3, r7
 800d814:	f7f2 fef0 	bl	80005f8 <__aeabi_dmul>
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	4640      	mov	r0, r8
 800d81e:	4649      	mov	r1, r9
 800d820:	f7f2 fd34 	bl	800028c <__adddf3>
 800d824:	4622      	mov	r2, r4
 800d826:	462b      	mov	r3, r5
 800d828:	f7f2 fee6 	bl	80005f8 <__aeabi_dmul>
 800d82c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	d14b      	bne.n	800d8ce <atan+0x25e>
 800d836:	4620      	mov	r0, r4
 800d838:	4629      	mov	r1, r5
 800d83a:	f7f2 fd25 	bl	8000288 <__aeabi_dsub>
 800d83e:	e72c      	b.n	800d69a <atan+0x2a>
 800d840:	ee10 0a10 	vmov	r0, s0
 800d844:	4b53      	ldr	r3, [pc, #332]	; (800d994 <atan+0x324>)
 800d846:	2200      	movs	r2, #0
 800d848:	4629      	mov	r1, r5
 800d84a:	f7f2 fd1d 	bl	8000288 <__aeabi_dsub>
 800d84e:	4b51      	ldr	r3, [pc, #324]	; (800d994 <atan+0x324>)
 800d850:	4606      	mov	r6, r0
 800d852:	460f      	mov	r7, r1
 800d854:	2200      	movs	r2, #0
 800d856:	4620      	mov	r0, r4
 800d858:	4629      	mov	r1, r5
 800d85a:	f7f2 fd17 	bl	800028c <__adddf3>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4630      	mov	r0, r6
 800d864:	4639      	mov	r1, r7
 800d866:	f7f2 fff1 	bl	800084c <__aeabi_ddiv>
 800d86a:	f04f 0a01 	mov.w	sl, #1
 800d86e:	4604      	mov	r4, r0
 800d870:	460d      	mov	r5, r1
 800d872:	e764      	b.n	800d73e <atan+0xce>
 800d874:	4b49      	ldr	r3, [pc, #292]	; (800d99c <atan+0x32c>)
 800d876:	429e      	cmp	r6, r3
 800d878:	da1d      	bge.n	800d8b6 <atan+0x246>
 800d87a:	ee10 0a10 	vmov	r0, s0
 800d87e:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <atan+0x330>)
 800d880:	2200      	movs	r2, #0
 800d882:	4629      	mov	r1, r5
 800d884:	f7f2 fd00 	bl	8000288 <__aeabi_dsub>
 800d888:	4b45      	ldr	r3, [pc, #276]	; (800d9a0 <atan+0x330>)
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	2200      	movs	r2, #0
 800d890:	4620      	mov	r0, r4
 800d892:	4629      	mov	r1, r5
 800d894:	f7f2 feb0 	bl	80005f8 <__aeabi_dmul>
 800d898:	4b3e      	ldr	r3, [pc, #248]	; (800d994 <atan+0x324>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	f7f2 fcf6 	bl	800028c <__adddf3>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	f7f2 ffd0 	bl	800084c <__aeabi_ddiv>
 800d8ac:	f04f 0a02 	mov.w	sl, #2
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	460d      	mov	r5, r1
 800d8b4:	e743      	b.n	800d73e <atan+0xce>
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	ee10 2a10 	vmov	r2, s0
 800d8bc:	4939      	ldr	r1, [pc, #228]	; (800d9a4 <atan+0x334>)
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f7f2 ffc4 	bl	800084c <__aeabi_ddiv>
 800d8c4:	f04f 0a03 	mov.w	sl, #3
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	e737      	b.n	800d73e <atan+0xce>
 800d8ce:	4b36      	ldr	r3, [pc, #216]	; (800d9a8 <atan+0x338>)
 800d8d0:	4e36      	ldr	r6, [pc, #216]	; (800d9ac <atan+0x33c>)
 800d8d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	f7f2 fcd5 	bl	8000288 <__aeabi_dsub>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	f7f2 fcd1 	bl	8000288 <__aeabi_dsub>
 800d8e6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d8f2:	f7f2 fcc9 	bl	8000288 <__aeabi_dsub>
 800d8f6:	f1bb 0f00 	cmp.w	fp, #0
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	460d      	mov	r5, r1
 800d8fe:	f6bf aed6 	bge.w	800d6ae <atan+0x3e>
 800d902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d906:	461d      	mov	r5, r3
 800d908:	e6d1      	b.n	800d6ae <atan+0x3e>
 800d90a:	a51d      	add	r5, pc, #116	; (adr r5, 800d980 <atan+0x310>)
 800d90c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d910:	e6cd      	b.n	800d6ae <atan+0x3e>
 800d912:	bf00      	nop
 800d914:	f3af 8000 	nop.w
 800d918:	54442d18 	.word	0x54442d18
 800d91c:	bff921fb 	.word	0xbff921fb
 800d920:	8800759c 	.word	0x8800759c
 800d924:	7e37e43c 	.word	0x7e37e43c
 800d928:	e322da11 	.word	0xe322da11
 800d92c:	3f90ad3a 	.word	0x3f90ad3a
 800d930:	24760deb 	.word	0x24760deb
 800d934:	3fa97b4b 	.word	0x3fa97b4b
 800d938:	a0d03d51 	.word	0xa0d03d51
 800d93c:	3fb10d66 	.word	0x3fb10d66
 800d940:	c54c206e 	.word	0xc54c206e
 800d944:	3fb745cd 	.word	0x3fb745cd
 800d948:	920083ff 	.word	0x920083ff
 800d94c:	3fc24924 	.word	0x3fc24924
 800d950:	5555550d 	.word	0x5555550d
 800d954:	3fd55555 	.word	0x3fd55555
 800d958:	2c6a6c2f 	.word	0x2c6a6c2f
 800d95c:	bfa2b444 	.word	0xbfa2b444
 800d960:	52defd9a 	.word	0x52defd9a
 800d964:	3fadde2d 	.word	0x3fadde2d
 800d968:	af749a6d 	.word	0xaf749a6d
 800d96c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d970:	fe231671 	.word	0xfe231671
 800d974:	3fbc71c6 	.word	0x3fbc71c6
 800d978:	9998ebc4 	.word	0x9998ebc4
 800d97c:	3fc99999 	.word	0x3fc99999
 800d980:	54442d18 	.word	0x54442d18
 800d984:	3ff921fb 	.word	0x3ff921fb
 800d988:	440fffff 	.word	0x440fffff
 800d98c:	7ff00000 	.word	0x7ff00000
 800d990:	3fdbffff 	.word	0x3fdbffff
 800d994:	3ff00000 	.word	0x3ff00000
 800d998:	3ff2ffff 	.word	0x3ff2ffff
 800d99c:	40038000 	.word	0x40038000
 800d9a0:	3ff80000 	.word	0x3ff80000
 800d9a4:	bff00000 	.word	0xbff00000
 800d9a8:	0800dfb8 	.word	0x0800dfb8
 800d9ac:	0800df98 	.word	0x0800df98

0800d9b0 <_init>:
 800d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b2:	bf00      	nop
 800d9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b6:	bc08      	pop	{r3}
 800d9b8:	469e      	mov	lr, r3
 800d9ba:	4770      	bx	lr

0800d9bc <_fini>:
 800d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9be:	bf00      	nop
 800d9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9c2:	bc08      	pop	{r3}
 800d9c4:	469e      	mov	lr, r3
 800d9c6:	4770      	bx	lr
