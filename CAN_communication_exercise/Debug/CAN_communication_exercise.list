
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800d948  0800d948  0001d948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df00  0800df00  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800df00  0800df00  0001df00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df08  0800df08  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df08  0800df08  0001df08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df0c  0800df0c  0001df0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800df10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
 10 .bss          00001e80  200002d8  200002d8  000202d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20002158  20002158  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015c3c  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bdf  00000000  00000000  00035f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b0  00000000  00000000  00039b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c8c  00000000  00000000  0003ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002502a  00000000  00000000  0003b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000171b0  00000000  00000000  000608ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb6ce  00000000  00000000  00077a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058b8  00000000  00000000  0014314c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00148a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d930 	.word	0x0800d930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800d930 	.word	0x0800d930

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9a6 	b.w	8000efc <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff83 	bl	8000adc <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcf9 	bl	80005f8 <__aeabi_dmul>
 8000c06:	f7ff ffa7 	bl	8000b58 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc7a 	bl	8000504 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fcf0 	bl	80005f8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb32 	bl	8000288 <__aeabi_dsub>
 8000c24:	f7ff ff98 	bl	8000b58 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9e08      	ldr	r6, [sp, #32]
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460f      	mov	r7, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14a      	bne.n	8000cda <__udivmoddi4+0xa6>
 8000c44:	428a      	cmp	r2, r1
 8000c46:	4694      	mov	ip, r2
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0xe2>
 8000c4a:	fab2 f382 	clz	r3, r2
 8000c4e:	b143      	cbz	r3, 8000c62 <__udivmoddi4+0x2e>
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	409c      	lsls	r4, r3
 8000c62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c66:	fa1f f58c 	uxth.w	r5, ip
 8000c6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c6e:	0c22      	lsrs	r2, r4, #16
 8000c70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c78:	fb01 f005 	mul.w	r0, r1, r5
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c80:	eb1c 0202 	adds.w	r2, ip, r2
 8000c84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c88:	f080 811c 	bcs.w	8000ec4 <__udivmoddi4+0x290>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f240 8119 	bls.w	8000ec4 <__udivmoddi4+0x290>
 8000c92:	3902      	subs	r1, #2
 8000c94:	4462      	add	r2, ip
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca6:	fb00 f505 	mul.w	r5, r0, r5
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x90>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x294>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x294>
 8000cc0:	4464      	add	r4, ip
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc8:	1b64      	subs	r4, r4, r5
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b11e      	cbz	r6, 8000cd6 <__udivmoddi4+0xa2>
 8000cce:	40dc      	lsrs	r4, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0xbc>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f000 80ed 	beq.w	8000ebe <__udivmoddi4+0x28a>
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cea:	4608      	mov	r0, r1
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf0:	fab3 f183 	clz	r1, r3
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d149      	bne.n	8000d8c <__udivmoddi4+0x158>
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	d302      	bcc.n	8000d02 <__udivmoddi4+0xce>
 8000cfc:	4282      	cmp	r2, r0
 8000cfe:	f200 80f8 	bhi.w	8000ef2 <__udivmoddi4+0x2be>
 8000d02:	1a84      	subs	r4, r0, r2
 8000d04:	eb65 0203 	sbc.w	r2, r5, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d0e2      	beq.n	8000cd6 <__udivmoddi4+0xa2>
 8000d10:	e9c6 4700 	strd	r4, r7, [r6]
 8000d14:	e7df      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000d16:	b902      	cbnz	r2, 8000d1a <__udivmoddi4+0xe6>
 8000d18:	deff      	udf	#255	; 0xff
 8000d1a:	fab2 f382 	clz	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x210>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d34:	fb07 2015 	mls	r0, r7, r5, r2
 8000d38:	0c22      	lsrs	r2, r4, #16
 8000d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d3e:	fb0e f005 	mul.w	r0, lr, r5
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d46:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x122>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2b8>
 8000d56:	4645      	mov	r5, r8
 8000d58:	1a12      	subs	r2, r2, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d60:	fb07 2210 	mls	r2, r7, r0, r2
 8000d64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x14e>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x14c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2c2>
 8000d80:	4610      	mov	r0, r2
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8a:	e79f      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d8c:	f1c1 0720 	rsb	r7, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000da2:	40fd      	lsrs	r5, r7
 8000da4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da8:	4323      	orrs	r3, r4
 8000daa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	fb09 5518 	mls	r5, r9, r8, r5
 8000db6:	0c1c      	lsrs	r4, r3, #16
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b0>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4464      	add	r4, ip
 8000de4:	1b64      	subs	r4, r4, r5
 8000de6:	b29d      	uxth	r5, r3
 8000de8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dec:	fb09 4413 	mls	r4, r9, r3, r4
 8000df0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1da>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	4464      	add	r4, ip
 8000e0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e12:	fba3 9502 	umull	r9, r5, r3, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46ae      	mov	lr, r5
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x29c>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x298>
 8000e24:	b156      	cbz	r6, 8000e3c <__udivmoddi4+0x208>
 8000e26:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e32:	40ca      	lsrs	r2, r1
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	4317      	orrs	r7, r2
 8000e38:	e9c6 7400 	strd	r7, r4, [r6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	f1c3 0120 	rsb	r1, r3, #32
 8000e48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e50:	fa25 f101 	lsr.w	r1, r5, r1
 8000e54:	409d      	lsls	r5, r3
 8000e56:	432a      	orrs	r2, r5
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e64:	fb07 1510 	mls	r5, r7, r0, r1
 8000e68:	0c11      	lsrs	r1, r2, #16
 8000e6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e72:	428d      	cmp	r5, r1
 8000e74:	fa04 f403 	lsl.w	r4, r4, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x258>
 8000e7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e84:	428d      	cmp	r5, r1
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1b49      	subs	r1, r1, r5
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e94:	fb07 1115 	mls	r1, r7, r5, r1
 8000e98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x282>
 8000ea4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2a8>
 8000eae:	4291      	cmp	r1, r2
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2a8>
 8000eb2:	3d02      	subs	r5, #2
 8000eb4:	4462      	add	r2, ip
 8000eb6:	1a52      	subs	r2, r2, r1
 8000eb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0xfc>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	e6e6      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x90>
 8000ecc:	4548      	cmp	r0, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f0>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f0>
 8000edc:	4645      	mov	r5, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x282>
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1da>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x258>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b0>
 8000eec:	3d02      	subs	r5, #2
 8000eee:	4462      	add	r2, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x124>
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e70a      	b.n	8000d0c <__udivmoddi4+0xd8>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x14e>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <CRC_>:
 *      Author: IVI6SF
 */

#include "GNSS.h"

uint8_t CRC_(const uint8_t* str) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < strlen((char*)str); i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	e009      	b.n	8000f26 <CRC_+0x26>
        checksum ^= (uint8_t)str[i];
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4053      	eors	r3, r2
 8000f1e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < strlen((char*)str); i++) {
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff f952 	bl	80001d0 <strlen>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8ee      	bhi.n	8000f12 <CRC_+0x12>
    }

    return checksum;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <xyz_to_wgs84>:


void xyz_to_wgs84(double x, double y, double z, double *latitude, double *longitude) {
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0b06 	vstr	d0, [r7, #24]
 8000f4a:	ed87 1b04 	vstr	d1, [r7, #16]
 8000f4e:	ed87 2b02 	vstr	d2, [r7, #8]
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    double r = sqrt(x*x + y*y + z*z);
 8000f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f5e:	f7ff fb4b 	bl	80005f8 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4614      	mov	r4, r2
 8000f68:	461d      	mov	r5, r3
 8000f6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f72:	f7ff fb41 	bl	80005f8 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff f985 	bl	800028c <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f92:	f7ff fb31 	bl	80005f8 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff f975 	bl	800028c <__adddf3>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	ec43 2b17 	vmov	d7, r2, r3
 8000faa:	eeb0 0a47 	vmov.f32	s0, s14
 8000fae:	eef0 0a67 	vmov.f32	s1, s15
 8000fb2:	f00b ff31 	bl	800ce18 <sqrt>
 8000fb6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    double lon = atan2(y, x);
 8000fba:	ed97 1b06 	vldr	d1, [r7, #24]
 8000fbe:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fc2:	f00b ff27 	bl	800ce14 <atan2>
 8000fc6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    double lat = asin(z / r);
 8000fca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd2:	f7ff fc3b 	bl	800084c <__aeabi_ddiv>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ec43 2b17 	vmov	d7, r2, r3
 8000fde:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe2:	eef0 0a67 	vmov.f32	s1, s15
 8000fe6:	f00b fee1 	bl	800cdac <asin>
 8000fea:	ed87 0b08 	vstr	d0, [r7, #32]

    *latitude = lat * 180.0 / M_PI;  // Convert to degrees
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <xyz_to_wgs84+0x118>)
 8000ff4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ff8:	f7ff fafe 	bl	80005f8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a312      	add	r3, pc, #72	; (adr r3, 8001050 <xyz_to_wgs84+0x110>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fc1f 	bl	800084c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
    *longitude = lon * 180.0 / M_PI; // Convert to degrees
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <xyz_to_wgs84+0x118>)
 800101e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	a308      	add	r3, pc, #32	; (adr r3, 8001050 <xyz_to_wgs84+0x110>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc0a 	bl	800084c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001042:	bf00      	nop
 8001044:	3738      	adds	r7, #56	; 0x38
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	54442d18 	.word	0x54442d18
 8001054:	400921fb 	.word	0x400921fb
 8001058:	40668000 	.word	0x40668000
 800105c:	00000000 	.word	0x00000000

08001060 <GNSS_Get_Coords>:


void GNSS_Get_Coords(UART_HandleTypeDef *huart, uint8_t size, uint32_t* lat, uint32_t* lon){
 8001060:	b580      	push	{r7, lr}
 8001062:	ed2d 8b04 	vpush	{d8-d9}
 8001066:	b098      	sub	sp, #96	; 0x60
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	72fb      	strb	r3, [r7, #11]
	  uint8_t data[64] = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	223c      	movs	r2, #60	; 0x3c
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f009 fd74 	bl	800ab6e <memset>

	  GNSS_Transmit(huart, (uint8_t*)MSG2);
 8001086:	4948      	ldr	r1, [pc, #288]	; (80011a8 <GNSS_Get_Coords+0x148>)
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f895 	bl	80011b8 <GNSS_Transmit>

	  while(1){
		  HAL_UART_Receive_STR(huart, data, size, 50);
 800108e:	7afa      	ldrb	r2, [r7, #11]
 8001090:	f107 0120 	add.w	r1, r7, #32
 8001094:	2332      	movs	r3, #50	; 0x32
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 fa36 	bl	8001508 <HAL_UART_Receive_STR>
//		  strcpy((char*)data, (char*)"$PMTK558,4311951.2,1863684.4,4300899.3,59.5*05\r\n");
		  if(strstr((char*) data, "$PMTK558") != NULL){
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4942      	ldr	r1, [pc, #264]	; (80011ac <GNSS_Get_Coords+0x14c>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 fdda 	bl	800ac5c <strstr>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d111      	bne.n	80010d2 <GNSS_Get_Coords+0x72>
			  break;
		  }else if(strstr((char*) data, "0.0,0.0,") != NULL){
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	493f      	ldr	r1, [pc, #252]	; (80011b0 <GNSS_Get_Coords+0x150>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f009 fdd1 	bl	800ac5c <strstr>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0e6      	beq.n	800108e <GNSS_Get_Coords+0x2e>
			  *lat = -1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f04f 32ff 	mov.w	r2, #4294967295
 80010c6:	601a      	str	r2, [r3, #0]
			  *lon = -1;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e05e      	b.n	8001190 <GNSS_Get_Coords+0x130>
			  break;
 80010d2:	bf00      	nop
			  return;
		  }
	  }

	  strtok((char*)data, ",");
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4936      	ldr	r1, [pc, #216]	; (80011b4 <GNSS_Get_Coords+0x154>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f009 fd62 	bl	800aba4 <strtok>

	  double lat_, lon_;

	  xyz_to_wgs84(atof(strtok(NULL, ",")) , atof(strtok(NULL, ",")), atof(strtok(NULL, ",")), &lat_, &lon_);
 80010e0:	4934      	ldr	r1, [pc, #208]	; (80011b4 <GNSS_Get_Coords+0x154>)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f009 fd5e 	bl	800aba4 <strtok>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f008 fe0e 	bl	8009d0c <atof>
 80010f0:	eeb0 8a40 	vmov.f32	s16, s0
 80010f4:	eef0 8a60 	vmov.f32	s17, s1
 80010f8:	492e      	ldr	r1, [pc, #184]	; (80011b4 <GNSS_Get_Coords+0x154>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f009 fd52 	bl	800aba4 <strtok>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f008 fe02 	bl	8009d0c <atof>
 8001108:	eeb0 9a40 	vmov.f32	s18, s0
 800110c:	eef0 9a60 	vmov.f32	s19, s1
 8001110:	4928      	ldr	r1, [pc, #160]	; (80011b4 <GNSS_Get_Coords+0x154>)
 8001112:	2000      	movs	r0, #0
 8001114:	f009 fd46 	bl	800aba4 <strtok>
 8001118:	4603      	mov	r3, r0
 800111a:	4618      	mov	r0, r3
 800111c:	f008 fdf6 	bl	8009d0c <atof>
 8001120:	eeb0 7a40 	vmov.f32	s14, s0
 8001124:	eef0 7a60 	vmov.f32	s15, s1
 8001128:	f107 0210 	add.w	r2, r7, #16
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	eeb0 2a47 	vmov.f32	s4, s14
 8001138:	eef0 2a67 	vmov.f32	s5, s15
 800113c:	eeb0 1a49 	vmov.f32	s2, s18
 8001140:	eef0 1a69 	vmov.f32	s3, s19
 8001144:	eeb0 0a48 	vmov.f32	s0, s16
 8001148:	eef0 0a68 	vmov.f32	s1, s17
 800114c:	f7ff fef8 	bl	8000f40 <xyz_to_wgs84>

	  *lat = (uint32_t)(lat_*1000000);
 8001150:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001154:	a312      	add	r3, pc, #72	; (adr r3, 80011a0 <GNSS_Get_Coords+0x140>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fa4d 	bl	80005f8 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fcf7 	bl	8000b58 <__aeabi_d2uiz>
 800116a:	4602      	mov	r2, r0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]
	  *lon = (uint32_t)(lon_*1000000);
 8001170:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001174:	a30a      	add	r3, pc, #40	; (adr r3, 80011a0 <GNSS_Get_Coords+0x140>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa3d 	bl	80005f8 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fce7 	bl	8000b58 <__aeabi_d2uiz>
 800118a:	4602      	mov	r2, r0
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	3760      	adds	r7, #96	; 0x60
 8001192:	46bd      	mov	sp, r7
 8001194:	ecbd 8b04 	vpop	{d8-d9}
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	00000000 	.word	0x00000000
 80011a4:	412e8480 	.word	0x412e8480
 80011a8:	0800d948 	.word	0x0800d948
 80011ac:	0800d950 	.word	0x0800d950
 80011b0:	0800d95c 	.word	0x0800d95c
 80011b4:	0800d968 	.word	0x0800d968

080011b8 <GNSS_Transmit>:

void GNSS_Transmit(UART_HandleTypeDef *huart, uint8_t* msg){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b092      	sub	sp, #72	; 0x48
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	  uint8_t req[64] = {0};
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	223c      	movs	r2, #60	; 0x3c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f009 fccd 	bl	800ab6e <memset>
	  sprintf((char*)req, "$%s*%X\r\n", msg, CRC_((uint8_t*)msg));
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7ff fe93 	bl	8000f00 <CRC_>
 80011da:	4603      	mov	r3, r0
 80011dc:	f107 0008 	add.w	r0, r7, #8
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	490a      	ldr	r1, [pc, #40]	; (800120c <GNSS_Transmit+0x54>)
 80011e4:	f009 fc60 	bl	800aaa8 <siprintf>
	  HAL_UART_Transmit(huart, req, strlen((char*)req), 1000);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7fe ffef 	bl	80001d0 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0108 	add.w	r1, r7, #8
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f003 fbbb 	bl	800497a <HAL_UART_Transmit>
}
 8001204:	bf00      	nop
 8001206:	3748      	adds	r7, #72	; 0x48
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0800d96c 	.word	0x0800d96c

08001210 <AT_Send>:
 *      Author: IVI6SF
 */

#include "LoRa.h"

void AT_Send(UART_HandleTypeDef *huart, uint8_t* data, uint8_t Chnl){
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	71fb      	strb	r3, [r7, #7]

	uint8_t msg[64] = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	223c      	movs	r2, #60	; 0x3c
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f009 fc9f 	bl	800ab6e <memset>
	sprintf((char*)msg, "AT+SEND=%d:0:%s\n", Chnl, (char*)data);
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	f107 0010 	add.w	r0, r7, #16
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	490a      	ldr	r1, [pc, #40]	; (8001264 <AT_Send+0x54>)
 800123a:	f009 fc35 	bl	800aaa8 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen((char*)msg), 1000);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4618      	mov	r0, r3
 8001244:	f7fe ffc4 	bl	80001d0 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	f107 0110 	add.w	r1, r7, #16
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f003 fb90 	bl	800497a <HAL_UART_Transmit>

}
 800125a:	bf00      	nop
 800125c:	3750      	adds	r7, #80	; 0x50
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d978 	.word	0x0800d978

08001268 <AT_Join>:

void AT_Join(UART_HandleTypeDef *huart){
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	; 0x50
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	//Reset teh LoRa E5 module
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001276:	4838      	ldr	r0, [pc, #224]	; (8001358 <AT_Join+0xf0>)
 8001278:	f001 fc04 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001282:	4835      	ldr	r0, [pc, #212]	; (8001358 <AT_Join+0xf0>)
 8001284:	f001 fbfe 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001288:	20c8      	movs	r0, #200	; 0xc8
 800128a:	f000 fd3d 	bl	8001d08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001294:	4830      	ldr	r0, [pc, #192]	; (8001358 <AT_Join+0xf0>)
 8001296:	f001 fbf5 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a0:	482d      	ldr	r0, [pc, #180]	; (8001358 <AT_Join+0xf0>)
 80012a2:	f001 fbef 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f000 fd2e 	bl	8001d08 <HAL_Delay>

	//Start JOIN
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b2:	4829      	ldr	r0, [pc, #164]	; (8001358 <AT_Join+0xf0>)
 80012b4:	f001 fbe6 	bl	8002a84 <HAL_GPIO_WritePin>
	uint8_t msg[64] = {0};
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	223c      	movs	r2, #60	; 0x3c
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f009 fc52 	bl	800ab6e <memset>
	uint32_t tick = HAL_GetTick();
 80012ca:	f000 fd11 	bl	8001cf0 <HAL_GetTick>
 80012ce:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 80012d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d4:	220a      	movs	r2, #10
 80012d6:	4921      	ldr	r1, [pc, #132]	; (800135c <AT_Join+0xf4>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f003 fb4e 	bl	800497a <HAL_UART_Transmit>
	while(strstr((char*) msg, "JOINED") == NULL){
 80012de:	e022      	b.n	8001326 <AT_Join+0xbe>
		if(HAL_GetTick() - tick >= 10000 || strstr((char*) msg, "FAILED") != NULL){
 80012e0:	f000 fd06 	bl	8001cf0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d808      	bhi.n	8001304 <AT_Join+0x9c>
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	491a      	ldr	r1, [pc, #104]	; (8001360 <AT_Join+0xf8>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 fcaf 	bl	800ac5c <strstr>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <AT_Join+0xb0>
			tick = HAL_GetTick();
 8001304:	f000 fcf4 	bl	8001cf0 <HAL_GetTick>
 8001308:	64f8      	str	r0, [r7, #76]	; 0x4c
			HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	220a      	movs	r2, #10
 8001310:	4912      	ldr	r1, [pc, #72]	; (800135c <AT_Join+0xf4>)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f003 fb31 	bl	800497a <HAL_UART_Transmit>
		}
		HAL_UART_Receive_STR(huart, msg, 64, 50);
 8001318:	f107 010c 	add.w	r1, r7, #12
 800131c:	2332      	movs	r3, #50	; 0x32
 800131e:	2240      	movs	r2, #64	; 0x40
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f8f1 	bl	8001508 <HAL_UART_Receive_STR>
	while(strstr((char*) msg, "JOINED") == NULL){
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <AT_Join+0xfc>)
 800132c:	4618      	mov	r0, r3
 800132e:	f009 fc95 	bl	800ac5c <strstr>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0d3      	beq.n	80012e0 <AT_Join+0x78>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <AT_Join+0xf0>)
 8001340:	f001 fba0 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <AT_Join+0xf0>)
 800134c:	f001 fb9a 	bl	8002a84 <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	; 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40020c00 	.word	0x40020c00
 800135c:	0800d98c 	.word	0x0800d98c
 8001360:	0800d998 	.word	0x0800d998
 8001364:	0800d9a0 	.word	0x0800d9a0

08001368 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b093      	sub	sp, #76	; 0x4c
 800136c:	af08      	add	r7, sp, #32
 800136e:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b01      	cmp	r3, #1
 8001378:	d141      	bne.n	80013fe <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001394:	2100      	movs	r1, #0
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001398:	f000 fcda 	bl	8001d50 <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80013a2:	d102      	bne.n	80013aa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	469c      	mov	ip, r3
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	4618      	mov	r0, r3
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013c0:	78db      	ldrb	r3, [r3, #3]
 80013c2:	461c      	mov	r4, r3
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013cc:	795b      	ldrb	r3, [r3, #5]
 80013ce:	461e      	mov	r6, r3
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013d8:	79db      	ldrb	r3, [r3, #7]
 80013da:	9306      	str	r3, [sp, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	9305      	str	r3, [sp, #20]
 80013e0:	9604      	str	r6, [sp, #16]
 80013e2:	9503      	str	r5, [sp, #12]
 80013e4:	9402      	str	r4, [sp, #8]
 80013e6:	9001      	str	r0, [sp, #4]
 80013e8:	9100      	str	r1, [sp, #0]
 80013ea:	4663      	mov	r3, ip
 80013ec:	490a      	ldr	r1, [pc, #40]	; (8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80013ee:	480b      	ldr	r0, [pc, #44]	; (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80013f0:	f009 fb5a 	bl	800aaa8 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80013f8:	cb03      	ldmia	r3!, {r0, r1}
 80013fa:	6010      	str	r0, [r2, #0]
 80013fc:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 80013fe:	bf00      	nop
 8001400:	372c      	adds	r7, #44	; 0x2c
 8001402:	46bd      	mov	sp, r7
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	bf00      	nop
 8001408:	200003ef 	.word	0x200003ef
 800140c:	200002f4 	.word	0x200002f4
 8001410:	2000033c 	.word	0x2000033c
 8001414:	200003ee 	.word	0x200003ee
 8001418:	0800d9a8 	.word	0x0800d9a8
 800141c:	200002fc 	.word	0x200002fc
 8001420:	200003f0 	.word	0x200003f0

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800142a:	f000 fbfb 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142e:	f000 f899 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001432:	f000 f955 	bl	80016e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001436:	f007 ff1f 	bl	8009278 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800143a:	f000 f927 	bl	800168c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800143e:	f000 f8fb 	bl	8001638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8001442:	f000 f845 	bl	80014d0 <HODL_Till_BTN>

  // **Full cold start**
  GNSS_Transmit(&huart3, (uint8_t*)"PMTK104");
 8001446:	491d      	ldr	r1, [pc, #116]	; (80014bc <main+0x98>)
 8001448:	481d      	ldr	r0, [pc, #116]	; (80014c0 <main+0x9c>)
 800144a:	f7ff feb5 	bl	80011b8 <GNSS_Transmit>

//  Auto_Baudrate_Setup(&hcan1, PRE);
  AT_Join(&huart2);
 800144e:	481d      	ldr	r0, [pc, #116]	; (80014c4 <main+0xa0>)
 8001450:	f7ff ff0a 	bl	8001268 <AT_Join>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// **Disable Periodic NMEA**
  GNSS_Transmit(&huart3, (uint8_t*)MSG);
 8001454:	491c      	ldr	r1, [pc, #112]	; (80014c8 <main+0xa4>)
 8001456:	481a      	ldr	r0, [pc, #104]	; (80014c0 <main+0x9c>)
 8001458:	f7ff feae 	bl	80011b8 <GNSS_Transmit>

  HAL_Delay(50);
 800145c:	2032      	movs	r0, #50	; 0x32
 800145e:	f000 fc53 	bl	8001d08 <HAL_Delay>

  while (1)
  {
	  uint32_t lat, lon = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
	  GNSS_Get_Coords(&huart3, 64, &lat, &lon);
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <main+0x9c>)
 8001472:	f7ff fdf5 	bl	8001060 <GNSS_Get_Coords>

	  if(lat > 0 && lon > 0){
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	2b00      	cmp	r3, #0
 800147a:	d019      	beq.n	80014b0 <main+0x8c>
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d016      	beq.n	80014b0 <main+0x8c>
		  uint8_t data[32] = {0};
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]
		  sprintf((char*)data, "%lX%lX", lat, lon);
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	4638      	mov	r0, r7
 800149e:	490b      	ldr	r1, [pc, #44]	; (80014cc <main+0xa8>)
 80014a0:	f009 fb02 	bl	800aaa8 <siprintf>

		  AT_Send(&huart2, data, 1);
 80014a4:	463b      	mov	r3, r7
 80014a6:	2201      	movs	r2, #1
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <main+0xa0>)
 80014ac:	f7ff feb0 	bl	8001210 <AT_Send>
	  }

	  HAL_Delay(500);
 80014b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b4:	f000 fc28 	bl	8001d08 <HAL_Delay>
  {
 80014b8:	e7d3      	b.n	8001462 <main+0x3e>
 80014ba:	bf00      	nop
 80014bc:	0800d9e0 	.word	0x0800d9e0
 80014c0:	200003a8 	.word	0x200003a8
 80014c4:	20000364 	.word	0x20000364
 80014c8:	0800d9e8 	.word	0x0800d9e8
 80014cc:	0800da18 	.word	0x0800da18

080014d0 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80014d4:	e005      	b.n	80014e2 <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <HODL_Till_BTN+0x30>)
 80014de:	f001 fad1 	bl	8002a84 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80014e2:	2101      	movs	r1, #1
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <HODL_Till_BTN+0x34>)
 80014e6:	f001 fab5 	bl	8002a54 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f2      	beq.n	80014d6 <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f6:	4802      	ldr	r0, [pc, #8]	; (8001500 <HODL_Till_BTN+0x30>)
 80014f8:	f001 fac4 	bl	8002a84 <HAL_GPIO_WritePin>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_UART_Receive_STR>:

void HAL_UART_Receive_STR(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size, uint32_t Timeout){
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	71fb      	strb	r3, [r7, #7]
	memset(pData, 0, Size);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	461a      	mov	r2, r3
 800151c:	2100      	movs	r1, #0
 800151e:	68b8      	ldr	r0, [r7, #8]
 8001520:	f009 fb25 	bl	800ab6e <memset>
	uint8_t buff[2] = {0};
 8001524:	2300      	movs	r3, #0
 8001526:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	75fb      	strb	r3, [r7, #23]
 800152c:	e011      	b.n	8001552 <HAL_UART_Receive_STR+0x4a>
		HAL_UART_Receive(huart, buff, 1, Timeout);
 800152e:	f107 0114 	add.w	r1, r7, #20
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f003 fab1 	bl	8004a9e <HAL_UART_Receive>
		pData[Size - i] = buff[0];
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	461a      	mov	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4413      	add	r3, r2
 8001548:	7d3a      	ldrb	r2, [r7, #20]
 800154a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	3b01      	subs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
 8001552:	7d3b      	ldrb	r3, [r7, #20]
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d1ea      	bne.n	800152e <HAL_UART_Receive_STR+0x26>
	}
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2230      	movs	r2, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f009 fafb 	bl	800ab6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <SystemClock_Config+0xcc>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a27      	ldr	r2, [pc, #156]	; (8001630 <SystemClock_Config+0xcc>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <SystemClock_Config+0xcc>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <SystemClock_Config+0xd0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <SystemClock_Config+0xd0>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ca:	2302      	movs	r3, #2
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015d4:	2308      	movs	r3, #8
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e2:	2307      	movs	r3, #7
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fce0 	bl	8003fb0 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015f6:	f000 f8e9 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fe:	2302      	movs	r3, #2
 8001600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001606:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800160a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	2105      	movs	r1, #5
 8001618:	4618      	mov	r0, r3
 800161a:	f002 ff41 	bl	80044a0 <HAL_RCC_ClockConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001624:	f000 f8d2 	bl	80017cc <Error_Handler>
  }
}
 8001628:	bf00      	nop
 800162a:	3750      	adds	r7, #80	; 0x50
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f003 f936 	bl	80048e0 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f8a7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000364 	.word	0x20000364
 8001688:	40004400 	.word	0x40004400

0800168c <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_USART3_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800169c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f003 f90c 	bl	80048e0 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 f87d 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003a8 	.word	0x200003a8
 80016dc:	40004800 	.word	0x40004800

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <MX_GPIO_Init+0xe0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a30      	ldr	r2, [pc, #192]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <MX_GPIO_Init+0xe0>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <MX_GPIO_Init+0xe0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001750:	481c      	ldr	r0, [pc, #112]	; (80017c4 <MX_GPIO_Init+0xe4>)
 8001752:	f001 f997 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001756:	2301      	movs	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <MX_GPIO_Init+0xe8>)
 800176a:	f000 ffd7 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800176e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <MX_GPIO_Init+0xe4>)
 8001788:	f000 ffc8 	bl	800271c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <MX_GPIO_Init+0xe4>)
 8001794:	f001 f976 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_GPIO_Init+0xe4>)
 80017b2:	f000 ffb3 	bl	800271c <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40020000 	.word	0x40020000

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_MspInit+0x4c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_MspInit+0x4c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <HAL_UART_MspInit+0x108>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d134      	bne.n	80018b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_UART_MspInit+0x10c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a38      	ldr	r2, [pc, #224]	; (8001934 <HAL_UART_MspInit+0x10c>)
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_UART_MspInit+0x10c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_UART_MspInit+0x10c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_UART_MspInit+0x10c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_UART_MspInit+0x10c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001882:	230c      	movs	r3, #12
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001892:	2307      	movs	r3, #7
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4826      	ldr	r0, [pc, #152]	; (8001938 <HAL_UART_MspInit+0x110>)
 800189e:	f000 ff3d 	bl	800271c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2026      	movs	r0, #38	; 0x26
 80018a8:	f000 fe6f 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ac:	2026      	movs	r0, #38	; 0x26
 80018ae:	f000 fe88 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018b2:	e039      	b.n	8001928 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a20      	ldr	r2, [pc, #128]	; (800193c <HAL_UART_MspInit+0x114>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d134      	bne.n	8001928 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_UART_MspInit+0x10c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x10c>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_UART_MspInit+0x10c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x10c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_UART_MspInit+0x10c>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_UART_MspInit+0x10c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001908:	2307      	movs	r3, #7
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <HAL_UART_MspInit+0x118>)
 8001914:	f000 ff02 	bl	800271c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2027      	movs	r0, #39	; 0x27
 800191e:	f000 fe34 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001922:	2027      	movs	r0, #39	; 0x27
 8001924:	f000 fe4d 	bl	80025c2 <HAL_NVIC_EnableIRQ>
}
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40004400 	.word	0x40004400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	40004800 	.word	0x40004800
 8001940:	40020400 	.word	0x40020400

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f99a 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <CAN1_TX_IRQHandler+0x10>)
 800199e:	f000 fae9 	bl	8001f74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000033c 	.word	0x2000033c

080019ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <CAN1_RX0_IRQHandler+0x14>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019b6:	4803      	ldr	r0, [pc, #12]	; (80019c4 <CAN1_RX0_IRQHandler+0x18>)
 80019b8:	f000 fadc 	bl	8001f74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200003ec 	.word	0x200003ec
 80019c4:	2000033c 	.word	0x2000033c

080019c8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <CAN1_RX1_IRQHandler+0x14>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <CAN1_RX1_IRQHandler+0x18>)
 80019d4:	f000 face 	bl	8001f74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200003ed 	.word	0x200003ed
 80019e0:	2000033c 	.word	0x2000033c

080019e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <USART2_IRQHandler+0x10>)
 80019ea:	f003 f8fb 	bl	8004be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000364 	.word	0x20000364

080019f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART3_IRQHandler+0x10>)
 80019fe:	f003 f8f1 	bl	8004be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200003a8 	.word	0x200003a8

08001a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <OTG_FS_IRQHandler+0x10>)
 8001a12:	f001 f9a0 	bl	8002d56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200018e0 	.word	0x200018e0

08001a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_kill>:

int _kill(int pid, int sig)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3a:	f009 f96b 	bl	800ad14 <__errno>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2216      	movs	r2, #22
 8001a42:	601a      	str	r2, [r3, #0]
  return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a62:	e7fe      	b.n	8001a62 <_exit+0x12>

08001a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
  }

  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf1      	blt.n	8001ab0 <_write+0x12>
  }
  return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_close>:

int _close(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afe:	605a      	str	r2, [r3, #4]
  return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f009 f8d0 	bl	800ad14 <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20020000 	.word	0x20020000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	200003f8 	.word	0x200003f8
 8001ba8:	20002158 	.word	0x20002158

08001bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <SystemInit+0x20>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <SystemInit+0x20>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bec:	4c0b      	ldr	r4, [pc, #44]	; (8001c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bfa:	f7ff ffd7 	bl	8001bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f009 f88f 	bl	800ad20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c02:	f7ff fc0f 	bl	8001424 <main>
  bx  lr    
 8001c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001c14:	0800df10 	.word	0x0800df10
  ldr r2, =_sbss
 8001c18:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001c1c:	20002158 	.word	0x20002158

08001c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_Init+0x40>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_Init+0x40>)
 8001c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_Init+0x40>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f000 fc91 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c52:	200f      	movs	r0, #15
 8001c54:	f000 f808 	bl	8001c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7ff fdbe 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x54>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x58>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fca9 	bl	80025de <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f000 fc71 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_InitTick+0x5c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	200003fc 	.word	0x200003fc

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200003fc 	.word	0x200003fc

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d003      	beq.n	8001d74 <HAL_CAN_GetRxMessage+0x24>
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	f040 80f3 	bne.w	8001f5a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d116      	bne.n	8001db6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0e7      	b.n	8001f68 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0d8      	b.n	8001f68 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	331b      	adds	r3, #27
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	4413      	add	r3, r2
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0204 	and.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10c      	bne.n	8001dee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	331b      	adds	r3, #27
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0d5b      	lsrs	r3, r3, #21
 8001de4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e00b      	b.n	8001e06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	331b      	adds	r3, #27
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	331b      	adds	r3, #27
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0202 	and.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	331b      	adds	r3, #27
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	331b      	adds	r3, #27
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	331b      	adds	r3, #27
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0a1a      	lsrs	r2, r3, #8
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0c1a      	lsrs	r2, r3, #16
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0e1a      	lsrs	r2, r3, #24
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3304      	adds	r3, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0a1a      	lsrs	r2, r3, #8
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0c1a      	lsrs	r2, r3, #16
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3306      	adds	r3, #6
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e1a      	lsrs	r2, r3, #24
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3307      	adds	r3, #7
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e006      	b.n	8001f68 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07c      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f983 	bl	80022e2 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fdc:	e016      	b.n	800200c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	e00c      	b.n	800200c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	e002      	b.n	800200c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f989 	bl	800231e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d024      	beq.n	8002060 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f963 	bl	80022f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002030:	e016      	b.n	8002060 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
 8002044:	e00c      	b.n	8002060 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e002      	b.n	8002060 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f969 	bl	8002332 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002072:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f943 	bl	800230a <HAL_CAN_TxMailbox2CompleteCallback>
 8002084:	e016      	b.n	80020b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
 8002098:	e00c      	b.n	80020b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
 80020ac:	e002      	b.n	80020b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f949 	bl	8002346 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2210      	movs	r2, #16
 80020d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2208      	movs	r2, #8
 80020f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f930 	bl	800235a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff f928 	bl	8001368 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2210      	movs	r2, #16
 800213a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2208      	movs	r2, #8
 8002156:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f912 	bl	8002382 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8f9 	bl	800236e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8fc 	bl	8002396 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2208      	movs	r2, #8
 80021b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8f5 	bl	80023aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d07b      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d072      	beq.n	80022ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222e:	2b00      	cmp	r3, #0
 8002230:	d043      	beq.n	80022ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03e      	beq.n	80022ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002242:	2b60      	cmp	r3, #96	; 0x60
 8002244:	d02b      	beq.n	800229e <HAL_CAN_IRQHandler+0x32a>
 8002246:	2b60      	cmp	r3, #96	; 0x60
 8002248:	d82e      	bhi.n	80022a8 <HAL_CAN_IRQHandler+0x334>
 800224a:	2b50      	cmp	r3, #80	; 0x50
 800224c:	d022      	beq.n	8002294 <HAL_CAN_IRQHandler+0x320>
 800224e:	2b50      	cmp	r3, #80	; 0x50
 8002250:	d82a      	bhi.n	80022a8 <HAL_CAN_IRQHandler+0x334>
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d019      	beq.n	800228a <HAL_CAN_IRQHandler+0x316>
 8002256:	2b40      	cmp	r3, #64	; 0x40
 8002258:	d826      	bhi.n	80022a8 <HAL_CAN_IRQHandler+0x334>
 800225a:	2b30      	cmp	r3, #48	; 0x30
 800225c:	d010      	beq.n	8002280 <HAL_CAN_IRQHandler+0x30c>
 800225e:	2b30      	cmp	r3, #48	; 0x30
 8002260:	d822      	bhi.n	80022a8 <HAL_CAN_IRQHandler+0x334>
 8002262:	2b10      	cmp	r3, #16
 8002264:	d002      	beq.n	800226c <HAL_CAN_IRQHandler+0x2f8>
 8002266:	2b20      	cmp	r3, #32
 8002268:	d005      	beq.n	8002276 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800226a:	e01d      	b.n	80022a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002274:	e019      	b.n	80022aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f043 0310 	orr.w	r3, r3, #16
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800227e:	e014      	b.n	80022aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002288:	e00f      	b.n	80022aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002292:	e00a      	b.n	80022aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800229c:	e005      	b.n	80022aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a6:	e000      	b.n	80022aa <HAL_CAN_IRQHandler+0x336>
            break;
 80022a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2204      	movs	r2, #4
 80022c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f872 	bl	80023be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff3e 	bl	800241c <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5d 	bl	8002474 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff31 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa2 	bl	8002530 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fb74 	bl	8001cf0 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d008      	beq.n	8002628 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e052      	b.n	80026ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0216 	bic.w	r2, r2, #22
 8002636:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002646:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_DMA_Abort+0x62>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0208 	bic.w	r2, r2, #8
 8002666:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002678:	e013      	b.n	80026a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267a:	f7ff fb39 	bl	8001cf0 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b05      	cmp	r3, #5
 8002686:	d90c      	bls.n	80026a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2203      	movs	r2, #3
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e015      	b.n	80026ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e4      	bne.n	800267a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	223f      	movs	r2, #63	; 0x3f
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e00c      	b.n	800270e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2205      	movs	r2, #5
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e16b      	b.n	8002a10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 815a 	bne.w	8002a0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d005      	beq.n	800276e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	2b02      	cmp	r3, #2
 800276c:	d130      	bne.n	80027d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0201 	and.w	r2, r3, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d017      	beq.n	800280c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b4 	beq.w	8002a0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b60      	ldr	r3, [pc, #384]	; (8002a28 <HAL_GPIO_Init+0x30c>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a5f      	ldr	r2, [pc, #380]	; (8002a28 <HAL_GPIO_Init+0x30c>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_GPIO_Init+0x30c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028be:	4a5b      	ldr	r2, [pc, #364]	; (8002a2c <HAL_GPIO_Init+0x310>)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_GPIO_Init+0x314>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02b      	beq.n	8002942 <HAL_GPIO_Init+0x226>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <HAL_GPIO_Init+0x318>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d025      	beq.n	800293e <HAL_GPIO_Init+0x222>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a50      	ldr	r2, [pc, #320]	; (8002a38 <HAL_GPIO_Init+0x31c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01f      	beq.n	800293a <HAL_GPIO_Init+0x21e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4f      	ldr	r2, [pc, #316]	; (8002a3c <HAL_GPIO_Init+0x320>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d019      	beq.n	8002936 <HAL_GPIO_Init+0x21a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_GPIO_Init+0x324>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0x216>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4d      	ldr	r2, [pc, #308]	; (8002a44 <HAL_GPIO_Init+0x328>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00d      	beq.n	800292e <HAL_GPIO_Init+0x212>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <HAL_GPIO_Init+0x32c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <HAL_GPIO_Init+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_GPIO_Init+0x330>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_GPIO_Init+0x20a>
 8002922:	2307      	movs	r3, #7
 8002924:	e00e      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002926:	2308      	movs	r3, #8
 8002928:	e00c      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800292a:	2306      	movs	r3, #6
 800292c:	e00a      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800292e:	2305      	movs	r3, #5
 8002930:	e008      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002932:	2304      	movs	r3, #4
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002936:	2303      	movs	r3, #3
 8002938:	e004      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800293a:	2302      	movs	r3, #2
 800293c:	e002      	b.n	8002944 <HAL_GPIO_Init+0x228>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_GPIO_Init+0x228>
 8002942:	2300      	movs	r3, #0
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	f002 0203 	and.w	r2, r2, #3
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4093      	lsls	r3, r2
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002954:	4935      	ldr	r1, [pc, #212]	; (8002a2c <HAL_GPIO_Init+0x310>)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_GPIO_Init+0x334>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002986:	4a32      	ldr	r2, [pc, #200]	; (8002a50 <HAL_GPIO_Init+0x334>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_GPIO_Init+0x334>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_GPIO_Init+0x334>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_GPIO_Init+0x334>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_GPIO_Init+0x334>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_GPIO_Init+0x334>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_GPIO_Init+0x334>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	f67f ae90 	bls.w	8002738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020400 	.word	0x40020400
 8002a38:	40020800 	.word	0x40020800
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40021400 	.word	0x40021400
 8002a48:	40021800 	.word	0x40021800
 8002a4c:	40021c00 	.word	0x40021c00
 8002a50:	40013c00 	.word	0x40013c00

08002a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e001      	b.n	8002a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa0:	e003      	b.n	8002aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	041a      	lsls	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab8:	b08f      	sub	sp, #60	; 0x3c
 8002aba:	af0a      	add	r7, sp, #40	; 0x28
 8002abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e10f      	b.n	8002ce8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f006 fdec 	bl	80096c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2203      	movs	r2, #3
 8002aec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 f8b5 	bl	8005c76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	687e      	ldr	r6, [r7, #4]
 8002b14:	466d      	mov	r5, sp
 8002b16:	f106 0410 	add.w	r4, r6, #16
 8002b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b2a:	1d33      	adds	r3, r6, #4
 8002b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b2e:	6838      	ldr	r0, [r7, #0]
 8002b30:	f002 ff8c 	bl	8005a4c <USB_CoreInit>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e0d0      	b.n	8002ce8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 f8a3 	bl	8005c98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e04a      	b.n	8002bee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	333d      	adds	r3, #61	; 0x3d
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	333c      	adds	r3, #60	; 0x3c
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	b298      	uxth	r0, r3
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3344      	adds	r3, #68	; 0x44
 8002b94:	4602      	mov	r2, r0
 8002b96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3340      	adds	r3, #64	; 0x40
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3348      	adds	r3, #72	; 0x48
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	334c      	adds	r3, #76	; 0x4c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3354      	adds	r3, #84	; 0x54
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	3301      	adds	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d3af      	bcc.n	8002b58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e044      	b.n	8002c88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	3301      	adds	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3b5      	bcc.n	8002bfe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	687e      	ldr	r6, [r7, #4]
 8002c9a:	466d      	mov	r5, sp
 8002c9c:	f106 0410 	add.w	r4, r6, #16
 8002ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb0:	1d33      	adds	r3, r6, #4
 8002cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f003 f83b 	bl	8005d30 <USB_DevInit>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e00d      	b.n	8002ce8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 f98a 	bl	8006ffa <USB_DevDisconnect>

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_Start+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e020      	b.n	8002d4e <HAL_PCD_Start+0x5e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d109      	bne.n	8002d30 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d005      	beq.n	8002d30 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 ff8d 	bl	8005c54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 f93a 	bl	8006fb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d56:	b590      	push	{r4, r7, lr}
 8002d58:	b08d      	sub	sp, #52	; 0x34
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 f9f8 	bl	8007162 <USB_GetMode>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 848a 	bne.w	800368e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 f95c 	bl	800703c <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8480 	beq.w	800368c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 f949 	bl	800703c <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d107      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f002 0202 	and.w	r2, r2, #2
 8002dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f004 f937 	bl	800703c <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d161      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0210 	bic.w	r2, r2, #16
 8002de6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f003 020f 	and.w	r2, r3, #15
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d124      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d035      	beq.n	8002e8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6a38      	ldr	r0, [r7, #32]
 8002e34:	f003 ff6e 	bl	8006d14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e44:	441a      	add	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e56:	441a      	add	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
 8002e5c:	e016      	b.n	8002e8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	0c5b      	lsrs	r3, r3, #17
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d110      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e70:	2208      	movs	r2, #8
 8002e72:	4619      	mov	r1, r3
 8002e74:	6a38      	ldr	r0, [r7, #32]
 8002e76:	f003 ff4d 	bl	8006d14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	6a1a      	ldr	r2, [r3, #32]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e86:	441a      	add	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0210 	orr.w	r2, r2, #16
 8002e9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 f8cb 	bl	800703c <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eb0:	f040 80a7 	bne.w	8003002 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 f8d0 	bl	8007062 <USB_ReadDevAllOutEpInterrupt>
 8002ec2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ec4:	e099      	b.n	8002ffa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 808e 	beq.w	8002fee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f004 f8f4 	bl	80070ca <USB_ReadDevOutEPInterrupt>
 8002ee2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2301      	movs	r3, #1
 8002efe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fec2 	bl	8003c8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2308      	movs	r3, #8
 8002f22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 ff98 	bl	8003e5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	2310      	movs	r3, #16
 8002f46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d030      	beq.n	8002fb4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b80      	cmp	r3, #128	; 0x80
 8002f5c:	d109      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	78db      	ldrb	r3, [r3, #3]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d108      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f006 fca7 	bl	80098f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2320      	movs	r3, #32
 8002fce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f af62 	bne.w	8002ec6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f004 f818 	bl	800703c <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003016:	f040 80db 	bne.w	80031d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f004 f839 	bl	8007096 <USB_ReadDevAllInEpInterrupt>
 8003024:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800302a:	e0cd      	b.n	80031c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80c2 	beq.w	80031bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f004 f85f 	bl	8007106 <USB_ReadDevInEPInterrupt>
 8003048:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d057      	beq.n	8003104 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	2201      	movs	r2, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	43db      	mvns	r3, r3
 800306e:	69f9      	ldr	r1, [r7, #28]
 8003070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003074:	4013      	ands	r3, r2
 8003076:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003084:	461a      	mov	r2, r3
 8003086:	2301      	movs	r3, #1
 8003088:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d132      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	334c      	adds	r3, #76	; 0x4c
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4403      	add	r3, r0
 80030b2:	3348      	adds	r3, #72	; 0x48
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4419      	add	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4403      	add	r3, r0
 80030c6:	334c      	adds	r3, #76	; 0x4c
 80030c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d113      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x3a2>
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3354      	adds	r3, #84	; 0x54
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	f004 f866 	bl	80071c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f006 fb71 	bl	80097e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311a:	461a      	mov	r2, r3
 800311c:	2308      	movs	r3, #8
 800311e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	461a      	mov	r2, r3
 8003138:	2310      	movs	r3, #16
 800313a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003152:	461a      	mov	r2, r3
 8003154:	2340      	movs	r3, #64	; 0x40
 8003156:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d023      	beq.n	80031aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f002 ff47 	bl	8005ff8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	3338      	adds	r3, #56	; 0x38
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	3304      	adds	r3, #4
 800317c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	78db      	ldrb	r3, [r3, #3]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d108      	bne.n	8003198 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f006 fbbe 	bl	8009914 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	2302      	movs	r3, #2
 80031a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fcdb 	bl	8003b72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	3301      	adds	r3, #1
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f47f af2e 	bne.w	800302c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 ff31 	bl	800703c <USB_ReadInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e4:	d122      	bne.n	800322c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800320c:	2100      	movs	r1, #0
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fec2 	bl	8003f98 <HAL_PCDEx_LPM_Callback>
 8003214:	e002      	b.n	800321c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f006 fb5c 	bl	80098d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800322a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 ff03 	bl	800703c <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003240:	d112      	bne.n	8003268 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f006 fb18 	bl	8009888 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003266:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 fee5 	bl	800703c <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	f040 80b7 	bne.w	80033ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2110      	movs	r1, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f002 feac 	bl	8005ff8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a4:	e046      	b.n	8003334 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b2:	461a      	mov	r2, r3
 80032b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ca:	0151      	lsls	r1, r2, #5
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	440a      	add	r2, r1
 80032d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	440a      	add	r2, r1
 8003304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800330c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	440a      	add	r2, r1
 8003324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800332c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	3301      	adds	r3, #1
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333a:	429a      	cmp	r2, r3
 800333c:	d3b3      	bcc.n	80032a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800334c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003350:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336a:	f043 030b 	orr.w	r3, r3, #11
 800336e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003380:	f043 030b 	orr.w	r3, r3, #11
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	e015      	b.n	80033b4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800339a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800339e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ae:	f043 030b 	orr.w	r3, r3, #11
 80033b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033d8:	461a      	mov	r2, r3
 80033da:	f003 fef3 	bl	80071c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fe22 	bl	800703c <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	d124      	bne.n	800344e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 feb8 	bl	800717e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f002 fe6d 	bl	80060f2 <USB_GetDevSpeed>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681c      	ldr	r4, [r3, #0]
 8003424:	f001 fa28 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8003428:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	4620      	mov	r0, r4
 8003434:	f002 fb6c 	bl	8005b10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f006 f9fc 	bl	8009836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800344c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fdf2 	bl	800703c <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	d10a      	bne.n	8003478 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f006 f9d9 	bl	800981a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f002 0208 	and.w	r2, r2, #8
 8003476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fddd 	bl	800703c <USB_ReadInterrupts>
 8003482:	4603      	mov	r3, r0
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d122      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003498:	2301      	movs	r3, #1
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
 800349c:	e014      	b.n	80034c8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb27 	bl	8003b10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d3e5      	bcc.n	800349e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fdb0 	bl	800703c <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e6:	d13b      	bne.n	8003560 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e8:	2301      	movs	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	e02b      	b.n	8003546 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3340      	adds	r3, #64	; 0x40
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d115      	bne.n	8003540 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003514:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	da12      	bge.n	8003540 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	333f      	adds	r3, #63	; 0x3f
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fae8 	bl	8003b10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	3301      	adds	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	429a      	cmp	r2, r3
 800354e:	d3ce      	bcc.n	80034ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800355e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fd69 	bl	800703c <USB_ReadInterrupts>
 800356a:	4603      	mov	r3, r0
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003574:	d155      	bne.n	8003622 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003576:	2301      	movs	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e045      	b.n	8003608 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d12e      	bne.n	8003602 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da2b      	bge.n	8003602 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d121      	bne.n	8003602 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fe:	6053      	str	r3, [r2, #4]
            break;
 8003600:	e007      	b.n	8003612 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	3301      	adds	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	429a      	cmp	r2, r3
 8003610:	d3b4      	bcc.n	800357c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f003 fd08 	bl	800703c <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d10a      	bne.n	800364e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f006 f97d 	bl	8009938 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800364c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fcf2 	bl	800703c <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d115      	bne.n	800368e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f006 f96d 	bl	8009954 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	e000      	b.n	800368e <HAL_PCD_IRQHandler+0x938>
      return;
 800368c:	bf00      	nop
    }
  }
}
 800368e:	3734      	adds	r7, #52	; 0x34
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}

08003694 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_PCD_SetAddress+0x1a>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e013      	b.n	80036d6 <HAL_PCD_SetAddress+0x42>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fc50 	bl	8006f6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	4608      	mov	r0, r1
 80036e8:	4611      	mov	r1, r2
 80036ea:	461a      	mov	r2, r3
 80036ec:	4603      	mov	r3, r0
 80036ee:	70fb      	strb	r3, [r7, #3]
 80036f0:	460b      	mov	r3, r1
 80036f2:	803b      	strh	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	da0f      	bge.n	8003724 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	3338      	adds	r3, #56	; 0x38
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	705a      	strb	r2, [r3, #1]
 8003722:	e00f      	b.n	8003744 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 020f 	and.w	r2, r3, #15
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	3304      	adds	r3, #4
 800373c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003750:	883a      	ldrh	r2, [r7, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	78ba      	ldrb	r2, [r7, #2]
 800375a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800376e:	78bb      	ldrb	r3, [r7, #2]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d102      	bne.n	800377a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_PCD_EP_Open+0xaa>
 8003784:	2302      	movs	r3, #2
 8003786:	e00e      	b.n	80037a6 <HAL_PCD_EP_Open+0xc8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4618      	mov	r0, r3
 8003798:	f002 fcd0 	bl	800613c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037a4:	7afb      	ldrb	r3, [r7, #11]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da0f      	bge.n	80037e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3338      	adds	r3, #56	; 0x38
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	705a      	strb	r2, [r3, #1]
 80037e0:	e00f      	b.n	8003802 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_PCD_EP_Close+0x6e>
 8003818:	2302      	movs	r3, #2
 800381a:	e00e      	b.n	800383a <HAL_PCD_EP_Close+0x8c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fd0e 	bl	800624c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	460b      	mov	r3, r1
 8003850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	3304      	adds	r3, #4
 800386a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2200      	movs	r2, #0
 800387c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003884:	7afb      	ldrb	r3, [r7, #11]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	b2da      	uxtb	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	f002 ffed 	bl	8006894 <USB_EP0StartXfer>
 80038ba:	e008      	b.n	80038ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	6979      	ldr	r1, [r7, #20]
 80038ca:	f002 fd9b 	bl	8006404 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	f003 020f 	and.w	r2, r3, #15
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	460b      	mov	r3, r1
 8003916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	3338      	adds	r3, #56	; 0x38
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	b2da      	uxtb	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d102      	bne.n	8003962 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003962:	7afb      	ldrb	r3, [r7, #11]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	f002 ff8b 	bl	8006894 <USB_EP0StartXfer>
 800397e:	e008      	b.n	8003992 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	f002 fd39 	bl	8006404 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d901      	bls.n	80039ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e050      	b.n	8003a5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da0f      	bge.n	80039e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	3338      	adds	r3, #56	; 0x38
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	3304      	adds	r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	705a      	strb	r2, [r3, #1]
 80039e0:	e00d      	b.n	80039fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_PCD_EP_SetStall+0x82>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e01e      	b.n	8003a5c <HAL_PCD_EP_SetStall+0xc0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68f9      	ldr	r1, [r7, #12]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 f9c9 	bl	8006dc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	b2d9      	uxtb	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f003 fbb9 	bl	80071c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d901      	bls.n	8003a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e042      	b.n	8003b08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da0f      	bge.n	8003aaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	3338      	adds	r3, #56	; 0x38
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	705a      	strb	r2, [r3, #1]
 8003aa8:	e00f      	b.n	8003aca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_PCD_EP_ClrStall+0x86>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e00e      	b.n	8003b08 <HAL_PCD_EP_ClrStall+0xa4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 f9d1 	bl	8006ea0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da0c      	bge.n	8003b3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	3338      	adds	r3, #56	; 0x38
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e00c      	b.n	8003b58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f002 fff0 	bl	8006b44 <USB_EPStopXfer>
 8003b64:	4603      	mov	r3, r0
 8003b66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b68:	7afb      	ldrb	r3, [r7, #11]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b08a      	sub	sp, #40	; 0x28
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3338      	adds	r3, #56	; 0x38
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1a      	ldr	r2, [r3, #32]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d901      	bls.n	8003baa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e06c      	b.n	8003c84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d902      	bls.n	8003bc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3303      	adds	r3, #3
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bce:	e02b      	b.n	8003c28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d902      	bls.n	8003bec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3303      	adds	r3, #3
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f003 f844 	bl	8006c98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	441a      	add	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d809      	bhi.n	8003c52 <PCD_WriteEmptyTxFifo+0xe0>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d203      	bcs.n	8003c52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1be      	bne.n	8003bd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d811      	bhi.n	8003c82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2201      	movs	r2, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	6939      	ldr	r1, [r7, #16]
 8003c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c7e:	4013      	ands	r3, r2
 8003c80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	333c      	adds	r3, #60	; 0x3c
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d17b      	bne.n	8003dba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	f240 80b9 	bls.w	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80b3 	beq.w	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf4:	6093      	str	r3, [r2, #8]
 8003cf6:	e0a7      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2320      	movs	r3, #32
 8003d12:	6093      	str	r3, [r2, #8]
 8003d14:	e098      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8093 	bne.w	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d90f      	bls.n	8003d4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	e07e      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	0159      	lsls	r1, r3, #5
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d114      	bne.n	8003dac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d94:	461a      	mov	r2, r3
 8003d96:	2101      	movs	r1, #1
 8003d98:	f003 fa14 	bl	80071c4 <USB_EP0_OutStart>
 8003d9c:	e006      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	441a      	add	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f005 fcfc 	bl	80097b0 <HAL_PCD_DataOutStageCallback>
 8003db8:	e046      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d124      	bne.n	8003e0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	6093      	str	r3, [r2, #8]
 8003de0:	e032      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f005 fcd3 	bl	80097b0 <HAL_PCD_DataOutStageCallback>
 8003e0a:	e01d      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d114      	bne.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e34:	461a      	mov	r2, r3
 8003e36:	2100      	movs	r1, #0
 8003e38:	f003 f9c4 	bl	80071c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f005 fcb4 	bl	80097b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	4f54300a 	.word	0x4f54300a
 8003e58:	4f54310a 	.word	0x4f54310a

08003e5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	333c      	adds	r3, #60	; 0x3c
 8003e74:	3304      	adds	r3, #4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d90e      	bls.n	8003eb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f005 fc6b 	bl	800978c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d90c      	bls.n	8003ed8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d108      	bne.n	8003ed8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	f003 f976 	bl	80071c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	4f54300a 	.word	0x4f54300a

08003ee8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f06:	883b      	ldrh	r3, [r7, #0]
 8003f08:	0419      	lsls	r1, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
 8003f14:	e028      	b.n	8003f68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e00d      	b.n	8003f46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3340      	adds	r3, #64	; 0x40
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3ec      	bcc.n	8003f2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f50:	883b      	ldrh	r3, [r7, #0]
 8003f52:	0418      	lsls	r0, r3, #16
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6819      	ldr	r1, [r3, #0]
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	4302      	orrs	r2, r0
 8003f60:	3340      	adds	r3, #64	; 0x40
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e267      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d075      	beq.n	80040ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fce:	4b88      	ldr	r3, [pc, #544]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d112      	bne.n	800400c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b82      	ldr	r3, [pc, #520]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff2:	d10b      	bne.n	800400c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05b      	beq.n	80040b8 <HAL_RCC_OscConfig+0x108>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d157      	bne.n	80040b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e242      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x74>
 8004016:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a75      	ldr	r2, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xb0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x98>
 800402e:	4b70      	ldr	r3, [pc, #448]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6f      	ldr	r2, [pc, #444]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b6d      	ldr	r3, [pc, #436]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6c      	ldr	r2, [pc, #432]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xb0>
 8004048:	4b69      	ldr	r3, [pc, #420]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a68      	ldr	r2, [pc, #416]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a65      	ldr	r2, [pc, #404]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd fe42 	bl	8001cf0 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd fe3e 	bl	8001cf0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e207      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xc0>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fd fe2e 	bl	8001cf0 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd fe2a 	bl	8001cf0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1f3      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0xe8>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d063      	beq.n	800418e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040c6:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b44      	ldr	r3, [pc, #272]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x152>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1c7      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4937      	ldr	r1, [pc, #220]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e03a      	b.n	800418e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <HAL_RCC_OscConfig+0x244>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd fde3 	bl	8001cf0 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412e:	f7fd fddf 	bl	8001cf0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1a8      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4925      	ldr	r1, [pc, #148]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]
 8004160:	e015      	b.n	800418e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCC_OscConfig+0x244>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd fdc2 	bl	8001cf0 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004170:	f7fd fdbe 	bl	8001cf0 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e187      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004182:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d036      	beq.n	8004208 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_RCC_OscConfig+0x248>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a8:	f7fd fda2 	bl	8001cf0 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b0:	f7fd fd9e 	bl	8001cf0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e167      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_OscConfig+0x240>)
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x200>
 80041ce:	e01b      	b.n	8004208 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_OscConfig+0x248>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fd fd8b 	bl	8001cf0 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	e00e      	b.n	80041fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041de:	f7fd fd87 	bl	8001cf0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d907      	bls.n	80041fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e150      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
 80041f0:	40023800 	.word	0x40023800
 80041f4:	42470000 	.word	0x42470000
 80041f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fc:	4b88      	ldr	r3, [pc, #544]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80041fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ea      	bne.n	80041de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8097 	beq.w	8004344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421a:	4b81      	ldr	r3, [pc, #516]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10f      	bne.n	8004246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	4b7d      	ldr	r3, [pc, #500]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4a7c      	ldr	r2, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004234:	6413      	str	r3, [r2, #64]	; 0x40
 8004236:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004246:	4b77      	ldr	r3, [pc, #476]	; (8004424 <HAL_RCC_OscConfig+0x474>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d118      	bne.n	8004284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004252:	4b74      	ldr	r3, [pc, #464]	; (8004424 <HAL_RCC_OscConfig+0x474>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a73      	ldr	r2, [pc, #460]	; (8004424 <HAL_RCC_OscConfig+0x474>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425e:	f7fd fd47 	bl	8001cf0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004266:	f7fd fd43 	bl	8001cf0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e10c      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004278:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCC_OscConfig+0x474>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d106      	bne.n	800429a <HAL_RCC_OscConfig+0x2ea>
 800428c:	4b64      	ldr	r3, [pc, #400]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a63      	ldr	r2, [pc, #396]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	e01c      	b.n	80042d4 <HAL_RCC_OscConfig+0x324>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x30c>
 80042a2:	4b5f      	ldr	r3, [pc, #380]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a5e      	ldr	r2, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
 80042ae:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a5b      	ldr	r2, [pc, #364]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0x324>
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a57      	ldr	r2, [pc, #348]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
 80042c8:	4b55      	ldr	r3, [pc, #340]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a54      	ldr	r2, [pc, #336]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042ce:	f023 0304 	bic.w	r3, r3, #4
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd fd08 	bl	8001cf0 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fd fd04 	bl	8001cf0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0cb      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	4b49      	ldr	r3, [pc, #292]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0ee      	beq.n	80042e4 <HAL_RCC_OscConfig+0x334>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004308:	f7fd fcf2 	bl	8001cf0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fd fcee 	bl	8001cf0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0b5      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ee      	bne.n	8004310 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	4a38      	ldr	r2, [pc, #224]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 800433e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004342:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a1 	beq.w	8004490 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b08      	cmp	r3, #8
 8004358:	d05c      	beq.n	8004414 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d141      	bne.n	80043e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCC_OscConfig+0x478>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd fcc2 	bl	8001cf0 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fcbe 	bl	8001cf0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e087      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	491b      	ldr	r1, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x478>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fd fc97 	bl	8001cf0 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fd fc93 	bl	8001cf0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e05c      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x416>
 80043e4:	e054      	b.n	8004490 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x478>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fd fc80 	bl	8001cf0 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd fc7c 	bl	8001cf0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e045      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x470>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x444>
 8004412:	e03d      	b.n	8004490 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e038      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
 8004420:	40023800 	.word	0x40023800
 8004424:	40007000 	.word	0x40007000
 8004428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d028      	beq.n	800448c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d121      	bne.n	800448c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d11a      	bne.n	800448c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004464:	4293      	cmp	r3, r2
 8004466:	d111      	bne.n	800448c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	3b01      	subs	r3, #1
 8004476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0cc      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b68      	ldr	r3, [pc, #416]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d90c      	bls.n	80044dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b65      	ldr	r3, [pc, #404]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0b8      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a58      	ldr	r2, [pc, #352]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a52      	ldr	r2, [pc, #328]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004518:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	494d      	ldr	r1, [pc, #308]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d044      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d119      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d003      	beq.n	800455e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	2b03      	cmp	r3, #3
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455e:	4b3f      	ldr	r3, [pc, #252]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e067      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b37      	ldr	r3, [pc, #220]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4934      	ldr	r1, [pc, #208]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004590:	f7fd fbae 	bl	8001cf0 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fd fbaa 	bl	8001cf0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e04f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b2b      	ldr	r3, [pc, #172]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20c      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e032      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4916      	ldr	r1, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	490e      	ldr	r1, [pc, #56]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004626:	f000 f821 	bl	800466c <HAL_RCC_GetSysClockFreq>
 800462a:	4602      	mov	r2, r0
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	490a      	ldr	r1, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fd fb0e 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023c00 	.word	0x40023c00
 800465c:	40023800 	.word	0x40023800
 8004660:	0800da68 	.word	0x0800da68
 8004664:	20000000 	.word	0x20000000
 8004668:	20000004 	.word	0x20000004

0800466c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004670:	b094      	sub	sp, #80	; 0x50
 8004672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	647b      	str	r3, [r7, #68]	; 0x44
 8004678:	2300      	movs	r3, #0
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800467c:	2300      	movs	r3, #0
 800467e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004684:	4b79      	ldr	r3, [pc, #484]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b08      	cmp	r3, #8
 800468e:	d00d      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x40>
 8004690:	2b08      	cmp	r3, #8
 8004692:	f200 80e1 	bhi.w	8004858 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x34>
 800469a:	2b04      	cmp	r3, #4
 800469c:	d003      	beq.n	80046a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800469e:	e0db      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a0:	4b73      	ldr	r3, [pc, #460]	; (8004870 <HAL_RCC_GetSysClockFreq+0x204>)
 80046a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046a4:	e0db      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a6:	4b73      	ldr	r3, [pc, #460]	; (8004874 <HAL_RCC_GetSysClockFreq+0x208>)
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046aa:	e0d8      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ac:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b6:	4b6d      	ldr	r3, [pc, #436]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d063      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b6a      	ldr	r3, [pc, #424]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	2200      	movs	r2, #0
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80046cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
 80046d6:	2300      	movs	r3, #0
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
 80046da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046de:	4622      	mov	r2, r4
 80046e0:	462b      	mov	r3, r5
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0159      	lsls	r1, r3, #5
 80046ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f0:	0150      	lsls	r0, r2, #5
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4621      	mov	r1, r4
 80046f8:	1a51      	subs	r1, r2, r1
 80046fa:	6139      	str	r1, [r7, #16]
 80046fc:	4629      	mov	r1, r5
 80046fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004710:	4659      	mov	r1, fp
 8004712:	018b      	lsls	r3, r1, #6
 8004714:	4651      	mov	r1, sl
 8004716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471a:	4651      	mov	r1, sl
 800471c:	018a      	lsls	r2, r1, #6
 800471e:	4651      	mov	r1, sl
 8004720:	ebb2 0801 	subs.w	r8, r2, r1
 8004724:	4659      	mov	r1, fp
 8004726:	eb63 0901 	sbc.w	r9, r3, r1
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800473a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473e:	4690      	mov	r8, r2
 8004740:	4699      	mov	r9, r3
 8004742:	4623      	mov	r3, r4
 8004744:	eb18 0303 	adds.w	r3, r8, r3
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	462b      	mov	r3, r5
 800474c:	eb49 0303 	adc.w	r3, r9, r3
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800475e:	4629      	mov	r1, r5
 8004760:	024b      	lsls	r3, r1, #9
 8004762:	4621      	mov	r1, r4
 8004764:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004768:	4621      	mov	r1, r4
 800476a:	024a      	lsls	r2, r1, #9
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004772:	2200      	movs	r2, #0
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
 8004776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800477c:	f7fc fa0c 	bl	8000b98 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4613      	mov	r3, r2
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	e058      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	2200      	movs	r2, #0
 8004792:	4618      	mov	r0, r3
 8004794:	4611      	mov	r1, r2
 8004796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	0159      	lsls	r1, r3, #5
 80047b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b6:	0150      	lsls	r0, r2, #5
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4641      	mov	r1, r8
 80047be:	ebb2 0a01 	subs.w	sl, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047dc:	ebb2 040a 	subs.w	r4, r2, sl
 80047e0:	eb63 050b 	sbc.w	r5, r3, fp
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	00eb      	lsls	r3, r5, #3
 80047ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f2:	00e2      	lsls	r2, r4, #3
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	4643      	mov	r3, r8
 80047fa:	18e3      	adds	r3, r4, r3
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	464b      	mov	r3, r9
 8004800:	eb45 0303 	adc.w	r3, r5, r3
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004812:	4629      	mov	r1, r5
 8004814:	028b      	lsls	r3, r1, #10
 8004816:	4621      	mov	r1, r4
 8004818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800481c:	4621      	mov	r1, r4
 800481e:	028a      	lsls	r2, r1, #10
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004826:	2200      	movs	r2, #0
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	61fa      	str	r2, [r7, #28]
 800482c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004830:	f7fc f9b2 	bl	8000b98 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800484c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800484e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004856:	e002      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_RCC_GetSysClockFreq+0x204>)
 800485a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800485c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004860:	4618      	mov	r0, r3
 8004862:	3750      	adds	r7, #80	; 0x50
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004894:	f7ff fff0 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	0800da78 	.word	0x0800da78

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048bc:	f7ff ffdc 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0b5b      	lsrs	r3, r3, #13
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	0800da78 	.word	0x0800da78

080048e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e03f      	b.n	8004972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc ff8e 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2224      	movs	r2, #36	; 0x24
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fe1d 	bl	8005564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b08a      	sub	sp, #40	; 0x28
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d17c      	bne.n	8004a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_UART_Transmit+0x2c>
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e075      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Transmit+0x3e>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e06e      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2221      	movs	r2, #33	; 0x21
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ce:	f7fd f98f 	bl	8001cf0 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d108      	bne.n	80049fc <HAL_UART_Transmit+0x82>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e003      	b.n	8004a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a0c:	e02a      	b.n	8004a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fb9b 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e036      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3302      	adds	r3, #2
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e007      	b.n	8004a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1cf      	bne.n	8004a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2140      	movs	r1, #64	; 0x40
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fb6b 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e006      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b08a      	sub	sp, #40	; 0x28
 8004aa2:	af02      	add	r7, sp, #8
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	f040 808c 	bne.w	8004bd8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Receive+0x2e>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e084      	b.n	8004bda <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Receive+0x40>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e07d      	b.n	8004bda <HAL_UART_Receive+0x13c>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2222      	movs	r2, #34	; 0x22
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004afa:	f7fd f8f9 	bl	8001cf0 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	88fa      	ldrh	r2, [r7, #6]
 8004b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d108      	bne.n	8004b28 <HAL_UART_Receive+0x8a>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e003      	b.n	8004b30 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b38:	e043      	b.n	8004bc2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2120      	movs	r1, #32
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fb05 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e042      	b.n	8004bda <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	3302      	adds	r3, #2
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e01f      	b.n	8004bb4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d007      	beq.n	8004b8e <HAL_UART_Receive+0xf0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <HAL_UART_Receive+0xfe>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e008      	b.n	8004bae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1b6      	bne.n	8004b3a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b0ba      	sub	sp, #232	; 0xe8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_UART_IRQHandler+0x66>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fbd3 	bl	80053ee <UART_Receive_IT>
      return;
 8004c48:	e256      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80de 	beq.w	8004e10 <HAL_UART_IRQHandler+0x22c>
 8004c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80d1 	beq.w	8004e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_UART_IRQHandler+0xae>
 8004c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xd2>
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0202 	orr.w	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_UART_IRQHandler+0xf6>
 8004cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f043 0204 	orr.w	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <HAL_UART_IRQHandler+0x126>
 8004ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f043 0208 	orr.w	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 81ed 	beq.w	80050ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_UART_IRQHandler+0x14e>
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb5e 	bl	80053ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_UART_IRQHandler+0x17a>
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04f      	beq.n	8004dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa66 	bl	8005230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d141      	bne.n	8004df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1d9      	bne.n	8004d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d013      	beq.n	8004dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	4a7d      	ldr	r2, [pc, #500]	; (8004fc0 <HAL_UART_IRQHandler+0x3dc>)
 8004dcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fc7f 	bl	80026d6 <HAL_DMA_Abort_IT>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004de8:	4610      	mov	r0, r2
 8004dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00e      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f99a 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e00a      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f996 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f992 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e0a:	e170      	b.n	80050ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	bf00      	nop
    return;
 8004e0e:	e16e      	b.n	80050ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 814a 	bne.w	80050ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8143 	beq.w	80050ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 813c 	beq.w	80050ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	f040 80b4 	bne.w	8004fc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8140 	beq.w	80050f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f080 8139 	bcs.w	80050f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e92:	f000 8088 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1d9      	bne.n	8004e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e1      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f88:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e3      	bne.n	8004f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd fb28 	bl	80025f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8c0 	bl	800513c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fbc:	e099      	b.n	80050f2 <HAL_UART_IRQHandler+0x50e>
 8004fbe:	bf00      	nop
 8004fc0:	080052f7 	.word	0x080052f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 808b 	beq.w	80050f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800500e:	647a      	str	r2, [r7, #68]	; 0x44
 8005010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e3      	bne.n	8004fea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	623b      	str	r3, [r7, #32]
   return(result);
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3314      	adds	r3, #20
 8005042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005046:	633a      	str	r2, [r7, #48]	; 0x30
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800504c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e3      	bne.n	8005022 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	60fb      	str	r3, [r7, #12]
   return(result);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800508c:	61fa      	str	r2, [r7, #28]
 800508e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	69b9      	ldr	r1, [r7, #24]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	617b      	str	r3, [r7, #20]
   return(result);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e3      	bne.n	8005068 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f848 	bl	800513c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ac:	e023      	b.n	80050f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_UART_IRQHandler+0x4ea>
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f929 	bl	800531e <UART_Transmit_IT>
    return;
 80050cc:	e014      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <HAL_UART_IRQHandler+0x514>
 80050da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f969 	bl	80053be <UART_EndTransmit_IT>
    return;
 80050ec:	e004      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
    return;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
      return;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
      return;
 80050f6:	bf00      	nop
  }
}
 80050f8:	37e8      	adds	r7, #232	; 0xe8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop

08005100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b090      	sub	sp, #64	; 0x40
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e050      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d04c      	beq.n	8005208 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
 8005174:	f7fc fdbc 	bl	8001cf0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005180:	429a      	cmp	r2, r3
 8005182:	d241      	bcs.n	8005208 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051a4:	637a      	str	r2, [r7, #52]	; 0x34
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	613b      	str	r3, [r7, #16]
   return(result);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d8:	623a      	str	r2, [r7, #32]
 80051da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e00f      	b.n	8005228 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	429a      	cmp	r2, r3
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	d09f      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3740      	adds	r7, #64	; 0x40
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b095      	sub	sp, #84	; 0x54
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005258:	643a      	str	r2, [r7, #64]	; 0x40
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	61fb      	str	r3, [r7, #28]
   return(result);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d119      	bne.n	80052dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f023 0310 	bic.w	r3, r3, #16
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c8:	61ba      	str	r2, [r7, #24]
 80052ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052ea:	bf00      	nop
 80052ec:	3754      	adds	r7, #84	; 0x54
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff ff09 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b21      	cmp	r3, #33	; 0x21
 8005330:	d13e      	bne.n	80053b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	d114      	bne.n	8005366 <UART_Transmit_IT+0x48>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d110      	bne.n	8005366 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]
 8005364:	e008      	b.n	8005378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6211      	str	r1, [r2, #32]
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4619      	mov	r1, r3
 8005386:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10f      	bne.n	80053ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800539a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fe8e 	bl	8005100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08c      	sub	sp, #48	; 0x30
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b22      	cmp	r3, #34	; 0x22
 8005400:	f040 80ab 	bne.w	800555a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d117      	bne.n	800543e <UART_Receive_IT+0x50>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542c:	b29a      	uxth	r2, r3
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
 800543c:	e026      	b.n	800548c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	d007      	beq.n	8005462 <UART_Receive_IT+0x74>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <UART_Receive_IT+0x82>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e008      	b.n	8005482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547c:	b2da      	uxtb	r2, r3
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29b      	uxth	r3, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4619      	mov	r1, r3
 800549a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800549c:	2b00      	cmp	r3, #0
 800549e:	d15a      	bne.n	8005556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0220 	bic.w	r2, r2, #32
 80054ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d135      	bne.n	800554c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	623a      	str	r2, [r7, #32]
 8005508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61bb      	str	r3, [r7, #24]
   return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d10a      	bne.n	800553e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fdf9 	bl	800513c <HAL_UARTEx_RxEventCallback>
 800554a:	e002      	b.n	8005552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fde1 	bl	8005114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e002      	b.n	800555c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3730      	adds	r7, #48	; 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b0c0      	sub	sp, #256	; 0x100
 800556a:	af00      	add	r7, sp, #0
 800556c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	ea40 0301 	orr.w	r3, r0, r1
 800558c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	431a      	orrs	r2, r3
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055bc:	f021 010c 	bic.w	r1, r1, #12
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ca:	430b      	orrs	r3, r1
 80055cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	6999      	ldr	r1, [r3, #24]
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	ea40 0301 	orr.w	r3, r0, r1
 80055ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <UART_SetConfig+0x2cc>)
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d005      	beq.n	8005604 <UART_SetConfig+0xa0>
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b8d      	ldr	r3, [pc, #564]	; (8005834 <UART_SetConfig+0x2d0>)
 8005600:	429a      	cmp	r2, r3
 8005602:	d104      	bne.n	800560e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7ff f958 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8005608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800560c:	e003      	b.n	8005616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560e:	f7ff f93f 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8005612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	f040 810c 	bne.w	800583c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800562e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	1891      	adds	r1, r2, r2
 800563c:	65b9      	str	r1, [r7, #88]	; 0x58
 800563e:	415b      	adcs	r3, r3
 8005640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005646:	4621      	mov	r1, r4
 8005648:	eb12 0801 	adds.w	r8, r2, r1
 800564c:	4629      	mov	r1, r5
 800564e:	eb43 0901 	adc.w	r9, r3, r1
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	4623      	mov	r3, r4
 800566c:	eb18 0303 	adds.w	r3, r8, r3
 8005670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005674:	462b      	mov	r3, r5
 8005676:	eb49 0303 	adc.w	r3, r9, r3
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800568a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800568e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005692:	460b      	mov	r3, r1
 8005694:	18db      	adds	r3, r3, r3
 8005696:	653b      	str	r3, [r7, #80]	; 0x50
 8005698:	4613      	mov	r3, r2
 800569a:	eb42 0303 	adc.w	r3, r2, r3
 800569e:	657b      	str	r3, [r7, #84]	; 0x54
 80056a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056a8:	f7fb fa76 	bl	8000b98 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4b61      	ldr	r3, [pc, #388]	; (8005838 <UART_SetConfig+0x2d4>)
 80056b2:	fba3 2302 	umull	r2, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	011c      	lsls	r4, r3, #4
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80056d4:	415b      	adcs	r3, r3
 80056d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056dc:	4641      	mov	r1, r8
 80056de:	eb12 0a01 	adds.w	sl, r2, r1
 80056e2:	4649      	mov	r1, r9
 80056e4:	eb43 0b01 	adc.w	fp, r3, r1
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fc:	4692      	mov	sl, r2
 80056fe:	469b      	mov	fp, r3
 8005700:	4643      	mov	r3, r8
 8005702:	eb1a 0303 	adds.w	r3, sl, r3
 8005706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800570a:	464b      	mov	r3, r9
 800570c:	eb4b 0303 	adc.w	r3, fp, r3
 8005710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005728:	460b      	mov	r3, r1
 800572a:	18db      	adds	r3, r3, r3
 800572c:	643b      	str	r3, [r7, #64]	; 0x40
 800572e:	4613      	mov	r3, r2
 8005730:	eb42 0303 	adc.w	r3, r2, r3
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
 8005736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800573a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800573e:	f7fb fa2b 	bl	8000b98 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4611      	mov	r1, r2
 8005748:	4b3b      	ldr	r3, [pc, #236]	; (8005838 <UART_SetConfig+0x2d4>)
 800574a:	fba3 2301 	umull	r2, r3, r3, r1
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	; 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1acb      	subs	r3, r1, r3
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800575e:	4b36      	ldr	r3, [pc, #216]	; (8005838 <UART_SetConfig+0x2d4>)
 8005760:	fba3 2302 	umull	r2, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800576c:	441c      	add	r4, r3
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800577c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	63b9      	str	r1, [r7, #56]	; 0x38
 8005788:	415b      	adcs	r3, r3
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6339      	str	r1, [r7, #48]	; 0x30
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057e4:	460b      	mov	r3, r1
 80057e6:	18db      	adds	r3, r3, r3
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	4613      	mov	r3, r2
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057fa:	f7fb f9cd 	bl	8000b98 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <UART_SetConfig+0x2d4>)
 8005804:	fba3 1302 	umull	r1, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	2164      	movs	r1, #100	; 0x64
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	3332      	adds	r3, #50	; 0x32
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <UART_SetConfig+0x2d4>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	f003 0207 	and.w	r2, r3, #7
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4422      	add	r2, r4
 800582a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800582c:	e106      	b.n	8005a3c <UART_SetConfig+0x4d8>
 800582e:	bf00      	nop
 8005830:	40011000 	.word	0x40011000
 8005834:	40011400 	.word	0x40011400
 8005838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800583c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800584a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	1891      	adds	r1, r2, r2
 8005854:	6239      	str	r1, [r7, #32]
 8005856:	415b      	adcs	r3, r3
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
 800585a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585e:	4641      	mov	r1, r8
 8005860:	1854      	adds	r4, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb43 0501 	adc.w	r5, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	00eb      	lsls	r3, r5, #3
 8005872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005876:	00e2      	lsls	r2, r4, #3
 8005878:	4614      	mov	r4, r2
 800587a:	461d      	mov	r5, r3
 800587c:	4643      	mov	r3, r8
 800587e:	18e3      	adds	r3, r4, r3
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005884:	464b      	mov	r3, r9
 8005886:	eb45 0303 	adc.w	r3, r5, r3
 800588a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800589a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058aa:	4629      	mov	r1, r5
 80058ac:	008b      	lsls	r3, r1, #2
 80058ae:	4621      	mov	r1, r4
 80058b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b4:	4621      	mov	r1, r4
 80058b6:	008a      	lsls	r2, r1, #2
 80058b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058bc:	f7fb f96c 	bl	8000b98 <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4b60      	ldr	r3, [pc, #384]	; (8005a48 <UART_SetConfig+0x4e4>)
 80058c6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	011c      	lsls	r4, r3, #4
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	1891      	adds	r1, r2, r2
 80058e6:	61b9      	str	r1, [r7, #24]
 80058e8:	415b      	adcs	r3, r3
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f0:	4641      	mov	r1, r8
 80058f2:	1851      	adds	r1, r2, r1
 80058f4:	6139      	str	r1, [r7, #16]
 80058f6:	4649      	mov	r1, r9
 80058f8:	414b      	adcs	r3, r1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005908:	4659      	mov	r1, fp
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4651      	mov	r1, sl
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4642      	mov	r2, r8
 800591e:	189b      	adds	r3, r3, r2
 8005920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005924:	464b      	mov	r3, r9
 8005926:	460a      	mov	r2, r1
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	67bb      	str	r3, [r7, #120]	; 0x78
 800593a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005948:	4649      	mov	r1, r9
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	4641      	mov	r1, r8
 800594e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005952:	4641      	mov	r1, r8
 8005954:	008a      	lsls	r2, r1, #2
 8005956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800595a:	f7fb f91d 	bl	8000b98 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4b38      	ldr	r3, [pc, #224]	; (8005a48 <UART_SetConfig+0x4e4>)
 8005966:	fba3 2301 	umull	r2, r3, r3, r1
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	; 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a33      	ldr	r2, [pc, #204]	; (8005a48 <UART_SetConfig+0x4e4>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005984:	441c      	add	r4, r3
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	673b      	str	r3, [r7, #112]	; 0x70
 800598e:	677a      	str	r2, [r7, #116]	; 0x74
 8005990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	415b      	adcs	r3, r3
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a4:	4641      	mov	r1, r8
 80059a6:	1851      	adds	r1, r2, r1
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	4649      	mov	r1, r9
 80059ac:	414b      	adcs	r3, r1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059bc:	4659      	mov	r1, fp
 80059be:	00cb      	lsls	r3, r1, #3
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c6:	4651      	mov	r1, sl
 80059c8:	00ca      	lsls	r2, r1, #3
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	4642      	mov	r2, r8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d6:	464b      	mov	r3, r9
 80059d8:	460a      	mov	r2, r1
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ea:	667a      	str	r2, [r7, #100]	; 0x64
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059f8:	4649      	mov	r1, r9
 80059fa:	008b      	lsls	r3, r1, #2
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a02:	4641      	mov	r1, r8
 8005a04:	008a      	lsls	r2, r1, #2
 8005a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a0a:	f7fb f8c5 	bl	8000b98 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <UART_SetConfig+0x4e4>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	; 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <UART_SetConfig+0x4e4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4422      	add	r2, r4
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	f107 001c 	add.w	r0, r7, #28
 8005a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d122      	bne.n	8005aaa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d105      	bne.n	8005a9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 fbee 	bl	8007280 <USB_CoreReset>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]
 8005aa8:	e01a      	b.n	8005ae0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fbe2 	bl	8007280 <USB_CoreReset>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ad2:	e005      	b.n	8005ae0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d10b      	bne.n	8005afe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f043 0206 	orr.w	r2, r3, #6
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b0a:	b004      	add	sp, #16
 8005b0c:	4770      	bx	lr
	...

08005b10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d165      	bne.n	8005bf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4a41      	ldr	r2, [pc, #260]	; (8005c2c <USB_SetTurnaroundTime+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d906      	bls.n	8005b3a <USB_SetTurnaroundTime+0x2a>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4a40      	ldr	r2, [pc, #256]	; (8005c30 <USB_SetTurnaroundTime+0x120>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d202      	bcs.n	8005b3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b34:	230f      	movs	r3, #15
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e062      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <USB_SetTurnaroundTime+0x120>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d306      	bcc.n	8005b50 <USB_SetTurnaroundTime+0x40>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <USB_SetTurnaroundTime+0x124>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d202      	bcs.n	8005b50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b4a:	230e      	movs	r3, #14
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e057      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4a38      	ldr	r2, [pc, #224]	; (8005c34 <USB_SetTurnaroundTime+0x124>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d306      	bcc.n	8005b66 <USB_SetTurnaroundTime+0x56>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4a37      	ldr	r2, [pc, #220]	; (8005c38 <USB_SetTurnaroundTime+0x128>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d202      	bcs.n	8005b66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b60:	230d      	movs	r3, #13
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e04c      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4a33      	ldr	r2, [pc, #204]	; (8005c38 <USB_SetTurnaroundTime+0x128>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d306      	bcc.n	8005b7c <USB_SetTurnaroundTime+0x6c>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4a32      	ldr	r2, [pc, #200]	; (8005c3c <USB_SetTurnaroundTime+0x12c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d802      	bhi.n	8005b7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b76:	230c      	movs	r3, #12
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e041      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4a2f      	ldr	r2, [pc, #188]	; (8005c3c <USB_SetTurnaroundTime+0x12c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d906      	bls.n	8005b92 <USB_SetTurnaroundTime+0x82>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <USB_SetTurnaroundTime+0x130>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d802      	bhi.n	8005b92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b8c:	230b      	movs	r3, #11
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e036      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <USB_SetTurnaroundTime+0x130>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d906      	bls.n	8005ba8 <USB_SetTurnaroundTime+0x98>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <USB_SetTurnaroundTime+0x134>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d802      	bhi.n	8005ba8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e02b      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <USB_SetTurnaroundTime+0x134>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d906      	bls.n	8005bbe <USB_SetTurnaroundTime+0xae>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <USB_SetTurnaroundTime+0x138>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d202      	bcs.n	8005bbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005bb8:	2309      	movs	r3, #9
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e020      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <USB_SetTurnaroundTime+0x138>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d306      	bcc.n	8005bd4 <USB_SetTurnaroundTime+0xc4>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <USB_SetTurnaroundTime+0x13c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d802      	bhi.n	8005bd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bce:	2308      	movs	r3, #8
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e015      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <USB_SetTurnaroundTime+0x13c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d906      	bls.n	8005bea <USB_SetTurnaroundTime+0xda>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <USB_SetTurnaroundTime+0x140>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d202      	bcs.n	8005bea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005be4:	2307      	movs	r3, #7
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e00a      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005bea:	2306      	movs	r3, #6
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e007      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005bf6:	2309      	movs	r3, #9
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e001      	b.n	8005c00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005bfc:	2309      	movs	r3, #9
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	00d8acbf 	.word	0x00d8acbf
 8005c30:	00e4e1c0 	.word	0x00e4e1c0
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	01067380 	.word	0x01067380
 8005c3c:	011a499f 	.word	0x011a499f
 8005c40:	01312cff 	.word	0x01312cff
 8005c44:	014ca43f 	.word	0x014ca43f
 8005c48:	016e3600 	.word	0x016e3600
 8005c4c:	01a6ab1f 	.word	0x01a6ab1f
 8005c50:	01e84800 	.word	0x01e84800

08005c54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 0201 	bic.w	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d115      	bne.n	8005ce6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	f7fc f81e 	bl	8001d08 <HAL_Delay>
      ms++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fa45 	bl	8007162 <USB_GetMode>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d01e      	beq.n	8005d1c <USB_SetCurrentMode+0x84>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b31      	cmp	r3, #49	; 0x31
 8005ce2:	d9f0      	bls.n	8005cc6 <USB_SetCurrentMode+0x2e>
 8005ce4:	e01a      	b.n	8005d1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d115      	bne.n	8005d18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f7fc f805 	bl	8001d08 <HAL_Delay>
      ms++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 fa2c 	bl	8007162 <USB_GetMode>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <USB_SetCurrentMode+0x84>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b31      	cmp	r3, #49	; 0x31
 8005d14:	d9f0      	bls.n	8005cf8 <USB_SetCurrentMode+0x60>
 8005d16:	e001      	b.n	8005d1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e005      	b.n	8005d28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b32      	cmp	r3, #50	; 0x32
 8005d20:	d101      	bne.n	8005d26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d30:	b084      	sub	sp, #16
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e009      	b.n	8005d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3340      	adds	r3, #64	; 0x40
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b0e      	cmp	r3, #14
 8005d68:	d9f2      	bls.n	8005d50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11c      	bne.n	8005daa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d7e:	f043 0302 	orr.w	r3, r3, #2
 8005d82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
 8005da8:	e00b      	b.n	8005dc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ddc:	461a      	mov	r2, r3
 8005dde:	680b      	ldr	r3, [r1, #0]
 8005de0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10c      	bne.n	8005e02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dee:	2100      	movs	r1, #0
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f965 	bl	80060c0 <USB_SetDevSpeed>
 8005df6:	e008      	b.n	8005e0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005df8:	2101      	movs	r1, #1
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f960 	bl	80060c0 <USB_SetDevSpeed>
 8005e00:	e003      	b.n	8005e0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e02:	2103      	movs	r1, #3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f95b 	bl	80060c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e0a:	2110      	movs	r1, #16
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f8f3 	bl	8005ff8 <USB_FlushTxFifo>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f91f 	bl	8006060 <USB_FlushRxFifo>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	461a      	mov	r2, r3
 8005e34:	2300      	movs	r3, #0
 8005e36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2300      	movs	r3, #0
 8005e42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	e043      	b.n	8005ede <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d118      	bne.n	8005ea0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	461a      	mov	r2, r3
 8005e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	e013      	b.n	8005eb2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e96:	461a      	mov	r2, r3
 8005e98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e008      	b.n	8005eb2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	461a      	mov	r2, r3
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ed6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	3301      	adds	r3, #1
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3b7      	bcc.n	8005e56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	e043      	b.n	8005f74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f02:	d118      	bne.n	8005f36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f16:	461a      	mov	r2, r3
 8005f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e013      	b.n	8005f48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e008      	b.n	8005f48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	2300      	movs	r3, #0
 8005f46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	2300      	movs	r3, #0
 8005f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3301      	adds	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d3b7      	bcc.n	8005eec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f043 0210 	orr.w	r2, r3, #16
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699a      	ldr	r2, [r3, #24]
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <USB_DevInit+0x2c4>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f043 0208 	orr.w	r2, r3, #8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d107      	bne.n	8005fe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fdc:	f043 0304 	orr.w	r3, r3, #4
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ff0:	b004      	add	sp, #16
 8005ff2:	4770      	bx	lr
 8005ff4:	803c3800 	.word	0x803c3800

08005ff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3301      	adds	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a13      	ldr	r2, [pc, #76]	; (800605c <USB_FlushTxFifo+0x64>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d901      	bls.n	8006018 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e01b      	b.n	8006050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	daf2      	bge.n	8006006 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	019b      	lsls	r3, r3, #6
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a08      	ldr	r2, [pc, #32]	; (800605c <USB_FlushTxFifo+0x64>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e006      	b.n	8006050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b20      	cmp	r3, #32
 800604c:	d0f0      	beq.n	8006030 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	00030d40 	.word	0x00030d40

08006060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a11      	ldr	r2, [pc, #68]	; (80060bc <USB_FlushRxFifo+0x5c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e018      	b.n	80060b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	daf2      	bge.n	800606c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2210      	movs	r2, #16
 800608e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a08      	ldr	r2, [pc, #32]	; (80060bc <USB_FlushRxFifo+0x5c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e006      	b.n	80060b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d0f0      	beq.n	8006090 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	00030d40 	.word	0x00030d40

080060c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e0:	4313      	orrs	r3, r2
 80060e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b087      	sub	sp, #28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0306 	and.w	r3, r3, #6
 800610a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
 8006116:	e00a      	b.n	800612e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d002      	beq.n	8006124 <USB_GetDevSpeed+0x32>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b06      	cmp	r3, #6
 8006122:	d102      	bne.n	800612a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006124:	2302      	movs	r3, #2
 8006126:	75fb      	strb	r3, [r7, #23]
 8006128:	e001      	b.n	800612e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800612a:	230f      	movs	r3, #15
 800612c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d13a      	bne.n	80061ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	2101      	movs	r1, #1
 800616a:	fa01 f303 	lsl.w	r3, r1, r3
 800616e:	b29b      	uxth	r3, r3
 8006170:	68f9      	ldr	r1, [r7, #12]
 8006172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006176:	4313      	orrs	r3, r2
 8006178:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d155      	bne.n	800623c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	059b      	lsls	r3, r3, #22
 80061b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061b4:	4313      	orrs	r3, r2
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e036      	b.n	800623c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	2101      	movs	r1, #1
 80061e0:	fa01 f303 	lsl.w	r3, r1, r3
 80061e4:	041b      	lsls	r3, r3, #16
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11a      	bne.n	800623c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	791b      	ldrb	r3, [r3, #4]
 8006220:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006222:	430b      	orrs	r3, r1
 8006224:	4313      	orrs	r3, r2
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d161      	bne.n	800632c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800627a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627e:	d11f      	bne.n	80062c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800629e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e0:	4013      	ands	r3, r2
 80062e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006304:	4013      	ands	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	0159      	lsls	r1, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	440b      	add	r3, r1
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	4619      	mov	r1, r3
 8006324:	4b35      	ldr	r3, [pc, #212]	; (80063fc <USB_DeactivateEndpoint+0x1b0>)
 8006326:	4013      	ands	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
 800632a:	e060      	b.n	80063ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006342:	d11f      	bne.n	8006384 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006362:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006382:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f303 	lsl.w	r3, r1, r3
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	43db      	mvns	r3, r3
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a4:	4013      	ands	r3, r2
 80063a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	041b      	lsls	r3, r3, #16
 80063c0:	43db      	mvns	r3, r3
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c8:	4013      	ands	r3, r2
 80063ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	0159      	lsls	r1, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	440b      	add	r3, r1
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	4619      	mov	r1, r3
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <USB_DeactivateEndpoint+0x1b4>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	ec337800 	.word	0xec337800
 8006400:	eff37800 	.word	0xeff37800

08006404 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b01      	cmp	r3, #1
 8006422:	f040 815c 	bne.w	80066de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d132      	bne.n	8006494 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800644c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648c:	0cdb      	lsrs	r3, r3, #19
 800648e:	04db      	lsls	r3, r3, #19
 8006490:	6113      	str	r3, [r2, #16]
 8006492:	e074      	b.n	800657e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	0cdb      	lsrs	r3, r3, #19
 80064b0:	04db      	lsls	r3, r3, #19
 80064b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6999      	ldr	r1, [r3, #24]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	440b      	add	r3, r1
 80064f0:	1e59      	subs	r1, r3, #1
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80064fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064fc:	4b9d      	ldr	r3, [pc, #628]	; (8006774 <USB_EPStartXfer+0x370>)
 80064fe:	400b      	ands	r3, r1
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	0148      	lsls	r0, r1, #5
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	4401      	add	r1, r0
 8006508:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800650c:	4313      	orrs	r3, r2
 800650e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006526:	69b9      	ldr	r1, [r7, #24]
 8006528:	0148      	lsls	r0, r1, #5
 800652a:	69f9      	ldr	r1, [r7, #28]
 800652c:	4401      	add	r1, r0
 800652e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006532:	4313      	orrs	r3, r2
 8006534:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d11f      	bne.n	800657e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800655c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800657c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d14b      	bne.n	800661c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	461a      	mov	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	791b      	ldrb	r3, [r3, #4]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d128      	bne.n	80065fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	e00f      	b.n	80065fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e133      	b.n	8006884 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006636:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800663a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	791b      	ldrb	r3, [r3, #4]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d015      	beq.n	8006670 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 811b 	beq.w	8006884 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	2101      	movs	r1, #1
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	69f9      	ldr	r1, [r7, #28]
 8006666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800666a:	4313      	orrs	r3, r2
 800666c:	634b      	str	r3, [r1, #52]	; 0x34
 800666e:	e109      	b.n	8006884 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d110      	bne.n	80066a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e00f      	b.n	80066c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6919      	ldr	r1, [r3, #16]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	b298      	uxth	r0, r3
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	4603      	mov	r3, r0
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fade 	bl	8006c98 <USB_WritePacket>
 80066dc:	e0d2      	b.n	8006884 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	0cdb      	lsrs	r3, r3, #19
 80066fa:	04db      	lsls	r3, r3, #19
 80066fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800671c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006720:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d126      	bne.n	8006778 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	0148      	lsls	r0, r1, #5
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	4401      	add	r1, r0
 8006748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800674c:	4313      	orrs	r3, r2
 800674e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800676e:	6113      	str	r3, [r2, #16]
 8006770:	e03a      	b.n	80067e8 <USB_EPStartXfer+0x3e4>
 8006772:	bf00      	nop
 8006774:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4413      	add	r3, r2
 8006782:	1e5a      	subs	r2, r3, #1
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	8afa      	ldrh	r2, [r7, #22]
 8006794:	fb03 f202 	mul.w	r2, r3, r2
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	8afb      	ldrh	r3, [r7, #22]
 80067ac:	04d9      	lsls	r1, r3, #19
 80067ae:	4b38      	ldr	r3, [pc, #224]	; (8006890 <USB_EPStartXfer+0x48c>)
 80067b0:	400b      	ands	r3, r1
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	0148      	lsls	r0, r1, #5
 80067b6:	69f9      	ldr	r1, [r7, #28]
 80067b8:	4401      	add	r1, r0
 80067ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067be:	4313      	orrs	r3, r2
 80067c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	0148      	lsls	r0, r1, #5
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	4401      	add	r1, r0
 80067e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067e4:	4313      	orrs	r3, r2
 80067e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d10d      	bne.n	800680a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6919      	ldr	r1, [r3, #16]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006806:	460a      	mov	r2, r1
 8006808:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	791b      	ldrb	r3, [r3, #4]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d128      	bne.n	8006864 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d110      	bne.n	8006844 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	440a      	add	r2, r1
 8006838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800683c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e00f      	b.n	8006864 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006862:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006882:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	1ff80000 	.word	0x1ff80000

08006894 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f040 80ce 	bne.w	8006a52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d132      	bne.n	8006924 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691c:	0cdb      	lsrs	r3, r3, #19
 800691e:	04db      	lsls	r3, r3, #19
 8006920:	6113      	str	r3, [r2, #16]
 8006922:	e04e      	b.n	80069c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693e:	0cdb      	lsrs	r3, r3, #19
 8006940:	04db      	lsls	r3, r3, #19
 8006942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006962:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006966:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800699a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b2:	6939      	ldr	r1, [r7, #16]
 80069b4:	0148      	lsls	r0, r1, #5
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	4401      	add	r1, r0
 80069ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069be:	4313      	orrs	r3, r2
 80069c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d11e      	bne.n	8006a06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069dc:	461a      	mov	r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	e097      	b.n	8006b36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8083 	beq.w	8006b36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	2101      	movs	r1, #1
 8006a42:	fa01 f303 	lsl.w	r3, r1, r3
 8006a46:	6979      	ldr	r1, [r7, #20]
 8006a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	634b      	str	r3, [r1, #52]	; 0x34
 8006a50:	e071      	b.n	8006b36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6c:	0cdb      	lsrs	r3, r3, #19
 8006a6e:	04db      	lsls	r3, r3, #19
 8006a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae4:	6939      	ldr	r1, [r7, #16]
 8006ae6:	0148      	lsls	r0, r1, #5
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	4401      	add	r1, r0
 8006aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006af0:	4313      	orrs	r3, r2
 8006af2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d10d      	bne.n	8006b16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6919      	ldr	r1, [r3, #16]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	460a      	mov	r2, r1
 8006b14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d14a      	bne.n	8006bf8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7a:	f040 8086 	bne.w	8006c8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ba0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	7812      	ldrb	r2, [r2, #0]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f242 7210 	movw	r2, #10000	; 0x2710
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d902      	bls.n	8006bdc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bda:	e056      	b.n	8006c8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf4:	d0e7      	beq.n	8006bc6 <USB_EPStopXfer+0x82>
 8006bf6:	e048      	b.n	8006c8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c10:	d13b      	bne.n	8006c8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	7812      	ldrb	r2, [r2, #0]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d902      	bls.n	8006c70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c6e:	e00c      	b.n	8006c8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c88:	d0e7      	beq.n	8006c5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	; 0x24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	71fb      	strb	r3, [r7, #7]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d123      	bne.n	8006d06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cbe:	88bb      	ldrh	r3, [r7, #4]
 8006cc0:	3303      	adds	r3, #3
 8006cc2:	089b      	lsrs	r3, r3, #2
 8006cc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e018      	b.n	8006cfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	031a      	lsls	r2, r3, #12
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd8:	461a      	mov	r2, r3
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3e2      	bcc.n	8006ccc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3724      	adds	r7, #36	; 0x24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b08b      	sub	sp, #44	; 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	089b      	lsrs	r3, r3, #2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	e014      	b.n	8006d6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	3301      	adds	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	3301      	adds	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	3301      	adds	r3, #1
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	6a3a      	ldr	r2, [r7, #32]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d3e6      	bcc.n	8006d40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01e      	beq.n	8006db6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	461a      	mov	r2, r3
 8006d84:	f107 0310 	add.w	r3, r7, #16
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	3301      	adds	r3, #1
 8006da2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	3301      	adds	r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006daa:	8bfb      	ldrh	r3, [r7, #30]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006db0:	8bfb      	ldrh	r3, [r7, #30]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ea      	bne.n	8006d8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	372c      	adds	r7, #44	; 0x2c
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d12c      	bne.n	8006e3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	db12      	blt.n	8006e18 <USB_EPSetStall+0x54>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00f      	beq.n	8006e18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	e02b      	b.n	8006e92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	db12      	blt.n	8006e72 <USB_EPSetStall+0xae>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00f      	beq.n	8006e72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d128      	bne.n	8006f0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	791b      	ldrb	r3, [r3, #4]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d003      	beq.n	8006eec <USB_EPClearStall+0x4c>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	791b      	ldrb	r3, [r3, #4]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d138      	bne.n	8006f5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	e027      	b.n	8006f5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	791b      	ldrb	r3, [r3, #4]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d003      	beq.n	8006f3e <USB_EPClearStall+0x9e>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d10f      	bne.n	8006f5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fa0:	68f9      	ldr	r1, [r7, #12]
 8006fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe6:	f023 0302 	bic.w	r3, r3, #2
 8006fea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4013      	ands	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	0c1b      	lsrs	r3, r3, #16
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	4013      	ands	r3, r2
 80070b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	b29b      	uxth	r3, r3
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4013      	ands	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070f8:	68bb      	ldr	r3, [r7, #8]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	01db      	lsls	r3, r3, #7
 8007138:	b2db      	uxtb	r3, r3
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4013      	ands	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007154:	68bb      	ldr	r3, [r7, #8]
}
 8007156:	4618      	mov	r0, r3
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 0301 	and.w	r3, r3, #1
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007198:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	460b      	mov	r3, r1
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	333c      	adds	r3, #60	; 0x3c
 80071da:	3304      	adds	r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4a26      	ldr	r2, [pc, #152]	; (800727c <USB_EP0_OutStart+0xb8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d90a      	bls.n	80071fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f8:	d101      	bne.n	80071fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e037      	b.n	800726e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	461a      	mov	r2, r3
 8007206:	2300      	movs	r3, #0
 8007208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800721c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f043 0318 	orr.w	r3, r3, #24
 8007230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007244:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10f      	bne.n	800726c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007266:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800726a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	4f54300a 	.word	0x4f54300a

08007280 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <USB_CoreReset+0x64>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e01b      	b.n	80072d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	daf2      	bge.n	800728c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <USB_CoreReset+0x64>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e006      	b.n	80072d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d0f0      	beq.n	80072b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	00030d40 	.word	0x00030d40

080072e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072f8:	f002 fcc4 	bl	8009c84 <USBD_static_malloc>
 80072fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32b0      	adds	r2, #176	; 0xb0
 800730e:	2100      	movs	r1, #0
 8007310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007314:	2302      	movs	r3, #2
 8007316:	e0d4      	b.n	80074c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007318:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800731c:	2100      	movs	r1, #0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f003 fc25 	bl	800ab6e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32b0      	adds	r2, #176	; 0xb0
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32b0      	adds	r2, #176	; 0xb0
 800733e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7c1b      	ldrb	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d138      	bne.n	80073c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007350:	4b5e      	ldr	r3, [pc, #376]	; (80074cc <USBD_CDC_Init+0x1e4>)
 8007352:	7819      	ldrb	r1, [r3, #0]
 8007354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007358:	2202      	movs	r2, #2
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f002 fb6f 	bl	8009a3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007360:	4b5a      	ldr	r3, [pc, #360]	; (80074cc <USBD_CDC_Init+0x1e4>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 020f 	and.w	r2, r3, #15
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3324      	adds	r3, #36	; 0x24
 8007376:	2201      	movs	r2, #1
 8007378:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800737a:	4b55      	ldr	r3, [pc, #340]	; (80074d0 <USBD_CDC_Init+0x1e8>)
 800737c:	7819      	ldrb	r1, [r3, #0]
 800737e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007382:	2202      	movs	r2, #2
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 fb5a 	bl	8009a3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800738a:	4b51      	ldr	r3, [pc, #324]	; (80074d0 <USBD_CDC_Init+0x1e8>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	f003 020f 	and.w	r2, r3, #15
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073a2:	2201      	movs	r2, #1
 80073a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073a6:	4b4b      	ldr	r3, [pc, #300]	; (80074d4 <USBD_CDC_Init+0x1ec>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	3326      	adds	r3, #38	; 0x26
 80073bc:	2210      	movs	r2, #16
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	e035      	b.n	800742e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073c2:	4b42      	ldr	r3, [pc, #264]	; (80074cc <USBD_CDC_Init+0x1e4>)
 80073c4:	7819      	ldrb	r1, [r3, #0]
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	2202      	movs	r2, #2
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f002 fb37 	bl	8009a3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073d0:	4b3e      	ldr	r3, [pc, #248]	; (80074cc <USBD_CDC_Init+0x1e4>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	f003 020f 	and.w	r2, r3, #15
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2201      	movs	r2, #1
 80073e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073ea:	4b39      	ldr	r3, [pc, #228]	; (80074d0 <USBD_CDC_Init+0x1e8>)
 80073ec:	7819      	ldrb	r1, [r3, #0]
 80073ee:	2340      	movs	r3, #64	; 0x40
 80073f0:	2202      	movs	r2, #2
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f002 fb23 	bl	8009a3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073f8:	4b35      	ldr	r3, [pc, #212]	; (80074d0 <USBD_CDC_Init+0x1e8>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 020f 	and.w	r2, r3, #15
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007410:	2201      	movs	r2, #1
 8007412:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007414:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <USBD_CDC_Init+0x1ec>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 020f 	and.w	r2, r3, #15
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	3326      	adds	r3, #38	; 0x26
 800742a:	2210      	movs	r2, #16
 800742c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800742e:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <USBD_CDC_Init+0x1ec>)
 8007430:	7819      	ldrb	r1, [r3, #0]
 8007432:	2308      	movs	r3, #8
 8007434:	2203      	movs	r2, #3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f002 fb01 	bl	8009a3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800743c:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <USBD_CDC_Init+0x1ec>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	3324      	adds	r3, #36	; 0x24
 8007452:	2201      	movs	r2, #1
 8007454:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	33b0      	adds	r3, #176	; 0xb0
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800748c:	2302      	movs	r3, #2
 800748e:	e018      	b.n	80074c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7c1b      	ldrb	r3, [r3, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007498:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <USBD_CDC_Init+0x1e8>)
 800749a:	7819      	ldrb	r1, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f002 fbb8 	bl	8009c1c <USBD_LL_PrepareReceive>
 80074ac:	e008      	b.n	80074c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ae:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <USBD_CDC_Init+0x1e8>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074b8:	2340      	movs	r3, #64	; 0x40
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f002 fbae 	bl	8009c1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000093 	.word	0x20000093
 80074d0:	20000094 	.word	0x20000094
 80074d4:	20000095 	.word	0x20000095

080074d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80074e4:	4b3a      	ldr	r3, [pc, #232]	; (80075d0 <USBD_CDC_DeInit+0xf8>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f002 facd 	bl	8009a8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80074f0:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <USBD_CDC_DeInit+0xf8>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f003 020f 	and.w	r2, r3, #15
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	3324      	adds	r3, #36	; 0x24
 8007506:	2200      	movs	r2, #0
 8007508:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800750a:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <USBD_CDC_DeInit+0xfc>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f002 faba 	bl	8009a8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007516:	4b2f      	ldr	r3, [pc, #188]	; (80075d4 <USBD_CDC_DeInit+0xfc>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f003 020f 	and.w	r2, r3, #15
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800752e:	2200      	movs	r2, #0
 8007530:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007532:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <USBD_CDC_DeInit+0x100>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f002 faa6 	bl	8009a8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800753e:	4b26      	ldr	r3, [pc, #152]	; (80075d8 <USBD_CDC_DeInit+0x100>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 020f 	and.w	r2, r3, #15
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	3324      	adds	r3, #36	; 0x24
 8007554:	2200      	movs	r2, #0
 8007556:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007558:	4b1f      	ldr	r3, [pc, #124]	; (80075d8 <USBD_CDC_DeInit+0x100>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	f003 020f 	and.w	r2, r3, #15
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	3326      	adds	r3, #38	; 0x26
 800756e:	2200      	movs	r2, #0
 8007570:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	32b0      	adds	r2, #176	; 0xb0
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01f      	beq.n	80075c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	33b0      	adds	r3, #176	; 0xb0
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32b0      	adds	r2, #176	; 0xb0
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f002 fb7a 	bl	8009ca0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32b0      	adds	r2, #176	; 0xb0
 80075b6:	2100      	movs	r1, #0
 80075b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000093 	.word	0x20000093
 80075d4:	20000094 	.word	0x20000094
 80075d8:	20000095 	.word	0x20000095

080075dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32b0      	adds	r2, #176	; 0xb0
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e0bf      	b.n	800778c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007614:	2b00      	cmp	r3, #0
 8007616:	d050      	beq.n	80076ba <USBD_CDC_Setup+0xde>
 8007618:	2b20      	cmp	r3, #32
 800761a:	f040 80af 	bne.w	800777c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	88db      	ldrh	r3, [r3, #6]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d03a      	beq.n	800769c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b25b      	sxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	da1b      	bge.n	8007668 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	33b0      	adds	r3, #176	; 0xb0
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007646:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	88d2      	ldrh	r2, [r2, #6]
 800764c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	88db      	ldrh	r3, [r3, #6]
 8007652:	2b07      	cmp	r3, #7
 8007654:	bf28      	it	cs
 8007656:	2307      	movcs	r3, #7
 8007658:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	89fa      	ldrh	r2, [r7, #14]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fd89 	bl	8009178 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007666:	e090      	b.n	800778a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	785a      	ldrb	r2, [r3, #1]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	88db      	ldrh	r3, [r3, #6]
 8007676:	2b3f      	cmp	r3, #63	; 0x3f
 8007678:	d803      	bhi.n	8007682 <USBD_CDC_Setup+0xa6>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88db      	ldrh	r3, [r3, #6]
 800767e:	b2da      	uxtb	r2, r3
 8007680:	e000      	b.n	8007684 <USBD_CDC_Setup+0xa8>
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800768a:	6939      	ldr	r1, [r7, #16]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007692:	461a      	mov	r2, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fd9b 	bl	80091d0 <USBD_CtlPrepareRx>
      break;
 800769a:	e076      	b.n	800778a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	33b0      	adds	r3, #176	; 0xb0
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	7850      	ldrb	r0, [r2, #1]
 80076b2:	2200      	movs	r2, #0
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	4798      	blx	r3
      break;
 80076b8:	e067      	b.n	800778a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	785b      	ldrb	r3, [r3, #1]
 80076be:	2b0b      	cmp	r3, #11
 80076c0:	d851      	bhi.n	8007766 <USBD_CDC_Setup+0x18a>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <USBD_CDC_Setup+0xec>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	08007775 	.word	0x08007775
 80076d0:	08007767 	.word	0x08007767
 80076d4:	08007767 	.word	0x08007767
 80076d8:	08007767 	.word	0x08007767
 80076dc:	08007767 	.word	0x08007767
 80076e0:	08007767 	.word	0x08007767
 80076e4:	08007767 	.word	0x08007767
 80076e8:	08007767 	.word	0x08007767
 80076ec:	08007767 	.word	0x08007767
 80076f0:	08007723 	.word	0x08007723
 80076f4:	0800774d 	.word	0x0800774d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b03      	cmp	r3, #3
 8007702:	d107      	bne.n	8007714 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007704:	f107 030a 	add.w	r3, r7, #10
 8007708:	2202      	movs	r2, #2
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 fd33 	bl	8009178 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007712:	e032      	b.n	800777a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fcbd 	bl	8009096 <USBD_CtlError>
            ret = USBD_FAIL;
 800771c:	2303      	movs	r3, #3
 800771e:	75fb      	strb	r3, [r7, #23]
          break;
 8007720:	e02b      	b.n	800777a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b03      	cmp	r3, #3
 800772c:	d107      	bne.n	800773e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800772e:	f107 030d 	add.w	r3, r7, #13
 8007732:	2201      	movs	r2, #1
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fd1e 	bl	8009178 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800773c:	e01d      	b.n	800777a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 fca8 	bl	8009096 <USBD_CtlError>
            ret = USBD_FAIL;
 8007746:	2303      	movs	r3, #3
 8007748:	75fb      	strb	r3, [r7, #23]
          break;
 800774a:	e016      	b.n	800777a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b03      	cmp	r3, #3
 8007756:	d00f      	beq.n	8007778 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fc9b 	bl	8009096 <USBD_CtlError>
            ret = USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007764:	e008      	b.n	8007778 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fc94 	bl	8009096 <USBD_CtlError>
          ret = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	75fb      	strb	r3, [r7, #23]
          break;
 8007772:	e002      	b.n	800777a <USBD_CDC_Setup+0x19e>
          break;
 8007774:	bf00      	nop
 8007776:	e008      	b.n	800778a <USBD_CDC_Setup+0x1ae>
          break;
 8007778:	bf00      	nop
      }
      break;
 800777a:	e006      	b.n	800778a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fc89 	bl	8009096 <USBD_CtlError>
      ret = USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	75fb      	strb	r3, [r7, #23]
      break;
 8007788:	bf00      	nop
  }

  return (uint8_t)ret;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	32b0      	adds	r2, #176	; 0xb0
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e065      	b.n	800788a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	32b0      	adds	r2, #176	; 0xb0
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	f003 020f 	and.w	r2, r3, #15
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	3318      	adds	r3, #24
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d02f      	beq.n	8007848 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	f003 020f 	and.w	r2, r3, #15
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	3318      	adds	r3, #24
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	f003 010f 	and.w	r1, r3, #15
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	460b      	mov	r3, r1
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	440b      	add	r3, r1
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4403      	add	r3, r0
 8007810:	3348      	adds	r3, #72	; 0x48
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	fbb2 f1f3 	udiv	r1, r2, r3
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800781e:	2b00      	cmp	r3, #0
 8007820:	d112      	bne.n	8007848 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	f003 020f 	and.w	r2, r3, #15
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3318      	adds	r3, #24
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800783a:	78f9      	ldrb	r1, [r7, #3]
 800783c:	2300      	movs	r3, #0
 800783e:	2200      	movs	r2, #0
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f9ca 	bl	8009bda <USBD_LL_Transmit>
 8007846:	e01f      	b.n	8007888 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	33b0      	adds	r3, #176	; 0xb0
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	33b0      	adds	r3, #176	; 0xb0
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	32b0      	adds	r2, #176	; 0xb0
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32b0      	adds	r2, #176	; 0xb0
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e01a      	b.n	80078fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 f9c8 	bl	8009c5e <USBD_LL_GetRxDataSize>
 80078ce:	4602      	mov	r2, r0
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	33b0      	adds	r3, #176	; 0xb0
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078f4:	4611      	mov	r1, r2
 80078f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32b0      	adds	r2, #176	; 0xb0
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	e025      	b.n	8007970 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	33b0      	adds	r3, #176	; 0xb0
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01a      	beq.n	800796e <USBD_CDC_EP0_RxReady+0x6c>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800793e:	2bff      	cmp	r3, #255	; 0xff
 8007940:	d015      	beq.n	800796e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	33b0      	adds	r3, #176	; 0xb0
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800795a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007962:	b292      	uxth	r2, r2
 8007964:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	22ff      	movs	r2, #255	; 0xff
 800796a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007980:	2182      	movs	r1, #130	; 0x82
 8007982:	4818      	ldr	r0, [pc, #96]	; (80079e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007984:	f000 fd4f 	bl	8008426 <USBD_GetEpDesc>
 8007988:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800798a:	2101      	movs	r1, #1
 800798c:	4815      	ldr	r0, [pc, #84]	; (80079e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800798e:	f000 fd4a 	bl	8008426 <USBD_GetEpDesc>
 8007992:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007994:	2181      	movs	r1, #129	; 0x81
 8007996:	4813      	ldr	r0, [pc, #76]	; (80079e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007998:	f000 fd45 	bl	8008426 <USBD_GetEpDesc>
 800799c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2210      	movs	r2, #16
 80079a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d006      	beq.n	80079be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b8:	711a      	strb	r2, [r3, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d006      	beq.n	80079d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079cc:	711a      	strb	r2, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2243      	movs	r2, #67	; 0x43
 80079d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000050 	.word	0x20000050

080079e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079f0:	2182      	movs	r1, #130	; 0x82
 80079f2:	4818      	ldr	r0, [pc, #96]	; (8007a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079f4:	f000 fd17 	bl	8008426 <USBD_GetEpDesc>
 80079f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079fa:	2101      	movs	r1, #1
 80079fc:	4815      	ldr	r0, [pc, #84]	; (8007a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079fe:	f000 fd12 	bl	8008426 <USBD_GetEpDesc>
 8007a02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a04:	2181      	movs	r1, #129	; 0x81
 8007a06:	4813      	ldr	r0, [pc, #76]	; (8007a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a08:	f000 fd0d 	bl	8008426 <USBD_GetEpDesc>
 8007a0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2210      	movs	r2, #16
 8007a18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2200      	movs	r2, #0
 8007a24:	711a      	strb	r2, [r3, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f042 0202 	orr.w	r2, r2, #2
 8007a2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	711a      	strb	r2, [r3, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f042 0202 	orr.w	r2, r2, #2
 8007a40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2243      	movs	r2, #67	; 0x43
 8007a46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000050 	.word	0x20000050

08007a58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a60:	2182      	movs	r1, #130	; 0x82
 8007a62:	4818      	ldr	r0, [pc, #96]	; (8007ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a64:	f000 fcdf 	bl	8008426 <USBD_GetEpDesc>
 8007a68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	4815      	ldr	r0, [pc, #84]	; (8007ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a6e:	f000 fcda 	bl	8008426 <USBD_GetEpDesc>
 8007a72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a74:	2181      	movs	r1, #129	; 0x81
 8007a76:	4813      	ldr	r0, [pc, #76]	; (8007ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a78:	f000 fcd5 	bl	8008426 <USBD_GetEpDesc>
 8007a7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2210      	movs	r2, #16
 8007a88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d006      	beq.n	8007a9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a98:	711a      	strb	r2, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aac:	711a      	strb	r2, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2243      	movs	r2, #67	; 0x43
 8007ab6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ab8:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000050 	.word	0x20000050

08007ac8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ad6:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	2000000c 	.word	0x2000000c

08007ae8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e009      	b.n	8007b10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	33b0      	adds	r3, #176	; 0xb0
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	32b0      	adds	r2, #176	; 0xb0
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e008      	b.n	8007b54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	32b0      	adds	r2, #176	; 0xb0
 8007b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e004      	b.n	8007b8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32b0      	adds	r2, #176	; 0xb0
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32b0      	adds	r2, #176	; 0xb0
 8007bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e025      	b.n	8007c1a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11f      	bne.n	8007c18 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007be0:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <USBD_CDC_TransmitPacket+0x88>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4403      	add	r3, r0
 8007bfa:	3318      	adds	r3, #24
 8007bfc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <USBD_CDC_TransmitPacket+0x88>)
 8007c00:	7819      	ldrb	r1, [r3, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 ffe3 	bl	8009bda <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000093 	.word	0x20000093

08007c28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32b0      	adds	r2, #176	; 0xb0
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32b0      	adds	r2, #176	; 0xb0
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e018      	b.n	8007c88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7c1b      	ldrb	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <USBD_CDC_ReceivePacket+0x68>)
 8007c60:	7819      	ldrb	r1, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 ffd5 	bl	8009c1c <USBD_LL_PrepareReceive>
 8007c72:	e008      	b.n	8007c86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <USBD_CDC_ReceivePacket+0x68>)
 8007c76:	7819      	ldrb	r1, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c7e:	2340      	movs	r3, #64	; 0x40
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 ffcb 	bl	8009c1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000094 	.word	0x20000094

08007c94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e01f      	b.n	8007cec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	79fa      	ldrb	r2, [r7, #7]
 8007cde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f001 fe45 	bl	8009970 <USBD_LL_Init>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e025      	b.n	8007d58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	32ae      	adds	r2, #174	; 0xae
 8007d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00f      	beq.n	8007d48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	32ae      	adds	r2, #174	; 0xae
 8007d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	f107 020e 	add.w	r2, r7, #14
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	4602      	mov	r2, r0
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fe4d 	bl	8009a08 <USBD_LL_Start>
 8007d6e:	4603      	mov	r3, r0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4611      	mov	r1, r2
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	4611      	mov	r1, r2
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 f908 	bl	8009022 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e20:	461a      	mov	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d01a      	beq.n	8007e6c <USBD_LL_SetupStage+0x72>
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d822      	bhi.n	8007e80 <USBD_LL_SetupStage+0x86>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <USBD_LL_SetupStage+0x4a>
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d00a      	beq.n	8007e58 <USBD_LL_SetupStage+0x5e>
 8007e42:	e01d      	b.n	8007e80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fb5f 	bl	8008510 <USBD_StdDevReq>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
      break;
 8007e56:	e020      	b.n	8007e9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fbc7 	bl	80085f4 <USBD_StdItfReq>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6a:	e016      	b.n	8007e9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc29 	bl	80086cc <USBD_StdEPReq>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7e:	e00c      	b.n	8007e9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 fe1a 	bl	8009ac8 <USBD_LL_StallEP>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
      break;
 8007e98:	bf00      	nop
  }

  return ret;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	460b      	mov	r3, r1
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d16e      	bne.n	8007f9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ec2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	f040 8098 	bne.w	8008000 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d913      	bls.n	8007f04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	1ad2      	subs	r2, r2, r3
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	bf28      	it	cs
 8007ef6:	4613      	movcs	r3, r2
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 f984 	bl	800920a <USBD_CtlContinueRx>
 8007f02:	e07d      	b.n	8008000 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d014      	beq.n	8007f3c <USBD_LL_DataOutStage+0x98>
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d81d      	bhi.n	8007f52 <USBD_LL_DataOutStage+0xae>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <USBD_LL_DataOutStage+0x7c>
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d003      	beq.n	8007f26 <USBD_LL_DataOutStage+0x82>
 8007f1e:	e018      	b.n	8007f52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75bb      	strb	r3, [r7, #22]
            break;
 8007f24:	e018      	b.n	8007f58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	4619      	mov	r1, r3
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fa5e 	bl	80083f2 <USBD_CoreFindIF>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75bb      	strb	r3, [r7, #22]
            break;
 8007f3a:	e00d      	b.n	8007f58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	4619      	mov	r1, r3
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fa60 	bl	800840c <USBD_CoreFindEP>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75bb      	strb	r3, [r7, #22]
            break;
 8007f50:	e002      	b.n	8007f58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75bb      	strb	r3, [r7, #22]
            break;
 8007f56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f58:	7dbb      	ldrb	r3, [r7, #22]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d119      	bne.n	8007f92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d113      	bne.n	8007f92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f6a:	7dba      	ldrb	r2, [r7, #22]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	32ae      	adds	r2, #174	; 0xae
 8007f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f7a:	7dba      	ldrb	r2, [r7, #22]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f82:	7dba      	ldrb	r2, [r7, #22]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	32ae      	adds	r2, #174	; 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f001 f94a 	bl	800922c <USBD_CtlSendStatus>
 8007f98:	e032      	b.n	8008000 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fa31 	bl	800840c <USBD_CoreFindEP>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fae:	7dbb      	ldrb	r3, [r7, #22]
 8007fb0:	2bff      	cmp	r3, #255	; 0xff
 8007fb2:	d025      	beq.n	8008000 <USBD_LL_DataOutStage+0x15c>
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d122      	bne.n	8008000 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d117      	bne.n	8007ff6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007fc6:	7dba      	ldrb	r2, [r7, #22]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	32ae      	adds	r2, #174	; 0xae
 8007fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00f      	beq.n	8007ff6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007fd6:	7dba      	ldrb	r2, [r7, #22]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007fde:	7dba      	ldrb	r2, [r7, #22]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	32ae      	adds	r2, #174	; 0xae
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	7afa      	ldrb	r2, [r7, #11]
 8007fec:	4611      	mov	r1, r2
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	4798      	blx	r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	e000      	b.n	8008002 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b086      	sub	sp, #24
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	460b      	mov	r3, r1
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008018:	7afb      	ldrb	r3, [r7, #11]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d16f      	bne.n	80080fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3314      	adds	r3, #20
 8008022:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800802a:	2b02      	cmp	r3, #2
 800802c:	d15a      	bne.n	80080e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	429a      	cmp	r2, r3
 8008038:	d914      	bls.n	8008064 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	1ad2      	subs	r2, r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	461a      	mov	r2, r3
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 f8ac 	bl	80091ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008056:	2300      	movs	r3, #0
 8008058:	2200      	movs	r2, #0
 800805a:	2100      	movs	r1, #0
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 fddd 	bl	8009c1c <USBD_LL_PrepareReceive>
 8008062:	e03f      	b.n	80080e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d11c      	bne.n	80080aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008078:	429a      	cmp	r2, r3
 800807a:	d316      	bcc.n	80080aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008086:	429a      	cmp	r2, r3
 8008088:	d20f      	bcs.n	80080aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f001 f88d 	bl	80091ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800809c:	2300      	movs	r3, #0
 800809e:	2200      	movs	r2, #0
 80080a0:	2100      	movs	r1, #0
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f001 fdba 	bl	8009c1c <USBD_LL_PrepareReceive>
 80080a8:	e01c      	b.n	80080e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d10f      	bne.n	80080d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080d6:	2180      	movs	r1, #128	; 0x80
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f001 fcf5 	bl	8009ac8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f001 f8b7 	bl	8009252 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d03a      	beq.n	8008164 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7ff fe42 	bl	8007d78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080fc:	e032      	b.n	8008164 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f97f 	bl	800840c <USBD_CoreFindEP>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2bff      	cmp	r3, #255	; 0xff
 8008116:	d025      	beq.n	8008164 <USBD_LL_DataInStage+0x15a>
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d122      	bne.n	8008164 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b03      	cmp	r3, #3
 8008128:	d11c      	bne.n	8008164 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800812a:	7dfa      	ldrb	r2, [r7, #23]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	32ae      	adds	r2, #174	; 0xae
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d014      	beq.n	8008164 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800813a:	7dfa      	ldrb	r2, [r7, #23]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008142:	7dfa      	ldrb	r2, [r7, #23]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	32ae      	adds	r2, #174	; 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	7afa      	ldrb	r2, [r7, #11]
 8008150:	4611      	mov	r1, r2
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	4798      	blx	r3
 8008156:	4603      	mov	r3, r0
 8008158:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800815a:	7dbb      	ldrb	r3, [r7, #22]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008160:	7dbb      	ldrb	r3, [r7, #22]
 8008162:	e000      	b.n	8008166 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d014      	beq.n	80081d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00e      	beq.n	80081d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6852      	ldr	r2, [r2, #4]
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	4611      	mov	r1, r2
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081d4:	2340      	movs	r3, #64	; 0x40
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fc2f 	bl	8009a3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	2200      	movs	r2, #0
 80081f4:	2180      	movs	r1, #128	; 0x80
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 fc21 	bl	8009a3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2240      	movs	r2, #64	; 0x40
 8008206:	621a      	str	r2, [r3, #32]

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	b2da      	uxtb	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2204      	movs	r2, #4
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b04      	cmp	r3, #4
 8008270:	d106      	bne.n	8008280 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d110      	bne.n	80082c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	32ae      	adds	r2, #174	; 0xae
 80082e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e01c      	b.n	800832a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d115      	bne.n	8008328 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32ae      	adds	r2, #174	; 0xae
 8008306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32ae      	adds	r2, #174	; 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	4611      	mov	r1, r2
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	32ae      	adds	r2, #174	; 0xae
 8008348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008350:	2303      	movs	r3, #3
 8008352:	e01c      	b.n	800838e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b03      	cmp	r3, #3
 800835e:	d115      	bne.n	800838c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	32ae      	adds	r2, #174	; 0xae
 800836a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32ae      	adds	r2, #174	; 0xae
 800837e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	4611      	mov	r1, r2
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00e      	beq.n	80083e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	6852      	ldr	r2, [r2, #4]
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	4611      	mov	r1, r2
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008418:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	885b      	ldrh	r3, [r3, #2]
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	429a      	cmp	r2, r3
 800844c:	d920      	bls.n	8008490 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008456:	e013      	b.n	8008480 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008458:	f107 030a 	add.w	r3, r7, #10
 800845c:	4619      	mov	r1, r3
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f000 f81b 	bl	800849a <USBD_GetNextDesc>
 8008464:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b05      	cmp	r3, #5
 800846c:	d108      	bne.n	8008480 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	789b      	ldrb	r3, [r3, #2]
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	429a      	cmp	r2, r3
 800847a:	d008      	beq.n	800848e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800847c:	2300      	movs	r3, #0
 800847e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	885b      	ldrh	r3, [r3, #2]
 8008484:	b29a      	uxth	r2, r3
 8008486:	897b      	ldrh	r3, [r7, #10]
 8008488:	429a      	cmp	r2, r3
 800848a:	d8e5      	bhi.n	8008458 <USBD_GetEpDesc+0x32>
 800848c:	e000      	b.n	8008490 <USBD_GetEpDesc+0x6a>
          break;
 800848e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008490:	693b      	ldr	r3, [r7, #16]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	881a      	ldrh	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4413      	add	r3, r2
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4413      	add	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084f2:	8a3b      	ldrh	r3, [r7, #16]
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	b21a      	sxth	r2, r3
 80084f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b21b      	sxth	r3, r3
 8008500:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008502:	89fb      	ldrh	r3, [r7, #14]
}
 8008504:	4618      	mov	r0, r3
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008526:	2b40      	cmp	r3, #64	; 0x40
 8008528:	d005      	beq.n	8008536 <USBD_StdDevReq+0x26>
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d857      	bhi.n	80085de <USBD_StdDevReq+0xce>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00f      	beq.n	8008552 <USBD_StdDevReq+0x42>
 8008532:	2b20      	cmp	r3, #32
 8008534:	d153      	bne.n	80085de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	32ae      	adds	r2, #174	; 0xae
 8008540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]
      break;
 8008550:	e04a      	b.n	80085e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b09      	cmp	r3, #9
 8008558:	d83b      	bhi.n	80085d2 <USBD_StdDevReq+0xc2>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <USBD_StdDevReq+0x50>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	080085b5 	.word	0x080085b5
 8008564:	080085c9 	.word	0x080085c9
 8008568:	080085d3 	.word	0x080085d3
 800856c:	080085bf 	.word	0x080085bf
 8008570:	080085d3 	.word	0x080085d3
 8008574:	08008593 	.word	0x08008593
 8008578:	08008589 	.word	0x08008589
 800857c:	080085d3 	.word	0x080085d3
 8008580:	080085ab 	.word	0x080085ab
 8008584:	0800859d 	.word	0x0800859d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa3c 	bl	8008a08 <USBD_GetDescriptor>
          break;
 8008590:	e024      	b.n	80085dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fba1 	bl	8008cdc <USBD_SetAddress>
          break;
 800859a:	e01f      	b.n	80085dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fbe0 	bl	8008d64 <USBD_SetConfig>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]
          break;
 80085a8:	e018      	b.n	80085dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fc83 	bl	8008eb8 <USBD_GetConfig>
          break;
 80085b2:	e013      	b.n	80085dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fcb4 	bl	8008f24 <USBD_GetStatus>
          break;
 80085bc:	e00e      	b.n	80085dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fce3 	bl	8008f8c <USBD_SetFeature>
          break;
 80085c6:	e009      	b.n	80085dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fd07 	bl	8008fde <USBD_ClrFeature>
          break;
 80085d0:	e004      	b.n	80085dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fd5e 	bl	8009096 <USBD_CtlError>
          break;
 80085da:	bf00      	nop
      }
      break;
 80085dc:	e004      	b.n	80085e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fd58 	bl	8009096 <USBD_CtlError>
      break;
 80085e6:	bf00      	nop
  }

  return ret;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop

080085f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800860a:	2b40      	cmp	r3, #64	; 0x40
 800860c:	d005      	beq.n	800861a <USBD_StdItfReq+0x26>
 800860e:	2b40      	cmp	r3, #64	; 0x40
 8008610:	d852      	bhi.n	80086b8 <USBD_StdItfReq+0xc4>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <USBD_StdItfReq+0x26>
 8008616:	2b20      	cmp	r3, #32
 8008618:	d14e      	bne.n	80086b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008620:	b2db      	uxtb	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	2b02      	cmp	r3, #2
 8008626:	d840      	bhi.n	80086aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	889b      	ldrh	r3, [r3, #4]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b01      	cmp	r3, #1
 8008630:	d836      	bhi.n	80086a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	889b      	ldrh	r3, [r3, #4]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff fed9 	bl	80083f2 <USBD_CoreFindIF>
 8008640:	4603      	mov	r3, r0
 8008642:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2bff      	cmp	r3, #255	; 0xff
 8008648:	d01d      	beq.n	8008686 <USBD_StdItfReq+0x92>
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d11a      	bne.n	8008686 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008650:	7bba      	ldrb	r2, [r7, #14]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32ae      	adds	r2, #174	; 0xae
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00f      	beq.n	8008680 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008660:	7bba      	ldrb	r2, [r7, #14]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008668:	7bba      	ldrb	r2, [r7, #14]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	32ae      	adds	r2, #174	; 0xae
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800867e:	e004      	b.n	800868a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008680:	2303      	movs	r3, #3
 8008682:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008684:	e001      	b.n	800868a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	88db      	ldrh	r3, [r3, #6]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d110      	bne.n	80086b4 <USBD_StdItfReq+0xc0>
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10d      	bne.n	80086b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fdc7 	bl	800922c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800869e:	e009      	b.n	80086b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fcf7 	bl	8009096 <USBD_CtlError>
          break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fcf2 	bl	8009096 <USBD_CtlError>
          break;
 80086b2:	e000      	b.n	80086b6 <USBD_StdItfReq+0xc2>
          break;
 80086b4:	bf00      	nop
      }
      break;
 80086b6:	e004      	b.n	80086c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fceb 	bl	8009096 <USBD_CtlError>
      break;
 80086c0:	bf00      	nop
  }

  return ret;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	889b      	ldrh	r3, [r3, #4]
 80086de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d007      	beq.n	80086fc <USBD_StdEPReq+0x30>
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	f200 817f 	bhi.w	80089f0 <USBD_StdEPReq+0x324>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02a      	beq.n	800874c <USBD_StdEPReq+0x80>
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	f040 817a 	bne.w	80089f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff fe83 	bl	800840c <USBD_CoreFindEP>
 8008706:	4603      	mov	r3, r0
 8008708:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800870a:	7b7b      	ldrb	r3, [r7, #13]
 800870c:	2bff      	cmp	r3, #255	; 0xff
 800870e:	f000 8174 	beq.w	80089fa <USBD_StdEPReq+0x32e>
 8008712:	7b7b      	ldrb	r3, [r7, #13]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 8170 	bne.w	80089fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800871a:	7b7a      	ldrb	r2, [r7, #13]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008722:	7b7a      	ldrb	r2, [r7, #13]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	32ae      	adds	r2, #174	; 0xae
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 8163 	beq.w	80089fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008734:	7b7a      	ldrb	r2, [r7, #13]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32ae      	adds	r2, #174	; 0xae
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800874a:	e156      	b.n	80089fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d008      	beq.n	8008766 <USBD_StdEPReq+0x9a>
 8008754:	2b03      	cmp	r3, #3
 8008756:	f300 8145 	bgt.w	80089e4 <USBD_StdEPReq+0x318>
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 809b 	beq.w	8008896 <USBD_StdEPReq+0x1ca>
 8008760:	2b01      	cmp	r3, #1
 8008762:	d03c      	beq.n	80087de <USBD_StdEPReq+0x112>
 8008764:	e13e      	b.n	80089e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d002      	beq.n	8008778 <USBD_StdEPReq+0xac>
 8008772:	2b03      	cmp	r3, #3
 8008774:	d016      	beq.n	80087a4 <USBD_StdEPReq+0xd8>
 8008776:	e02c      	b.n	80087d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00d      	beq.n	800879a <USBD_StdEPReq+0xce>
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b80      	cmp	r3, #128	; 0x80
 8008782:	d00a      	beq.n	800879a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 f99d 	bl	8009ac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800878e:	2180      	movs	r1, #128	; 0x80
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f999 	bl	8009ac8 <USBD_LL_StallEP>
 8008796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008798:	e020      	b.n	80087dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fc7a 	bl	8009096 <USBD_CtlError>
              break;
 80087a2:	e01b      	b.n	80087dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	885b      	ldrh	r3, [r3, #2]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10e      	bne.n	80087ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <USBD_StdEPReq+0xfe>
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b80      	cmp	r3, #128	; 0x80
 80087b6:	d008      	beq.n	80087ca <USBD_StdEPReq+0xfe>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	88db      	ldrh	r3, [r3, #6]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f97f 	bl	8009ac8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fd2e 	bl	800922c <USBD_CtlSendStatus>

              break;
 80087d0:	e004      	b.n	80087dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fc5e 	bl	8009096 <USBD_CtlError>
              break;
 80087da:	bf00      	nop
          }
          break;
 80087dc:	e107      	b.n	80089ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d002      	beq.n	80087f0 <USBD_StdEPReq+0x124>
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d016      	beq.n	800881c <USBD_StdEPReq+0x150>
 80087ee:	e04b      	b.n	8008888 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <USBD_StdEPReq+0x146>
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d00a      	beq.n	8008812 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 f961 	bl	8009ac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008806:	2180      	movs	r1, #128	; 0x80
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f95d 	bl	8009ac8 <USBD_LL_StallEP>
 800880e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008810:	e040      	b.n	8008894 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fc3e 	bl	8009096 <USBD_CtlError>
              break;
 800881a:	e03b      	b.n	8008894 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	885b      	ldrh	r3, [r3, #2]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d136      	bne.n	8008892 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 f967 	bl	8009b06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fcf7 	bl	800922c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fde2 	bl	800840c <USBD_CoreFindEP>
 8008848:	4603      	mov	r3, r0
 800884a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800884c:	7b7b      	ldrb	r3, [r7, #13]
 800884e:	2bff      	cmp	r3, #255	; 0xff
 8008850:	d01f      	beq.n	8008892 <USBD_StdEPReq+0x1c6>
 8008852:	7b7b      	ldrb	r3, [r7, #13]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d11c      	bne.n	8008892 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008858:	7b7a      	ldrb	r2, [r7, #13]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008860:	7b7a      	ldrb	r2, [r7, #13]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	; 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d010      	beq.n	8008892 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008870:	7b7a      	ldrb	r2, [r7, #13]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	32ae      	adds	r2, #174	; 0xae
 8008876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008886:	e004      	b.n	8008892 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fc03 	bl	8009096 <USBD_CtlError>
              break;
 8008890:	e000      	b.n	8008894 <USBD_StdEPReq+0x1c8>
              break;
 8008892:	bf00      	nop
          }
          break;
 8008894:	e0ab      	b.n	80089ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d002      	beq.n	80088a8 <USBD_StdEPReq+0x1dc>
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d032      	beq.n	800890c <USBD_StdEPReq+0x240>
 80088a6:	e097      	b.n	80089d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <USBD_StdEPReq+0x1f2>
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	2b80      	cmp	r3, #128	; 0x80
 80088b2:	d004      	beq.n	80088be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fbed 	bl	8009096 <USBD_CtlError>
                break;
 80088bc:	e091      	b.n	80089e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da0b      	bge.n	80088de <USBD_StdEPReq+0x212>
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	3310      	adds	r3, #16
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	3304      	adds	r3, #4
 80088dc:	e00b      	b.n	80088f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	3304      	adds	r3, #4
 80088f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2202      	movs	r2, #2
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc37 	bl	8009178 <USBD_CtlSendData>
              break;
 800890a:	e06a      	b.n	80089e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800890c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008910:	2b00      	cmp	r3, #0
 8008912:	da11      	bge.n	8008938 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	3324      	adds	r3, #36	; 0x24
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d117      	bne.n	800895e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fbb0 	bl	8009096 <USBD_CtlError>
                  break;
 8008936:	e054      	b.n	80089e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fb9d 	bl	8009096 <USBD_CtlError>
                  break;
 800895c:	e041      	b.n	80089e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800895e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	da0b      	bge.n	800897e <USBD_StdEPReq+0x2b2>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	3310      	adds	r3, #16
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	4413      	add	r3, r2
 800897a:	3304      	adds	r3, #4
 800897c:	e00b      	b.n	8008996 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	3304      	adds	r3, #4
 8008996:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <USBD_StdEPReq+0x2d8>
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d103      	bne.n	80089ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e00e      	b.n	80089ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 f8c7 	bl	8009b44 <USBD_LL_IsStallEP>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e002      	b.n	80089ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2202      	movs	r2, #2
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fbd1 	bl	8009178 <USBD_CtlSendData>
              break;
 80089d6:	e004      	b.n	80089e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fb5b 	bl	8009096 <USBD_CtlError>
              break;
 80089e0:	bf00      	nop
          }
          break;
 80089e2:	e004      	b.n	80089ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fb55 	bl	8009096 <USBD_CtlError>
          break;
 80089ec:	bf00      	nop
      }
      break;
 80089ee:	e005      	b.n	80089fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fb4f 	bl	8009096 <USBD_CtlError>
      break;
 80089f8:	e000      	b.n	80089fc <USBD_StdEPReq+0x330>
      break;
 80089fa:	bf00      	nop
  }

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	885b      	ldrh	r3, [r3, #2]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b06      	cmp	r3, #6
 8008a2a:	f200 8128 	bhi.w	8008c7e <USBD_GetDescriptor+0x276>
 8008a2e:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_GetDescriptor+0x2c>)
 8008a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008aa9 	.word	0x08008aa9
 8008a40:	08008c7f 	.word	0x08008c7f
 8008a44:	08008c7f 	.word	0x08008c7f
 8008a48:	08008c1f 	.word	0x08008c1f
 8008a4c:	08008c4b 	.word	0x08008c4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7c12      	ldrb	r2, [r2, #16]
 8008a5c:	f107 0108 	add.w	r1, r7, #8
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	60f8      	str	r0, [r7, #12]
      break;
 8008a66:	e112      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7c1b      	ldrb	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10d      	bne.n	8008a8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f107 0208 	add.w	r2, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	2202      	movs	r2, #2
 8008a88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a8a:	e100      	b.n	8008c8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	f107 0208 	add.w	r2, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	701a      	strb	r2, [r3, #0]
      break;
 8008aa6:	e0f2      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	885b      	ldrh	r3, [r3, #2]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	f200 80ac 	bhi.w	8008c0c <USBD_GetDescriptor+0x204>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_GetDescriptor+0xb4>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008ad5 	.word	0x08008ad5
 8008ac0:	08008b09 	.word	0x08008b09
 8008ac4:	08008b3d 	.word	0x08008b3d
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008ba5 	.word	0x08008ba5
 8008ad0:	08008bd9 	.word	0x08008bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af6:	e091      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 facb 	bl	8009096 <USBD_CtlError>
            err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
          break;
 8008b06:	e089      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2a:	e077      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fab1 	bl	8009096 <USBD_CtlError>
            err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3a:	e06f      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7c12      	ldrb	r2, [r2, #16]
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b5e:	e05d      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa97 	bl	8009096 <USBD_CtlError>
            err++;
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b6e:	e055      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b92:	e043      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa7d 	bl	8009096 <USBD_CtlError>
            err++;
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ba2:	e03b      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7c12      	ldrb	r2, [r2, #16]
 8008bbc:	f107 0108 	add.w	r1, r7, #8
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bc6:	e029      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa63 	bl	8009096 <USBD_CtlError>
            err++;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bd6:	e021      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7c12      	ldrb	r2, [r2, #16]
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfa:	e00f      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa49 	bl	8009096 <USBD_CtlError>
            err++;
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	3301      	adds	r3, #1
 8008c08:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0a:	e007      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa41 	bl	8009096 <USBD_CtlError>
          err++;
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	3301      	adds	r3, #1
 8008c18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c1a:	bf00      	nop
      }
      break;
 8008c1c:	e037      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7c1b      	ldrb	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f107 0208 	add.w	r2, r7, #8
 8008c32:	4610      	mov	r0, r2
 8008c34:	4798      	blx	r3
 8008c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c38:	e029      	b.n	8008c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa2a 	bl	8009096 <USBD_CtlError>
        err++;
 8008c42:	7afb      	ldrb	r3, [r7, #11]
 8008c44:	3301      	adds	r3, #1
 8008c46:	72fb      	strb	r3, [r7, #11]
      break;
 8008c48:	e021      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f107 0208 	add.w	r2, r7, #8
 8008c5e:	4610      	mov	r0, r2
 8008c60:	4798      	blx	r3
 8008c62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	2207      	movs	r2, #7
 8008c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c6c:	e00f      	b.n	8008c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fa10 	bl	8009096 <USBD_CtlError>
        err++;
 8008c76:	7afb      	ldrb	r3, [r7, #11]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c7c:	e007      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fa08 	bl	8009096 <USBD_CtlError>
      err++;
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c8c:	bf00      	nop
  }

  if (err != 0U)
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11e      	bne.n	8008cd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	88db      	ldrh	r3, [r3, #6]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d016      	beq.n	8008cca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00e      	beq.n	8008cc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	88da      	ldrh	r2, [r3, #6]
 8008ca6:	893b      	ldrh	r3, [r7, #8]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	bf28      	it	cs
 8008cac:	4613      	movcs	r3, r2
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cb2:	893b      	ldrh	r3, [r7, #8]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fa5d 	bl	8009178 <USBD_CtlSendData>
 8008cbe:	e009      	b.n	8008cd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9e7 	bl	8009096 <USBD_CtlError>
 8008cc8:	e004      	b.n	8008cd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 faae 	bl	800922c <USBD_CtlSendStatus>
 8008cd0:	e000      	b.n	8008cd4 <USBD_GetDescriptor+0x2cc>
    return;
 8008cd2:	bf00      	nop
  }
}
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop

08008cdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	889b      	ldrh	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d131      	bne.n	8008d52 <USBD_SetAddress+0x76>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d12d      	bne.n	8008d52 <USBD_SetAddress+0x76>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8008cfc:	d829      	bhi.n	8008d52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d104      	bne.n	8008d20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f9bc 	bl	8009096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1e:	e01d      	b.n	8008d5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7bfa      	ldrb	r2, [r7, #15]
 8008d24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 ff35 	bl	8009b9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa7a 	bl	800922c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d004      	beq.n	8008d48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2202      	movs	r2, #2
 8008d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d46:	e009      	b.n	8008d5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d50:	e004      	b.n	8008d5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f99e 	bl	8009096 <USBD_CtlError>
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	4b4e      	ldr	r3, [pc, #312]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008d7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d7c:	4b4d      	ldr	r3, [pc, #308]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d905      	bls.n	8008d90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f985 	bl	8009096 <USBD_CtlError>
    return USBD_FAIL;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e08c      	b.n	8008eaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d002      	beq.n	8008da2 <USBD_SetConfig+0x3e>
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d029      	beq.n	8008df4 <USBD_SetConfig+0x90>
 8008da0:	e075      	b.n	8008e8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008da2:	4b44      	ldr	r3, [pc, #272]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d020      	beq.n	8008dec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008daa:	4b42      	ldr	r3, [pc, #264]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008db4:	4b3f      	ldr	r3, [pc, #252]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fe ffe7 	bl	8007d8e <USBD_SetClassConfig>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d008      	beq.n	8008ddc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f962 	bl	8009096 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008dda:	e065      	b.n	8008ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fa25 	bl	800922c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2203      	movs	r2, #3
 8008de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dea:	e05d      	b.n	8008ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fa1d 	bl	800922c <USBD_CtlSendStatus>
      break;
 8008df2:	e059      	b.n	8008ea8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008df4:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d112      	bne.n	8008e22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e04:	4b2b      	ldr	r3, [pc, #172]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e0e:	4b29      	ldr	r3, [pc, #164]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fe ffd6 	bl	8007dc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa06 	bl	800922c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e20:	e042      	b.n	8008ea8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e22:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d02a      	beq.n	8008e86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7fe ffc4 	bl	8007dc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fe ff9d 	bl	8007d8e <USBD_SetClassConfig>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00f      	beq.n	8008e7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f918 	bl	8009096 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fe ffa9 	bl	8007dc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e7c:	e014      	b.n	8008ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f9d4 	bl	800922c <USBD_CtlSendStatus>
      break;
 8008e84:	e010      	b.n	8008ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f9d0 	bl	800922c <USBD_CtlSendStatus>
      break;
 8008e8c:	e00c      	b.n	8008ea8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f900 	bl	8009096 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e96:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <USBD_SetConfig+0x150>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7fe ff92 	bl	8007dc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea6:	bf00      	nop
  }

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000400 	.word	0x20000400

08008eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	88db      	ldrh	r3, [r3, #6]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d004      	beq.n	8008ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f8e2 	bl	8009096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ed2:	e023      	b.n	8008f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	dc02      	bgt.n	8008ee6 <USBD_GetConfig+0x2e>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	dc03      	bgt.n	8008eec <USBD_GetConfig+0x34>
 8008ee4:	e015      	b.n	8008f12 <USBD_GetConfig+0x5a>
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d00b      	beq.n	8008f02 <USBD_GetConfig+0x4a>
 8008eea:	e012      	b.n	8008f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f93c 	bl	8009178 <USBD_CtlSendData>
        break;
 8008f00:	e00c      	b.n	8008f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3304      	adds	r3, #4
 8008f06:	2201      	movs	r2, #1
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f934 	bl	8009178 <USBD_CtlSendData>
        break;
 8008f10:	e004      	b.n	8008f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f8be 	bl	8009096 <USBD_CtlError>
        break;
 8008f1a:	bf00      	nop
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d81e      	bhi.n	8008f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	88db      	ldrh	r3, [r3, #6]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d004      	beq.n	8008f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f8a5 	bl	8009096 <USBD_CtlError>
        break;
 8008f4c:	e01a      	b.n	8008f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d005      	beq.n	8008f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f043 0202 	orr.w	r2, r3, #2
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	2202      	movs	r2, #2
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f900 	bl	8009178 <USBD_CtlSendData>
      break;
 8008f78:	e004      	b.n	8008f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f88a 	bl	8009096 <USBD_CtlError>
      break;
 8008f82:	bf00      	nop
  }
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	885b      	ldrh	r3, [r3, #2]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d107      	bne.n	8008fae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f940 	bl	800922c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008fac:	e013      	b.n	8008fd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d10b      	bne.n	8008fce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	889b      	ldrh	r3, [r3, #4]
 8008fba:	0a1b      	lsrs	r3, r3, #8
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f930 	bl	800922c <USBD_CtlSendStatus>
}
 8008fcc:	e003      	b.n	8008fd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f860 	bl	8009096 <USBD_CtlError>
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d80b      	bhi.n	800900e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	885b      	ldrh	r3, [r3, #2]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d10c      	bne.n	8009018 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f910 	bl	800922c <USBD_CtlSendStatus>
      }
      break;
 800900c:	e004      	b.n	8009018 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f840 	bl	8009096 <USBD_CtlError>
      break;
 8009016:	e000      	b.n	800901a <USBD_ClrFeature+0x3c>
      break;
 8009018:	bf00      	nop
  }
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	781a      	ldrb	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fa41 	bl	80084d4 <SWAPBYTE>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3301      	adds	r3, #1
 800905e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff fa34 	bl	80084d4 <SWAPBYTE>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3301      	adds	r3, #1
 8009078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3301      	adds	r3, #1
 800907e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fa27 	bl	80084d4 <SWAPBYTE>
 8009086:	4603      	mov	r3, r0
 8009088:	461a      	mov	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	80da      	strh	r2, [r3, #6]
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090a0:	2180      	movs	r1, #128	; 0x80
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fd10 	bl	8009ac8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090a8:	2100      	movs	r1, #0
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fd0c 	bl	8009ac8 <USBD_LL_StallEP>
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d036      	beq.n	800913c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090d2:	6938      	ldr	r0, [r7, #16]
 80090d4:	f000 f836 	bl	8009144 <USBD_GetLen>
 80090d8:	4603      	mov	r3, r0
 80090da:	3301      	adds	r3, #1
 80090dc:	b29b      	uxth	r3, r3
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	4413      	add	r3, r2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	7812      	ldrb	r2, [r2, #0]
 80090f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	3301      	adds	r3, #1
 80090f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	2203      	movs	r2, #3
 8009100:	701a      	strb	r2, [r3, #0]
  idx++;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	3301      	adds	r3, #1
 8009106:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009108:	e013      	b.n	8009132 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	4413      	add	r3, r2
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	7812      	ldrb	r2, [r2, #0]
 8009114:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	3301      	adds	r3, #1
 800911a:	613b      	str	r3, [r7, #16]
    idx++;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	3301      	adds	r3, #1
 8009120:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	4413      	add	r3, r2
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]
    idx++;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	3301      	adds	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e7      	bne.n	800910a <USBD_GetString+0x52>
 800913a:	e000      	b.n	800913e <USBD_GetString+0x86>
    return;
 800913c:	bf00      	nop
  }
}
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009154:	e005      	b.n	8009162 <USBD_GetLen+0x1e>
  {
    len++;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	3301      	adds	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	3301      	adds	r3, #1
 8009160:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f5      	bne.n	8009156 <USBD_GetLen+0x12>
  }

  return len;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2202      	movs	r2, #2
 8009188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	2100      	movs	r1, #0
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fd1b 	bl	8009bda <USBD_LL_Transmit>

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	2100      	movs	r1, #0
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 fd0a 	bl	8009bda <USBD_LL_Transmit>

  return USBD_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2203      	movs	r2, #3
 80091e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	2100      	movs	r1, #0
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fd0e 	bl	8009c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	2100      	movs	r1, #0
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fcfd 	bl	8009c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2204      	movs	r2, #4
 8009238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fcc9 	bl	8009bda <USBD_LL_Transmit>

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2205      	movs	r2, #5
 800925e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fcd7 	bl	8009c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800927c:	2200      	movs	r2, #0
 800927e:	4912      	ldr	r1, [pc, #72]	; (80092c8 <MX_USB_DEVICE_Init+0x50>)
 8009280:	4812      	ldr	r0, [pc, #72]	; (80092cc <MX_USB_DEVICE_Init+0x54>)
 8009282:	f7fe fd07 	bl	8007c94 <USBD_Init>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800928c:	f7f8 fa9e 	bl	80017cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009290:	490f      	ldr	r1, [pc, #60]	; (80092d0 <MX_USB_DEVICE_Init+0x58>)
 8009292:	480e      	ldr	r0, [pc, #56]	; (80092cc <MX_USB_DEVICE_Init+0x54>)
 8009294:	f7fe fd2e 	bl	8007cf4 <USBD_RegisterClass>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800929e:	f7f8 fa95 	bl	80017cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092a2:	490c      	ldr	r1, [pc, #48]	; (80092d4 <MX_USB_DEVICE_Init+0x5c>)
 80092a4:	4809      	ldr	r0, [pc, #36]	; (80092cc <MX_USB_DEVICE_Init+0x54>)
 80092a6:	f7fe fc1f 	bl	8007ae8 <USBD_CDC_RegisterInterface>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092b0:	f7f8 fa8c 	bl	80017cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092b4:	4805      	ldr	r0, [pc, #20]	; (80092cc <MX_USB_DEVICE_Init+0x54>)
 80092b6:	f7fe fd53 	bl	8007d60 <USBD_Start>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092c0:	f7f8 fa84 	bl	80017cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092c4:	bf00      	nop
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	200000ac 	.word	0x200000ac
 80092cc:	20000404 	.word	0x20000404
 80092d0:	20000018 	.word	0x20000018
 80092d4:	20000098 	.word	0x20000098

080092d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092dc:	2200      	movs	r2, #0
 80092de:	4905      	ldr	r1, [pc, #20]	; (80092f4 <CDC_Init_FS+0x1c>)
 80092e0:	4805      	ldr	r0, [pc, #20]	; (80092f8 <CDC_Init_FS+0x20>)
 80092e2:	f7fe fc1b 	bl	8007b1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092e6:	4905      	ldr	r1, [pc, #20]	; (80092fc <CDC_Init_FS+0x24>)
 80092e8:	4803      	ldr	r0, [pc, #12]	; (80092f8 <CDC_Init_FS+0x20>)
 80092ea:	f7fe fc39 	bl	8007b60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20000ee0 	.word	0x20000ee0
 80092f8:	20000404 	.word	0x20000404
 80092fc:	200006e0 	.word	0x200006e0

08009300 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009304:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009306:	4618      	mov	r0, r3
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
 800931c:	4613      	mov	r3, r2
 800931e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	2b23      	cmp	r3, #35	; 0x23
 8009324:	d84a      	bhi.n	80093bc <CDC_Control_FS+0xac>
 8009326:	a201      	add	r2, pc, #4	; (adr r2, 800932c <CDC_Control_FS+0x1c>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	080093bd 	.word	0x080093bd
 8009330:	080093bd 	.word	0x080093bd
 8009334:	080093bd 	.word	0x080093bd
 8009338:	080093bd 	.word	0x080093bd
 800933c:	080093bd 	.word	0x080093bd
 8009340:	080093bd 	.word	0x080093bd
 8009344:	080093bd 	.word	0x080093bd
 8009348:	080093bd 	.word	0x080093bd
 800934c:	080093bd 	.word	0x080093bd
 8009350:	080093bd 	.word	0x080093bd
 8009354:	080093bd 	.word	0x080093bd
 8009358:	080093bd 	.word	0x080093bd
 800935c:	080093bd 	.word	0x080093bd
 8009360:	080093bd 	.word	0x080093bd
 8009364:	080093bd 	.word	0x080093bd
 8009368:	080093bd 	.word	0x080093bd
 800936c:	080093bd 	.word	0x080093bd
 8009370:	080093bd 	.word	0x080093bd
 8009374:	080093bd 	.word	0x080093bd
 8009378:	080093bd 	.word	0x080093bd
 800937c:	080093bd 	.word	0x080093bd
 8009380:	080093bd 	.word	0x080093bd
 8009384:	080093bd 	.word	0x080093bd
 8009388:	080093bd 	.word	0x080093bd
 800938c:	080093bd 	.word	0x080093bd
 8009390:	080093bd 	.word	0x080093bd
 8009394:	080093bd 	.word	0x080093bd
 8009398:	080093bd 	.word	0x080093bd
 800939c:	080093bd 	.word	0x080093bd
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	080093bd 	.word	0x080093bd
 80093a8:	080093bd 	.word	0x080093bd
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	080093bd 	.word	0x080093bd
 80093b4:	080093bd 	.word	0x080093bd
 80093b8:	080093bd 	.word	0x080093bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093bc:	bf00      	nop
  }

  return (USBD_OK);
 80093be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	4813      	ldr	r0, [pc, #76]	; (8009428 <CDC_Receive_FS+0x5c>)
 80093da:	f7fe fbc1 	bl	8007b60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093de:	4812      	ldr	r0, [pc, #72]	; (8009428 <CDC_Receive_FS+0x5c>)
 80093e0:	f7fe fc22 	bl	8007c28 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f81f 	bl	8009430 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b31      	cmp	r3, #49	; 0x31
 80093f8:	d106      	bne.n	8009408 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80093fa:	2201      	movs	r2, #1
 80093fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009400:	480a      	ldr	r0, [pc, #40]	; (800942c <CDC_Receive_FS+0x60>)
 8009402:	f7f9 fb3f 	bl	8002a84 <HAL_GPIO_WritePin>
 8009406:	e009      	b.n	800941c <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b30      	cmp	r3, #48	; 0x30
 800940e:	d105      	bne.n	800941c <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8009410:	2200      	movs	r2, #0
 8009412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009416:	4805      	ldr	r0, [pc, #20]	; (800942c <CDC_Receive_FS+0x60>)
 8009418:	f7f9 fb34 	bl	8002a84 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 800941c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000404 	.word	0x20000404
 800942c:	40020c00 	.word	0x40020c00

08009430 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009440:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <CDC_Transmit_FS+0x48>)
 8009442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009446:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009452:	2301      	movs	r3, #1
 8009454:	e00b      	b.n	800946e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009456:	887b      	ldrh	r3, [r7, #2]
 8009458:	461a      	mov	r2, r3
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4806      	ldr	r0, [pc, #24]	; (8009478 <CDC_Transmit_FS+0x48>)
 800945e:	f7fe fb5d 	bl	8007b1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009462:	4805      	ldr	r0, [pc, #20]	; (8009478 <CDC_Transmit_FS+0x48>)
 8009464:	f7fe fb9a 	bl	8007b9c <USBD_CDC_TransmitPacket>
 8009468:	4603      	mov	r3, r0
 800946a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000404 	.word	0x20000404

0800947c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800948e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
	...

080094a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2212      	movs	r2, #18
 80094b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094b2:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	200000c8 	.word	0x200000c8

080094c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2204      	movs	r2, #4
 80094d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094d6:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	200000dc 	.word	0x200000dc

080094e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	4907      	ldr	r1, [pc, #28]	; (800951c <USBD_FS_ProductStrDescriptor+0x34>)
 80094fe:	4808      	ldr	r0, [pc, #32]	; (8009520 <USBD_FS_ProductStrDescriptor+0x38>)
 8009500:	f7ff fdda 	bl	80090b8 <USBD_GetString>
 8009504:	e004      	b.n	8009510 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	4904      	ldr	r1, [pc, #16]	; (800951c <USBD_FS_ProductStrDescriptor+0x34>)
 800950a:	4805      	ldr	r0, [pc, #20]	; (8009520 <USBD_FS_ProductStrDescriptor+0x38>)
 800950c:	f7ff fdd4 	bl	80090b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009510:	4b02      	ldr	r3, [pc, #8]	; (800951c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	200016e0 	.word	0x200016e0
 8009520:	0800da20 	.word	0x0800da20

08009524 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	4904      	ldr	r1, [pc, #16]	; (8009544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009534:	4804      	ldr	r0, [pc, #16]	; (8009548 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009536:	f7ff fdbf 	bl	80090b8 <USBD_GetString>
  return USBD_StrDesc;
 800953a:	4b02      	ldr	r3, [pc, #8]	; (8009544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	200016e0 	.word	0x200016e0
 8009548:	0800da38 	.word	0x0800da38

0800954c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	221a      	movs	r2, #26
 800955c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800955e:	f000 f843 	bl	80095e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009562:	4b02      	ldr	r3, [pc, #8]	; (800956c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	200000e0 	.word	0x200000e0

08009570 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d105      	bne.n	800958e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4907      	ldr	r1, [pc, #28]	; (80095a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009586:	4808      	ldr	r0, [pc, #32]	; (80095a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009588:	f7ff fd96 	bl	80090b8 <USBD_GetString>
 800958c:	e004      	b.n	8009598 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	4904      	ldr	r1, [pc, #16]	; (80095a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009592:	4805      	ldr	r0, [pc, #20]	; (80095a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009594:	f7ff fd90 	bl	80090b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	200016e0 	.word	0x200016e0
 80095a8:	0800da4c 	.word	0x0800da4c

080095ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	6039      	str	r1, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4907      	ldr	r1, [pc, #28]	; (80095e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095c2:	4808      	ldr	r0, [pc, #32]	; (80095e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095c4:	f7ff fd78 	bl	80090b8 <USBD_GetString>
 80095c8:	e004      	b.n	80095d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4904      	ldr	r1, [pc, #16]	; (80095e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ce:	4805      	ldr	r0, [pc, #20]	; (80095e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095d0:	f7ff fd72 	bl	80090b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d4:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200016e0 	.word	0x200016e0
 80095e4:	0800da58 	.word	0x0800da58

080095e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095ee:	4b0f      	ldr	r3, [pc, #60]	; (800962c <Get_SerialNum+0x44>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095f4:	4b0e      	ldr	r3, [pc, #56]	; (8009630 <Get_SerialNum+0x48>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095fa:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <Get_SerialNum+0x4c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d009      	beq.n	8009622 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800960e:	2208      	movs	r2, #8
 8009610:	4909      	ldr	r1, [pc, #36]	; (8009638 <Get_SerialNum+0x50>)
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f814 	bl	8009640 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009618:	2204      	movs	r2, #4
 800961a:	4908      	ldr	r1, [pc, #32]	; (800963c <Get_SerialNum+0x54>)
 800961c:	68b8      	ldr	r0, [r7, #8]
 800961e:	f000 f80f 	bl	8009640 <IntToUnicode>
  }
}
 8009622:	bf00      	nop
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	1fff7a10 	.word	0x1fff7a10
 8009630:	1fff7a14 	.word	0x1fff7a14
 8009634:	1fff7a18 	.word	0x1fff7a18
 8009638:	200000e2 	.word	0x200000e2
 800963c:	200000f2 	.word	0x200000f2

08009640 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]
 8009656:	e027      	b.n	80096a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	0f1b      	lsrs	r3, r3, #28
 800965c:	2b09      	cmp	r3, #9
 800965e:	d80b      	bhi.n	8009678 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	0f1b      	lsrs	r3, r3, #28
 8009664:	b2da      	uxtb	r2, r3
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	4619      	mov	r1, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	440b      	add	r3, r1
 8009670:	3230      	adds	r2, #48	; 0x30
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	e00a      	b.n	800968e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	0f1b      	lsrs	r3, r3, #28
 800967c:	b2da      	uxtb	r2, r3
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	4619      	mov	r1, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	440b      	add	r3, r1
 8009688:	3237      	adds	r2, #55	; 0x37
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009694:	7dfb      	ldrb	r3, [r7, #23]
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	3301      	adds	r3, #1
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	4413      	add	r3, r2
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	3301      	adds	r3, #1
 80096a6:	75fb      	strb	r3, [r7, #23]
 80096a8:	7dfa      	ldrb	r2, [r7, #23]
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d3d3      	bcc.n	8009658 <IntToUnicode+0x18>
  }
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
	...

080096c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08a      	sub	sp, #40	; 0x28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	605a      	str	r2, [r3, #4]
 80096d2:	609a      	str	r2, [r3, #8]
 80096d4:	60da      	str	r2, [r3, #12]
 80096d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096e0:	d14b      	bne.n	800977a <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096e2:	2300      	movs	r3, #0
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	4a26      	ldr	r2, [pc, #152]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 80096ec:	f043 0301 	orr.w	r3, r3, #1
 80096f0:	6313      	str	r3, [r2, #48]	; 0x30
 80096f2:	4b24      	ldr	r3, [pc, #144]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 80096f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80096fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009704:	2302      	movs	r3, #2
 8009706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009708:	2300      	movs	r3, #0
 800970a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800970c:	2300      	movs	r3, #0
 800970e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009710:	230a      	movs	r3, #10
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	4619      	mov	r1, r3
 800971a:	481b      	ldr	r0, [pc, #108]	; (8009788 <HAL_PCD_MspInit+0xc8>)
 800971c:	f7f8 fffe 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009726:	2302      	movs	r3, #2
 8009728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800972a:	2301      	movs	r3, #1
 800972c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800972e:	2300      	movs	r3, #0
 8009730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009732:	230a      	movs	r3, #10
 8009734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009736:	f107 0314 	add.w	r3, r7, #20
 800973a:	4619      	mov	r1, r3
 800973c:	4812      	ldr	r0, [pc, #72]	; (8009788 <HAL_PCD_MspInit+0xc8>)
 800973e:	f7f8 ffed 	bl	800271c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009742:	4b10      	ldr	r3, [pc, #64]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	4a0f      	ldr	r2, [pc, #60]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 8009748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974c:	6353      	str	r3, [r2, #52]	; 0x34
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 8009754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009756:	4a0b      	ldr	r2, [pc, #44]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 8009758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800975c:	6453      	str	r3, [r2, #68]	; 0x44
 800975e:	4b09      	ldr	r3, [pc, #36]	; (8009784 <HAL_PCD_MspInit+0xc4>)
 8009760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	2043      	movs	r0, #67	; 0x43
 8009770:	f7f8 ff0b 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009774:	2043      	movs	r0, #67	; 0x43
 8009776:	f7f8 ff24 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800977a:	bf00      	nop
 800977c:	3728      	adds	r7, #40	; 0x28
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40023800 	.word	0x40023800
 8009788:	40020000 	.word	0x40020000

0800978c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7fe fb29 	bl	8007dfa <USBD_LL_SetupStage>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097c2:	78fa      	ldrb	r2, [r7, #3]
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4613      	mov	r3, r2
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	4619      	mov	r1, r3
 80097da:	f7fe fb63 	bl	8007ea4 <USBD_LL_DataOutStage>
}
 80097de:	bf00      	nop
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	334c      	adds	r3, #76	; 0x4c
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	4619      	mov	r1, r3
 800980e:	f7fe fbfc 	bl	800800a <USBD_LL_DataInStage>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fd30 	bl	800828e <USBD_LL_SOF>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800983e:	2301      	movs	r3, #1
 8009840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	e008      	b.n	8009862 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d102      	bne.n	800985e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
 800985c:	e001      	b.n	8009862 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800985e:	f7f7 ffb5 	bl	80017cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009868:	7bfa      	ldrb	r2, [r7, #15]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fcd0 	bl	8008212 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fc78 	bl	800816e <USBD_LL_Reset>
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fccb 	bl	8008232 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6812      	ldr	r2, [r2, #0]
 80098aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <HAL_PCD_SuspendCallback+0x48>)
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	4a03      	ldr	r2, [pc, #12]	; (80098d0 <HAL_PCD_SuspendCallback+0x48>)
 80098c2:	f043 0306 	orr.w	r3, r3, #6
 80098c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	e000ed00 	.word	0xe000ed00

080098d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fcbb 	bl	800825e <USBD_LL_Resume>
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fd13 	bl	8008332 <USBD_LL_IsoOUTIncomplete>
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fccf 	bl	80082ce <USBD_LL_IsoINIncomplete>
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fd25 	bl	8008396 <USBD_LL_DevConnected>
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fd22 	bl	80083ac <USBD_LL_DevDisconnected>
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d13c      	bne.n	80099fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009980:	4a20      	ldr	r2, [pc, #128]	; (8009a04 <USBD_LL_Init+0x94>)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a1e      	ldr	r2, [pc, #120]	; (8009a04 <USBD_LL_Init+0x94>)
 800998c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009990:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <USBD_LL_Init+0x94>)
 8009992:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009996:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009998:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <USBD_LL_Init+0x94>)
 800999a:	2204      	movs	r2, #4
 800999c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800999e:	4b19      	ldr	r3, [pc, #100]	; (8009a04 <USBD_LL_Init+0x94>)
 80099a0:	2202      	movs	r2, #2
 80099a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099a4:	4b17      	ldr	r3, [pc, #92]	; (8009a04 <USBD_LL_Init+0x94>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099aa:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <USBD_LL_Init+0x94>)
 80099ac:	2202      	movs	r2, #2
 80099ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099b0:	4b14      	ldr	r3, [pc, #80]	; (8009a04 <USBD_LL_Init+0x94>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <USBD_LL_Init+0x94>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099bc:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <USBD_LL_Init+0x94>)
 80099be:	2200      	movs	r2, #0
 80099c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80099c2:	4b10      	ldr	r3, [pc, #64]	; (8009a04 <USBD_LL_Init+0x94>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099c8:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <USBD_LL_Init+0x94>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099ce:	480d      	ldr	r0, [pc, #52]	; (8009a04 <USBD_LL_Init+0x94>)
 80099d0:	f7f9 f871 	bl	8002ab6 <HAL_PCD_Init>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099da:	f7f7 fef7 	bl	80017cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099de:	2180      	movs	r1, #128	; 0x80
 80099e0:	4808      	ldr	r0, [pc, #32]	; (8009a04 <USBD_LL_Init+0x94>)
 80099e2:	f7fa fac8 	bl	8003f76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099e6:	2240      	movs	r2, #64	; 0x40
 80099e8:	2100      	movs	r1, #0
 80099ea:	4806      	ldr	r0, [pc, #24]	; (8009a04 <USBD_LL_Init+0x94>)
 80099ec:	f7fa fa7c 	bl	8003ee8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099f0:	2280      	movs	r2, #128	; 0x80
 80099f2:	2101      	movs	r1, #1
 80099f4:	4803      	ldr	r0, [pc, #12]	; (8009a04 <USBD_LL_Init+0x94>)
 80099f6:	f7fa fa77 	bl	8003ee8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	200018e0 	.word	0x200018e0

08009a08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f9 f966 	bl	8002cf0 <HAL_PCD_Start>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f942 	bl	8009cb4 <USBD_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	70fb      	strb	r3, [r7, #3]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70bb      	strb	r3, [r7, #2]
 8009a54:	4613      	mov	r3, r2
 8009a56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a66:	78bb      	ldrb	r3, [r7, #2]
 8009a68:	883a      	ldrh	r2, [r7, #0]
 8009a6a:	78f9      	ldrb	r1, [r7, #3]
 8009a6c:	f7f9 fe37 	bl	80036de <HAL_PCD_EP_Open>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f91c 	bl	8009cb4 <USBD_Get_USB_Status>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	460b      	mov	r3, r1
 8009a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7f9 fe80 	bl	80037ae <HAL_PCD_EP_Close>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 f8fd 	bl	8009cb4 <USBD_Get_USB_Status>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ae2:	78fa      	ldrb	r2, [r7, #3]
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f9 ff58 	bl	800399c <HAL_PCD_EP_SetStall>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f8de 	bl	8009cb4 <USBD_Get_USB_Status>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b20:	78fa      	ldrb	r2, [r7, #3]
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f9 ff9d 	bl	8003a64 <HAL_PCD_EP_ClrStall>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 f8bf 	bl	8009cb4 <USBD_Get_USB_Status>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da0b      	bge.n	8009b78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	440b      	add	r3, r1
 8009b72:	333e      	adds	r3, #62	; 0x3e
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	e00b      	b.n	8009b90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	4613      	mov	r3, r2
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	440b      	add	r3, r1
 8009b8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009b8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f9 fd6a 	bl	8003694 <HAL_PCD_SetAddress>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 f874 	bl	8009cb4 <USBD_Get_USB_Status>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b086      	sub	sp, #24
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	460b      	mov	r3, r1
 8009be8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bf8:	7af9      	ldrb	r1, [r7, #11]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	f7f9 fe83 	bl	8003908 <HAL_PCD_EP_Transmit>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f853 	bl	8009cb4 <USBD_Get_USB_Status>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c12:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	607a      	str	r2, [r7, #4]
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c3a:	7af9      	ldrb	r1, [r7, #11]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	f7f9 fdff 	bl	8003842 <HAL_PCD_EP_Receive>
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f832 	bl	8009cb4 <USBD_Get_USB_Status>
 8009c50:	4603      	mov	r3, r0
 8009c52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c54:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c70:	78fa      	ldrb	r2, [r7, #3]
 8009c72:	4611      	mov	r1, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7f9 fe2f 	bl	80038d8 <HAL_PCD_EP_GetRxCount>
 8009c7a:	4603      	mov	r3, r0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c8c:	4b03      	ldr	r3, [pc, #12]	; (8009c9c <USBD_static_malloc+0x18>)
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	20001dec 	.word	0x20001dec

08009ca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d817      	bhi.n	8009cf8 <USBD_Get_USB_Status+0x44>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <USBD_Get_USB_Status+0x1c>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009ce1 	.word	0x08009ce1
 8009cd4:	08009ce7 	.word	0x08009ce7
 8009cd8:	08009ced 	.word	0x08009ced
 8009cdc:	08009cf3 	.word	0x08009cf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce4:	e00b      	b.n	8009cfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cea:	e008      	b.n	8009cfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf0:	e005      	b.n	8009cfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf6:	e002      	b.n	8009cfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfc:	bf00      	nop
  }
  return usb_status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <atof>:
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	f000 be0f 	b.w	800a930 <strtod>

08009d12 <sulp>:
 8009d12:	b570      	push	{r4, r5, r6, lr}
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	ec45 4b10 	vmov	d0, r4, r5
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	f002 f82f 	bl	800bd80 <__ulp>
 8009d22:	ec51 0b10 	vmov	r0, r1, d0
 8009d26:	b17e      	cbz	r6, 8009d48 <sulp+0x36>
 8009d28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dd09      	ble.n	8009d48 <sulp+0x36>
 8009d34:	051b      	lsls	r3, r3, #20
 8009d36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d3a:	2400      	movs	r4, #0
 8009d3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d40:	4622      	mov	r2, r4
 8009d42:	462b      	mov	r3, r5
 8009d44:	f7f6 fc58 	bl	80005f8 <__aeabi_dmul>
 8009d48:	bd70      	pop	{r4, r5, r6, pc}
 8009d4a:	0000      	movs	r0, r0
 8009d4c:	0000      	movs	r0, r0
	...

08009d50 <_strtod_l>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	ed2d 8b02 	vpush	{d8}
 8009d58:	b09b      	sub	sp, #108	; 0x6c
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009d5e:	2200      	movs	r2, #0
 8009d60:	9216      	str	r2, [sp, #88]	; 0x58
 8009d62:	460d      	mov	r5, r1
 8009d64:	f04f 0800 	mov.w	r8, #0
 8009d68:	f04f 0900 	mov.w	r9, #0
 8009d6c:	460a      	mov	r2, r1
 8009d6e:	9215      	str	r2, [sp, #84]	; 0x54
 8009d70:	7811      	ldrb	r1, [r2, #0]
 8009d72:	292b      	cmp	r1, #43	; 0x2b
 8009d74:	d04c      	beq.n	8009e10 <_strtod_l+0xc0>
 8009d76:	d83a      	bhi.n	8009dee <_strtod_l+0x9e>
 8009d78:	290d      	cmp	r1, #13
 8009d7a:	d834      	bhi.n	8009de6 <_strtod_l+0x96>
 8009d7c:	2908      	cmp	r1, #8
 8009d7e:	d834      	bhi.n	8009dea <_strtod_l+0x9a>
 8009d80:	2900      	cmp	r1, #0
 8009d82:	d03d      	beq.n	8009e00 <_strtod_l+0xb0>
 8009d84:	2200      	movs	r2, #0
 8009d86:	920a      	str	r2, [sp, #40]	; 0x28
 8009d88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009d8a:	7832      	ldrb	r2, [r6, #0]
 8009d8c:	2a30      	cmp	r2, #48	; 0x30
 8009d8e:	f040 80b4 	bne.w	8009efa <_strtod_l+0x1aa>
 8009d92:	7872      	ldrb	r2, [r6, #1]
 8009d94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009d98:	2a58      	cmp	r2, #88	; 0x58
 8009d9a:	d170      	bne.n	8009e7e <_strtod_l+0x12e>
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	ab16      	add	r3, sp, #88	; 0x58
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4a8e      	ldr	r2, [pc, #568]	; (8009fe0 <_strtod_l+0x290>)
 8009da8:	ab17      	add	r3, sp, #92	; 0x5c
 8009daa:	a915      	add	r1, sp, #84	; 0x54
 8009dac:	4620      	mov	r0, r4
 8009dae:	f001 f8c5 	bl	800af3c <__gethex>
 8009db2:	f010 070f 	ands.w	r7, r0, #15
 8009db6:	4605      	mov	r5, r0
 8009db8:	d005      	beq.n	8009dc6 <_strtod_l+0x76>
 8009dba:	2f06      	cmp	r7, #6
 8009dbc:	d12a      	bne.n	8009e14 <_strtod_l+0xc4>
 8009dbe:	3601      	adds	r6, #1
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9615      	str	r6, [sp, #84]	; 0x54
 8009dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 857f 	bne.w	800a8cc <_strtod_l+0xb7c>
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	b1db      	cbz	r3, 8009e0a <_strtod_l+0xba>
 8009dd2:	4642      	mov	r2, r8
 8009dd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009dd8:	ec43 2b10 	vmov	d0, r2, r3
 8009ddc:	b01b      	add	sp, #108	; 0x6c
 8009dde:	ecbd 8b02 	vpop	{d8}
 8009de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de6:	2920      	cmp	r1, #32
 8009de8:	d1cc      	bne.n	8009d84 <_strtod_l+0x34>
 8009dea:	3201      	adds	r2, #1
 8009dec:	e7bf      	b.n	8009d6e <_strtod_l+0x1e>
 8009dee:	292d      	cmp	r1, #45	; 0x2d
 8009df0:	d1c8      	bne.n	8009d84 <_strtod_l+0x34>
 8009df2:	2101      	movs	r1, #1
 8009df4:	910a      	str	r1, [sp, #40]	; 0x28
 8009df6:	1c51      	adds	r1, r2, #1
 8009df8:	9115      	str	r1, [sp, #84]	; 0x54
 8009dfa:	7852      	ldrb	r2, [r2, #1]
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	d1c3      	bne.n	8009d88 <_strtod_l+0x38>
 8009e00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e02:	9515      	str	r5, [sp, #84]	; 0x54
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f040 855f 	bne.w	800a8c8 <_strtod_l+0xb78>
 8009e0a:	4642      	mov	r2, r8
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	e7e3      	b.n	8009dd8 <_strtod_l+0x88>
 8009e10:	2100      	movs	r1, #0
 8009e12:	e7ef      	b.n	8009df4 <_strtod_l+0xa4>
 8009e14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e16:	b13a      	cbz	r2, 8009e28 <_strtod_l+0xd8>
 8009e18:	2135      	movs	r1, #53	; 0x35
 8009e1a:	a818      	add	r0, sp, #96	; 0x60
 8009e1c:	f002 f8ad 	bl	800bf7a <__copybits>
 8009e20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e22:	4620      	mov	r0, r4
 8009e24:	f001 fc80 	bl	800b728 <_Bfree>
 8009e28:	3f01      	subs	r7, #1
 8009e2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e2c:	2f04      	cmp	r7, #4
 8009e2e:	d806      	bhi.n	8009e3e <_strtod_l+0xee>
 8009e30:	e8df f007 	tbb	[pc, r7]
 8009e34:	201d0314 	.word	0x201d0314
 8009e38:	14          	.byte	0x14
 8009e39:	00          	.byte	0x00
 8009e3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009e3e:	05e9      	lsls	r1, r5, #23
 8009e40:	bf48      	it	mi
 8009e42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e4a:	0d1b      	lsrs	r3, r3, #20
 8009e4c:	051b      	lsls	r3, r3, #20
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1b9      	bne.n	8009dc6 <_strtod_l+0x76>
 8009e52:	f000 ff5f 	bl	800ad14 <__errno>
 8009e56:	2322      	movs	r3, #34	; 0x22
 8009e58:	6003      	str	r3, [r0, #0]
 8009e5a:	e7b4      	b.n	8009dc6 <_strtod_l+0x76>
 8009e5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009e60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009e6c:	e7e7      	b.n	8009e3e <_strtod_l+0xee>
 8009e6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009fe8 <_strtod_l+0x298>
 8009e72:	e7e4      	b.n	8009e3e <_strtod_l+0xee>
 8009e74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009e78:	f04f 38ff 	mov.w	r8, #4294967295
 8009e7c:	e7df      	b.n	8009e3e <_strtod_l+0xee>
 8009e7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	9215      	str	r2, [sp, #84]	; 0x54
 8009e84:	785b      	ldrb	r3, [r3, #1]
 8009e86:	2b30      	cmp	r3, #48	; 0x30
 8009e88:	d0f9      	beq.n	8009e7e <_strtod_l+0x12e>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d09b      	beq.n	8009dc6 <_strtod_l+0x76>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f04f 0a00 	mov.w	sl, #0
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009e9e:	46d3      	mov	fp, sl
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009ea4:	7806      	ldrb	r6, [r0, #0]
 8009ea6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009eaa:	b2d9      	uxtb	r1, r3
 8009eac:	2909      	cmp	r1, #9
 8009eae:	d926      	bls.n	8009efe <_strtod_l+0x1ae>
 8009eb0:	494c      	ldr	r1, [pc, #304]	; (8009fe4 <_strtod_l+0x294>)
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f000 fe63 	bl	800ab7e <strncmp>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d030      	beq.n	8009f1e <_strtod_l+0x1ce>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	4632      	mov	r2, r6
 8009ec0:	9005      	str	r0, [sp, #20]
 8009ec2:	465e      	mov	r6, fp
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2a65      	cmp	r2, #101	; 0x65
 8009ec8:	d001      	beq.n	8009ece <_strtod_l+0x17e>
 8009eca:	2a45      	cmp	r2, #69	; 0x45
 8009ecc:	d113      	bne.n	8009ef6 <_strtod_l+0x1a6>
 8009ece:	b91e      	cbnz	r6, 8009ed8 <_strtod_l+0x188>
 8009ed0:	9a04      	ldr	r2, [sp, #16]
 8009ed2:	4302      	orrs	r2, r0
 8009ed4:	d094      	beq.n	8009e00 <_strtod_l+0xb0>
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009eda:	1c6a      	adds	r2, r5, #1
 8009edc:	9215      	str	r2, [sp, #84]	; 0x54
 8009ede:	786a      	ldrb	r2, [r5, #1]
 8009ee0:	2a2b      	cmp	r2, #43	; 0x2b
 8009ee2:	d074      	beq.n	8009fce <_strtod_l+0x27e>
 8009ee4:	2a2d      	cmp	r2, #45	; 0x2d
 8009ee6:	d078      	beq.n	8009fda <_strtod_l+0x28a>
 8009ee8:	f04f 0c00 	mov.w	ip, #0
 8009eec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ef0:	2909      	cmp	r1, #9
 8009ef2:	d97f      	bls.n	8009ff4 <_strtod_l+0x2a4>
 8009ef4:	9515      	str	r5, [sp, #84]	; 0x54
 8009ef6:	2700      	movs	r7, #0
 8009ef8:	e09e      	b.n	800a038 <_strtod_l+0x2e8>
 8009efa:	2300      	movs	r3, #0
 8009efc:	e7c8      	b.n	8009e90 <_strtod_l+0x140>
 8009efe:	f1bb 0f08 	cmp.w	fp, #8
 8009f02:	bfd8      	it	le
 8009f04:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009f06:	f100 0001 	add.w	r0, r0, #1
 8009f0a:	bfda      	itte	le
 8009f0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f10:	9309      	strle	r3, [sp, #36]	; 0x24
 8009f12:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009f16:	f10b 0b01 	add.w	fp, fp, #1
 8009f1a:	9015      	str	r0, [sp, #84]	; 0x54
 8009f1c:	e7c1      	b.n	8009ea2 <_strtod_l+0x152>
 8009f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	9215      	str	r2, [sp, #84]	; 0x54
 8009f24:	785a      	ldrb	r2, [r3, #1]
 8009f26:	f1bb 0f00 	cmp.w	fp, #0
 8009f2a:	d037      	beq.n	8009f9c <_strtod_l+0x24c>
 8009f2c:	9005      	str	r0, [sp, #20]
 8009f2e:	465e      	mov	r6, fp
 8009f30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009f34:	2b09      	cmp	r3, #9
 8009f36:	d912      	bls.n	8009f5e <_strtod_l+0x20e>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e7c4      	b.n	8009ec6 <_strtod_l+0x176>
 8009f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	9215      	str	r2, [sp, #84]	; 0x54
 8009f42:	785a      	ldrb	r2, [r3, #1]
 8009f44:	3001      	adds	r0, #1
 8009f46:	2a30      	cmp	r2, #48	; 0x30
 8009f48:	d0f8      	beq.n	8009f3c <_strtod_l+0x1ec>
 8009f4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	f200 84c1 	bhi.w	800a8d6 <_strtod_l+0xb86>
 8009f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f56:	9005      	str	r0, [sp, #20]
 8009f58:	2000      	movs	r0, #0
 8009f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	3a30      	subs	r2, #48	; 0x30
 8009f60:	f100 0301 	add.w	r3, r0, #1
 8009f64:	d014      	beq.n	8009f90 <_strtod_l+0x240>
 8009f66:	9905      	ldr	r1, [sp, #20]
 8009f68:	4419      	add	r1, r3
 8009f6a:	9105      	str	r1, [sp, #20]
 8009f6c:	4633      	mov	r3, r6
 8009f6e:	eb00 0c06 	add.w	ip, r0, r6
 8009f72:	210a      	movs	r1, #10
 8009f74:	4563      	cmp	r3, ip
 8009f76:	d113      	bne.n	8009fa0 <_strtod_l+0x250>
 8009f78:	1833      	adds	r3, r6, r0
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	f106 0601 	add.w	r6, r6, #1
 8009f80:	4406      	add	r6, r0
 8009f82:	dc1a      	bgt.n	8009fba <_strtod_l+0x26a>
 8009f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f86:	230a      	movs	r3, #10
 8009f88:	fb03 2301 	mla	r3, r3, r1, r2
 8009f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f92:	1c51      	adds	r1, r2, #1
 8009f94:	9115      	str	r1, [sp, #84]	; 0x54
 8009f96:	7852      	ldrb	r2, [r2, #1]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	e7c9      	b.n	8009f30 <_strtod_l+0x1e0>
 8009f9c:	4658      	mov	r0, fp
 8009f9e:	e7d2      	b.n	8009f46 <_strtod_l+0x1f6>
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	f103 0301 	add.w	r3, r3, #1
 8009fa6:	dc03      	bgt.n	8009fb0 <_strtod_l+0x260>
 8009fa8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009faa:	434f      	muls	r7, r1
 8009fac:	9709      	str	r7, [sp, #36]	; 0x24
 8009fae:	e7e1      	b.n	8009f74 <_strtod_l+0x224>
 8009fb0:	2b10      	cmp	r3, #16
 8009fb2:	bfd8      	it	le
 8009fb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009fb8:	e7dc      	b.n	8009f74 <_strtod_l+0x224>
 8009fba:	2e10      	cmp	r6, #16
 8009fbc:	bfdc      	itt	le
 8009fbe:	230a      	movle	r3, #10
 8009fc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009fc4:	e7e3      	b.n	8009f8e <_strtod_l+0x23e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	9305      	str	r3, [sp, #20]
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e780      	b.n	8009ed0 <_strtod_l+0x180>
 8009fce:	f04f 0c00 	mov.w	ip, #0
 8009fd2:	1caa      	adds	r2, r5, #2
 8009fd4:	9215      	str	r2, [sp, #84]	; 0x54
 8009fd6:	78aa      	ldrb	r2, [r5, #2]
 8009fd8:	e788      	b.n	8009eec <_strtod_l+0x19c>
 8009fda:	f04f 0c01 	mov.w	ip, #1
 8009fde:	e7f8      	b.n	8009fd2 <_strtod_l+0x282>
 8009fe0:	0800da90 	.word	0x0800da90
 8009fe4:	0800da80 	.word	0x0800da80
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009fee:	1c51      	adds	r1, r2, #1
 8009ff0:	9115      	str	r1, [sp, #84]	; 0x54
 8009ff2:	7852      	ldrb	r2, [r2, #1]
 8009ff4:	2a30      	cmp	r2, #48	; 0x30
 8009ff6:	d0f9      	beq.n	8009fec <_strtod_l+0x29c>
 8009ff8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ffc:	2908      	cmp	r1, #8
 8009ffe:	f63f af7a 	bhi.w	8009ef6 <_strtod_l+0x1a6>
 800a002:	3a30      	subs	r2, #48	; 0x30
 800a004:	9208      	str	r2, [sp, #32]
 800a006:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a008:	920c      	str	r2, [sp, #48]	; 0x30
 800a00a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a00c:	1c57      	adds	r7, r2, #1
 800a00e:	9715      	str	r7, [sp, #84]	; 0x54
 800a010:	7852      	ldrb	r2, [r2, #1]
 800a012:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a016:	f1be 0f09 	cmp.w	lr, #9
 800a01a:	d938      	bls.n	800a08e <_strtod_l+0x33e>
 800a01c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a01e:	1a7f      	subs	r7, r7, r1
 800a020:	2f08      	cmp	r7, #8
 800a022:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a026:	dc03      	bgt.n	800a030 <_strtod_l+0x2e0>
 800a028:	9908      	ldr	r1, [sp, #32]
 800a02a:	428f      	cmp	r7, r1
 800a02c:	bfa8      	it	ge
 800a02e:	460f      	movge	r7, r1
 800a030:	f1bc 0f00 	cmp.w	ip, #0
 800a034:	d000      	beq.n	800a038 <_strtod_l+0x2e8>
 800a036:	427f      	negs	r7, r7
 800a038:	2e00      	cmp	r6, #0
 800a03a:	d14f      	bne.n	800a0dc <_strtod_l+0x38c>
 800a03c:	9904      	ldr	r1, [sp, #16]
 800a03e:	4301      	orrs	r1, r0
 800a040:	f47f aec1 	bne.w	8009dc6 <_strtod_l+0x76>
 800a044:	2b00      	cmp	r3, #0
 800a046:	f47f aedb 	bne.w	8009e00 <_strtod_l+0xb0>
 800a04a:	2a69      	cmp	r2, #105	; 0x69
 800a04c:	d029      	beq.n	800a0a2 <_strtod_l+0x352>
 800a04e:	dc26      	bgt.n	800a09e <_strtod_l+0x34e>
 800a050:	2a49      	cmp	r2, #73	; 0x49
 800a052:	d026      	beq.n	800a0a2 <_strtod_l+0x352>
 800a054:	2a4e      	cmp	r2, #78	; 0x4e
 800a056:	f47f aed3 	bne.w	8009e00 <_strtod_l+0xb0>
 800a05a:	499b      	ldr	r1, [pc, #620]	; (800a2c8 <_strtod_l+0x578>)
 800a05c:	a815      	add	r0, sp, #84	; 0x54
 800a05e:	f001 f9ad 	bl	800b3bc <__match>
 800a062:	2800      	cmp	r0, #0
 800a064:	f43f aecc 	beq.w	8009e00 <_strtod_l+0xb0>
 800a068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b28      	cmp	r3, #40	; 0x28
 800a06e:	d12f      	bne.n	800a0d0 <_strtod_l+0x380>
 800a070:	4996      	ldr	r1, [pc, #600]	; (800a2cc <_strtod_l+0x57c>)
 800a072:	aa18      	add	r2, sp, #96	; 0x60
 800a074:	a815      	add	r0, sp, #84	; 0x54
 800a076:	f001 f9b5 	bl	800b3e4 <__hexnan>
 800a07a:	2805      	cmp	r0, #5
 800a07c:	d128      	bne.n	800a0d0 <_strtod_l+0x380>
 800a07e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a084:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a088:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a08c:	e69b      	b.n	8009dc6 <_strtod_l+0x76>
 800a08e:	9f08      	ldr	r7, [sp, #32]
 800a090:	210a      	movs	r1, #10
 800a092:	fb01 2107 	mla	r1, r1, r7, r2
 800a096:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a09a:	9208      	str	r2, [sp, #32]
 800a09c:	e7b5      	b.n	800a00a <_strtod_l+0x2ba>
 800a09e:	2a6e      	cmp	r2, #110	; 0x6e
 800a0a0:	e7d9      	b.n	800a056 <_strtod_l+0x306>
 800a0a2:	498b      	ldr	r1, [pc, #556]	; (800a2d0 <_strtod_l+0x580>)
 800a0a4:	a815      	add	r0, sp, #84	; 0x54
 800a0a6:	f001 f989 	bl	800b3bc <__match>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	f43f aea8 	beq.w	8009e00 <_strtod_l+0xb0>
 800a0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0b2:	4988      	ldr	r1, [pc, #544]	; (800a2d4 <_strtod_l+0x584>)
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	a815      	add	r0, sp, #84	; 0x54
 800a0b8:	9315      	str	r3, [sp, #84]	; 0x54
 800a0ba:	f001 f97f 	bl	800b3bc <__match>
 800a0be:	b910      	cbnz	r0, 800a0c6 <_strtod_l+0x376>
 800a0c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	9315      	str	r3, [sp, #84]	; 0x54
 800a0c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a2e4 <_strtod_l+0x594>
 800a0ca:	f04f 0800 	mov.w	r8, #0
 800a0ce:	e67a      	b.n	8009dc6 <_strtod_l+0x76>
 800a0d0:	4881      	ldr	r0, [pc, #516]	; (800a2d8 <_strtod_l+0x588>)
 800a0d2:	f000 fe59 	bl	800ad88 <nan>
 800a0d6:	ec59 8b10 	vmov	r8, r9, d0
 800a0da:	e674      	b.n	8009dc6 <_strtod_l+0x76>
 800a0dc:	9b05      	ldr	r3, [sp, #20]
 800a0de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e0:	1afb      	subs	r3, r7, r3
 800a0e2:	f1bb 0f00 	cmp.w	fp, #0
 800a0e6:	bf08      	it	eq
 800a0e8:	46b3      	moveq	fp, r6
 800a0ea:	2e10      	cmp	r6, #16
 800a0ec:	9308      	str	r3, [sp, #32]
 800a0ee:	4635      	mov	r5, r6
 800a0f0:	bfa8      	it	ge
 800a0f2:	2510      	movge	r5, #16
 800a0f4:	f7f6 fa06 	bl	8000504 <__aeabi_ui2d>
 800a0f8:	2e09      	cmp	r6, #9
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	4689      	mov	r9, r1
 800a0fe:	dd13      	ble.n	800a128 <_strtod_l+0x3d8>
 800a100:	4b76      	ldr	r3, [pc, #472]	; (800a2dc <_strtod_l+0x58c>)
 800a102:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a106:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	4680      	mov	r8, r0
 800a110:	4650      	mov	r0, sl
 800a112:	4689      	mov	r9, r1
 800a114:	f7f6 f9f6 	bl	8000504 <__aeabi_ui2d>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 f8b4 	bl	800028c <__adddf3>
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	2e0f      	cmp	r6, #15
 800a12a:	dc38      	bgt.n	800a19e <_strtod_l+0x44e>
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f43f ae49 	beq.w	8009dc6 <_strtod_l+0x76>
 800a134:	dd24      	ble.n	800a180 <_strtod_l+0x430>
 800a136:	2b16      	cmp	r3, #22
 800a138:	dc0b      	bgt.n	800a152 <_strtod_l+0x402>
 800a13a:	4968      	ldr	r1, [pc, #416]	; (800a2dc <_strtod_l+0x58c>)
 800a13c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a144:	4642      	mov	r2, r8
 800a146:	464b      	mov	r3, r9
 800a148:	f7f6 fa56 	bl	80005f8 <__aeabi_dmul>
 800a14c:	4680      	mov	r8, r0
 800a14e:	4689      	mov	r9, r1
 800a150:	e639      	b.n	8009dc6 <_strtod_l+0x76>
 800a152:	9a08      	ldr	r2, [sp, #32]
 800a154:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a158:	4293      	cmp	r3, r2
 800a15a:	db20      	blt.n	800a19e <_strtod_l+0x44e>
 800a15c:	4c5f      	ldr	r4, [pc, #380]	; (800a2dc <_strtod_l+0x58c>)
 800a15e:	f1c6 060f 	rsb	r6, r6, #15
 800a162:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a166:	4642      	mov	r2, r8
 800a168:	464b      	mov	r3, r9
 800a16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16e:	f7f6 fa43 	bl	80005f8 <__aeabi_dmul>
 800a172:	9b08      	ldr	r3, [sp, #32]
 800a174:	1b9e      	subs	r6, r3, r6
 800a176:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a17a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a17e:	e7e3      	b.n	800a148 <_strtod_l+0x3f8>
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	3316      	adds	r3, #22
 800a184:	db0b      	blt.n	800a19e <_strtod_l+0x44e>
 800a186:	9b05      	ldr	r3, [sp, #20]
 800a188:	1bdf      	subs	r7, r3, r7
 800a18a:	4b54      	ldr	r3, [pc, #336]	; (800a2dc <_strtod_l+0x58c>)
 800a18c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a194:	4640      	mov	r0, r8
 800a196:	4649      	mov	r1, r9
 800a198:	f7f6 fb58 	bl	800084c <__aeabi_ddiv>
 800a19c:	e7d6      	b.n	800a14c <_strtod_l+0x3fc>
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	1b75      	subs	r5, r6, r5
 800a1a2:	441d      	add	r5, r3
 800a1a4:	2d00      	cmp	r5, #0
 800a1a6:	dd70      	ble.n	800a28a <_strtod_l+0x53a>
 800a1a8:	f015 030f 	ands.w	r3, r5, #15
 800a1ac:	d00a      	beq.n	800a1c4 <_strtod_l+0x474>
 800a1ae:	494b      	ldr	r1, [pc, #300]	; (800a2dc <_strtod_l+0x58c>)
 800a1b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1bc:	f7f6 fa1c 	bl	80005f8 <__aeabi_dmul>
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4689      	mov	r9, r1
 800a1c4:	f035 050f 	bics.w	r5, r5, #15
 800a1c8:	d04d      	beq.n	800a266 <_strtod_l+0x516>
 800a1ca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a1ce:	dd22      	ble.n	800a216 <_strtod_l+0x4c6>
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	46ab      	mov	fp, r5
 800a1d4:	9509      	str	r5, [sp, #36]	; 0x24
 800a1d6:	9505      	str	r5, [sp, #20]
 800a1d8:	2322      	movs	r3, #34	; 0x22
 800a1da:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a2e4 <_strtod_l+0x594>
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	f04f 0800 	mov.w	r8, #0
 800a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f43f aded 	beq.w	8009dc6 <_strtod_l+0x76>
 800a1ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f001 fa9a 	bl	800b728 <_Bfree>
 800a1f4:	9905      	ldr	r1, [sp, #20]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f001 fa96 	bl	800b728 <_Bfree>
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	4620      	mov	r0, r4
 800a200:	f001 fa92 	bl	800b728 <_Bfree>
 800a204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a206:	4620      	mov	r0, r4
 800a208:	f001 fa8e 	bl	800b728 <_Bfree>
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	f001 fa8a 	bl	800b728 <_Bfree>
 800a214:	e5d7      	b.n	8009dc6 <_strtod_l+0x76>
 800a216:	4b32      	ldr	r3, [pc, #200]	; (800a2e0 <_strtod_l+0x590>)
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	2300      	movs	r3, #0
 800a21c:	112d      	asrs	r5, r5, #4
 800a21e:	4640      	mov	r0, r8
 800a220:	4649      	mov	r1, r9
 800a222:	469a      	mov	sl, r3
 800a224:	2d01      	cmp	r5, #1
 800a226:	dc21      	bgt.n	800a26c <_strtod_l+0x51c>
 800a228:	b10b      	cbz	r3, 800a22e <_strtod_l+0x4de>
 800a22a:	4680      	mov	r8, r0
 800a22c:	4689      	mov	r9, r1
 800a22e:	492c      	ldr	r1, [pc, #176]	; (800a2e0 <_strtod_l+0x590>)
 800a230:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a234:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a238:	4642      	mov	r2, r8
 800a23a:	464b      	mov	r3, r9
 800a23c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <_strtod_l+0x594>)
 800a246:	460a      	mov	r2, r1
 800a248:	400b      	ands	r3, r1
 800a24a:	4927      	ldr	r1, [pc, #156]	; (800a2e8 <_strtod_l+0x598>)
 800a24c:	428b      	cmp	r3, r1
 800a24e:	4680      	mov	r8, r0
 800a250:	d8be      	bhi.n	800a1d0 <_strtod_l+0x480>
 800a252:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a256:	428b      	cmp	r3, r1
 800a258:	bf86      	itte	hi
 800a25a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a2ec <_strtod_l+0x59c>
 800a25e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a262:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a266:	2300      	movs	r3, #0
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	e07b      	b.n	800a364 <_strtod_l+0x614>
 800a26c:	07ea      	lsls	r2, r5, #31
 800a26e:	d505      	bpl.n	800a27c <_strtod_l+0x52c>
 800a270:	9b04      	ldr	r3, [sp, #16]
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f7f6 f9bf 	bl	80005f8 <__aeabi_dmul>
 800a27a:	2301      	movs	r3, #1
 800a27c:	9a04      	ldr	r2, [sp, #16]
 800a27e:	3208      	adds	r2, #8
 800a280:	f10a 0a01 	add.w	sl, sl, #1
 800a284:	106d      	asrs	r5, r5, #1
 800a286:	9204      	str	r2, [sp, #16]
 800a288:	e7cc      	b.n	800a224 <_strtod_l+0x4d4>
 800a28a:	d0ec      	beq.n	800a266 <_strtod_l+0x516>
 800a28c:	426d      	negs	r5, r5
 800a28e:	f015 020f 	ands.w	r2, r5, #15
 800a292:	d00a      	beq.n	800a2aa <_strtod_l+0x55a>
 800a294:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <_strtod_l+0x58c>)
 800a296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f6 fad3 	bl	800084c <__aeabi_ddiv>
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	112d      	asrs	r5, r5, #4
 800a2ac:	d0db      	beq.n	800a266 <_strtod_l+0x516>
 800a2ae:	2d1f      	cmp	r5, #31
 800a2b0:	dd1e      	ble.n	800a2f0 <_strtod_l+0x5a0>
 800a2b2:	2500      	movs	r5, #0
 800a2b4:	46ab      	mov	fp, r5
 800a2b6:	9509      	str	r5, [sp, #36]	; 0x24
 800a2b8:	9505      	str	r5, [sp, #20]
 800a2ba:	2322      	movs	r3, #34	; 0x22
 800a2bc:	f04f 0800 	mov.w	r8, #0
 800a2c0:	f04f 0900 	mov.w	r9, #0
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	e78d      	b.n	800a1e4 <_strtod_l+0x494>
 800a2c8:	0800da8b 	.word	0x0800da8b
 800a2cc:	0800daa4 	.word	0x0800daa4
 800a2d0:	0800da82 	.word	0x0800da82
 800a2d4:	0800da85 	.word	0x0800da85
 800a2d8:	0800db94 	.word	0x0800db94
 800a2dc:	0800dc88 	.word	0x0800dc88
 800a2e0:	0800dc60 	.word	0x0800dc60
 800a2e4:	7ff00000 	.word	0x7ff00000
 800a2e8:	7ca00000 	.word	0x7ca00000
 800a2ec:	7fefffff 	.word	0x7fefffff
 800a2f0:	f015 0310 	ands.w	r3, r5, #16
 800a2f4:	bf18      	it	ne
 800a2f6:	236a      	movne	r3, #106	; 0x6a
 800a2f8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a69c <_strtod_l+0x94c>
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	4640      	mov	r0, r8
 800a300:	4649      	mov	r1, r9
 800a302:	2300      	movs	r3, #0
 800a304:	07ea      	lsls	r2, r5, #31
 800a306:	d504      	bpl.n	800a312 <_strtod_l+0x5c2>
 800a308:	e9da 2300 	ldrd	r2, r3, [sl]
 800a30c:	f7f6 f974 	bl	80005f8 <__aeabi_dmul>
 800a310:	2301      	movs	r3, #1
 800a312:	106d      	asrs	r5, r5, #1
 800a314:	f10a 0a08 	add.w	sl, sl, #8
 800a318:	d1f4      	bne.n	800a304 <_strtod_l+0x5b4>
 800a31a:	b10b      	cbz	r3, 800a320 <_strtod_l+0x5d0>
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	9b04      	ldr	r3, [sp, #16]
 800a322:	b1bb      	cbz	r3, 800a354 <_strtod_l+0x604>
 800a324:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a328:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	4649      	mov	r1, r9
 800a330:	dd10      	ble.n	800a354 <_strtod_l+0x604>
 800a332:	2b1f      	cmp	r3, #31
 800a334:	f340 811e 	ble.w	800a574 <_strtod_l+0x824>
 800a338:	2b34      	cmp	r3, #52	; 0x34
 800a33a:	bfde      	ittt	le
 800a33c:	f04f 33ff 	movle.w	r3, #4294967295
 800a340:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a344:	4093      	lslle	r3, r2
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	bfcc      	ite	gt
 800a34c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a350:	ea03 0901 	andle.w	r9, r3, r1
 800a354:	2200      	movs	r2, #0
 800a356:	2300      	movs	r3, #0
 800a358:	4640      	mov	r0, r8
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f6 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a360:	2800      	cmp	r0, #0
 800a362:	d1a6      	bne.n	800a2b2 <_strtod_l+0x562>
 800a364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a36a:	4633      	mov	r3, r6
 800a36c:	465a      	mov	r2, fp
 800a36e:	4620      	mov	r0, r4
 800a370:	f001 fa42 	bl	800b7f8 <__s2b>
 800a374:	9009      	str	r0, [sp, #36]	; 0x24
 800a376:	2800      	cmp	r0, #0
 800a378:	f43f af2a 	beq.w	800a1d0 <_strtod_l+0x480>
 800a37c:	9a08      	ldr	r2, [sp, #32]
 800a37e:	9b05      	ldr	r3, [sp, #20]
 800a380:	2a00      	cmp	r2, #0
 800a382:	eba3 0307 	sub.w	r3, r3, r7
 800a386:	bfa8      	it	ge
 800a388:	2300      	movge	r3, #0
 800a38a:	930c      	str	r3, [sp, #48]	; 0x30
 800a38c:	2500      	movs	r5, #0
 800a38e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a392:	9312      	str	r3, [sp, #72]	; 0x48
 800a394:	46ab      	mov	fp, r5
 800a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a398:	4620      	mov	r0, r4
 800a39a:	6859      	ldr	r1, [r3, #4]
 800a39c:	f001 f984 	bl	800b6a8 <_Balloc>
 800a3a0:	9005      	str	r0, [sp, #20]
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	f43f af18 	beq.w	800a1d8 <_strtod_l+0x488>
 800a3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	3202      	adds	r2, #2
 800a3ae:	f103 010c 	add.w	r1, r3, #12
 800a3b2:	0092      	lsls	r2, r2, #2
 800a3b4:	300c      	adds	r0, #12
 800a3b6:	f000 fcd9 	bl	800ad6c <memcpy>
 800a3ba:	ec49 8b10 	vmov	d0, r8, r9
 800a3be:	aa18      	add	r2, sp, #96	; 0x60
 800a3c0:	a917      	add	r1, sp, #92	; 0x5c
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f001 fd4c 	bl	800be60 <__d2b>
 800a3c8:	ec49 8b18 	vmov	d8, r8, r9
 800a3cc:	9016      	str	r0, [sp, #88]	; 0x58
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f43f af02 	beq.w	800a1d8 <_strtod_l+0x488>
 800a3d4:	2101      	movs	r1, #1
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f001 faa6 	bl	800b928 <__i2b>
 800a3dc:	4683      	mov	fp, r0
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f43f aefa 	beq.w	800a1d8 <_strtod_l+0x488>
 800a3e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a3e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3e8:	2e00      	cmp	r6, #0
 800a3ea:	bfab      	itete	ge
 800a3ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a3ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a3f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a3f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a3f6:	bfac      	ite	ge
 800a3f8:	eb06 0a03 	addge.w	sl, r6, r3
 800a3fc:	1b9f      	sublt	r7, r3, r6
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	1af6      	subs	r6, r6, r3
 800a402:	4416      	add	r6, r2
 800a404:	4ba0      	ldr	r3, [pc, #640]	; (800a688 <_strtod_l+0x938>)
 800a406:	3e01      	subs	r6, #1
 800a408:	429e      	cmp	r6, r3
 800a40a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a40e:	f280 80c4 	bge.w	800a59a <_strtod_l+0x84a>
 800a412:	1b9b      	subs	r3, r3, r6
 800a414:	2b1f      	cmp	r3, #31
 800a416:	eba2 0203 	sub.w	r2, r2, r3
 800a41a:	f04f 0101 	mov.w	r1, #1
 800a41e:	f300 80b0 	bgt.w	800a582 <_strtod_l+0x832>
 800a422:	fa01 f303 	lsl.w	r3, r1, r3
 800a426:	930e      	str	r3, [sp, #56]	; 0x38
 800a428:	2300      	movs	r3, #0
 800a42a:	930d      	str	r3, [sp, #52]	; 0x34
 800a42c:	eb0a 0602 	add.w	r6, sl, r2
 800a430:	9b04      	ldr	r3, [sp, #16]
 800a432:	45b2      	cmp	sl, r6
 800a434:	4417      	add	r7, r2
 800a436:	441f      	add	r7, r3
 800a438:	4653      	mov	r3, sl
 800a43a:	bfa8      	it	ge
 800a43c:	4633      	movge	r3, r6
 800a43e:	42bb      	cmp	r3, r7
 800a440:	bfa8      	it	ge
 800a442:	463b      	movge	r3, r7
 800a444:	2b00      	cmp	r3, #0
 800a446:	bfc2      	ittt	gt
 800a448:	1af6      	subgt	r6, r6, r3
 800a44a:	1aff      	subgt	r7, r7, r3
 800a44c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a452:	2b00      	cmp	r3, #0
 800a454:	dd17      	ble.n	800a486 <_strtod_l+0x736>
 800a456:	4659      	mov	r1, fp
 800a458:	461a      	mov	r2, r3
 800a45a:	4620      	mov	r0, r4
 800a45c:	f001 fb24 	bl	800baa8 <__pow5mult>
 800a460:	4683      	mov	fp, r0
 800a462:	2800      	cmp	r0, #0
 800a464:	f43f aeb8 	beq.w	800a1d8 <_strtod_l+0x488>
 800a468:	4601      	mov	r1, r0
 800a46a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a46c:	4620      	mov	r0, r4
 800a46e:	f001 fa71 	bl	800b954 <__multiply>
 800a472:	900b      	str	r0, [sp, #44]	; 0x2c
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f aeaf 	beq.w	800a1d8 <_strtod_l+0x488>
 800a47a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a47c:	4620      	mov	r0, r4
 800a47e:	f001 f953 	bl	800b728 <_Bfree>
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	9316      	str	r3, [sp, #88]	; 0x58
 800a486:	2e00      	cmp	r6, #0
 800a488:	f300 808c 	bgt.w	800a5a4 <_strtod_l+0x854>
 800a48c:	9b08      	ldr	r3, [sp, #32]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd08      	ble.n	800a4a4 <_strtod_l+0x754>
 800a492:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a494:	9905      	ldr	r1, [sp, #20]
 800a496:	4620      	mov	r0, r4
 800a498:	f001 fb06 	bl	800baa8 <__pow5mult>
 800a49c:	9005      	str	r0, [sp, #20]
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f ae9a 	beq.w	800a1d8 <_strtod_l+0x488>
 800a4a4:	2f00      	cmp	r7, #0
 800a4a6:	dd08      	ble.n	800a4ba <_strtod_l+0x76a>
 800a4a8:	9905      	ldr	r1, [sp, #20]
 800a4aa:	463a      	mov	r2, r7
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f001 fb55 	bl	800bb5c <__lshift>
 800a4b2:	9005      	str	r0, [sp, #20]
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f43f ae8f 	beq.w	800a1d8 <_strtod_l+0x488>
 800a4ba:	f1ba 0f00 	cmp.w	sl, #0
 800a4be:	dd08      	ble.n	800a4d2 <_strtod_l+0x782>
 800a4c0:	4659      	mov	r1, fp
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f001 fb49 	bl	800bb5c <__lshift>
 800a4ca:	4683      	mov	fp, r0
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f43f ae83 	beq.w	800a1d8 <_strtod_l+0x488>
 800a4d2:	9a05      	ldr	r2, [sp, #20]
 800a4d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f001 fbc8 	bl	800bc6c <__mdiff>
 800a4dc:	4605      	mov	r5, r0
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	f43f ae7a 	beq.w	800a1d8 <_strtod_l+0x488>
 800a4e4:	68c3      	ldr	r3, [r0, #12]
 800a4e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60c3      	str	r3, [r0, #12]
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	f001 fba1 	bl	800bc34 <__mcmp>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	da60      	bge.n	800a5b8 <_strtod_l+0x868>
 800a4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f8:	ea53 0308 	orrs.w	r3, r3, r8
 800a4fc:	f040 8084 	bne.w	800a608 <_strtod_l+0x8b8>
 800a500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a504:	2b00      	cmp	r3, #0
 800a506:	d17f      	bne.n	800a608 <_strtod_l+0x8b8>
 800a508:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a50c:	0d1b      	lsrs	r3, r3, #20
 800a50e:	051b      	lsls	r3, r3, #20
 800a510:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a514:	d978      	bls.n	800a608 <_strtod_l+0x8b8>
 800a516:	696b      	ldr	r3, [r5, #20]
 800a518:	b913      	cbnz	r3, 800a520 <_strtod_l+0x7d0>
 800a51a:	692b      	ldr	r3, [r5, #16]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	dd73      	ble.n	800a608 <_strtod_l+0x8b8>
 800a520:	4629      	mov	r1, r5
 800a522:	2201      	movs	r2, #1
 800a524:	4620      	mov	r0, r4
 800a526:	f001 fb19 	bl	800bb5c <__lshift>
 800a52a:	4659      	mov	r1, fp
 800a52c:	4605      	mov	r5, r0
 800a52e:	f001 fb81 	bl	800bc34 <__mcmp>
 800a532:	2800      	cmp	r0, #0
 800a534:	dd68      	ble.n	800a608 <_strtod_l+0x8b8>
 800a536:	9904      	ldr	r1, [sp, #16]
 800a538:	4a54      	ldr	r2, [pc, #336]	; (800a68c <_strtod_l+0x93c>)
 800a53a:	464b      	mov	r3, r9
 800a53c:	2900      	cmp	r1, #0
 800a53e:	f000 8084 	beq.w	800a64a <_strtod_l+0x8fa>
 800a542:	ea02 0109 	and.w	r1, r2, r9
 800a546:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a54a:	dc7e      	bgt.n	800a64a <_strtod_l+0x8fa>
 800a54c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a550:	f77f aeb3 	ble.w	800a2ba <_strtod_l+0x56a>
 800a554:	4b4e      	ldr	r3, [pc, #312]	; (800a690 <_strtod_l+0x940>)
 800a556:	4640      	mov	r0, r8
 800a558:	4649      	mov	r1, r9
 800a55a:	2200      	movs	r2, #0
 800a55c:	f7f6 f84c 	bl	80005f8 <__aeabi_dmul>
 800a560:	4b4a      	ldr	r3, [pc, #296]	; (800a68c <_strtod_l+0x93c>)
 800a562:	400b      	ands	r3, r1
 800a564:	4680      	mov	r8, r0
 800a566:	4689      	mov	r9, r1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f47f ae3f 	bne.w	800a1ec <_strtod_l+0x49c>
 800a56e:	2322      	movs	r3, #34	; 0x22
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	e63b      	b.n	800a1ec <_strtod_l+0x49c>
 800a574:	f04f 32ff 	mov.w	r2, #4294967295
 800a578:	fa02 f303 	lsl.w	r3, r2, r3
 800a57c:	ea03 0808 	and.w	r8, r3, r8
 800a580:	e6e8      	b.n	800a354 <_strtod_l+0x604>
 800a582:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a586:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a58a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a58e:	36e2      	adds	r6, #226	; 0xe2
 800a590:	fa01 f306 	lsl.w	r3, r1, r6
 800a594:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a598:	e748      	b.n	800a42c <_strtod_l+0x6dc>
 800a59a:	2100      	movs	r1, #0
 800a59c:	2301      	movs	r3, #1
 800a59e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a5a2:	e743      	b.n	800a42c <_strtod_l+0x6dc>
 800a5a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5a6:	4632      	mov	r2, r6
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f001 fad7 	bl	800bb5c <__lshift>
 800a5ae:	9016      	str	r0, [sp, #88]	; 0x58
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f47f af6b 	bne.w	800a48c <_strtod_l+0x73c>
 800a5b6:	e60f      	b.n	800a1d8 <_strtod_l+0x488>
 800a5b8:	46ca      	mov	sl, r9
 800a5ba:	d171      	bne.n	800a6a0 <_strtod_l+0x950>
 800a5bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5c2:	b352      	cbz	r2, 800a61a <_strtod_l+0x8ca>
 800a5c4:	4a33      	ldr	r2, [pc, #204]	; (800a694 <_strtod_l+0x944>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d12a      	bne.n	800a620 <_strtod_l+0x8d0>
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	b1fb      	cbz	r3, 800a610 <_strtod_l+0x8c0>
 800a5d0:	4b2e      	ldr	r3, [pc, #184]	; (800a68c <_strtod_l+0x93c>)
 800a5d2:	ea09 0303 	and.w	r3, r9, r3
 800a5d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a5da:	f04f 32ff 	mov.w	r2, #4294967295
 800a5de:	d81a      	bhi.n	800a616 <_strtod_l+0x8c6>
 800a5e0:	0d1b      	lsrs	r3, r3, #20
 800a5e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	d118      	bne.n	800a620 <_strtod_l+0x8d0>
 800a5ee:	4b2a      	ldr	r3, [pc, #168]	; (800a698 <_strtod_l+0x948>)
 800a5f0:	459a      	cmp	sl, r3
 800a5f2:	d102      	bne.n	800a5fa <_strtod_l+0x8aa>
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	f43f adef 	beq.w	800a1d8 <_strtod_l+0x488>
 800a5fa:	4b24      	ldr	r3, [pc, #144]	; (800a68c <_strtod_l+0x93c>)
 800a5fc:	ea0a 0303 	and.w	r3, sl, r3
 800a600:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a604:	f04f 0800 	mov.w	r8, #0
 800a608:	9b04      	ldr	r3, [sp, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1a2      	bne.n	800a554 <_strtod_l+0x804>
 800a60e:	e5ed      	b.n	800a1ec <_strtod_l+0x49c>
 800a610:	f04f 33ff 	mov.w	r3, #4294967295
 800a614:	e7e9      	b.n	800a5ea <_strtod_l+0x89a>
 800a616:	4613      	mov	r3, r2
 800a618:	e7e7      	b.n	800a5ea <_strtod_l+0x89a>
 800a61a:	ea53 0308 	orrs.w	r3, r3, r8
 800a61e:	d08a      	beq.n	800a536 <_strtod_l+0x7e6>
 800a620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a622:	b1e3      	cbz	r3, 800a65e <_strtod_l+0x90e>
 800a624:	ea13 0f0a 	tst.w	r3, sl
 800a628:	d0ee      	beq.n	800a608 <_strtod_l+0x8b8>
 800a62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a62c:	9a04      	ldr	r2, [sp, #16]
 800a62e:	4640      	mov	r0, r8
 800a630:	4649      	mov	r1, r9
 800a632:	b1c3      	cbz	r3, 800a666 <_strtod_l+0x916>
 800a634:	f7ff fb6d 	bl	8009d12 <sulp>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	ec51 0b18 	vmov	r0, r1, d8
 800a640:	f7f5 fe24 	bl	800028c <__adddf3>
 800a644:	4680      	mov	r8, r0
 800a646:	4689      	mov	r9, r1
 800a648:	e7de      	b.n	800a608 <_strtod_l+0x8b8>
 800a64a:	4013      	ands	r3, r2
 800a64c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a650:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a654:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a658:	f04f 38ff 	mov.w	r8, #4294967295
 800a65c:	e7d4      	b.n	800a608 <_strtod_l+0x8b8>
 800a65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a660:	ea13 0f08 	tst.w	r3, r8
 800a664:	e7e0      	b.n	800a628 <_strtod_l+0x8d8>
 800a666:	f7ff fb54 	bl	8009d12 <sulp>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	ec51 0b18 	vmov	r0, r1, d8
 800a672:	f7f5 fe09 	bl	8000288 <__aeabi_dsub>
 800a676:	2200      	movs	r2, #0
 800a678:	2300      	movs	r3, #0
 800a67a:	4680      	mov	r8, r0
 800a67c:	4689      	mov	r9, r1
 800a67e:	f7f6 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 800a682:	2800      	cmp	r0, #0
 800a684:	d0c0      	beq.n	800a608 <_strtod_l+0x8b8>
 800a686:	e618      	b.n	800a2ba <_strtod_l+0x56a>
 800a688:	fffffc02 	.word	0xfffffc02
 800a68c:	7ff00000 	.word	0x7ff00000
 800a690:	39500000 	.word	0x39500000
 800a694:	000fffff 	.word	0x000fffff
 800a698:	7fefffff 	.word	0x7fefffff
 800a69c:	0800dab8 	.word	0x0800dab8
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f001 fc36 	bl	800bf14 <__ratio>
 800a6a8:	ec57 6b10 	vmov	r6, r7, d0
 800a6ac:	ee10 0a10 	vmov	r0, s0
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f6 fa1a 	bl	8000af0 <__aeabi_dcmple>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d071      	beq.n	800a7a4 <_strtod_l+0xa54>
 800a6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d17c      	bne.n	800a7c0 <_strtod_l+0xa70>
 800a6c6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ca:	d15a      	bne.n	800a782 <_strtod_l+0xa32>
 800a6cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d15d      	bne.n	800a790 <_strtod_l+0xa40>
 800a6d4:	4b90      	ldr	r3, [pc, #576]	; (800a918 <_strtod_l+0xbc8>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f6 f9fe 	bl	8000adc <__aeabi_dcmplt>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d15c      	bne.n	800a79e <_strtod_l+0xa4e>
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	4b8c      	ldr	r3, [pc, #560]	; (800a91c <_strtod_l+0xbcc>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f7f5 ff84 	bl	80005f8 <__aeabi_dmul>
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a6f8:	9606      	str	r6, [sp, #24]
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a700:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a704:	4b86      	ldr	r3, [pc, #536]	; (800a920 <_strtod_l+0xbd0>)
 800a706:	ea0a 0303 	and.w	r3, sl, r3
 800a70a:	930d      	str	r3, [sp, #52]	; 0x34
 800a70c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a70e:	4b85      	ldr	r3, [pc, #532]	; (800a924 <_strtod_l+0xbd4>)
 800a710:	429a      	cmp	r2, r3
 800a712:	f040 8090 	bne.w	800a836 <_strtod_l+0xae6>
 800a716:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a71a:	ec49 8b10 	vmov	d0, r8, r9
 800a71e:	f001 fb2f 	bl	800bd80 <__ulp>
 800a722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a726:	ec51 0b10 	vmov	r0, r1, d0
 800a72a:	f7f5 ff65 	bl	80005f8 <__aeabi_dmul>
 800a72e:	4642      	mov	r2, r8
 800a730:	464b      	mov	r3, r9
 800a732:	f7f5 fdab 	bl	800028c <__adddf3>
 800a736:	460b      	mov	r3, r1
 800a738:	4979      	ldr	r1, [pc, #484]	; (800a920 <_strtod_l+0xbd0>)
 800a73a:	4a7b      	ldr	r2, [pc, #492]	; (800a928 <_strtod_l+0xbd8>)
 800a73c:	4019      	ands	r1, r3
 800a73e:	4291      	cmp	r1, r2
 800a740:	4680      	mov	r8, r0
 800a742:	d944      	bls.n	800a7ce <_strtod_l+0xa7e>
 800a744:	ee18 2a90 	vmov	r2, s17
 800a748:	4b78      	ldr	r3, [pc, #480]	; (800a92c <_strtod_l+0xbdc>)
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d104      	bne.n	800a758 <_strtod_l+0xa08>
 800a74e:	ee18 3a10 	vmov	r3, s16
 800a752:	3301      	adds	r3, #1
 800a754:	f43f ad40 	beq.w	800a1d8 <_strtod_l+0x488>
 800a758:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a92c <_strtod_l+0xbdc>
 800a75c:	f04f 38ff 	mov.w	r8, #4294967295
 800a760:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a762:	4620      	mov	r0, r4
 800a764:	f000 ffe0 	bl	800b728 <_Bfree>
 800a768:	9905      	ldr	r1, [sp, #20]
 800a76a:	4620      	mov	r0, r4
 800a76c:	f000 ffdc 	bl	800b728 <_Bfree>
 800a770:	4659      	mov	r1, fp
 800a772:	4620      	mov	r0, r4
 800a774:	f000 ffd8 	bl	800b728 <_Bfree>
 800a778:	4629      	mov	r1, r5
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 ffd4 	bl	800b728 <_Bfree>
 800a780:	e609      	b.n	800a396 <_strtod_l+0x646>
 800a782:	f1b8 0f01 	cmp.w	r8, #1
 800a786:	d103      	bne.n	800a790 <_strtod_l+0xa40>
 800a788:	f1b9 0f00 	cmp.w	r9, #0
 800a78c:	f43f ad95 	beq.w	800a2ba <_strtod_l+0x56a>
 800a790:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a8e8 <_strtod_l+0xb98>
 800a794:	4f60      	ldr	r7, [pc, #384]	; (800a918 <_strtod_l+0xbc8>)
 800a796:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a79a:	2600      	movs	r6, #0
 800a79c:	e7ae      	b.n	800a6fc <_strtod_l+0x9ac>
 800a79e:	4f5f      	ldr	r7, [pc, #380]	; (800a91c <_strtod_l+0xbcc>)
 800a7a0:	2600      	movs	r6, #0
 800a7a2:	e7a7      	b.n	800a6f4 <_strtod_l+0x9a4>
 800a7a4:	4b5d      	ldr	r3, [pc, #372]	; (800a91c <_strtod_l+0xbcc>)
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f7f5 ff24 	bl	80005f8 <__aeabi_dmul>
 800a7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d09c      	beq.n	800a6f4 <_strtod_l+0x9a4>
 800a7ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7be:	e79d      	b.n	800a6fc <_strtod_l+0x9ac>
 800a7c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a8f0 <_strtod_l+0xba0>
 800a7c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7c8:	ec57 6b17 	vmov	r6, r7, d7
 800a7cc:	e796      	b.n	800a6fc <_strtod_l+0x9ac>
 800a7ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	46ca      	mov	sl, r9
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1c2      	bne.n	800a760 <_strtod_l+0xa10>
 800a7da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7e0:	0d1b      	lsrs	r3, r3, #20
 800a7e2:	051b      	lsls	r3, r3, #20
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d1bb      	bne.n	800a760 <_strtod_l+0xa10>
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f9ec 	bl	8000bc8 <__aeabi_d2lz>
 800a7f0:	f7f5 fed4 	bl	800059c <__aeabi_l2d>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	f7f5 fd44 	bl	8000288 <__aeabi_dsub>
 800a800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a802:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a806:	ea43 0308 	orr.w	r3, r3, r8
 800a80a:	4313      	orrs	r3, r2
 800a80c:	4606      	mov	r6, r0
 800a80e:	460f      	mov	r7, r1
 800a810:	d054      	beq.n	800a8bc <_strtod_l+0xb6c>
 800a812:	a339      	add	r3, pc, #228	; (adr r3, 800a8f8 <_strtod_l+0xba8>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f6 f960 	bl	8000adc <__aeabi_dcmplt>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f47f ace5 	bne.w	800a1ec <_strtod_l+0x49c>
 800a822:	a337      	add	r3, pc, #220	; (adr r3, 800a900 <_strtod_l+0xbb0>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 f974 	bl	8000b18 <__aeabi_dcmpgt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d095      	beq.n	800a760 <_strtod_l+0xa10>
 800a834:	e4da      	b.n	800a1ec <_strtod_l+0x49c>
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	b333      	cbz	r3, 800a888 <_strtod_l+0xb38>
 800a83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a83c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a840:	d822      	bhi.n	800a888 <_strtod_l+0xb38>
 800a842:	a331      	add	r3, pc, #196	; (adr r3, 800a908 <_strtod_l+0xbb8>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f6 f950 	bl	8000af0 <__aeabi_dcmple>
 800a850:	b1a0      	cbz	r0, 800a87c <_strtod_l+0xb2c>
 800a852:	4639      	mov	r1, r7
 800a854:	4630      	mov	r0, r6
 800a856:	f7f6 f97f 	bl	8000b58 <__aeabi_d2uiz>
 800a85a:	2801      	cmp	r0, #1
 800a85c:	bf38      	it	cc
 800a85e:	2001      	movcc	r0, #1
 800a860:	f7f5 fe50 	bl	8000504 <__aeabi_ui2d>
 800a864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a866:	4606      	mov	r6, r0
 800a868:	460f      	mov	r7, r1
 800a86a:	bb23      	cbnz	r3, 800a8b6 <_strtod_l+0xb66>
 800a86c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a870:	9010      	str	r0, [sp, #64]	; 0x40
 800a872:	9311      	str	r3, [sp, #68]	; 0x44
 800a874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a87e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a880:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	930f      	str	r3, [sp, #60]	; 0x3c
 800a888:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a88c:	eeb0 0a48 	vmov.f32	s0, s16
 800a890:	eef0 0a68 	vmov.f32	s1, s17
 800a894:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a898:	f001 fa72 	bl	800bd80 <__ulp>
 800a89c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8a0:	ec53 2b10 	vmov	r2, r3, d0
 800a8a4:	f7f5 fea8 	bl	80005f8 <__aeabi_dmul>
 800a8a8:	ec53 2b18 	vmov	r2, r3, d8
 800a8ac:	f7f5 fcee 	bl	800028c <__adddf3>
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	4689      	mov	r9, r1
 800a8b4:	e78d      	b.n	800a7d2 <_strtod_l+0xa82>
 800a8b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a8ba:	e7db      	b.n	800a874 <_strtod_l+0xb24>
 800a8bc:	a314      	add	r3, pc, #80	; (adr r3, 800a910 <_strtod_l+0xbc0>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f6 f90b 	bl	8000adc <__aeabi_dcmplt>
 800a8c6:	e7b3      	b.n	800a830 <_strtod_l+0xae0>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a8cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	f7ff ba7c 	b.w	8009dce <_strtod_l+0x7e>
 800a8d6:	2a65      	cmp	r2, #101	; 0x65
 800a8d8:	f43f ab75 	beq.w	8009fc6 <_strtod_l+0x276>
 800a8dc:	2a45      	cmp	r2, #69	; 0x45
 800a8de:	f43f ab72 	beq.w	8009fc6 <_strtod_l+0x276>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f7ff bbaa 	b.w	800a03c <_strtod_l+0x2ec>
 800a8e8:	00000000 	.word	0x00000000
 800a8ec:	bff00000 	.word	0xbff00000
 800a8f0:	00000000 	.word	0x00000000
 800a8f4:	3ff00000 	.word	0x3ff00000
 800a8f8:	94a03595 	.word	0x94a03595
 800a8fc:	3fdfffff 	.word	0x3fdfffff
 800a900:	35afe535 	.word	0x35afe535
 800a904:	3fe00000 	.word	0x3fe00000
 800a908:	ffc00000 	.word	0xffc00000
 800a90c:	41dfffff 	.word	0x41dfffff
 800a910:	94a03595 	.word	0x94a03595
 800a914:	3fcfffff 	.word	0x3fcfffff
 800a918:	3ff00000 	.word	0x3ff00000
 800a91c:	3fe00000 	.word	0x3fe00000
 800a920:	7ff00000 	.word	0x7ff00000
 800a924:	7fe00000 	.word	0x7fe00000
 800a928:	7c9fffff 	.word	0x7c9fffff
 800a92c:	7fefffff 	.word	0x7fefffff

0800a930 <strtod>:
 800a930:	460a      	mov	r2, r1
 800a932:	4601      	mov	r1, r0
 800a934:	4802      	ldr	r0, [pc, #8]	; (800a940 <strtod+0x10>)
 800a936:	4b03      	ldr	r3, [pc, #12]	; (800a944 <strtod+0x14>)
 800a938:	6800      	ldr	r0, [r0, #0]
 800a93a:	f7ff ba09 	b.w	8009d50 <_strtod_l>
 800a93e:	bf00      	nop
 800a940:	200002c0 	.word	0x200002c0
 800a944:	20000108 	.word	0x20000108

0800a948 <std>:
 800a948:	2300      	movs	r3, #0
 800a94a:	b510      	push	{r4, lr}
 800a94c:	4604      	mov	r4, r0
 800a94e:	e9c0 3300 	strd	r3, r3, [r0]
 800a952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a956:	6083      	str	r3, [r0, #8]
 800a958:	8181      	strh	r1, [r0, #12]
 800a95a:	6643      	str	r3, [r0, #100]	; 0x64
 800a95c:	81c2      	strh	r2, [r0, #14]
 800a95e:	6183      	str	r3, [r0, #24]
 800a960:	4619      	mov	r1, r3
 800a962:	2208      	movs	r2, #8
 800a964:	305c      	adds	r0, #92	; 0x5c
 800a966:	f000 f902 	bl	800ab6e <memset>
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <std+0x38>)
 800a96c:	6263      	str	r3, [r4, #36]	; 0x24
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <std+0x3c>)
 800a970:	62a3      	str	r3, [r4, #40]	; 0x28
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <std+0x40>)
 800a974:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <std+0x44>)
 800a978:	6224      	str	r4, [r4, #32]
 800a97a:	6323      	str	r3, [r4, #48]	; 0x30
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	bf00      	nop
 800a980:	0800aae9 	.word	0x0800aae9
 800a984:	0800ab0b 	.word	0x0800ab0b
 800a988:	0800ab43 	.word	0x0800ab43
 800a98c:	0800ab67 	.word	0x0800ab67

0800a990 <stdio_exit_handler>:
 800a990:	4a02      	ldr	r2, [pc, #8]	; (800a99c <stdio_exit_handler+0xc>)
 800a992:	4903      	ldr	r1, [pc, #12]	; (800a9a0 <stdio_exit_handler+0x10>)
 800a994:	4803      	ldr	r0, [pc, #12]	; (800a9a4 <stdio_exit_handler+0x14>)
 800a996:	f000 b869 	b.w	800aa6c <_fwalk_sglue>
 800a99a:	bf00      	nop
 800a99c:	200000fc 	.word	0x200000fc
 800a9a0:	0800c6f9 	.word	0x0800c6f9
 800a9a4:	20000274 	.word	0x20000274

0800a9a8 <cleanup_stdio>:
 800a9a8:	6841      	ldr	r1, [r0, #4]
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <cleanup_stdio+0x34>)
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	b510      	push	{r4, lr}
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	d001      	beq.n	800a9b8 <cleanup_stdio+0x10>
 800a9b4:	f001 fea0 	bl	800c6f8 <_fflush_r>
 800a9b8:	68a1      	ldr	r1, [r4, #8]
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <cleanup_stdio+0x38>)
 800a9bc:	4299      	cmp	r1, r3
 800a9be:	d002      	beq.n	800a9c6 <cleanup_stdio+0x1e>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f001 fe99 	bl	800c6f8 <_fflush_r>
 800a9c6:	68e1      	ldr	r1, [r4, #12]
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <cleanup_stdio+0x3c>)
 800a9ca:	4299      	cmp	r1, r3
 800a9cc:	d004      	beq.n	800a9d8 <cleanup_stdio+0x30>
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d4:	f001 be90 	b.w	800c6f8 <_fflush_r>
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	bf00      	nop
 800a9dc:	2000200c 	.word	0x2000200c
 800a9e0:	20002074 	.word	0x20002074
 800a9e4:	200020dc 	.word	0x200020dc

0800a9e8 <global_stdio_init.part.0>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <global_stdio_init.part.0+0x30>)
 800a9ec:	4c0b      	ldr	r4, [pc, #44]	; (800aa1c <global_stdio_init.part.0+0x34>)
 800a9ee:	4a0c      	ldr	r2, [pc, #48]	; (800aa20 <global_stdio_init.part.0+0x38>)
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2104      	movs	r1, #4
 800a9f8:	f7ff ffa6 	bl	800a948 <std>
 800a9fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa00:	2201      	movs	r2, #1
 800aa02:	2109      	movs	r1, #9
 800aa04:	f7ff ffa0 	bl	800a948 <std>
 800aa08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa12:	2112      	movs	r1, #18
 800aa14:	f7ff bf98 	b.w	800a948 <std>
 800aa18:	20002144 	.word	0x20002144
 800aa1c:	2000200c 	.word	0x2000200c
 800aa20:	0800a991 	.word	0x0800a991

0800aa24 <__sfp_lock_acquire>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__sfp_lock_acquire+0x8>)
 800aa26:	f000 b99f 	b.w	800ad68 <__retarget_lock_acquire_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	2000214d 	.word	0x2000214d

0800aa30 <__sfp_lock_release>:
 800aa30:	4801      	ldr	r0, [pc, #4]	; (800aa38 <__sfp_lock_release+0x8>)
 800aa32:	f000 b99a 	b.w	800ad6a <__retarget_lock_release_recursive>
 800aa36:	bf00      	nop
 800aa38:	2000214d 	.word	0x2000214d

0800aa3c <__sinit>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	4604      	mov	r4, r0
 800aa40:	f7ff fff0 	bl	800aa24 <__sfp_lock_acquire>
 800aa44:	6a23      	ldr	r3, [r4, #32]
 800aa46:	b11b      	cbz	r3, 800aa50 <__sinit+0x14>
 800aa48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa4c:	f7ff bff0 	b.w	800aa30 <__sfp_lock_release>
 800aa50:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <__sinit+0x28>)
 800aa52:	6223      	str	r3, [r4, #32]
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <__sinit+0x2c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1f5      	bne.n	800aa48 <__sinit+0xc>
 800aa5c:	f7ff ffc4 	bl	800a9e8 <global_stdio_init.part.0>
 800aa60:	e7f2      	b.n	800aa48 <__sinit+0xc>
 800aa62:	bf00      	nop
 800aa64:	0800a9a9 	.word	0x0800a9a9
 800aa68:	20002144 	.word	0x20002144

0800aa6c <_fwalk_sglue>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	4607      	mov	r7, r0
 800aa72:	4688      	mov	r8, r1
 800aa74:	4614      	mov	r4, r2
 800aa76:	2600      	movs	r6, #0
 800aa78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa7c:	f1b9 0901 	subs.w	r9, r9, #1
 800aa80:	d505      	bpl.n	800aa8e <_fwalk_sglue+0x22>
 800aa82:	6824      	ldr	r4, [r4, #0]
 800aa84:	2c00      	cmp	r4, #0
 800aa86:	d1f7      	bne.n	800aa78 <_fwalk_sglue+0xc>
 800aa88:	4630      	mov	r0, r6
 800aa8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8e:	89ab      	ldrh	r3, [r5, #12]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d907      	bls.n	800aaa4 <_fwalk_sglue+0x38>
 800aa94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	d003      	beq.n	800aaa4 <_fwalk_sglue+0x38>
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	47c0      	blx	r8
 800aaa2:	4306      	orrs	r6, r0
 800aaa4:	3568      	adds	r5, #104	; 0x68
 800aaa6:	e7e9      	b.n	800aa7c <_fwalk_sglue+0x10>

0800aaa8 <siprintf>:
 800aaa8:	b40e      	push	{r1, r2, r3}
 800aaaa:	b500      	push	{lr}
 800aaac:	b09c      	sub	sp, #112	; 0x70
 800aaae:	ab1d      	add	r3, sp, #116	; 0x74
 800aab0:	9002      	str	r0, [sp, #8]
 800aab2:	9006      	str	r0, [sp, #24]
 800aab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aab8:	4809      	ldr	r0, [pc, #36]	; (800aae0 <siprintf+0x38>)
 800aaba:	9107      	str	r1, [sp, #28]
 800aabc:	9104      	str	r1, [sp, #16]
 800aabe:	4909      	ldr	r1, [pc, #36]	; (800aae4 <siprintf+0x3c>)
 800aac0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac4:	9105      	str	r1, [sp, #20]
 800aac6:	6800      	ldr	r0, [r0, #0]
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	a902      	add	r1, sp, #8
 800aacc:	f001 fb00 	bl	800c0d0 <_svfiprintf_r>
 800aad0:	9b02      	ldr	r3, [sp, #8]
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	b01c      	add	sp, #112	; 0x70
 800aad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aadc:	b003      	add	sp, #12
 800aade:	4770      	bx	lr
 800aae0:	200002c0 	.word	0x200002c0
 800aae4:	ffff0208 	.word	0xffff0208

0800aae8 <__sread>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf0:	f000 f8ec 	bl	800accc <_read_r>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	bfab      	itete	ge
 800aaf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aafa:	89a3      	ldrhlt	r3, [r4, #12]
 800aafc:	181b      	addge	r3, r3, r0
 800aafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab02:	bfac      	ite	ge
 800ab04:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab06:	81a3      	strhlt	r3, [r4, #12]
 800ab08:	bd10      	pop	{r4, pc}

0800ab0a <__swrite>:
 800ab0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	461f      	mov	r7, r3
 800ab10:	898b      	ldrh	r3, [r1, #12]
 800ab12:	05db      	lsls	r3, r3, #23
 800ab14:	4605      	mov	r5, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	4616      	mov	r6, r2
 800ab1a:	d505      	bpl.n	800ab28 <__swrite+0x1e>
 800ab1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab20:	2302      	movs	r3, #2
 800ab22:	2200      	movs	r2, #0
 800ab24:	f000 f8c0 	bl	800aca8 <_lseek_r>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	4632      	mov	r2, r6
 800ab36:	463b      	mov	r3, r7
 800ab38:	4628      	mov	r0, r5
 800ab3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	f000 b8d7 	b.w	800acf0 <_write_r>

0800ab42 <__sseek>:
 800ab42:	b510      	push	{r4, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4a:	f000 f8ad 	bl	800aca8 <_lseek_r>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	bf15      	itete	ne
 800ab54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab5e:	81a3      	strheq	r3, [r4, #12]
 800ab60:	bf18      	it	ne
 800ab62:	81a3      	strhne	r3, [r4, #12]
 800ab64:	bd10      	pop	{r4, pc}

0800ab66 <__sclose>:
 800ab66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6a:	f000 b88d 	b.w	800ac88 <_close_r>

0800ab6e <memset>:
 800ab6e:	4402      	add	r2, r0
 800ab70:	4603      	mov	r3, r0
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d100      	bne.n	800ab78 <memset+0xa>
 800ab76:	4770      	bx	lr
 800ab78:	f803 1b01 	strb.w	r1, [r3], #1
 800ab7c:	e7f9      	b.n	800ab72 <memset+0x4>

0800ab7e <strncmp>:
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	b16a      	cbz	r2, 800ab9e <strncmp+0x20>
 800ab82:	3901      	subs	r1, #1
 800ab84:	1884      	adds	r4, r0, r2
 800ab86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d103      	bne.n	800ab9a <strncmp+0x1c>
 800ab92:	42a0      	cmp	r0, r4
 800ab94:	d001      	beq.n	800ab9a <strncmp+0x1c>
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	d1f5      	bne.n	800ab86 <strncmp+0x8>
 800ab9a:	1ad0      	subs	r0, r2, r3
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	4610      	mov	r0, r2
 800aba0:	e7fc      	b.n	800ab9c <strncmp+0x1e>
	...

0800aba4 <strtok>:
 800aba4:	4b16      	ldr	r3, [pc, #88]	; (800ac00 <strtok+0x5c>)
 800aba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aba8:	681e      	ldr	r6, [r3, #0]
 800abaa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800abac:	4605      	mov	r5, r0
 800abae:	b9fc      	cbnz	r4, 800abf0 <strtok+0x4c>
 800abb0:	2050      	movs	r0, #80	; 0x50
 800abb2:	9101      	str	r1, [sp, #4]
 800abb4:	f000 fcb2 	bl	800b51c <malloc>
 800abb8:	9901      	ldr	r1, [sp, #4]
 800abba:	6470      	str	r0, [r6, #68]	; 0x44
 800abbc:	4602      	mov	r2, r0
 800abbe:	b920      	cbnz	r0, 800abca <strtok+0x26>
 800abc0:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <strtok+0x60>)
 800abc2:	4811      	ldr	r0, [pc, #68]	; (800ac08 <strtok+0x64>)
 800abc4:	215b      	movs	r1, #91	; 0x5b
 800abc6:	f000 f8e7 	bl	800ad98 <__assert_func>
 800abca:	e9c0 4400 	strd	r4, r4, [r0]
 800abce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800abd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800abd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800abda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800abde:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800abe2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800abe6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800abea:	6184      	str	r4, [r0, #24]
 800abec:	7704      	strb	r4, [r0, #28]
 800abee:	6244      	str	r4, [r0, #36]	; 0x24
 800abf0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800abf2:	2301      	movs	r3, #1
 800abf4:	4628      	mov	r0, r5
 800abf6:	b002      	add	sp, #8
 800abf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abfc:	f000 b806 	b.w	800ac0c <__strtok_r>
 800ac00:	200002c0 	.word	0x200002c0
 800ac04:	0800dae0 	.word	0x0800dae0
 800ac08:	0800daf7 	.word	0x0800daf7

0800ac0c <__strtok_r>:
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b908      	cbnz	r0, 800ac14 <__strtok_r+0x8>
 800ac10:	6810      	ldr	r0, [r2, #0]
 800ac12:	b188      	cbz	r0, 800ac38 <__strtok_r+0x2c>
 800ac14:	4604      	mov	r4, r0
 800ac16:	4620      	mov	r0, r4
 800ac18:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac22:	b91e      	cbnz	r6, 800ac2c <__strtok_r+0x20>
 800ac24:	b965      	cbnz	r5, 800ac40 <__strtok_r+0x34>
 800ac26:	6015      	str	r5, [r2, #0]
 800ac28:	4628      	mov	r0, r5
 800ac2a:	e005      	b.n	800ac38 <__strtok_r+0x2c>
 800ac2c:	42b5      	cmp	r5, r6
 800ac2e:	d1f6      	bne.n	800ac1e <__strtok_r+0x12>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1f0      	bne.n	800ac16 <__strtok_r+0xa>
 800ac34:	6014      	str	r4, [r2, #0]
 800ac36:	7003      	strb	r3, [r0, #0]
 800ac38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac3a:	461c      	mov	r4, r3
 800ac3c:	e00c      	b.n	800ac58 <__strtok_r+0x4c>
 800ac3e:	b915      	cbnz	r5, 800ac46 <__strtok_r+0x3a>
 800ac40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac44:	460e      	mov	r6, r1
 800ac46:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac4a:	42ab      	cmp	r3, r5
 800ac4c:	d1f7      	bne.n	800ac3e <__strtok_r+0x32>
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f3      	beq.n	800ac3a <__strtok_r+0x2e>
 800ac52:	2300      	movs	r3, #0
 800ac54:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac58:	6014      	str	r4, [r2, #0]
 800ac5a:	e7ed      	b.n	800ac38 <__strtok_r+0x2c>

0800ac5c <strstr>:
 800ac5c:	780a      	ldrb	r2, [r1, #0]
 800ac5e:	b570      	push	{r4, r5, r6, lr}
 800ac60:	b96a      	cbnz	r2, 800ac7e <strstr+0x22>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d109      	bne.n	800ac7c <strstr+0x20>
 800ac68:	460c      	mov	r4, r1
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0f6      	beq.n	800ac62 <strstr+0x6>
 800ac74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ac78:	429e      	cmp	r6, r3
 800ac7a:	d0f7      	beq.n	800ac6c <strstr+0x10>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	7803      	ldrb	r3, [r0, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1ef      	bne.n	800ac64 <strstr+0x8>
 800ac84:	4618      	mov	r0, r3
 800ac86:	e7ec      	b.n	800ac62 <strstr+0x6>

0800ac88 <_close_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d06      	ldr	r5, [pc, #24]	; (800aca4 <_close_r+0x1c>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	602b      	str	r3, [r5, #0]
 800ac94:	f7f6 ff1f 	bl	8001ad6 <_close>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_close_r+0x1a>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_close_r+0x1a>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20002148 	.word	0x20002148

0800aca8 <_lseek_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d07      	ldr	r5, [pc, #28]	; (800acc8 <_lseek_r+0x20>)
 800acac:	4604      	mov	r4, r0
 800acae:	4608      	mov	r0, r1
 800acb0:	4611      	mov	r1, r2
 800acb2:	2200      	movs	r2, #0
 800acb4:	602a      	str	r2, [r5, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	f7f6 ff34 	bl	8001b24 <_lseek>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_lseek_r+0x1e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_lseek_r+0x1e>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20002148 	.word	0x20002148

0800accc <_read_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_read_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f6 fec2 	bl	8001a64 <_read>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_read_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_read_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20002148 	.word	0x20002148

0800acf0 <_write_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	; (800ad10 <_write_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7f6 fecd 	bl	8001a9e <_write>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_write_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_write_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20002148 	.word	0x20002148

0800ad14 <__errno>:
 800ad14:	4b01      	ldr	r3, [pc, #4]	; (800ad1c <__errno+0x8>)
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	200002c0 	.word	0x200002c0

0800ad20 <__libc_init_array>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	4d0d      	ldr	r5, [pc, #52]	; (800ad58 <__libc_init_array+0x38>)
 800ad24:	4c0d      	ldr	r4, [pc, #52]	; (800ad5c <__libc_init_array+0x3c>)
 800ad26:	1b64      	subs	r4, r4, r5
 800ad28:	10a4      	asrs	r4, r4, #2
 800ad2a:	2600      	movs	r6, #0
 800ad2c:	42a6      	cmp	r6, r4
 800ad2e:	d109      	bne.n	800ad44 <__libc_init_array+0x24>
 800ad30:	4d0b      	ldr	r5, [pc, #44]	; (800ad60 <__libc_init_array+0x40>)
 800ad32:	4c0c      	ldr	r4, [pc, #48]	; (800ad64 <__libc_init_array+0x44>)
 800ad34:	f002 fdfc 	bl	800d930 <_init>
 800ad38:	1b64      	subs	r4, r4, r5
 800ad3a:	10a4      	asrs	r4, r4, #2
 800ad3c:	2600      	movs	r6, #0
 800ad3e:	42a6      	cmp	r6, r4
 800ad40:	d105      	bne.n	800ad4e <__libc_init_array+0x2e>
 800ad42:	bd70      	pop	{r4, r5, r6, pc}
 800ad44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad48:	4798      	blx	r3
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	e7ee      	b.n	800ad2c <__libc_init_array+0xc>
 800ad4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad52:	4798      	blx	r3
 800ad54:	3601      	adds	r6, #1
 800ad56:	e7f2      	b.n	800ad3e <__libc_init_array+0x1e>
 800ad58:	0800df08 	.word	0x0800df08
 800ad5c:	0800df08 	.word	0x0800df08
 800ad60:	0800df08 	.word	0x0800df08
 800ad64:	0800df0c 	.word	0x0800df0c

0800ad68 <__retarget_lock_acquire_recursive>:
 800ad68:	4770      	bx	lr

0800ad6a <__retarget_lock_release_recursive>:
 800ad6a:	4770      	bx	lr

0800ad6c <memcpy>:
 800ad6c:	440a      	add	r2, r1
 800ad6e:	4291      	cmp	r1, r2
 800ad70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad74:	d100      	bne.n	800ad78 <memcpy+0xc>
 800ad76:	4770      	bx	lr
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad82:	4291      	cmp	r1, r2
 800ad84:	d1f9      	bne.n	800ad7a <memcpy+0xe>
 800ad86:	bd10      	pop	{r4, pc}

0800ad88 <nan>:
 800ad88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad90 <nan+0x8>
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	00000000 	.word	0x00000000
 800ad94:	7ff80000 	.word	0x7ff80000

0800ad98 <__assert_func>:
 800ad98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad9a:	4614      	mov	r4, r2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <__assert_func+0x2c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4605      	mov	r5, r0
 800ada4:	68d8      	ldr	r0, [r3, #12]
 800ada6:	b14c      	cbz	r4, 800adbc <__assert_func+0x24>
 800ada8:	4b07      	ldr	r3, [pc, #28]	; (800adc8 <__assert_func+0x30>)
 800adaa:	9100      	str	r1, [sp, #0]
 800adac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb0:	4906      	ldr	r1, [pc, #24]	; (800adcc <__assert_func+0x34>)
 800adb2:	462b      	mov	r3, r5
 800adb4:	f001 fcc8 	bl	800c748 <fiprintf>
 800adb8:	f001 fd02 	bl	800c7c0 <abort>
 800adbc:	4b04      	ldr	r3, [pc, #16]	; (800add0 <__assert_func+0x38>)
 800adbe:	461c      	mov	r4, r3
 800adc0:	e7f3      	b.n	800adaa <__assert_func+0x12>
 800adc2:	bf00      	nop
 800adc4:	200002c0 	.word	0x200002c0
 800adc8:	0800db59 	.word	0x0800db59
 800adcc:	0800db66 	.word	0x0800db66
 800add0:	0800db94 	.word	0x0800db94

0800add4 <_free_r>:
 800add4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800add6:	2900      	cmp	r1, #0
 800add8:	d044      	beq.n	800ae64 <_free_r+0x90>
 800adda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adde:	9001      	str	r0, [sp, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f1a1 0404 	sub.w	r4, r1, #4
 800ade6:	bfb8      	it	lt
 800ade8:	18e4      	addlt	r4, r4, r3
 800adea:	f000 fc51 	bl	800b690 <__malloc_lock>
 800adee:	4a1e      	ldr	r2, [pc, #120]	; (800ae68 <_free_r+0x94>)
 800adf0:	9801      	ldr	r0, [sp, #4]
 800adf2:	6813      	ldr	r3, [r2, #0]
 800adf4:	b933      	cbnz	r3, 800ae04 <_free_r+0x30>
 800adf6:	6063      	str	r3, [r4, #4]
 800adf8:	6014      	str	r4, [r2, #0]
 800adfa:	b003      	add	sp, #12
 800adfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae00:	f000 bc4c 	b.w	800b69c <__malloc_unlock>
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	d908      	bls.n	800ae1a <_free_r+0x46>
 800ae08:	6825      	ldr	r5, [r4, #0]
 800ae0a:	1961      	adds	r1, r4, r5
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	bf01      	itttt	eq
 800ae10:	6819      	ldreq	r1, [r3, #0]
 800ae12:	685b      	ldreq	r3, [r3, #4]
 800ae14:	1949      	addeq	r1, r1, r5
 800ae16:	6021      	streq	r1, [r4, #0]
 800ae18:	e7ed      	b.n	800adf6 <_free_r+0x22>
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	b10b      	cbz	r3, 800ae24 <_free_r+0x50>
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d9fa      	bls.n	800ae1a <_free_r+0x46>
 800ae24:	6811      	ldr	r1, [r2, #0]
 800ae26:	1855      	adds	r5, r2, r1
 800ae28:	42a5      	cmp	r5, r4
 800ae2a:	d10b      	bne.n	800ae44 <_free_r+0x70>
 800ae2c:	6824      	ldr	r4, [r4, #0]
 800ae2e:	4421      	add	r1, r4
 800ae30:	1854      	adds	r4, r2, r1
 800ae32:	42a3      	cmp	r3, r4
 800ae34:	6011      	str	r1, [r2, #0]
 800ae36:	d1e0      	bne.n	800adfa <_free_r+0x26>
 800ae38:	681c      	ldr	r4, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	6053      	str	r3, [r2, #4]
 800ae3e:	440c      	add	r4, r1
 800ae40:	6014      	str	r4, [r2, #0]
 800ae42:	e7da      	b.n	800adfa <_free_r+0x26>
 800ae44:	d902      	bls.n	800ae4c <_free_r+0x78>
 800ae46:	230c      	movs	r3, #12
 800ae48:	6003      	str	r3, [r0, #0]
 800ae4a:	e7d6      	b.n	800adfa <_free_r+0x26>
 800ae4c:	6825      	ldr	r5, [r4, #0]
 800ae4e:	1961      	adds	r1, r4, r5
 800ae50:	428b      	cmp	r3, r1
 800ae52:	bf04      	itt	eq
 800ae54:	6819      	ldreq	r1, [r3, #0]
 800ae56:	685b      	ldreq	r3, [r3, #4]
 800ae58:	6063      	str	r3, [r4, #4]
 800ae5a:	bf04      	itt	eq
 800ae5c:	1949      	addeq	r1, r1, r5
 800ae5e:	6021      	streq	r1, [r4, #0]
 800ae60:	6054      	str	r4, [r2, #4]
 800ae62:	e7ca      	b.n	800adfa <_free_r+0x26>
 800ae64:	b003      	add	sp, #12
 800ae66:	bd30      	pop	{r4, r5, pc}
 800ae68:	20002150 	.word	0x20002150

0800ae6c <rshift>:
 800ae6c:	6903      	ldr	r3, [r0, #16]
 800ae6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae7a:	f100 0414 	add.w	r4, r0, #20
 800ae7e:	dd45      	ble.n	800af0c <rshift+0xa0>
 800ae80:	f011 011f 	ands.w	r1, r1, #31
 800ae84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae8c:	d10c      	bne.n	800aea8 <rshift+0x3c>
 800ae8e:	f100 0710 	add.w	r7, r0, #16
 800ae92:	4629      	mov	r1, r5
 800ae94:	42b1      	cmp	r1, r6
 800ae96:	d334      	bcc.n	800af02 <rshift+0x96>
 800ae98:	1a9b      	subs	r3, r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	1eea      	subs	r2, r5, #3
 800ae9e:	4296      	cmp	r6, r2
 800aea0:	bf38      	it	cc
 800aea2:	2300      	movcc	r3, #0
 800aea4:	4423      	add	r3, r4
 800aea6:	e015      	b.n	800aed4 <rshift+0x68>
 800aea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeac:	f1c1 0820 	rsb	r8, r1, #32
 800aeb0:	40cf      	lsrs	r7, r1
 800aeb2:	f105 0e04 	add.w	lr, r5, #4
 800aeb6:	46a1      	mov	r9, r4
 800aeb8:	4576      	cmp	r6, lr
 800aeba:	46f4      	mov	ip, lr
 800aebc:	d815      	bhi.n	800aeea <rshift+0x7e>
 800aebe:	1a9a      	subs	r2, r3, r2
 800aec0:	0092      	lsls	r2, r2, #2
 800aec2:	3a04      	subs	r2, #4
 800aec4:	3501      	adds	r5, #1
 800aec6:	42ae      	cmp	r6, r5
 800aec8:	bf38      	it	cc
 800aeca:	2200      	movcc	r2, #0
 800aecc:	18a3      	adds	r3, r4, r2
 800aece:	50a7      	str	r7, [r4, r2]
 800aed0:	b107      	cbz	r7, 800aed4 <rshift+0x68>
 800aed2:	3304      	adds	r3, #4
 800aed4:	1b1a      	subs	r2, r3, r4
 800aed6:	42a3      	cmp	r3, r4
 800aed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aedc:	bf08      	it	eq
 800aede:	2300      	moveq	r3, #0
 800aee0:	6102      	str	r2, [r0, #16]
 800aee2:	bf08      	it	eq
 800aee4:	6143      	streq	r3, [r0, #20]
 800aee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeea:	f8dc c000 	ldr.w	ip, [ip]
 800aeee:	fa0c fc08 	lsl.w	ip, ip, r8
 800aef2:	ea4c 0707 	orr.w	r7, ip, r7
 800aef6:	f849 7b04 	str.w	r7, [r9], #4
 800aefa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aefe:	40cf      	lsrs	r7, r1
 800af00:	e7da      	b.n	800aeb8 <rshift+0x4c>
 800af02:	f851 cb04 	ldr.w	ip, [r1], #4
 800af06:	f847 cf04 	str.w	ip, [r7, #4]!
 800af0a:	e7c3      	b.n	800ae94 <rshift+0x28>
 800af0c:	4623      	mov	r3, r4
 800af0e:	e7e1      	b.n	800aed4 <rshift+0x68>

0800af10 <__hexdig_fun>:
 800af10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af14:	2b09      	cmp	r3, #9
 800af16:	d802      	bhi.n	800af1e <__hexdig_fun+0xe>
 800af18:	3820      	subs	r0, #32
 800af1a:	b2c0      	uxtb	r0, r0
 800af1c:	4770      	bx	lr
 800af1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af22:	2b05      	cmp	r3, #5
 800af24:	d801      	bhi.n	800af2a <__hexdig_fun+0x1a>
 800af26:	3847      	subs	r0, #71	; 0x47
 800af28:	e7f7      	b.n	800af1a <__hexdig_fun+0xa>
 800af2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d801      	bhi.n	800af36 <__hexdig_fun+0x26>
 800af32:	3827      	subs	r0, #39	; 0x27
 800af34:	e7f1      	b.n	800af1a <__hexdig_fun+0xa>
 800af36:	2000      	movs	r0, #0
 800af38:	4770      	bx	lr
	...

0800af3c <__gethex>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	4617      	mov	r7, r2
 800af42:	680a      	ldr	r2, [r1, #0]
 800af44:	b085      	sub	sp, #20
 800af46:	f102 0b02 	add.w	fp, r2, #2
 800af4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af52:	4681      	mov	r9, r0
 800af54:	468a      	mov	sl, r1
 800af56:	9302      	str	r3, [sp, #8]
 800af58:	32fe      	adds	r2, #254	; 0xfe
 800af5a:	eb02 030b 	add.w	r3, r2, fp
 800af5e:	46d8      	mov	r8, fp
 800af60:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	2830      	cmp	r0, #48	; 0x30
 800af68:	d0f7      	beq.n	800af5a <__gethex+0x1e>
 800af6a:	f7ff ffd1 	bl	800af10 <__hexdig_fun>
 800af6e:	4604      	mov	r4, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	d138      	bne.n	800afe6 <__gethex+0xaa>
 800af74:	49a7      	ldr	r1, [pc, #668]	; (800b214 <__gethex+0x2d8>)
 800af76:	2201      	movs	r2, #1
 800af78:	4640      	mov	r0, r8
 800af7a:	f7ff fe00 	bl	800ab7e <strncmp>
 800af7e:	4606      	mov	r6, r0
 800af80:	2800      	cmp	r0, #0
 800af82:	d169      	bne.n	800b058 <__gethex+0x11c>
 800af84:	f898 0001 	ldrb.w	r0, [r8, #1]
 800af88:	465d      	mov	r5, fp
 800af8a:	f7ff ffc1 	bl	800af10 <__hexdig_fun>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d064      	beq.n	800b05c <__gethex+0x120>
 800af92:	465a      	mov	r2, fp
 800af94:	7810      	ldrb	r0, [r2, #0]
 800af96:	2830      	cmp	r0, #48	; 0x30
 800af98:	4690      	mov	r8, r2
 800af9a:	f102 0201 	add.w	r2, r2, #1
 800af9e:	d0f9      	beq.n	800af94 <__gethex+0x58>
 800afa0:	f7ff ffb6 	bl	800af10 <__hexdig_fun>
 800afa4:	2301      	movs	r3, #1
 800afa6:	fab0 f480 	clz	r4, r0
 800afaa:	0964      	lsrs	r4, r4, #5
 800afac:	465e      	mov	r6, fp
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	4642      	mov	r2, r8
 800afb2:	4615      	mov	r5, r2
 800afb4:	3201      	adds	r2, #1
 800afb6:	7828      	ldrb	r0, [r5, #0]
 800afb8:	f7ff ffaa 	bl	800af10 <__hexdig_fun>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d1f8      	bne.n	800afb2 <__gethex+0x76>
 800afc0:	4994      	ldr	r1, [pc, #592]	; (800b214 <__gethex+0x2d8>)
 800afc2:	2201      	movs	r2, #1
 800afc4:	4628      	mov	r0, r5
 800afc6:	f7ff fdda 	bl	800ab7e <strncmp>
 800afca:	b978      	cbnz	r0, 800afec <__gethex+0xb0>
 800afcc:	b946      	cbnz	r6, 800afe0 <__gethex+0xa4>
 800afce:	1c6e      	adds	r6, r5, #1
 800afd0:	4632      	mov	r2, r6
 800afd2:	4615      	mov	r5, r2
 800afd4:	3201      	adds	r2, #1
 800afd6:	7828      	ldrb	r0, [r5, #0]
 800afd8:	f7ff ff9a 	bl	800af10 <__hexdig_fun>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d1f8      	bne.n	800afd2 <__gethex+0x96>
 800afe0:	1b73      	subs	r3, r6, r5
 800afe2:	009e      	lsls	r6, r3, #2
 800afe4:	e004      	b.n	800aff0 <__gethex+0xb4>
 800afe6:	2400      	movs	r4, #0
 800afe8:	4626      	mov	r6, r4
 800afea:	e7e1      	b.n	800afb0 <__gethex+0x74>
 800afec:	2e00      	cmp	r6, #0
 800afee:	d1f7      	bne.n	800afe0 <__gethex+0xa4>
 800aff0:	782b      	ldrb	r3, [r5, #0]
 800aff2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aff6:	2b50      	cmp	r3, #80	; 0x50
 800aff8:	d13d      	bne.n	800b076 <__gethex+0x13a>
 800affa:	786b      	ldrb	r3, [r5, #1]
 800affc:	2b2b      	cmp	r3, #43	; 0x2b
 800affe:	d02f      	beq.n	800b060 <__gethex+0x124>
 800b000:	2b2d      	cmp	r3, #45	; 0x2d
 800b002:	d031      	beq.n	800b068 <__gethex+0x12c>
 800b004:	1c69      	adds	r1, r5, #1
 800b006:	f04f 0b00 	mov.w	fp, #0
 800b00a:	7808      	ldrb	r0, [r1, #0]
 800b00c:	f7ff ff80 	bl	800af10 <__hexdig_fun>
 800b010:	1e42      	subs	r2, r0, #1
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	2a18      	cmp	r2, #24
 800b016:	d82e      	bhi.n	800b076 <__gethex+0x13a>
 800b018:	f1a0 0210 	sub.w	r2, r0, #16
 800b01c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b020:	f7ff ff76 	bl	800af10 <__hexdig_fun>
 800b024:	f100 3cff 	add.w	ip, r0, #4294967295
 800b028:	fa5f fc8c 	uxtb.w	ip, ip
 800b02c:	f1bc 0f18 	cmp.w	ip, #24
 800b030:	d91d      	bls.n	800b06e <__gethex+0x132>
 800b032:	f1bb 0f00 	cmp.w	fp, #0
 800b036:	d000      	beq.n	800b03a <__gethex+0xfe>
 800b038:	4252      	negs	r2, r2
 800b03a:	4416      	add	r6, r2
 800b03c:	f8ca 1000 	str.w	r1, [sl]
 800b040:	b1dc      	cbz	r4, 800b07a <__gethex+0x13e>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	bf14      	ite	ne
 800b048:	f04f 0800 	movne.w	r8, #0
 800b04c:	f04f 0806 	moveq.w	r8, #6
 800b050:	4640      	mov	r0, r8
 800b052:	b005      	add	sp, #20
 800b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b058:	4645      	mov	r5, r8
 800b05a:	4626      	mov	r6, r4
 800b05c:	2401      	movs	r4, #1
 800b05e:	e7c7      	b.n	800aff0 <__gethex+0xb4>
 800b060:	f04f 0b00 	mov.w	fp, #0
 800b064:	1ca9      	adds	r1, r5, #2
 800b066:	e7d0      	b.n	800b00a <__gethex+0xce>
 800b068:	f04f 0b01 	mov.w	fp, #1
 800b06c:	e7fa      	b.n	800b064 <__gethex+0x128>
 800b06e:	230a      	movs	r3, #10
 800b070:	fb03 0002 	mla	r0, r3, r2, r0
 800b074:	e7d0      	b.n	800b018 <__gethex+0xdc>
 800b076:	4629      	mov	r1, r5
 800b078:	e7e0      	b.n	800b03c <__gethex+0x100>
 800b07a:	eba5 0308 	sub.w	r3, r5, r8
 800b07e:	3b01      	subs	r3, #1
 800b080:	4621      	mov	r1, r4
 800b082:	2b07      	cmp	r3, #7
 800b084:	dc0a      	bgt.n	800b09c <__gethex+0x160>
 800b086:	4648      	mov	r0, r9
 800b088:	f000 fb0e 	bl	800b6a8 <_Balloc>
 800b08c:	4604      	mov	r4, r0
 800b08e:	b940      	cbnz	r0, 800b0a2 <__gethex+0x166>
 800b090:	4b61      	ldr	r3, [pc, #388]	; (800b218 <__gethex+0x2dc>)
 800b092:	4602      	mov	r2, r0
 800b094:	21e4      	movs	r1, #228	; 0xe4
 800b096:	4861      	ldr	r0, [pc, #388]	; (800b21c <__gethex+0x2e0>)
 800b098:	f7ff fe7e 	bl	800ad98 <__assert_func>
 800b09c:	3101      	adds	r1, #1
 800b09e:	105b      	asrs	r3, r3, #1
 800b0a0:	e7ef      	b.n	800b082 <__gethex+0x146>
 800b0a2:	f100 0a14 	add.w	sl, r0, #20
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	495a      	ldr	r1, [pc, #360]	; (800b214 <__gethex+0x2d8>)
 800b0aa:	f8cd a004 	str.w	sl, [sp, #4]
 800b0ae:	469b      	mov	fp, r3
 800b0b0:	45a8      	cmp	r8, r5
 800b0b2:	d342      	bcc.n	800b13a <__gethex+0x1fe>
 800b0b4:	9801      	ldr	r0, [sp, #4]
 800b0b6:	f840 bb04 	str.w	fp, [r0], #4
 800b0ba:	eba0 000a 	sub.w	r0, r0, sl
 800b0be:	1080      	asrs	r0, r0, #2
 800b0c0:	6120      	str	r0, [r4, #16]
 800b0c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b0c6:	4658      	mov	r0, fp
 800b0c8:	f000 fbe0 	bl	800b88c <__hi0bits>
 800b0cc:	683d      	ldr	r5, [r7, #0]
 800b0ce:	eba8 0000 	sub.w	r0, r8, r0
 800b0d2:	42a8      	cmp	r0, r5
 800b0d4:	dd59      	ble.n	800b18a <__gethex+0x24e>
 800b0d6:	eba0 0805 	sub.w	r8, r0, r5
 800b0da:	4641      	mov	r1, r8
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 ff6f 	bl	800bfc0 <__any_on>
 800b0e2:	4683      	mov	fp, r0
 800b0e4:	b1b8      	cbz	r0, 800b116 <__gethex+0x1da>
 800b0e6:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0ea:	1159      	asrs	r1, r3, #5
 800b0ec:	f003 021f 	and.w	r2, r3, #31
 800b0f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b0f4:	f04f 0b01 	mov.w	fp, #1
 800b0f8:	fa0b f202 	lsl.w	r2, fp, r2
 800b0fc:	420a      	tst	r2, r1
 800b0fe:	d00a      	beq.n	800b116 <__gethex+0x1da>
 800b100:	455b      	cmp	r3, fp
 800b102:	dd06      	ble.n	800b112 <__gethex+0x1d6>
 800b104:	f1a8 0102 	sub.w	r1, r8, #2
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 ff59 	bl	800bfc0 <__any_on>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d138      	bne.n	800b184 <__gethex+0x248>
 800b112:	f04f 0b02 	mov.w	fp, #2
 800b116:	4641      	mov	r1, r8
 800b118:	4620      	mov	r0, r4
 800b11a:	f7ff fea7 	bl	800ae6c <rshift>
 800b11e:	4446      	add	r6, r8
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	42b3      	cmp	r3, r6
 800b124:	da41      	bge.n	800b1aa <__gethex+0x26e>
 800b126:	4621      	mov	r1, r4
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 fafd 	bl	800b728 <_Bfree>
 800b12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b130:	2300      	movs	r3, #0
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b138:	e78a      	b.n	800b050 <__gethex+0x114>
 800b13a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b13e:	2a2e      	cmp	r2, #46	; 0x2e
 800b140:	d014      	beq.n	800b16c <__gethex+0x230>
 800b142:	2b20      	cmp	r3, #32
 800b144:	d106      	bne.n	800b154 <__gethex+0x218>
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	f843 bb04 	str.w	fp, [r3], #4
 800b14c:	f04f 0b00 	mov.w	fp, #0
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	465b      	mov	r3, fp
 800b154:	7828      	ldrb	r0, [r5, #0]
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	f7ff feda 	bl	800af10 <__hexdig_fun>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	f000 000f 	and.w	r0, r0, #15
 800b162:	4098      	lsls	r0, r3
 800b164:	ea4b 0b00 	orr.w	fp, fp, r0
 800b168:	3304      	adds	r3, #4
 800b16a:	e7a1      	b.n	800b0b0 <__gethex+0x174>
 800b16c:	45a8      	cmp	r8, r5
 800b16e:	d8e8      	bhi.n	800b142 <__gethex+0x206>
 800b170:	2201      	movs	r2, #1
 800b172:	4628      	mov	r0, r5
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	f7ff fd02 	bl	800ab7e <strncmp>
 800b17a:	4926      	ldr	r1, [pc, #152]	; (800b214 <__gethex+0x2d8>)
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	2800      	cmp	r0, #0
 800b180:	d1df      	bne.n	800b142 <__gethex+0x206>
 800b182:	e795      	b.n	800b0b0 <__gethex+0x174>
 800b184:	f04f 0b03 	mov.w	fp, #3
 800b188:	e7c5      	b.n	800b116 <__gethex+0x1da>
 800b18a:	da0b      	bge.n	800b1a4 <__gethex+0x268>
 800b18c:	eba5 0800 	sub.w	r8, r5, r0
 800b190:	4621      	mov	r1, r4
 800b192:	4642      	mov	r2, r8
 800b194:	4648      	mov	r0, r9
 800b196:	f000 fce1 	bl	800bb5c <__lshift>
 800b19a:	eba6 0608 	sub.w	r6, r6, r8
 800b19e:	4604      	mov	r4, r0
 800b1a0:	f100 0a14 	add.w	sl, r0, #20
 800b1a4:	f04f 0b00 	mov.w	fp, #0
 800b1a8:	e7ba      	b.n	800b120 <__gethex+0x1e4>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	42b3      	cmp	r3, r6
 800b1ae:	dd73      	ble.n	800b298 <__gethex+0x35c>
 800b1b0:	1b9e      	subs	r6, r3, r6
 800b1b2:	42b5      	cmp	r5, r6
 800b1b4:	dc34      	bgt.n	800b220 <__gethex+0x2e4>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d023      	beq.n	800b204 <__gethex+0x2c8>
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d025      	beq.n	800b20c <__gethex+0x2d0>
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d115      	bne.n	800b1f0 <__gethex+0x2b4>
 800b1c4:	42b5      	cmp	r5, r6
 800b1c6:	d113      	bne.n	800b1f0 <__gethex+0x2b4>
 800b1c8:	2d01      	cmp	r5, #1
 800b1ca:	d10b      	bne.n	800b1e4 <__gethex+0x2a8>
 800b1cc:	9a02      	ldr	r2, [sp, #8]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	6123      	str	r3, [r4, #16]
 800b1d6:	f8ca 3000 	str.w	r3, [sl]
 800b1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b1e0:	601c      	str	r4, [r3, #0]
 800b1e2:	e735      	b.n	800b050 <__gethex+0x114>
 800b1e4:	1e69      	subs	r1, r5, #1
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 feea 	bl	800bfc0 <__any_on>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d1ed      	bne.n	800b1cc <__gethex+0x290>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4648      	mov	r0, r9
 800b1f4:	f000 fa98 	bl	800b728 <_Bfree>
 800b1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b202:	e725      	b.n	800b050 <__gethex+0x114>
 800b204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1f2      	bne.n	800b1f0 <__gethex+0x2b4>
 800b20a:	e7df      	b.n	800b1cc <__gethex+0x290>
 800b20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1dc      	bne.n	800b1cc <__gethex+0x290>
 800b212:	e7ed      	b.n	800b1f0 <__gethex+0x2b4>
 800b214:	0800da80 	.word	0x0800da80
 800b218:	0800db95 	.word	0x0800db95
 800b21c:	0800dba6 	.word	0x0800dba6
 800b220:	f106 38ff 	add.w	r8, r6, #4294967295
 800b224:	f1bb 0f00 	cmp.w	fp, #0
 800b228:	d133      	bne.n	800b292 <__gethex+0x356>
 800b22a:	f1b8 0f00 	cmp.w	r8, #0
 800b22e:	d004      	beq.n	800b23a <__gethex+0x2fe>
 800b230:	4641      	mov	r1, r8
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fec4 	bl	800bfc0 <__any_on>
 800b238:	4683      	mov	fp, r0
 800b23a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b23e:	2301      	movs	r3, #1
 800b240:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b244:	f008 081f 	and.w	r8, r8, #31
 800b248:	fa03 f308 	lsl.w	r3, r3, r8
 800b24c:	4213      	tst	r3, r2
 800b24e:	4631      	mov	r1, r6
 800b250:	4620      	mov	r0, r4
 800b252:	bf18      	it	ne
 800b254:	f04b 0b02 	orrne.w	fp, fp, #2
 800b258:	1bad      	subs	r5, r5, r6
 800b25a:	f7ff fe07 	bl	800ae6c <rshift>
 800b25e:	687e      	ldr	r6, [r7, #4]
 800b260:	f04f 0802 	mov.w	r8, #2
 800b264:	f1bb 0f00 	cmp.w	fp, #0
 800b268:	d04a      	beq.n	800b300 <__gethex+0x3c4>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d016      	beq.n	800b29e <__gethex+0x362>
 800b270:	2b03      	cmp	r3, #3
 800b272:	d018      	beq.n	800b2a6 <__gethex+0x36a>
 800b274:	2b01      	cmp	r3, #1
 800b276:	d109      	bne.n	800b28c <__gethex+0x350>
 800b278:	f01b 0f02 	tst.w	fp, #2
 800b27c:	d006      	beq.n	800b28c <__gethex+0x350>
 800b27e:	f8da 3000 	ldr.w	r3, [sl]
 800b282:	ea4b 0b03 	orr.w	fp, fp, r3
 800b286:	f01b 0f01 	tst.w	fp, #1
 800b28a:	d10f      	bne.n	800b2ac <__gethex+0x370>
 800b28c:	f048 0810 	orr.w	r8, r8, #16
 800b290:	e036      	b.n	800b300 <__gethex+0x3c4>
 800b292:	f04f 0b01 	mov.w	fp, #1
 800b296:	e7d0      	b.n	800b23a <__gethex+0x2fe>
 800b298:	f04f 0801 	mov.w	r8, #1
 800b29c:	e7e2      	b.n	800b264 <__gethex+0x328>
 800b29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2a0:	f1c3 0301 	rsb	r3, r3, #1
 800b2a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0ef      	beq.n	800b28c <__gethex+0x350>
 800b2ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2b0:	f104 0214 	add.w	r2, r4, #20
 800b2b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4694      	mov	ip, r2
 800b2c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800b2c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b2ca:	d01e      	beq.n	800b30a <__gethex+0x3ce>
 800b2cc:	3101      	adds	r1, #1
 800b2ce:	f8cc 1000 	str.w	r1, [ip]
 800b2d2:	f1b8 0f02 	cmp.w	r8, #2
 800b2d6:	f104 0214 	add.w	r2, r4, #20
 800b2da:	d13d      	bne.n	800b358 <__gethex+0x41c>
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	42ab      	cmp	r3, r5
 800b2e2:	d10b      	bne.n	800b2fc <__gethex+0x3c0>
 800b2e4:	1169      	asrs	r1, r5, #5
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f005 051f 	and.w	r5, r5, #31
 800b2ec:	fa03 f505 	lsl.w	r5, r3, r5
 800b2f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2f4:	421d      	tst	r5, r3
 800b2f6:	bf18      	it	ne
 800b2f8:	f04f 0801 	movne.w	r8, #1
 800b2fc:	f048 0820 	orr.w	r8, r8, #32
 800b300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b302:	601c      	str	r4, [r3, #0]
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	601e      	str	r6, [r3, #0]
 800b308:	e6a2      	b.n	800b050 <__gethex+0x114>
 800b30a:	4290      	cmp	r0, r2
 800b30c:	f842 3c04 	str.w	r3, [r2, #-4]
 800b310:	d8d6      	bhi.n	800b2c0 <__gethex+0x384>
 800b312:	68a2      	ldr	r2, [r4, #8]
 800b314:	4593      	cmp	fp, r2
 800b316:	db17      	blt.n	800b348 <__gethex+0x40c>
 800b318:	6861      	ldr	r1, [r4, #4]
 800b31a:	4648      	mov	r0, r9
 800b31c:	3101      	adds	r1, #1
 800b31e:	f000 f9c3 	bl	800b6a8 <_Balloc>
 800b322:	4682      	mov	sl, r0
 800b324:	b918      	cbnz	r0, 800b32e <__gethex+0x3f2>
 800b326:	4b1b      	ldr	r3, [pc, #108]	; (800b394 <__gethex+0x458>)
 800b328:	4602      	mov	r2, r0
 800b32a:	2184      	movs	r1, #132	; 0x84
 800b32c:	e6b3      	b.n	800b096 <__gethex+0x15a>
 800b32e:	6922      	ldr	r2, [r4, #16]
 800b330:	3202      	adds	r2, #2
 800b332:	f104 010c 	add.w	r1, r4, #12
 800b336:	0092      	lsls	r2, r2, #2
 800b338:	300c      	adds	r0, #12
 800b33a:	f7ff fd17 	bl	800ad6c <memcpy>
 800b33e:	4621      	mov	r1, r4
 800b340:	4648      	mov	r0, r9
 800b342:	f000 f9f1 	bl	800b728 <_Bfree>
 800b346:	4654      	mov	r4, sl
 800b348:	6922      	ldr	r2, [r4, #16]
 800b34a:	1c51      	adds	r1, r2, #1
 800b34c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b350:	6121      	str	r1, [r4, #16]
 800b352:	2101      	movs	r1, #1
 800b354:	6151      	str	r1, [r2, #20]
 800b356:	e7bc      	b.n	800b2d2 <__gethex+0x396>
 800b358:	6921      	ldr	r1, [r4, #16]
 800b35a:	4559      	cmp	r1, fp
 800b35c:	dd0b      	ble.n	800b376 <__gethex+0x43a>
 800b35e:	2101      	movs	r1, #1
 800b360:	4620      	mov	r0, r4
 800b362:	f7ff fd83 	bl	800ae6c <rshift>
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	3601      	adds	r6, #1
 800b36a:	42b3      	cmp	r3, r6
 800b36c:	f6ff aedb 	blt.w	800b126 <__gethex+0x1ea>
 800b370:	f04f 0801 	mov.w	r8, #1
 800b374:	e7c2      	b.n	800b2fc <__gethex+0x3c0>
 800b376:	f015 051f 	ands.w	r5, r5, #31
 800b37a:	d0f9      	beq.n	800b370 <__gethex+0x434>
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	441a      	add	r2, r3
 800b380:	f1c5 0520 	rsb	r5, r5, #32
 800b384:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b388:	f000 fa80 	bl	800b88c <__hi0bits>
 800b38c:	42a8      	cmp	r0, r5
 800b38e:	dbe6      	blt.n	800b35e <__gethex+0x422>
 800b390:	e7ee      	b.n	800b370 <__gethex+0x434>
 800b392:	bf00      	nop
 800b394:	0800db95 	.word	0x0800db95

0800b398 <L_shift>:
 800b398:	f1c2 0208 	rsb	r2, r2, #8
 800b39c:	0092      	lsls	r2, r2, #2
 800b39e:	b570      	push	{r4, r5, r6, lr}
 800b3a0:	f1c2 0620 	rsb	r6, r2, #32
 800b3a4:	6843      	ldr	r3, [r0, #4]
 800b3a6:	6804      	ldr	r4, [r0, #0]
 800b3a8:	fa03 f506 	lsl.w	r5, r3, r6
 800b3ac:	432c      	orrs	r4, r5
 800b3ae:	40d3      	lsrs	r3, r2
 800b3b0:	6004      	str	r4, [r0, #0]
 800b3b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3b6:	4288      	cmp	r0, r1
 800b3b8:	d3f4      	bcc.n	800b3a4 <L_shift+0xc>
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}

0800b3bc <__match>:
 800b3bc:	b530      	push	{r4, r5, lr}
 800b3be:	6803      	ldr	r3, [r0, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c6:	b914      	cbnz	r4, 800b3ce <__match+0x12>
 800b3c8:	6003      	str	r3, [r0, #0]
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	bd30      	pop	{r4, r5, pc}
 800b3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3d6:	2d19      	cmp	r5, #25
 800b3d8:	bf98      	it	ls
 800b3da:	3220      	addls	r2, #32
 800b3dc:	42a2      	cmp	r2, r4
 800b3de:	d0f0      	beq.n	800b3c2 <__match+0x6>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e7f3      	b.n	800b3cc <__match+0x10>

0800b3e4 <__hexnan>:
 800b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e8:	680b      	ldr	r3, [r1, #0]
 800b3ea:	6801      	ldr	r1, [r0, #0]
 800b3ec:	115e      	asrs	r6, r3, #5
 800b3ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3f2:	f013 031f 	ands.w	r3, r3, #31
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	bf18      	it	ne
 800b3fa:	3604      	addne	r6, #4
 800b3fc:	2500      	movs	r5, #0
 800b3fe:	1f37      	subs	r7, r6, #4
 800b400:	4682      	mov	sl, r0
 800b402:	4690      	mov	r8, r2
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	f846 5c04 	str.w	r5, [r6, #-4]
 800b40a:	46b9      	mov	r9, r7
 800b40c:	463c      	mov	r4, r7
 800b40e:	9502      	str	r5, [sp, #8]
 800b410:	46ab      	mov	fp, r5
 800b412:	784a      	ldrb	r2, [r1, #1]
 800b414:	1c4b      	adds	r3, r1, #1
 800b416:	9303      	str	r3, [sp, #12]
 800b418:	b342      	cbz	r2, 800b46c <__hexnan+0x88>
 800b41a:	4610      	mov	r0, r2
 800b41c:	9105      	str	r1, [sp, #20]
 800b41e:	9204      	str	r2, [sp, #16]
 800b420:	f7ff fd76 	bl	800af10 <__hexdig_fun>
 800b424:	2800      	cmp	r0, #0
 800b426:	d14f      	bne.n	800b4c8 <__hexnan+0xe4>
 800b428:	9a04      	ldr	r2, [sp, #16]
 800b42a:	9905      	ldr	r1, [sp, #20]
 800b42c:	2a20      	cmp	r2, #32
 800b42e:	d818      	bhi.n	800b462 <__hexnan+0x7e>
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	459b      	cmp	fp, r3
 800b434:	dd13      	ble.n	800b45e <__hexnan+0x7a>
 800b436:	454c      	cmp	r4, r9
 800b438:	d206      	bcs.n	800b448 <__hexnan+0x64>
 800b43a:	2d07      	cmp	r5, #7
 800b43c:	dc04      	bgt.n	800b448 <__hexnan+0x64>
 800b43e:	462a      	mov	r2, r5
 800b440:	4649      	mov	r1, r9
 800b442:	4620      	mov	r0, r4
 800b444:	f7ff ffa8 	bl	800b398 <L_shift>
 800b448:	4544      	cmp	r4, r8
 800b44a:	d950      	bls.n	800b4ee <__hexnan+0x10a>
 800b44c:	2300      	movs	r3, #0
 800b44e:	f1a4 0904 	sub.w	r9, r4, #4
 800b452:	f844 3c04 	str.w	r3, [r4, #-4]
 800b456:	f8cd b008 	str.w	fp, [sp, #8]
 800b45a:	464c      	mov	r4, r9
 800b45c:	461d      	mov	r5, r3
 800b45e:	9903      	ldr	r1, [sp, #12]
 800b460:	e7d7      	b.n	800b412 <__hexnan+0x2e>
 800b462:	2a29      	cmp	r2, #41	; 0x29
 800b464:	d155      	bne.n	800b512 <__hexnan+0x12e>
 800b466:	3102      	adds	r1, #2
 800b468:	f8ca 1000 	str.w	r1, [sl]
 800b46c:	f1bb 0f00 	cmp.w	fp, #0
 800b470:	d04f      	beq.n	800b512 <__hexnan+0x12e>
 800b472:	454c      	cmp	r4, r9
 800b474:	d206      	bcs.n	800b484 <__hexnan+0xa0>
 800b476:	2d07      	cmp	r5, #7
 800b478:	dc04      	bgt.n	800b484 <__hexnan+0xa0>
 800b47a:	462a      	mov	r2, r5
 800b47c:	4649      	mov	r1, r9
 800b47e:	4620      	mov	r0, r4
 800b480:	f7ff ff8a 	bl	800b398 <L_shift>
 800b484:	4544      	cmp	r4, r8
 800b486:	d934      	bls.n	800b4f2 <__hexnan+0x10e>
 800b488:	f1a8 0204 	sub.w	r2, r8, #4
 800b48c:	4623      	mov	r3, r4
 800b48e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b492:	f842 1f04 	str.w	r1, [r2, #4]!
 800b496:	429f      	cmp	r7, r3
 800b498:	d2f9      	bcs.n	800b48e <__hexnan+0xaa>
 800b49a:	1b3b      	subs	r3, r7, r4
 800b49c:	f023 0303 	bic.w	r3, r3, #3
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	3e03      	subs	r6, #3
 800b4a4:	3401      	adds	r4, #1
 800b4a6:	42a6      	cmp	r6, r4
 800b4a8:	bf38      	it	cc
 800b4aa:	2304      	movcc	r3, #4
 800b4ac:	4443      	add	r3, r8
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f843 2b04 	str.w	r2, [r3], #4
 800b4b4:	429f      	cmp	r7, r3
 800b4b6:	d2fb      	bcs.n	800b4b0 <__hexnan+0xcc>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	b91b      	cbnz	r3, 800b4c4 <__hexnan+0xe0>
 800b4bc:	4547      	cmp	r7, r8
 800b4be:	d126      	bne.n	800b50e <__hexnan+0x12a>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	2005      	movs	r0, #5
 800b4c6:	e025      	b.n	800b514 <__hexnan+0x130>
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	2d08      	cmp	r5, #8
 800b4cc:	f10b 0b01 	add.w	fp, fp, #1
 800b4d0:	dd06      	ble.n	800b4e0 <__hexnan+0xfc>
 800b4d2:	4544      	cmp	r4, r8
 800b4d4:	d9c3      	bls.n	800b45e <__hexnan+0x7a>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4dc:	2501      	movs	r5, #1
 800b4de:	3c04      	subs	r4, #4
 800b4e0:	6822      	ldr	r2, [r4, #0]
 800b4e2:	f000 000f 	and.w	r0, r0, #15
 800b4e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4ea:	6020      	str	r0, [r4, #0]
 800b4ec:	e7b7      	b.n	800b45e <__hexnan+0x7a>
 800b4ee:	2508      	movs	r5, #8
 800b4f0:	e7b5      	b.n	800b45e <__hexnan+0x7a>
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0df      	beq.n	800b4b8 <__hexnan+0xd4>
 800b4f8:	f1c3 0320 	rsb	r3, r3, #32
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	40da      	lsrs	r2, r3
 800b502:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b506:	4013      	ands	r3, r2
 800b508:	f846 3c04 	str.w	r3, [r6, #-4]
 800b50c:	e7d4      	b.n	800b4b8 <__hexnan+0xd4>
 800b50e:	3f04      	subs	r7, #4
 800b510:	e7d2      	b.n	800b4b8 <__hexnan+0xd4>
 800b512:	2004      	movs	r0, #4
 800b514:	b007      	add	sp, #28
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b51c <malloc>:
 800b51c:	4b02      	ldr	r3, [pc, #8]	; (800b528 <malloc+0xc>)
 800b51e:	4601      	mov	r1, r0
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	f000 b823 	b.w	800b56c <_malloc_r>
 800b526:	bf00      	nop
 800b528:	200002c0 	.word	0x200002c0

0800b52c <sbrk_aligned>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4e0e      	ldr	r6, [pc, #56]	; (800b568 <sbrk_aligned+0x3c>)
 800b530:	460c      	mov	r4, r1
 800b532:	6831      	ldr	r1, [r6, #0]
 800b534:	4605      	mov	r5, r0
 800b536:	b911      	cbnz	r1, 800b53e <sbrk_aligned+0x12>
 800b538:	f001 f932 	bl	800c7a0 <_sbrk_r>
 800b53c:	6030      	str	r0, [r6, #0]
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f001 f92d 	bl	800c7a0 <_sbrk_r>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d00a      	beq.n	800b560 <sbrk_aligned+0x34>
 800b54a:	1cc4      	adds	r4, r0, #3
 800b54c:	f024 0403 	bic.w	r4, r4, #3
 800b550:	42a0      	cmp	r0, r4
 800b552:	d007      	beq.n	800b564 <sbrk_aligned+0x38>
 800b554:	1a21      	subs	r1, r4, r0
 800b556:	4628      	mov	r0, r5
 800b558:	f001 f922 	bl	800c7a0 <_sbrk_r>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d101      	bne.n	800b564 <sbrk_aligned+0x38>
 800b560:	f04f 34ff 	mov.w	r4, #4294967295
 800b564:	4620      	mov	r0, r4
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	20002154 	.word	0x20002154

0800b56c <_malloc_r>:
 800b56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b570:	1ccd      	adds	r5, r1, #3
 800b572:	f025 0503 	bic.w	r5, r5, #3
 800b576:	3508      	adds	r5, #8
 800b578:	2d0c      	cmp	r5, #12
 800b57a:	bf38      	it	cc
 800b57c:	250c      	movcc	r5, #12
 800b57e:	2d00      	cmp	r5, #0
 800b580:	4607      	mov	r7, r0
 800b582:	db01      	blt.n	800b588 <_malloc_r+0x1c>
 800b584:	42a9      	cmp	r1, r5
 800b586:	d905      	bls.n	800b594 <_malloc_r+0x28>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	2600      	movs	r6, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b668 <_malloc_r+0xfc>
 800b598:	f000 f87a 	bl	800b690 <__malloc_lock>
 800b59c:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a0:	461c      	mov	r4, r3
 800b5a2:	bb5c      	cbnz	r4, 800b5fc <_malloc_r+0x90>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	f7ff ffc0 	bl	800b52c <sbrk_aligned>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	d155      	bne.n	800b65e <_malloc_r+0xf2>
 800b5b2:	f8d8 4000 	ldr.w	r4, [r8]
 800b5b6:	4626      	mov	r6, r4
 800b5b8:	2e00      	cmp	r6, #0
 800b5ba:	d145      	bne.n	800b648 <_malloc_r+0xdc>
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	d048      	beq.n	800b652 <_malloc_r+0xe6>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	eb04 0903 	add.w	r9, r4, r3
 800b5ca:	f001 f8e9 	bl	800c7a0 <_sbrk_r>
 800b5ce:	4581      	cmp	r9, r0
 800b5d0:	d13f      	bne.n	800b652 <_malloc_r+0xe6>
 800b5d2:	6821      	ldr	r1, [r4, #0]
 800b5d4:	1a6d      	subs	r5, r5, r1
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff ffa7 	bl	800b52c <sbrk_aligned>
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d037      	beq.n	800b652 <_malloc_r+0xe6>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	442b      	add	r3, r5
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d038      	beq.n	800b662 <_malloc_r+0xf6>
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	42a2      	cmp	r2, r4
 800b5f4:	d12b      	bne.n	800b64e <_malloc_r+0xe2>
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	605a      	str	r2, [r3, #4]
 800b5fa:	e00f      	b.n	800b61c <_malloc_r+0xb0>
 800b5fc:	6822      	ldr	r2, [r4, #0]
 800b5fe:	1b52      	subs	r2, r2, r5
 800b600:	d41f      	bmi.n	800b642 <_malloc_r+0xd6>
 800b602:	2a0b      	cmp	r2, #11
 800b604:	d917      	bls.n	800b636 <_malloc_r+0xca>
 800b606:	1961      	adds	r1, r4, r5
 800b608:	42a3      	cmp	r3, r4
 800b60a:	6025      	str	r5, [r4, #0]
 800b60c:	bf18      	it	ne
 800b60e:	6059      	strne	r1, [r3, #4]
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	bf08      	it	eq
 800b614:	f8c8 1000 	streq.w	r1, [r8]
 800b618:	5162      	str	r2, [r4, r5]
 800b61a:	604b      	str	r3, [r1, #4]
 800b61c:	4638      	mov	r0, r7
 800b61e:	f104 060b 	add.w	r6, r4, #11
 800b622:	f000 f83b 	bl	800b69c <__malloc_unlock>
 800b626:	f026 0607 	bic.w	r6, r6, #7
 800b62a:	1d23      	adds	r3, r4, #4
 800b62c:	1af2      	subs	r2, r6, r3
 800b62e:	d0ae      	beq.n	800b58e <_malloc_r+0x22>
 800b630:	1b9b      	subs	r3, r3, r6
 800b632:	50a3      	str	r3, [r4, r2]
 800b634:	e7ab      	b.n	800b58e <_malloc_r+0x22>
 800b636:	42a3      	cmp	r3, r4
 800b638:	6862      	ldr	r2, [r4, #4]
 800b63a:	d1dd      	bne.n	800b5f8 <_malloc_r+0x8c>
 800b63c:	f8c8 2000 	str.w	r2, [r8]
 800b640:	e7ec      	b.n	800b61c <_malloc_r+0xb0>
 800b642:	4623      	mov	r3, r4
 800b644:	6864      	ldr	r4, [r4, #4]
 800b646:	e7ac      	b.n	800b5a2 <_malloc_r+0x36>
 800b648:	4634      	mov	r4, r6
 800b64a:	6876      	ldr	r6, [r6, #4]
 800b64c:	e7b4      	b.n	800b5b8 <_malloc_r+0x4c>
 800b64e:	4613      	mov	r3, r2
 800b650:	e7cc      	b.n	800b5ec <_malloc_r+0x80>
 800b652:	230c      	movs	r3, #12
 800b654:	603b      	str	r3, [r7, #0]
 800b656:	4638      	mov	r0, r7
 800b658:	f000 f820 	bl	800b69c <__malloc_unlock>
 800b65c:	e797      	b.n	800b58e <_malloc_r+0x22>
 800b65e:	6025      	str	r5, [r4, #0]
 800b660:	e7dc      	b.n	800b61c <_malloc_r+0xb0>
 800b662:	605b      	str	r3, [r3, #4]
 800b664:	deff      	udf	#255	; 0xff
 800b666:	bf00      	nop
 800b668:	20002150 	.word	0x20002150

0800b66c <__ascii_mbtowc>:
 800b66c:	b082      	sub	sp, #8
 800b66e:	b901      	cbnz	r1, 800b672 <__ascii_mbtowc+0x6>
 800b670:	a901      	add	r1, sp, #4
 800b672:	b142      	cbz	r2, 800b686 <__ascii_mbtowc+0x1a>
 800b674:	b14b      	cbz	r3, 800b68a <__ascii_mbtowc+0x1e>
 800b676:	7813      	ldrb	r3, [r2, #0]
 800b678:	600b      	str	r3, [r1, #0]
 800b67a:	7812      	ldrb	r2, [r2, #0]
 800b67c:	1e10      	subs	r0, r2, #0
 800b67e:	bf18      	it	ne
 800b680:	2001      	movne	r0, #1
 800b682:	b002      	add	sp, #8
 800b684:	4770      	bx	lr
 800b686:	4610      	mov	r0, r2
 800b688:	e7fb      	b.n	800b682 <__ascii_mbtowc+0x16>
 800b68a:	f06f 0001 	mvn.w	r0, #1
 800b68e:	e7f8      	b.n	800b682 <__ascii_mbtowc+0x16>

0800b690 <__malloc_lock>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__malloc_lock+0x8>)
 800b692:	f7ff bb69 	b.w	800ad68 <__retarget_lock_acquire_recursive>
 800b696:	bf00      	nop
 800b698:	2000214c 	.word	0x2000214c

0800b69c <__malloc_unlock>:
 800b69c:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <__malloc_unlock+0x8>)
 800b69e:	f7ff bb64 	b.w	800ad6a <__retarget_lock_release_recursive>
 800b6a2:	bf00      	nop
 800b6a4:	2000214c 	.word	0x2000214c

0800b6a8 <_Balloc>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	69c6      	ldr	r6, [r0, #28]
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	b976      	cbnz	r6, 800b6d0 <_Balloc+0x28>
 800b6b2:	2010      	movs	r0, #16
 800b6b4:	f7ff ff32 	bl	800b51c <malloc>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	61e0      	str	r0, [r4, #28]
 800b6bc:	b920      	cbnz	r0, 800b6c8 <_Balloc+0x20>
 800b6be:	4b18      	ldr	r3, [pc, #96]	; (800b720 <_Balloc+0x78>)
 800b6c0:	4818      	ldr	r0, [pc, #96]	; (800b724 <_Balloc+0x7c>)
 800b6c2:	216b      	movs	r1, #107	; 0x6b
 800b6c4:	f7ff fb68 	bl	800ad98 <__assert_func>
 800b6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6cc:	6006      	str	r6, [r0, #0]
 800b6ce:	60c6      	str	r6, [r0, #12]
 800b6d0:	69e6      	ldr	r6, [r4, #28]
 800b6d2:	68f3      	ldr	r3, [r6, #12]
 800b6d4:	b183      	cbz	r3, 800b6f8 <_Balloc+0x50>
 800b6d6:	69e3      	ldr	r3, [r4, #28]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6de:	b9b8      	cbnz	r0, 800b710 <_Balloc+0x68>
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b6e6:	1d72      	adds	r2, r6, #5
 800b6e8:	0092      	lsls	r2, r2, #2
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f001 f86f 	bl	800c7ce <_calloc_r>
 800b6f0:	b160      	cbz	r0, 800b70c <_Balloc+0x64>
 800b6f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6f6:	e00e      	b.n	800b716 <_Balloc+0x6e>
 800b6f8:	2221      	movs	r2, #33	; 0x21
 800b6fa:	2104      	movs	r1, #4
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f001 f866 	bl	800c7ce <_calloc_r>
 800b702:	69e3      	ldr	r3, [r4, #28]
 800b704:	60f0      	str	r0, [r6, #12]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1e4      	bne.n	800b6d6 <_Balloc+0x2e>
 800b70c:	2000      	movs	r0, #0
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	6802      	ldr	r2, [r0, #0]
 800b712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b716:	2300      	movs	r3, #0
 800b718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b71c:	e7f7      	b.n	800b70e <_Balloc+0x66>
 800b71e:	bf00      	nop
 800b720:	0800dae0 	.word	0x0800dae0
 800b724:	0800dc06 	.word	0x0800dc06

0800b728 <_Bfree>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	69c6      	ldr	r6, [r0, #28]
 800b72c:	4605      	mov	r5, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	b976      	cbnz	r6, 800b750 <_Bfree+0x28>
 800b732:	2010      	movs	r0, #16
 800b734:	f7ff fef2 	bl	800b51c <malloc>
 800b738:	4602      	mov	r2, r0
 800b73a:	61e8      	str	r0, [r5, #28]
 800b73c:	b920      	cbnz	r0, 800b748 <_Bfree+0x20>
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <_Bfree+0x3c>)
 800b740:	4809      	ldr	r0, [pc, #36]	; (800b768 <_Bfree+0x40>)
 800b742:	218f      	movs	r1, #143	; 0x8f
 800b744:	f7ff fb28 	bl	800ad98 <__assert_func>
 800b748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b74c:	6006      	str	r6, [r0, #0]
 800b74e:	60c6      	str	r6, [r0, #12]
 800b750:	b13c      	cbz	r4, 800b762 <_Bfree+0x3a>
 800b752:	69eb      	ldr	r3, [r5, #28]
 800b754:	6862      	ldr	r2, [r4, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b75c:	6021      	str	r1, [r4, #0]
 800b75e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b762:	bd70      	pop	{r4, r5, r6, pc}
 800b764:	0800dae0 	.word	0x0800dae0
 800b768:	0800dc06 	.word	0x0800dc06

0800b76c <__multadd>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	690d      	ldr	r5, [r1, #16]
 800b772:	4607      	mov	r7, r0
 800b774:	460c      	mov	r4, r1
 800b776:	461e      	mov	r6, r3
 800b778:	f101 0c14 	add.w	ip, r1, #20
 800b77c:	2000      	movs	r0, #0
 800b77e:	f8dc 3000 	ldr.w	r3, [ip]
 800b782:	b299      	uxth	r1, r3
 800b784:	fb02 6101 	mla	r1, r2, r1, r6
 800b788:	0c1e      	lsrs	r6, r3, #16
 800b78a:	0c0b      	lsrs	r3, r1, #16
 800b78c:	fb02 3306 	mla	r3, r2, r6, r3
 800b790:	b289      	uxth	r1, r1
 800b792:	3001      	adds	r0, #1
 800b794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b798:	4285      	cmp	r5, r0
 800b79a:	f84c 1b04 	str.w	r1, [ip], #4
 800b79e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7a2:	dcec      	bgt.n	800b77e <__multadd+0x12>
 800b7a4:	b30e      	cbz	r6, 800b7ea <__multadd+0x7e>
 800b7a6:	68a3      	ldr	r3, [r4, #8]
 800b7a8:	42ab      	cmp	r3, r5
 800b7aa:	dc19      	bgt.n	800b7e0 <__multadd+0x74>
 800b7ac:	6861      	ldr	r1, [r4, #4]
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	3101      	adds	r1, #1
 800b7b2:	f7ff ff79 	bl	800b6a8 <_Balloc>
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	b928      	cbnz	r0, 800b7c6 <__multadd+0x5a>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <__multadd+0x84>)
 800b7be:	480d      	ldr	r0, [pc, #52]	; (800b7f4 <__multadd+0x88>)
 800b7c0:	21ba      	movs	r1, #186	; 0xba
 800b7c2:	f7ff fae9 	bl	800ad98 <__assert_func>
 800b7c6:	6922      	ldr	r2, [r4, #16]
 800b7c8:	3202      	adds	r2, #2
 800b7ca:	f104 010c 	add.w	r1, r4, #12
 800b7ce:	0092      	lsls	r2, r2, #2
 800b7d0:	300c      	adds	r0, #12
 800b7d2:	f7ff facb 	bl	800ad6c <memcpy>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7ff ffa5 	bl	800b728 <_Bfree>
 800b7de:	4644      	mov	r4, r8
 800b7e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	615e      	str	r6, [r3, #20]
 800b7e8:	6125      	str	r5, [r4, #16]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	0800db95 	.word	0x0800db95
 800b7f4:	0800dc06 	.word	0x0800dc06

0800b7f8 <__s2b>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	4615      	mov	r5, r2
 800b800:	461f      	mov	r7, r3
 800b802:	2209      	movs	r2, #9
 800b804:	3308      	adds	r3, #8
 800b806:	4606      	mov	r6, r0
 800b808:	fb93 f3f2 	sdiv	r3, r3, r2
 800b80c:	2100      	movs	r1, #0
 800b80e:	2201      	movs	r2, #1
 800b810:	429a      	cmp	r2, r3
 800b812:	db09      	blt.n	800b828 <__s2b+0x30>
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff ff47 	bl	800b6a8 <_Balloc>
 800b81a:	b940      	cbnz	r0, 800b82e <__s2b+0x36>
 800b81c:	4602      	mov	r2, r0
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <__s2b+0x8c>)
 800b820:	4819      	ldr	r0, [pc, #100]	; (800b888 <__s2b+0x90>)
 800b822:	21d3      	movs	r1, #211	; 0xd3
 800b824:	f7ff fab8 	bl	800ad98 <__assert_func>
 800b828:	0052      	lsls	r2, r2, #1
 800b82a:	3101      	adds	r1, #1
 800b82c:	e7f0      	b.n	800b810 <__s2b+0x18>
 800b82e:	9b08      	ldr	r3, [sp, #32]
 800b830:	6143      	str	r3, [r0, #20]
 800b832:	2d09      	cmp	r5, #9
 800b834:	f04f 0301 	mov.w	r3, #1
 800b838:	6103      	str	r3, [r0, #16]
 800b83a:	dd16      	ble.n	800b86a <__s2b+0x72>
 800b83c:	f104 0909 	add.w	r9, r4, #9
 800b840:	46c8      	mov	r8, r9
 800b842:	442c      	add	r4, r5
 800b844:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b848:	4601      	mov	r1, r0
 800b84a:	3b30      	subs	r3, #48	; 0x30
 800b84c:	220a      	movs	r2, #10
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff ff8c 	bl	800b76c <__multadd>
 800b854:	45a0      	cmp	r8, r4
 800b856:	d1f5      	bne.n	800b844 <__s2b+0x4c>
 800b858:	f1a5 0408 	sub.w	r4, r5, #8
 800b85c:	444c      	add	r4, r9
 800b85e:	1b2d      	subs	r5, r5, r4
 800b860:	1963      	adds	r3, r4, r5
 800b862:	42bb      	cmp	r3, r7
 800b864:	db04      	blt.n	800b870 <__s2b+0x78>
 800b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86a:	340a      	adds	r4, #10
 800b86c:	2509      	movs	r5, #9
 800b86e:	e7f6      	b.n	800b85e <__s2b+0x66>
 800b870:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b874:	4601      	mov	r1, r0
 800b876:	3b30      	subs	r3, #48	; 0x30
 800b878:	220a      	movs	r2, #10
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7ff ff76 	bl	800b76c <__multadd>
 800b880:	e7ee      	b.n	800b860 <__s2b+0x68>
 800b882:	bf00      	nop
 800b884:	0800db95 	.word	0x0800db95
 800b888:	0800dc06 	.word	0x0800dc06

0800b88c <__hi0bits>:
 800b88c:	0c03      	lsrs	r3, r0, #16
 800b88e:	041b      	lsls	r3, r3, #16
 800b890:	b9d3      	cbnz	r3, 800b8c8 <__hi0bits+0x3c>
 800b892:	0400      	lsls	r0, r0, #16
 800b894:	2310      	movs	r3, #16
 800b896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b89a:	bf04      	itt	eq
 800b89c:	0200      	lsleq	r0, r0, #8
 800b89e:	3308      	addeq	r3, #8
 800b8a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8a4:	bf04      	itt	eq
 800b8a6:	0100      	lsleq	r0, r0, #4
 800b8a8:	3304      	addeq	r3, #4
 800b8aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8ae:	bf04      	itt	eq
 800b8b0:	0080      	lsleq	r0, r0, #2
 800b8b2:	3302      	addeq	r3, #2
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	db05      	blt.n	800b8c4 <__hi0bits+0x38>
 800b8b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8bc:	f103 0301 	add.w	r3, r3, #1
 800b8c0:	bf08      	it	eq
 800b8c2:	2320      	moveq	r3, #32
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	4770      	bx	lr
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e7e4      	b.n	800b896 <__hi0bits+0xa>

0800b8cc <__lo0bits>:
 800b8cc:	6803      	ldr	r3, [r0, #0]
 800b8ce:	f013 0207 	ands.w	r2, r3, #7
 800b8d2:	d00c      	beq.n	800b8ee <__lo0bits+0x22>
 800b8d4:	07d9      	lsls	r1, r3, #31
 800b8d6:	d422      	bmi.n	800b91e <__lo0bits+0x52>
 800b8d8:	079a      	lsls	r2, r3, #30
 800b8da:	bf49      	itett	mi
 800b8dc:	085b      	lsrmi	r3, r3, #1
 800b8de:	089b      	lsrpl	r3, r3, #2
 800b8e0:	6003      	strmi	r3, [r0, #0]
 800b8e2:	2201      	movmi	r2, #1
 800b8e4:	bf5c      	itt	pl
 800b8e6:	6003      	strpl	r3, [r0, #0]
 800b8e8:	2202      	movpl	r2, #2
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4770      	bx	lr
 800b8ee:	b299      	uxth	r1, r3
 800b8f0:	b909      	cbnz	r1, 800b8f6 <__lo0bits+0x2a>
 800b8f2:	0c1b      	lsrs	r3, r3, #16
 800b8f4:	2210      	movs	r2, #16
 800b8f6:	b2d9      	uxtb	r1, r3
 800b8f8:	b909      	cbnz	r1, 800b8fe <__lo0bits+0x32>
 800b8fa:	3208      	adds	r2, #8
 800b8fc:	0a1b      	lsrs	r3, r3, #8
 800b8fe:	0719      	lsls	r1, r3, #28
 800b900:	bf04      	itt	eq
 800b902:	091b      	lsreq	r3, r3, #4
 800b904:	3204      	addeq	r2, #4
 800b906:	0799      	lsls	r1, r3, #30
 800b908:	bf04      	itt	eq
 800b90a:	089b      	lsreq	r3, r3, #2
 800b90c:	3202      	addeq	r2, #2
 800b90e:	07d9      	lsls	r1, r3, #31
 800b910:	d403      	bmi.n	800b91a <__lo0bits+0x4e>
 800b912:	085b      	lsrs	r3, r3, #1
 800b914:	f102 0201 	add.w	r2, r2, #1
 800b918:	d003      	beq.n	800b922 <__lo0bits+0x56>
 800b91a:	6003      	str	r3, [r0, #0]
 800b91c:	e7e5      	b.n	800b8ea <__lo0bits+0x1e>
 800b91e:	2200      	movs	r2, #0
 800b920:	e7e3      	b.n	800b8ea <__lo0bits+0x1e>
 800b922:	2220      	movs	r2, #32
 800b924:	e7e1      	b.n	800b8ea <__lo0bits+0x1e>
	...

0800b928 <__i2b>:
 800b928:	b510      	push	{r4, lr}
 800b92a:	460c      	mov	r4, r1
 800b92c:	2101      	movs	r1, #1
 800b92e:	f7ff febb 	bl	800b6a8 <_Balloc>
 800b932:	4602      	mov	r2, r0
 800b934:	b928      	cbnz	r0, 800b942 <__i2b+0x1a>
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <__i2b+0x24>)
 800b938:	4805      	ldr	r0, [pc, #20]	; (800b950 <__i2b+0x28>)
 800b93a:	f240 1145 	movw	r1, #325	; 0x145
 800b93e:	f7ff fa2b 	bl	800ad98 <__assert_func>
 800b942:	2301      	movs	r3, #1
 800b944:	6144      	str	r4, [r0, #20]
 800b946:	6103      	str	r3, [r0, #16]
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	bf00      	nop
 800b94c:	0800db95 	.word	0x0800db95
 800b950:	0800dc06 	.word	0x0800dc06

0800b954 <__multiply>:
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	4691      	mov	r9, r2
 800b95a:	690a      	ldr	r2, [r1, #16]
 800b95c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b960:	429a      	cmp	r2, r3
 800b962:	bfb8      	it	lt
 800b964:	460b      	movlt	r3, r1
 800b966:	460c      	mov	r4, r1
 800b968:	bfbc      	itt	lt
 800b96a:	464c      	movlt	r4, r9
 800b96c:	4699      	movlt	r9, r3
 800b96e:	6927      	ldr	r7, [r4, #16]
 800b970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b974:	68a3      	ldr	r3, [r4, #8]
 800b976:	6861      	ldr	r1, [r4, #4]
 800b978:	eb07 060a 	add.w	r6, r7, sl
 800b97c:	42b3      	cmp	r3, r6
 800b97e:	b085      	sub	sp, #20
 800b980:	bfb8      	it	lt
 800b982:	3101      	addlt	r1, #1
 800b984:	f7ff fe90 	bl	800b6a8 <_Balloc>
 800b988:	b930      	cbnz	r0, 800b998 <__multiply+0x44>
 800b98a:	4602      	mov	r2, r0
 800b98c:	4b44      	ldr	r3, [pc, #272]	; (800baa0 <__multiply+0x14c>)
 800b98e:	4845      	ldr	r0, [pc, #276]	; (800baa4 <__multiply+0x150>)
 800b990:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b994:	f7ff fa00 	bl	800ad98 <__assert_func>
 800b998:	f100 0514 	add.w	r5, r0, #20
 800b99c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9a0:	462b      	mov	r3, r5
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	4543      	cmp	r3, r8
 800b9a6:	d321      	bcc.n	800b9ec <__multiply+0x98>
 800b9a8:	f104 0314 	add.w	r3, r4, #20
 800b9ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9b0:	f109 0314 	add.w	r3, r9, #20
 800b9b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9b8:	9202      	str	r2, [sp, #8]
 800b9ba:	1b3a      	subs	r2, r7, r4
 800b9bc:	3a15      	subs	r2, #21
 800b9be:	f022 0203 	bic.w	r2, r2, #3
 800b9c2:	3204      	adds	r2, #4
 800b9c4:	f104 0115 	add.w	r1, r4, #21
 800b9c8:	428f      	cmp	r7, r1
 800b9ca:	bf38      	it	cc
 800b9cc:	2204      	movcc	r2, #4
 800b9ce:	9201      	str	r2, [sp, #4]
 800b9d0:	9a02      	ldr	r2, [sp, #8]
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d80c      	bhi.n	800b9f2 <__multiply+0x9e>
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	dd03      	ble.n	800b9e4 <__multiply+0x90>
 800b9dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d05b      	beq.n	800ba9c <__multiply+0x148>
 800b9e4:	6106      	str	r6, [r0, #16]
 800b9e6:	b005      	add	sp, #20
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ec:	f843 2b04 	str.w	r2, [r3], #4
 800b9f0:	e7d8      	b.n	800b9a4 <__multiply+0x50>
 800b9f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9f6:	f1ba 0f00 	cmp.w	sl, #0
 800b9fa:	d024      	beq.n	800ba46 <__multiply+0xf2>
 800b9fc:	f104 0e14 	add.w	lr, r4, #20
 800ba00:	46a9      	mov	r9, r5
 800ba02:	f04f 0c00 	mov.w	ip, #0
 800ba06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba0a:	f8d9 1000 	ldr.w	r1, [r9]
 800ba0e:	fa1f fb82 	uxth.w	fp, r2
 800ba12:	b289      	uxth	r1, r1
 800ba14:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba1c:	f8d9 2000 	ldr.w	r2, [r9]
 800ba20:	4461      	add	r1, ip
 800ba22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba26:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba2e:	b289      	uxth	r1, r1
 800ba30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba34:	4577      	cmp	r7, lr
 800ba36:	f849 1b04 	str.w	r1, [r9], #4
 800ba3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba3e:	d8e2      	bhi.n	800ba06 <__multiply+0xb2>
 800ba40:	9a01      	ldr	r2, [sp, #4]
 800ba42:	f845 c002 	str.w	ip, [r5, r2]
 800ba46:	9a03      	ldr	r2, [sp, #12]
 800ba48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	f1b9 0f00 	cmp.w	r9, #0
 800ba52:	d021      	beq.n	800ba98 <__multiply+0x144>
 800ba54:	6829      	ldr	r1, [r5, #0]
 800ba56:	f104 0c14 	add.w	ip, r4, #20
 800ba5a:	46ae      	mov	lr, r5
 800ba5c:	f04f 0a00 	mov.w	sl, #0
 800ba60:	f8bc b000 	ldrh.w	fp, [ip]
 800ba64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba68:	fb09 220b 	mla	r2, r9, fp, r2
 800ba6c:	4452      	add	r2, sl
 800ba6e:	b289      	uxth	r1, r1
 800ba70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba74:	f84e 1b04 	str.w	r1, [lr], #4
 800ba78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba80:	f8be 1000 	ldrh.w	r1, [lr]
 800ba84:	fb09 110a 	mla	r1, r9, sl, r1
 800ba88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ba8c:	4567      	cmp	r7, ip
 800ba8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba92:	d8e5      	bhi.n	800ba60 <__multiply+0x10c>
 800ba94:	9a01      	ldr	r2, [sp, #4]
 800ba96:	50a9      	str	r1, [r5, r2]
 800ba98:	3504      	adds	r5, #4
 800ba9a:	e799      	b.n	800b9d0 <__multiply+0x7c>
 800ba9c:	3e01      	subs	r6, #1
 800ba9e:	e79b      	b.n	800b9d8 <__multiply+0x84>
 800baa0:	0800db95 	.word	0x0800db95
 800baa4:	0800dc06 	.word	0x0800dc06

0800baa8 <__pow5mult>:
 800baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baac:	4615      	mov	r5, r2
 800baae:	f012 0203 	ands.w	r2, r2, #3
 800bab2:	4606      	mov	r6, r0
 800bab4:	460f      	mov	r7, r1
 800bab6:	d007      	beq.n	800bac8 <__pow5mult+0x20>
 800bab8:	4c25      	ldr	r4, [pc, #148]	; (800bb50 <__pow5mult+0xa8>)
 800baba:	3a01      	subs	r2, #1
 800babc:	2300      	movs	r3, #0
 800babe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bac2:	f7ff fe53 	bl	800b76c <__multadd>
 800bac6:	4607      	mov	r7, r0
 800bac8:	10ad      	asrs	r5, r5, #2
 800baca:	d03d      	beq.n	800bb48 <__pow5mult+0xa0>
 800bacc:	69f4      	ldr	r4, [r6, #28]
 800bace:	b97c      	cbnz	r4, 800baf0 <__pow5mult+0x48>
 800bad0:	2010      	movs	r0, #16
 800bad2:	f7ff fd23 	bl	800b51c <malloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	61f0      	str	r0, [r6, #28]
 800bada:	b928      	cbnz	r0, 800bae8 <__pow5mult+0x40>
 800badc:	4b1d      	ldr	r3, [pc, #116]	; (800bb54 <__pow5mult+0xac>)
 800bade:	481e      	ldr	r0, [pc, #120]	; (800bb58 <__pow5mult+0xb0>)
 800bae0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bae4:	f7ff f958 	bl	800ad98 <__assert_func>
 800bae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800baec:	6004      	str	r4, [r0, #0]
 800baee:	60c4      	str	r4, [r0, #12]
 800baf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800baf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baf8:	b94c      	cbnz	r4, 800bb0e <__pow5mult+0x66>
 800bafa:	f240 2171 	movw	r1, #625	; 0x271
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7ff ff12 	bl	800b928 <__i2b>
 800bb04:	2300      	movs	r3, #0
 800bb06:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	f04f 0900 	mov.w	r9, #0
 800bb12:	07eb      	lsls	r3, r5, #31
 800bb14:	d50a      	bpl.n	800bb2c <__pow5mult+0x84>
 800bb16:	4639      	mov	r1, r7
 800bb18:	4622      	mov	r2, r4
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7ff ff1a 	bl	800b954 <__multiply>
 800bb20:	4639      	mov	r1, r7
 800bb22:	4680      	mov	r8, r0
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7ff fdff 	bl	800b728 <_Bfree>
 800bb2a:	4647      	mov	r7, r8
 800bb2c:	106d      	asrs	r5, r5, #1
 800bb2e:	d00b      	beq.n	800bb48 <__pow5mult+0xa0>
 800bb30:	6820      	ldr	r0, [r4, #0]
 800bb32:	b938      	cbnz	r0, 800bb44 <__pow5mult+0x9c>
 800bb34:	4622      	mov	r2, r4
 800bb36:	4621      	mov	r1, r4
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff ff0b 	bl	800b954 <__multiply>
 800bb3e:	6020      	str	r0, [r4, #0]
 800bb40:	f8c0 9000 	str.w	r9, [r0]
 800bb44:	4604      	mov	r4, r0
 800bb46:	e7e4      	b.n	800bb12 <__pow5mult+0x6a>
 800bb48:	4638      	mov	r0, r7
 800bb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	bf00      	nop
 800bb50:	0800dd50 	.word	0x0800dd50
 800bb54:	0800dae0 	.word	0x0800dae0
 800bb58:	0800dc06 	.word	0x0800dc06

0800bb5c <__lshift>:
 800bb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	6849      	ldr	r1, [r1, #4]
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb6a:	68a3      	ldr	r3, [r4, #8]
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	4691      	mov	r9, r2
 800bb70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb74:	f108 0601 	add.w	r6, r8, #1
 800bb78:	42b3      	cmp	r3, r6
 800bb7a:	db0b      	blt.n	800bb94 <__lshift+0x38>
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7ff fd93 	bl	800b6a8 <_Balloc>
 800bb82:	4605      	mov	r5, r0
 800bb84:	b948      	cbnz	r0, 800bb9a <__lshift+0x3e>
 800bb86:	4602      	mov	r2, r0
 800bb88:	4b28      	ldr	r3, [pc, #160]	; (800bc2c <__lshift+0xd0>)
 800bb8a:	4829      	ldr	r0, [pc, #164]	; (800bc30 <__lshift+0xd4>)
 800bb8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bb90:	f7ff f902 	bl	800ad98 <__assert_func>
 800bb94:	3101      	adds	r1, #1
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	e7ee      	b.n	800bb78 <__lshift+0x1c>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f100 0114 	add.w	r1, r0, #20
 800bba0:	f100 0210 	add.w	r2, r0, #16
 800bba4:	4618      	mov	r0, r3
 800bba6:	4553      	cmp	r3, sl
 800bba8:	db33      	blt.n	800bc12 <__lshift+0xb6>
 800bbaa:	6920      	ldr	r0, [r4, #16]
 800bbac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbb0:	f104 0314 	add.w	r3, r4, #20
 800bbb4:	f019 091f 	ands.w	r9, r9, #31
 800bbb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbc0:	d02b      	beq.n	800bc1a <__lshift+0xbe>
 800bbc2:	f1c9 0e20 	rsb	lr, r9, #32
 800bbc6:	468a      	mov	sl, r1
 800bbc8:	2200      	movs	r2, #0
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	fa00 f009 	lsl.w	r0, r0, r9
 800bbd0:	4310      	orrs	r0, r2
 800bbd2:	f84a 0b04 	str.w	r0, [sl], #4
 800bbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbda:	459c      	cmp	ip, r3
 800bbdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbe0:	d8f3      	bhi.n	800bbca <__lshift+0x6e>
 800bbe2:	ebac 0304 	sub.w	r3, ip, r4
 800bbe6:	3b15      	subs	r3, #21
 800bbe8:	f023 0303 	bic.w	r3, r3, #3
 800bbec:	3304      	adds	r3, #4
 800bbee:	f104 0015 	add.w	r0, r4, #21
 800bbf2:	4584      	cmp	ip, r0
 800bbf4:	bf38      	it	cc
 800bbf6:	2304      	movcc	r3, #4
 800bbf8:	50ca      	str	r2, [r1, r3]
 800bbfa:	b10a      	cbz	r2, 800bc00 <__lshift+0xa4>
 800bbfc:	f108 0602 	add.w	r6, r8, #2
 800bc00:	3e01      	subs	r6, #1
 800bc02:	4638      	mov	r0, r7
 800bc04:	612e      	str	r6, [r5, #16]
 800bc06:	4621      	mov	r1, r4
 800bc08:	f7ff fd8e 	bl	800b728 <_Bfree>
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc12:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc16:	3301      	adds	r3, #1
 800bc18:	e7c5      	b.n	800bba6 <__lshift+0x4a>
 800bc1a:	3904      	subs	r1, #4
 800bc1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc20:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc24:	459c      	cmp	ip, r3
 800bc26:	d8f9      	bhi.n	800bc1c <__lshift+0xc0>
 800bc28:	e7ea      	b.n	800bc00 <__lshift+0xa4>
 800bc2a:	bf00      	nop
 800bc2c:	0800db95 	.word	0x0800db95
 800bc30:	0800dc06 	.word	0x0800dc06

0800bc34 <__mcmp>:
 800bc34:	b530      	push	{r4, r5, lr}
 800bc36:	6902      	ldr	r2, [r0, #16]
 800bc38:	690c      	ldr	r4, [r1, #16]
 800bc3a:	1b12      	subs	r2, r2, r4
 800bc3c:	d10e      	bne.n	800bc5c <__mcmp+0x28>
 800bc3e:	f100 0314 	add.w	r3, r0, #20
 800bc42:	3114      	adds	r1, #20
 800bc44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc54:	42a5      	cmp	r5, r4
 800bc56:	d003      	beq.n	800bc60 <__mcmp+0x2c>
 800bc58:	d305      	bcc.n	800bc66 <__mcmp+0x32>
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	bd30      	pop	{r4, r5, pc}
 800bc60:	4283      	cmp	r3, r0
 800bc62:	d3f3      	bcc.n	800bc4c <__mcmp+0x18>
 800bc64:	e7fa      	b.n	800bc5c <__mcmp+0x28>
 800bc66:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6a:	e7f7      	b.n	800bc5c <__mcmp+0x28>

0800bc6c <__mdiff>:
 800bc6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	460c      	mov	r4, r1
 800bc72:	4606      	mov	r6, r0
 800bc74:	4611      	mov	r1, r2
 800bc76:	4620      	mov	r0, r4
 800bc78:	4690      	mov	r8, r2
 800bc7a:	f7ff ffdb 	bl	800bc34 <__mcmp>
 800bc7e:	1e05      	subs	r5, r0, #0
 800bc80:	d110      	bne.n	800bca4 <__mdiff+0x38>
 800bc82:	4629      	mov	r1, r5
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff fd0f 	bl	800b6a8 <_Balloc>
 800bc8a:	b930      	cbnz	r0, 800bc9a <__mdiff+0x2e>
 800bc8c:	4b3a      	ldr	r3, [pc, #232]	; (800bd78 <__mdiff+0x10c>)
 800bc8e:	4602      	mov	r2, r0
 800bc90:	f240 2137 	movw	r1, #567	; 0x237
 800bc94:	4839      	ldr	r0, [pc, #228]	; (800bd7c <__mdiff+0x110>)
 800bc96:	f7ff f87f 	bl	800ad98 <__assert_func>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca4:	bfa4      	itt	ge
 800bca6:	4643      	movge	r3, r8
 800bca8:	46a0      	movge	r8, r4
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bcb0:	bfa6      	itte	ge
 800bcb2:	461c      	movge	r4, r3
 800bcb4:	2500      	movge	r5, #0
 800bcb6:	2501      	movlt	r5, #1
 800bcb8:	f7ff fcf6 	bl	800b6a8 <_Balloc>
 800bcbc:	b920      	cbnz	r0, 800bcc8 <__mdiff+0x5c>
 800bcbe:	4b2e      	ldr	r3, [pc, #184]	; (800bd78 <__mdiff+0x10c>)
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	f240 2145 	movw	r1, #581	; 0x245
 800bcc6:	e7e5      	b.n	800bc94 <__mdiff+0x28>
 800bcc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bccc:	6926      	ldr	r6, [r4, #16]
 800bcce:	60c5      	str	r5, [r0, #12]
 800bcd0:	f104 0914 	add.w	r9, r4, #20
 800bcd4:	f108 0514 	add.w	r5, r8, #20
 800bcd8:	f100 0e14 	add.w	lr, r0, #20
 800bcdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bce0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bce4:	f108 0210 	add.w	r2, r8, #16
 800bce8:	46f2      	mov	sl, lr
 800bcea:	2100      	movs	r1, #0
 800bcec:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcf4:	fa11 f88b 	uxtah	r8, r1, fp
 800bcf8:	b299      	uxth	r1, r3
 800bcfa:	0c1b      	lsrs	r3, r3, #16
 800bcfc:	eba8 0801 	sub.w	r8, r8, r1
 800bd00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd08:	fa1f f888 	uxth.w	r8, r8
 800bd0c:	1419      	asrs	r1, r3, #16
 800bd0e:	454e      	cmp	r6, r9
 800bd10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd14:	f84a 3b04 	str.w	r3, [sl], #4
 800bd18:	d8e8      	bhi.n	800bcec <__mdiff+0x80>
 800bd1a:	1b33      	subs	r3, r6, r4
 800bd1c:	3b15      	subs	r3, #21
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	3304      	adds	r3, #4
 800bd24:	3415      	adds	r4, #21
 800bd26:	42a6      	cmp	r6, r4
 800bd28:	bf38      	it	cc
 800bd2a:	2304      	movcc	r3, #4
 800bd2c:	441d      	add	r5, r3
 800bd2e:	4473      	add	r3, lr
 800bd30:	469e      	mov	lr, r3
 800bd32:	462e      	mov	r6, r5
 800bd34:	4566      	cmp	r6, ip
 800bd36:	d30e      	bcc.n	800bd56 <__mdiff+0xea>
 800bd38:	f10c 0203 	add.w	r2, ip, #3
 800bd3c:	1b52      	subs	r2, r2, r5
 800bd3e:	f022 0203 	bic.w	r2, r2, #3
 800bd42:	3d03      	subs	r5, #3
 800bd44:	45ac      	cmp	ip, r5
 800bd46:	bf38      	it	cc
 800bd48:	2200      	movcc	r2, #0
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd50:	b17a      	cbz	r2, 800bd72 <__mdiff+0x106>
 800bd52:	6107      	str	r7, [r0, #16]
 800bd54:	e7a4      	b.n	800bca0 <__mdiff+0x34>
 800bd56:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd5a:	fa11 f288 	uxtah	r2, r1, r8
 800bd5e:	1414      	asrs	r4, r2, #16
 800bd60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd64:	b292      	uxth	r2, r2
 800bd66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd6a:	f84e 2b04 	str.w	r2, [lr], #4
 800bd6e:	1421      	asrs	r1, r4, #16
 800bd70:	e7e0      	b.n	800bd34 <__mdiff+0xc8>
 800bd72:	3f01      	subs	r7, #1
 800bd74:	e7ea      	b.n	800bd4c <__mdiff+0xe0>
 800bd76:	bf00      	nop
 800bd78:	0800db95 	.word	0x0800db95
 800bd7c:	0800dc06 	.word	0x0800dc06

0800bd80 <__ulp>:
 800bd80:	b082      	sub	sp, #8
 800bd82:	ed8d 0b00 	vstr	d0, [sp]
 800bd86:	9a01      	ldr	r2, [sp, #4]
 800bd88:	4b0f      	ldr	r3, [pc, #60]	; (800bdc8 <__ulp+0x48>)
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dc08      	bgt.n	800bda6 <__ulp+0x26>
 800bd94:	425b      	negs	r3, r3
 800bd96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bd9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd9e:	da04      	bge.n	800bdaa <__ulp+0x2a>
 800bda0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bda4:	4113      	asrs	r3, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	e008      	b.n	800bdbc <__ulp+0x3c>
 800bdaa:	f1a2 0314 	sub.w	r3, r2, #20
 800bdae:	2b1e      	cmp	r3, #30
 800bdb0:	bfda      	itte	le
 800bdb2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bdb6:	40da      	lsrle	r2, r3
 800bdb8:	2201      	movgt	r2, #1
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	ec41 0b10 	vmov	d0, r0, r1
 800bdc4:	b002      	add	sp, #8
 800bdc6:	4770      	bx	lr
 800bdc8:	7ff00000 	.word	0x7ff00000

0800bdcc <__b2d>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	6906      	ldr	r6, [r0, #16]
 800bdd2:	f100 0814 	add.w	r8, r0, #20
 800bdd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bdda:	1f37      	subs	r7, r6, #4
 800bddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7ff fd53 	bl	800b88c <__hi0bits>
 800bde6:	f1c0 0320 	rsb	r3, r0, #32
 800bdea:	280a      	cmp	r0, #10
 800bdec:	600b      	str	r3, [r1, #0]
 800bdee:	491b      	ldr	r1, [pc, #108]	; (800be5c <__b2d+0x90>)
 800bdf0:	dc15      	bgt.n	800be1e <__b2d+0x52>
 800bdf2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bdf6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bdfa:	45b8      	cmp	r8, r7
 800bdfc:	ea43 0501 	orr.w	r5, r3, r1
 800be00:	bf34      	ite	cc
 800be02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be06:	2300      	movcs	r3, #0
 800be08:	3015      	adds	r0, #21
 800be0a:	fa02 f000 	lsl.w	r0, r2, r0
 800be0e:	fa23 f30c 	lsr.w	r3, r3, ip
 800be12:	4303      	orrs	r3, r0
 800be14:	461c      	mov	r4, r3
 800be16:	ec45 4b10 	vmov	d0, r4, r5
 800be1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1e:	45b8      	cmp	r8, r7
 800be20:	bf3a      	itte	cc
 800be22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be26:	f1a6 0708 	subcc.w	r7, r6, #8
 800be2a:	2300      	movcs	r3, #0
 800be2c:	380b      	subs	r0, #11
 800be2e:	d012      	beq.n	800be56 <__b2d+0x8a>
 800be30:	f1c0 0120 	rsb	r1, r0, #32
 800be34:	fa23 f401 	lsr.w	r4, r3, r1
 800be38:	4082      	lsls	r2, r0
 800be3a:	4322      	orrs	r2, r4
 800be3c:	4547      	cmp	r7, r8
 800be3e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800be42:	bf8c      	ite	hi
 800be44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800be48:	2200      	movls	r2, #0
 800be4a:	4083      	lsls	r3, r0
 800be4c:	40ca      	lsrs	r2, r1
 800be4e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800be52:	4313      	orrs	r3, r2
 800be54:	e7de      	b.n	800be14 <__b2d+0x48>
 800be56:	ea42 0501 	orr.w	r5, r2, r1
 800be5a:	e7db      	b.n	800be14 <__b2d+0x48>
 800be5c:	3ff00000 	.word	0x3ff00000

0800be60 <__d2b>:
 800be60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be64:	460f      	mov	r7, r1
 800be66:	2101      	movs	r1, #1
 800be68:	ec59 8b10 	vmov	r8, r9, d0
 800be6c:	4616      	mov	r6, r2
 800be6e:	f7ff fc1b 	bl	800b6a8 <_Balloc>
 800be72:	4604      	mov	r4, r0
 800be74:	b930      	cbnz	r0, 800be84 <__d2b+0x24>
 800be76:	4602      	mov	r2, r0
 800be78:	4b24      	ldr	r3, [pc, #144]	; (800bf0c <__d2b+0xac>)
 800be7a:	4825      	ldr	r0, [pc, #148]	; (800bf10 <__d2b+0xb0>)
 800be7c:	f240 310f 	movw	r1, #783	; 0x30f
 800be80:	f7fe ff8a 	bl	800ad98 <__assert_func>
 800be84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be8c:	bb2d      	cbnz	r5, 800beda <__d2b+0x7a>
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	f1b8 0300 	subs.w	r3, r8, #0
 800be94:	d026      	beq.n	800bee4 <__d2b+0x84>
 800be96:	4668      	mov	r0, sp
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	f7ff fd17 	bl	800b8cc <__lo0bits>
 800be9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bea2:	b1e8      	cbz	r0, 800bee0 <__d2b+0x80>
 800bea4:	f1c0 0320 	rsb	r3, r0, #32
 800bea8:	fa02 f303 	lsl.w	r3, r2, r3
 800beac:	430b      	orrs	r3, r1
 800beae:	40c2      	lsrs	r2, r0
 800beb0:	6163      	str	r3, [r4, #20]
 800beb2:	9201      	str	r2, [sp, #4]
 800beb4:	9b01      	ldr	r3, [sp, #4]
 800beb6:	61a3      	str	r3, [r4, #24]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bf14      	ite	ne
 800bebc:	2202      	movne	r2, #2
 800bebe:	2201      	moveq	r2, #1
 800bec0:	6122      	str	r2, [r4, #16]
 800bec2:	b1bd      	cbz	r5, 800bef4 <__d2b+0x94>
 800bec4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bec8:	4405      	add	r5, r0
 800beca:	603d      	str	r5, [r7, #0]
 800becc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bed0:	6030      	str	r0, [r6, #0]
 800bed2:	4620      	mov	r0, r4
 800bed4:	b003      	add	sp, #12
 800bed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bede:	e7d6      	b.n	800be8e <__d2b+0x2e>
 800bee0:	6161      	str	r1, [r4, #20]
 800bee2:	e7e7      	b.n	800beb4 <__d2b+0x54>
 800bee4:	a801      	add	r0, sp, #4
 800bee6:	f7ff fcf1 	bl	800b8cc <__lo0bits>
 800beea:	9b01      	ldr	r3, [sp, #4]
 800beec:	6163      	str	r3, [r4, #20]
 800beee:	3020      	adds	r0, #32
 800bef0:	2201      	movs	r2, #1
 800bef2:	e7e5      	b.n	800bec0 <__d2b+0x60>
 800bef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800befc:	6038      	str	r0, [r7, #0]
 800befe:	6918      	ldr	r0, [r3, #16]
 800bf00:	f7ff fcc4 	bl	800b88c <__hi0bits>
 800bf04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf08:	e7e2      	b.n	800bed0 <__d2b+0x70>
 800bf0a:	bf00      	nop
 800bf0c:	0800db95 	.word	0x0800db95
 800bf10:	0800dc06 	.word	0x0800dc06

0800bf14 <__ratio>:
 800bf14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	4688      	mov	r8, r1
 800bf1a:	4669      	mov	r1, sp
 800bf1c:	4681      	mov	r9, r0
 800bf1e:	f7ff ff55 	bl	800bdcc <__b2d>
 800bf22:	a901      	add	r1, sp, #4
 800bf24:	4640      	mov	r0, r8
 800bf26:	ec55 4b10 	vmov	r4, r5, d0
 800bf2a:	f7ff ff4f 	bl	800bdcc <__b2d>
 800bf2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf36:	eba3 0c02 	sub.w	ip, r3, r2
 800bf3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf44:	ec51 0b10 	vmov	r0, r1, d0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bfd6      	itet	le
 800bf4c:	460a      	movle	r2, r1
 800bf4e:	462a      	movgt	r2, r5
 800bf50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf54:	468b      	mov	fp, r1
 800bf56:	462f      	mov	r7, r5
 800bf58:	bfd4      	ite	le
 800bf5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf62:	4620      	mov	r0, r4
 800bf64:	ee10 2a10 	vmov	r2, s0
 800bf68:	465b      	mov	r3, fp
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 fc6e 	bl	800084c <__aeabi_ddiv>
 800bf70:	ec41 0b10 	vmov	d0, r0, r1
 800bf74:	b003      	add	sp, #12
 800bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf7a <__copybits>:
 800bf7a:	3901      	subs	r1, #1
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	1149      	asrs	r1, r1, #5
 800bf80:	6914      	ldr	r4, [r2, #16]
 800bf82:	3101      	adds	r1, #1
 800bf84:	f102 0314 	add.w	r3, r2, #20
 800bf88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf90:	1f05      	subs	r5, r0, #4
 800bf92:	42a3      	cmp	r3, r4
 800bf94:	d30c      	bcc.n	800bfb0 <__copybits+0x36>
 800bf96:	1aa3      	subs	r3, r4, r2
 800bf98:	3b11      	subs	r3, #17
 800bf9a:	f023 0303 	bic.w	r3, r3, #3
 800bf9e:	3211      	adds	r2, #17
 800bfa0:	42a2      	cmp	r2, r4
 800bfa2:	bf88      	it	hi
 800bfa4:	2300      	movhi	r3, #0
 800bfa6:	4418      	add	r0, r3
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4288      	cmp	r0, r1
 800bfac:	d305      	bcc.n	800bfba <__copybits+0x40>
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfb4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfb8:	e7eb      	b.n	800bf92 <__copybits+0x18>
 800bfba:	f840 3b04 	str.w	r3, [r0], #4
 800bfbe:	e7f4      	b.n	800bfaa <__copybits+0x30>

0800bfc0 <__any_on>:
 800bfc0:	f100 0214 	add.w	r2, r0, #20
 800bfc4:	6900      	ldr	r0, [r0, #16]
 800bfc6:	114b      	asrs	r3, r1, #5
 800bfc8:	4298      	cmp	r0, r3
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	db11      	blt.n	800bff2 <__any_on+0x32>
 800bfce:	dd0a      	ble.n	800bfe6 <__any_on+0x26>
 800bfd0:	f011 011f 	ands.w	r1, r1, #31
 800bfd4:	d007      	beq.n	800bfe6 <__any_on+0x26>
 800bfd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfda:	fa24 f001 	lsr.w	r0, r4, r1
 800bfde:	fa00 f101 	lsl.w	r1, r0, r1
 800bfe2:	428c      	cmp	r4, r1
 800bfe4:	d10b      	bne.n	800bffe <__any_on+0x3e>
 800bfe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d803      	bhi.n	800bff6 <__any_on+0x36>
 800bfee:	2000      	movs	r0, #0
 800bff0:	bd10      	pop	{r4, pc}
 800bff2:	4603      	mov	r3, r0
 800bff4:	e7f7      	b.n	800bfe6 <__any_on+0x26>
 800bff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bffa:	2900      	cmp	r1, #0
 800bffc:	d0f5      	beq.n	800bfea <__any_on+0x2a>
 800bffe:	2001      	movs	r0, #1
 800c000:	e7f6      	b.n	800bff0 <__any_on+0x30>

0800c002 <__ascii_wctomb>:
 800c002:	b149      	cbz	r1, 800c018 <__ascii_wctomb+0x16>
 800c004:	2aff      	cmp	r2, #255	; 0xff
 800c006:	bf85      	ittet	hi
 800c008:	238a      	movhi	r3, #138	; 0x8a
 800c00a:	6003      	strhi	r3, [r0, #0]
 800c00c:	700a      	strbls	r2, [r1, #0]
 800c00e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c012:	bf98      	it	ls
 800c014:	2001      	movls	r0, #1
 800c016:	4770      	bx	lr
 800c018:	4608      	mov	r0, r1
 800c01a:	4770      	bx	lr

0800c01c <__ssputs_r>:
 800c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	688e      	ldr	r6, [r1, #8]
 800c022:	461f      	mov	r7, r3
 800c024:	42be      	cmp	r6, r7
 800c026:	680b      	ldr	r3, [r1, #0]
 800c028:	4682      	mov	sl, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	4690      	mov	r8, r2
 800c02e:	d82c      	bhi.n	800c08a <__ssputs_r+0x6e>
 800c030:	898a      	ldrh	r2, [r1, #12]
 800c032:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c036:	d026      	beq.n	800c086 <__ssputs_r+0x6a>
 800c038:	6965      	ldr	r5, [r4, #20]
 800c03a:	6909      	ldr	r1, [r1, #16]
 800c03c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c040:	eba3 0901 	sub.w	r9, r3, r1
 800c044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c048:	1c7b      	adds	r3, r7, #1
 800c04a:	444b      	add	r3, r9
 800c04c:	106d      	asrs	r5, r5, #1
 800c04e:	429d      	cmp	r5, r3
 800c050:	bf38      	it	cc
 800c052:	461d      	movcc	r5, r3
 800c054:	0553      	lsls	r3, r2, #21
 800c056:	d527      	bpl.n	800c0a8 <__ssputs_r+0x8c>
 800c058:	4629      	mov	r1, r5
 800c05a:	f7ff fa87 	bl	800b56c <_malloc_r>
 800c05e:	4606      	mov	r6, r0
 800c060:	b360      	cbz	r0, 800c0bc <__ssputs_r+0xa0>
 800c062:	6921      	ldr	r1, [r4, #16]
 800c064:	464a      	mov	r2, r9
 800c066:	f7fe fe81 	bl	800ad6c <memcpy>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	6126      	str	r6, [r4, #16]
 800c078:	6165      	str	r5, [r4, #20]
 800c07a:	444e      	add	r6, r9
 800c07c:	eba5 0509 	sub.w	r5, r5, r9
 800c080:	6026      	str	r6, [r4, #0]
 800c082:	60a5      	str	r5, [r4, #8]
 800c084:	463e      	mov	r6, r7
 800c086:	42be      	cmp	r6, r7
 800c088:	d900      	bls.n	800c08c <__ssputs_r+0x70>
 800c08a:	463e      	mov	r6, r7
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	4632      	mov	r2, r6
 800c090:	4641      	mov	r1, r8
 800c092:	f000 fb6b 	bl	800c76c <memmove>
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	1b9b      	subs	r3, r3, r6
 800c09a:	60a3      	str	r3, [r4, #8]
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	4433      	add	r3, r6
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	f000 fba6 	bl	800c7fa <_realloc_r>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d1e0      	bne.n	800c076 <__ssputs_r+0x5a>
 800c0b4:	6921      	ldr	r1, [r4, #16]
 800c0b6:	4650      	mov	r0, sl
 800c0b8:	f7fe fe8c 	bl	800add4 <_free_r>
 800c0bc:	230c      	movs	r3, #12
 800c0be:	f8ca 3000 	str.w	r3, [sl]
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ce:	e7e9      	b.n	800c0a4 <__ssputs_r+0x88>

0800c0d0 <_svfiprintf_r>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	4698      	mov	r8, r3
 800c0d6:	898b      	ldrh	r3, [r1, #12]
 800c0d8:	061b      	lsls	r3, r3, #24
 800c0da:	b09d      	sub	sp, #116	; 0x74
 800c0dc:	4607      	mov	r7, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	d50e      	bpl.n	800c102 <_svfiprintf_r+0x32>
 800c0e4:	690b      	ldr	r3, [r1, #16]
 800c0e6:	b963      	cbnz	r3, 800c102 <_svfiprintf_r+0x32>
 800c0e8:	2140      	movs	r1, #64	; 0x40
 800c0ea:	f7ff fa3f 	bl	800b56c <_malloc_r>
 800c0ee:	6028      	str	r0, [r5, #0]
 800c0f0:	6128      	str	r0, [r5, #16]
 800c0f2:	b920      	cbnz	r0, 800c0fe <_svfiprintf_r+0x2e>
 800c0f4:	230c      	movs	r3, #12
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fc:	e0d0      	b.n	800c2a0 <_svfiprintf_r+0x1d0>
 800c0fe:	2340      	movs	r3, #64	; 0x40
 800c100:	616b      	str	r3, [r5, #20]
 800c102:	2300      	movs	r3, #0
 800c104:	9309      	str	r3, [sp, #36]	; 0x24
 800c106:	2320      	movs	r3, #32
 800c108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c110:	2330      	movs	r3, #48	; 0x30
 800c112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2b8 <_svfiprintf_r+0x1e8>
 800c116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c11a:	f04f 0901 	mov.w	r9, #1
 800c11e:	4623      	mov	r3, r4
 800c120:	469a      	mov	sl, r3
 800c122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c126:	b10a      	cbz	r2, 800c12c <_svfiprintf_r+0x5c>
 800c128:	2a25      	cmp	r2, #37	; 0x25
 800c12a:	d1f9      	bne.n	800c120 <_svfiprintf_r+0x50>
 800c12c:	ebba 0b04 	subs.w	fp, sl, r4
 800c130:	d00b      	beq.n	800c14a <_svfiprintf_r+0x7a>
 800c132:	465b      	mov	r3, fp
 800c134:	4622      	mov	r2, r4
 800c136:	4629      	mov	r1, r5
 800c138:	4638      	mov	r0, r7
 800c13a:	f7ff ff6f 	bl	800c01c <__ssputs_r>
 800c13e:	3001      	adds	r0, #1
 800c140:	f000 80a9 	beq.w	800c296 <_svfiprintf_r+0x1c6>
 800c144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c146:	445a      	add	r2, fp
 800c148:	9209      	str	r2, [sp, #36]	; 0x24
 800c14a:	f89a 3000 	ldrb.w	r3, [sl]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 80a1 	beq.w	800c296 <_svfiprintf_r+0x1c6>
 800c154:	2300      	movs	r3, #0
 800c156:	f04f 32ff 	mov.w	r2, #4294967295
 800c15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15e:	f10a 0a01 	add.w	sl, sl, #1
 800c162:	9304      	str	r3, [sp, #16]
 800c164:	9307      	str	r3, [sp, #28]
 800c166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c16a:	931a      	str	r3, [sp, #104]	; 0x68
 800c16c:	4654      	mov	r4, sl
 800c16e:	2205      	movs	r2, #5
 800c170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c174:	4850      	ldr	r0, [pc, #320]	; (800c2b8 <_svfiprintf_r+0x1e8>)
 800c176:	f7f4 f833 	bl	80001e0 <memchr>
 800c17a:	9a04      	ldr	r2, [sp, #16]
 800c17c:	b9d8      	cbnz	r0, 800c1b6 <_svfiprintf_r+0xe6>
 800c17e:	06d0      	lsls	r0, r2, #27
 800c180:	bf44      	itt	mi
 800c182:	2320      	movmi	r3, #32
 800c184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c188:	0711      	lsls	r1, r2, #28
 800c18a:	bf44      	itt	mi
 800c18c:	232b      	movmi	r3, #43	; 0x2b
 800c18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c192:	f89a 3000 	ldrb.w	r3, [sl]
 800c196:	2b2a      	cmp	r3, #42	; 0x2a
 800c198:	d015      	beq.n	800c1c6 <_svfiprintf_r+0xf6>
 800c19a:	9a07      	ldr	r2, [sp, #28]
 800c19c:	4654      	mov	r4, sl
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f04f 0c0a 	mov.w	ip, #10
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1aa:	3b30      	subs	r3, #48	; 0x30
 800c1ac:	2b09      	cmp	r3, #9
 800c1ae:	d94d      	bls.n	800c24c <_svfiprintf_r+0x17c>
 800c1b0:	b1b0      	cbz	r0, 800c1e0 <_svfiprintf_r+0x110>
 800c1b2:	9207      	str	r2, [sp, #28]
 800c1b4:	e014      	b.n	800c1e0 <_svfiprintf_r+0x110>
 800c1b6:	eba0 0308 	sub.w	r3, r0, r8
 800c1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	9304      	str	r3, [sp, #16]
 800c1c2:	46a2      	mov	sl, r4
 800c1c4:	e7d2      	b.n	800c16c <_svfiprintf_r+0x9c>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	1d19      	adds	r1, r3, #4
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	9103      	str	r1, [sp, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bfbb      	ittet	lt
 800c1d2:	425b      	neglt	r3, r3
 800c1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d8:	9307      	strge	r3, [sp, #28]
 800c1da:	9307      	strlt	r3, [sp, #28]
 800c1dc:	bfb8      	it	lt
 800c1de:	9204      	strlt	r2, [sp, #16]
 800c1e0:	7823      	ldrb	r3, [r4, #0]
 800c1e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e4:	d10c      	bne.n	800c200 <_svfiprintf_r+0x130>
 800c1e6:	7863      	ldrb	r3, [r4, #1]
 800c1e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ea:	d134      	bne.n	800c256 <_svfiprintf_r+0x186>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	9203      	str	r2, [sp, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	bfb8      	it	lt
 800c1f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1fc:	3402      	adds	r4, #2
 800c1fe:	9305      	str	r3, [sp, #20]
 800c200:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2c8 <_svfiprintf_r+0x1f8>
 800c204:	7821      	ldrb	r1, [r4, #0]
 800c206:	2203      	movs	r2, #3
 800c208:	4650      	mov	r0, sl
 800c20a:	f7f3 ffe9 	bl	80001e0 <memchr>
 800c20e:	b138      	cbz	r0, 800c220 <_svfiprintf_r+0x150>
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	eba0 000a 	sub.w	r0, r0, sl
 800c216:	2240      	movs	r2, #64	; 0x40
 800c218:	4082      	lsls	r2, r0
 800c21a:	4313      	orrs	r3, r2
 800c21c:	3401      	adds	r4, #1
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c224:	4825      	ldr	r0, [pc, #148]	; (800c2bc <_svfiprintf_r+0x1ec>)
 800c226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c22a:	2206      	movs	r2, #6
 800c22c:	f7f3 ffd8 	bl	80001e0 <memchr>
 800c230:	2800      	cmp	r0, #0
 800c232:	d038      	beq.n	800c2a6 <_svfiprintf_r+0x1d6>
 800c234:	4b22      	ldr	r3, [pc, #136]	; (800c2c0 <_svfiprintf_r+0x1f0>)
 800c236:	bb1b      	cbnz	r3, 800c280 <_svfiprintf_r+0x1b0>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	3307      	adds	r3, #7
 800c23c:	f023 0307 	bic.w	r3, r3, #7
 800c240:	3308      	adds	r3, #8
 800c242:	9303      	str	r3, [sp, #12]
 800c244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c246:	4433      	add	r3, r6
 800c248:	9309      	str	r3, [sp, #36]	; 0x24
 800c24a:	e768      	b.n	800c11e <_svfiprintf_r+0x4e>
 800c24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c250:	460c      	mov	r4, r1
 800c252:	2001      	movs	r0, #1
 800c254:	e7a6      	b.n	800c1a4 <_svfiprintf_r+0xd4>
 800c256:	2300      	movs	r3, #0
 800c258:	3401      	adds	r4, #1
 800c25a:	9305      	str	r3, [sp, #20]
 800c25c:	4619      	mov	r1, r3
 800c25e:	f04f 0c0a 	mov.w	ip, #10
 800c262:	4620      	mov	r0, r4
 800c264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c268:	3a30      	subs	r2, #48	; 0x30
 800c26a:	2a09      	cmp	r2, #9
 800c26c:	d903      	bls.n	800c276 <_svfiprintf_r+0x1a6>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0c6      	beq.n	800c200 <_svfiprintf_r+0x130>
 800c272:	9105      	str	r1, [sp, #20]
 800c274:	e7c4      	b.n	800c200 <_svfiprintf_r+0x130>
 800c276:	fb0c 2101 	mla	r1, ip, r1, r2
 800c27a:	4604      	mov	r4, r0
 800c27c:	2301      	movs	r3, #1
 800c27e:	e7f0      	b.n	800c262 <_svfiprintf_r+0x192>
 800c280:	ab03      	add	r3, sp, #12
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	462a      	mov	r2, r5
 800c286:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <_svfiprintf_r+0x1f4>)
 800c288:	a904      	add	r1, sp, #16
 800c28a:	4638      	mov	r0, r7
 800c28c:	f3af 8000 	nop.w
 800c290:	1c42      	adds	r2, r0, #1
 800c292:	4606      	mov	r6, r0
 800c294:	d1d6      	bne.n	800c244 <_svfiprintf_r+0x174>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	065b      	lsls	r3, r3, #25
 800c29a:	f53f af2d 	bmi.w	800c0f8 <_svfiprintf_r+0x28>
 800c29e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2a0:	b01d      	add	sp, #116	; 0x74
 800c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a6:	ab03      	add	r3, sp, #12
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <_svfiprintf_r+0x1f4>)
 800c2ae:	a904      	add	r1, sp, #16
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f000 f879 	bl	800c3a8 <_printf_i>
 800c2b6:	e7eb      	b.n	800c290 <_svfiprintf_r+0x1c0>
 800c2b8:	0800de5d 	.word	0x0800de5d
 800c2bc:	0800de67 	.word	0x0800de67
 800c2c0:	00000000 	.word	0x00000000
 800c2c4:	0800c01d 	.word	0x0800c01d
 800c2c8:	0800de63 	.word	0x0800de63

0800c2cc <_printf_common>:
 800c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d0:	4616      	mov	r6, r2
 800c2d2:	4699      	mov	r9, r3
 800c2d4:	688a      	ldr	r2, [r1, #8]
 800c2d6:	690b      	ldr	r3, [r1, #16]
 800c2d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	bfb8      	it	lt
 800c2e0:	4613      	movlt	r3, r2
 800c2e2:	6033      	str	r3, [r6, #0]
 800c2e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	b10a      	cbz	r2, 800c2f2 <_printf_common+0x26>
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	6033      	str	r3, [r6, #0]
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	0699      	lsls	r1, r3, #26
 800c2f6:	bf42      	ittt	mi
 800c2f8:	6833      	ldrmi	r3, [r6, #0]
 800c2fa:	3302      	addmi	r3, #2
 800c2fc:	6033      	strmi	r3, [r6, #0]
 800c2fe:	6825      	ldr	r5, [r4, #0]
 800c300:	f015 0506 	ands.w	r5, r5, #6
 800c304:	d106      	bne.n	800c314 <_printf_common+0x48>
 800c306:	f104 0a19 	add.w	sl, r4, #25
 800c30a:	68e3      	ldr	r3, [r4, #12]
 800c30c:	6832      	ldr	r2, [r6, #0]
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	42ab      	cmp	r3, r5
 800c312:	dc26      	bgt.n	800c362 <_printf_common+0x96>
 800c314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c318:	1e13      	subs	r3, r2, #0
 800c31a:	6822      	ldr	r2, [r4, #0]
 800c31c:	bf18      	it	ne
 800c31e:	2301      	movne	r3, #1
 800c320:	0692      	lsls	r2, r2, #26
 800c322:	d42b      	bmi.n	800c37c <_printf_common+0xb0>
 800c324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c328:	4649      	mov	r1, r9
 800c32a:	4638      	mov	r0, r7
 800c32c:	47c0      	blx	r8
 800c32e:	3001      	adds	r0, #1
 800c330:	d01e      	beq.n	800c370 <_printf_common+0xa4>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	6922      	ldr	r2, [r4, #16]
 800c336:	f003 0306 	and.w	r3, r3, #6
 800c33a:	2b04      	cmp	r3, #4
 800c33c:	bf02      	ittt	eq
 800c33e:	68e5      	ldreq	r5, [r4, #12]
 800c340:	6833      	ldreq	r3, [r6, #0]
 800c342:	1aed      	subeq	r5, r5, r3
 800c344:	68a3      	ldr	r3, [r4, #8]
 800c346:	bf0c      	ite	eq
 800c348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c34c:	2500      	movne	r5, #0
 800c34e:	4293      	cmp	r3, r2
 800c350:	bfc4      	itt	gt
 800c352:	1a9b      	subgt	r3, r3, r2
 800c354:	18ed      	addgt	r5, r5, r3
 800c356:	2600      	movs	r6, #0
 800c358:	341a      	adds	r4, #26
 800c35a:	42b5      	cmp	r5, r6
 800c35c:	d11a      	bne.n	800c394 <_printf_common+0xc8>
 800c35e:	2000      	movs	r0, #0
 800c360:	e008      	b.n	800c374 <_printf_common+0xa8>
 800c362:	2301      	movs	r3, #1
 800c364:	4652      	mov	r2, sl
 800c366:	4649      	mov	r1, r9
 800c368:	4638      	mov	r0, r7
 800c36a:	47c0      	blx	r8
 800c36c:	3001      	adds	r0, #1
 800c36e:	d103      	bne.n	800c378 <_printf_common+0xac>
 800c370:	f04f 30ff 	mov.w	r0, #4294967295
 800c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c378:	3501      	adds	r5, #1
 800c37a:	e7c6      	b.n	800c30a <_printf_common+0x3e>
 800c37c:	18e1      	adds	r1, r4, r3
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	2030      	movs	r0, #48	; 0x30
 800c382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c386:	4422      	add	r2, r4
 800c388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c38c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c390:	3302      	adds	r3, #2
 800c392:	e7c7      	b.n	800c324 <_printf_common+0x58>
 800c394:	2301      	movs	r3, #1
 800c396:	4622      	mov	r2, r4
 800c398:	4649      	mov	r1, r9
 800c39a:	4638      	mov	r0, r7
 800c39c:	47c0      	blx	r8
 800c39e:	3001      	adds	r0, #1
 800c3a0:	d0e6      	beq.n	800c370 <_printf_common+0xa4>
 800c3a2:	3601      	adds	r6, #1
 800c3a4:	e7d9      	b.n	800c35a <_printf_common+0x8e>
	...

0800c3a8 <_printf_i>:
 800c3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	7e0f      	ldrb	r7, [r1, #24]
 800c3ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3b0:	2f78      	cmp	r7, #120	; 0x78
 800c3b2:	4691      	mov	r9, r2
 800c3b4:	4680      	mov	r8, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	469a      	mov	sl, r3
 800c3ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3be:	d807      	bhi.n	800c3d0 <_printf_i+0x28>
 800c3c0:	2f62      	cmp	r7, #98	; 0x62
 800c3c2:	d80a      	bhi.n	800c3da <_printf_i+0x32>
 800c3c4:	2f00      	cmp	r7, #0
 800c3c6:	f000 80d4 	beq.w	800c572 <_printf_i+0x1ca>
 800c3ca:	2f58      	cmp	r7, #88	; 0x58
 800c3cc:	f000 80c0 	beq.w	800c550 <_printf_i+0x1a8>
 800c3d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3d8:	e03a      	b.n	800c450 <_printf_i+0xa8>
 800c3da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3de:	2b15      	cmp	r3, #21
 800c3e0:	d8f6      	bhi.n	800c3d0 <_printf_i+0x28>
 800c3e2:	a101      	add	r1, pc, #4	; (adr r1, 800c3e8 <_printf_i+0x40>)
 800c3e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3e8:	0800c441 	.word	0x0800c441
 800c3ec:	0800c455 	.word	0x0800c455
 800c3f0:	0800c3d1 	.word	0x0800c3d1
 800c3f4:	0800c3d1 	.word	0x0800c3d1
 800c3f8:	0800c3d1 	.word	0x0800c3d1
 800c3fc:	0800c3d1 	.word	0x0800c3d1
 800c400:	0800c455 	.word	0x0800c455
 800c404:	0800c3d1 	.word	0x0800c3d1
 800c408:	0800c3d1 	.word	0x0800c3d1
 800c40c:	0800c3d1 	.word	0x0800c3d1
 800c410:	0800c3d1 	.word	0x0800c3d1
 800c414:	0800c559 	.word	0x0800c559
 800c418:	0800c481 	.word	0x0800c481
 800c41c:	0800c513 	.word	0x0800c513
 800c420:	0800c3d1 	.word	0x0800c3d1
 800c424:	0800c3d1 	.word	0x0800c3d1
 800c428:	0800c57b 	.word	0x0800c57b
 800c42c:	0800c3d1 	.word	0x0800c3d1
 800c430:	0800c481 	.word	0x0800c481
 800c434:	0800c3d1 	.word	0x0800c3d1
 800c438:	0800c3d1 	.word	0x0800c3d1
 800c43c:	0800c51b 	.word	0x0800c51b
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	1d1a      	adds	r2, r3, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	602a      	str	r2, [r5, #0]
 800c448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c44c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c450:	2301      	movs	r3, #1
 800c452:	e09f      	b.n	800c594 <_printf_i+0x1ec>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	682b      	ldr	r3, [r5, #0]
 800c458:	0607      	lsls	r7, r0, #24
 800c45a:	f103 0104 	add.w	r1, r3, #4
 800c45e:	6029      	str	r1, [r5, #0]
 800c460:	d501      	bpl.n	800c466 <_printf_i+0xbe>
 800c462:	681e      	ldr	r6, [r3, #0]
 800c464:	e003      	b.n	800c46e <_printf_i+0xc6>
 800c466:	0646      	lsls	r6, r0, #25
 800c468:	d5fb      	bpl.n	800c462 <_printf_i+0xba>
 800c46a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c46e:	2e00      	cmp	r6, #0
 800c470:	da03      	bge.n	800c47a <_printf_i+0xd2>
 800c472:	232d      	movs	r3, #45	; 0x2d
 800c474:	4276      	negs	r6, r6
 800c476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c47a:	485a      	ldr	r0, [pc, #360]	; (800c5e4 <_printf_i+0x23c>)
 800c47c:	230a      	movs	r3, #10
 800c47e:	e012      	b.n	800c4a6 <_printf_i+0xfe>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	6820      	ldr	r0, [r4, #0]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	6029      	str	r1, [r5, #0]
 800c488:	0605      	lsls	r5, r0, #24
 800c48a:	d501      	bpl.n	800c490 <_printf_i+0xe8>
 800c48c:	681e      	ldr	r6, [r3, #0]
 800c48e:	e002      	b.n	800c496 <_printf_i+0xee>
 800c490:	0641      	lsls	r1, r0, #25
 800c492:	d5fb      	bpl.n	800c48c <_printf_i+0xe4>
 800c494:	881e      	ldrh	r6, [r3, #0]
 800c496:	4853      	ldr	r0, [pc, #332]	; (800c5e4 <_printf_i+0x23c>)
 800c498:	2f6f      	cmp	r7, #111	; 0x6f
 800c49a:	bf0c      	ite	eq
 800c49c:	2308      	moveq	r3, #8
 800c49e:	230a      	movne	r3, #10
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4a6:	6865      	ldr	r5, [r4, #4]
 800c4a8:	60a5      	str	r5, [r4, #8]
 800c4aa:	2d00      	cmp	r5, #0
 800c4ac:	bfa2      	ittt	ge
 800c4ae:	6821      	ldrge	r1, [r4, #0]
 800c4b0:	f021 0104 	bicge.w	r1, r1, #4
 800c4b4:	6021      	strge	r1, [r4, #0]
 800c4b6:	b90e      	cbnz	r6, 800c4bc <_printf_i+0x114>
 800c4b8:	2d00      	cmp	r5, #0
 800c4ba:	d04b      	beq.n	800c554 <_printf_i+0x1ac>
 800c4bc:	4615      	mov	r5, r2
 800c4be:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4c2:	fb03 6711 	mls	r7, r3, r1, r6
 800c4c6:	5dc7      	ldrb	r7, [r0, r7]
 800c4c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4cc:	4637      	mov	r7, r6
 800c4ce:	42bb      	cmp	r3, r7
 800c4d0:	460e      	mov	r6, r1
 800c4d2:	d9f4      	bls.n	800c4be <_printf_i+0x116>
 800c4d4:	2b08      	cmp	r3, #8
 800c4d6:	d10b      	bne.n	800c4f0 <_printf_i+0x148>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	07de      	lsls	r6, r3, #31
 800c4dc:	d508      	bpl.n	800c4f0 <_printf_i+0x148>
 800c4de:	6923      	ldr	r3, [r4, #16]
 800c4e0:	6861      	ldr	r1, [r4, #4]
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	bfde      	ittt	le
 800c4e6:	2330      	movle	r3, #48	; 0x30
 800c4e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4f0:	1b52      	subs	r2, r2, r5
 800c4f2:	6122      	str	r2, [r4, #16]
 800c4f4:	f8cd a000 	str.w	sl, [sp]
 800c4f8:	464b      	mov	r3, r9
 800c4fa:	aa03      	add	r2, sp, #12
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4640      	mov	r0, r8
 800c500:	f7ff fee4 	bl	800c2cc <_printf_common>
 800c504:	3001      	adds	r0, #1
 800c506:	d14a      	bne.n	800c59e <_printf_i+0x1f6>
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	b004      	add	sp, #16
 800c50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	f043 0320 	orr.w	r3, r3, #32
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	4833      	ldr	r0, [pc, #204]	; (800c5e8 <_printf_i+0x240>)
 800c51c:	2778      	movs	r7, #120	; 0x78
 800c51e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	6829      	ldr	r1, [r5, #0]
 800c526:	061f      	lsls	r7, r3, #24
 800c528:	f851 6b04 	ldr.w	r6, [r1], #4
 800c52c:	d402      	bmi.n	800c534 <_printf_i+0x18c>
 800c52e:	065f      	lsls	r7, r3, #25
 800c530:	bf48      	it	mi
 800c532:	b2b6      	uxthmi	r6, r6
 800c534:	07df      	lsls	r7, r3, #31
 800c536:	bf48      	it	mi
 800c538:	f043 0320 	orrmi.w	r3, r3, #32
 800c53c:	6029      	str	r1, [r5, #0]
 800c53e:	bf48      	it	mi
 800c540:	6023      	strmi	r3, [r4, #0]
 800c542:	b91e      	cbnz	r6, 800c54c <_printf_i+0x1a4>
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	f023 0320 	bic.w	r3, r3, #32
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	2310      	movs	r3, #16
 800c54e:	e7a7      	b.n	800c4a0 <_printf_i+0xf8>
 800c550:	4824      	ldr	r0, [pc, #144]	; (800c5e4 <_printf_i+0x23c>)
 800c552:	e7e4      	b.n	800c51e <_printf_i+0x176>
 800c554:	4615      	mov	r5, r2
 800c556:	e7bd      	b.n	800c4d4 <_printf_i+0x12c>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	6826      	ldr	r6, [r4, #0]
 800c55c:	6961      	ldr	r1, [r4, #20]
 800c55e:	1d18      	adds	r0, r3, #4
 800c560:	6028      	str	r0, [r5, #0]
 800c562:	0635      	lsls	r5, r6, #24
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	d501      	bpl.n	800c56c <_printf_i+0x1c4>
 800c568:	6019      	str	r1, [r3, #0]
 800c56a:	e002      	b.n	800c572 <_printf_i+0x1ca>
 800c56c:	0670      	lsls	r0, r6, #25
 800c56e:	d5fb      	bpl.n	800c568 <_printf_i+0x1c0>
 800c570:	8019      	strh	r1, [r3, #0]
 800c572:	2300      	movs	r3, #0
 800c574:	6123      	str	r3, [r4, #16]
 800c576:	4615      	mov	r5, r2
 800c578:	e7bc      	b.n	800c4f4 <_printf_i+0x14c>
 800c57a:	682b      	ldr	r3, [r5, #0]
 800c57c:	1d1a      	adds	r2, r3, #4
 800c57e:	602a      	str	r2, [r5, #0]
 800c580:	681d      	ldr	r5, [r3, #0]
 800c582:	6862      	ldr	r2, [r4, #4]
 800c584:	2100      	movs	r1, #0
 800c586:	4628      	mov	r0, r5
 800c588:	f7f3 fe2a 	bl	80001e0 <memchr>
 800c58c:	b108      	cbz	r0, 800c592 <_printf_i+0x1ea>
 800c58e:	1b40      	subs	r0, r0, r5
 800c590:	6060      	str	r0, [r4, #4]
 800c592:	6863      	ldr	r3, [r4, #4]
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	2300      	movs	r3, #0
 800c598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c59c:	e7aa      	b.n	800c4f4 <_printf_i+0x14c>
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	462a      	mov	r2, r5
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	47d0      	blx	sl
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	d0ad      	beq.n	800c508 <_printf_i+0x160>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	079b      	lsls	r3, r3, #30
 800c5b0:	d413      	bmi.n	800c5da <_printf_i+0x232>
 800c5b2:	68e0      	ldr	r0, [r4, #12]
 800c5b4:	9b03      	ldr	r3, [sp, #12]
 800c5b6:	4298      	cmp	r0, r3
 800c5b8:	bfb8      	it	lt
 800c5ba:	4618      	movlt	r0, r3
 800c5bc:	e7a6      	b.n	800c50c <_printf_i+0x164>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	4632      	mov	r2, r6
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	47d0      	blx	sl
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d09d      	beq.n	800c508 <_printf_i+0x160>
 800c5cc:	3501      	adds	r5, #1
 800c5ce:	68e3      	ldr	r3, [r4, #12]
 800c5d0:	9903      	ldr	r1, [sp, #12]
 800c5d2:	1a5b      	subs	r3, r3, r1
 800c5d4:	42ab      	cmp	r3, r5
 800c5d6:	dcf2      	bgt.n	800c5be <_printf_i+0x216>
 800c5d8:	e7eb      	b.n	800c5b2 <_printf_i+0x20a>
 800c5da:	2500      	movs	r5, #0
 800c5dc:	f104 0619 	add.w	r6, r4, #25
 800c5e0:	e7f5      	b.n	800c5ce <_printf_i+0x226>
 800c5e2:	bf00      	nop
 800c5e4:	0800de6e 	.word	0x0800de6e
 800c5e8:	0800de7f 	.word	0x0800de7f

0800c5ec <__sflush_r>:
 800c5ec:	898a      	ldrh	r2, [r1, #12]
 800c5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	0710      	lsls	r0, r2, #28
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	d458      	bmi.n	800c6ac <__sflush_r+0xc0>
 800c5fa:	684b      	ldr	r3, [r1, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dc05      	bgt.n	800c60c <__sflush_r+0x20>
 800c600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	dc02      	bgt.n	800c60c <__sflush_r+0x20>
 800c606:	2000      	movs	r0, #0
 800c608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d0f9      	beq.n	800c606 <__sflush_r+0x1a>
 800c612:	2300      	movs	r3, #0
 800c614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c618:	682f      	ldr	r7, [r5, #0]
 800c61a:	6a21      	ldr	r1, [r4, #32]
 800c61c:	602b      	str	r3, [r5, #0]
 800c61e:	d032      	beq.n	800c686 <__sflush_r+0x9a>
 800c620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	075a      	lsls	r2, r3, #29
 800c626:	d505      	bpl.n	800c634 <__sflush_r+0x48>
 800c628:	6863      	ldr	r3, [r4, #4]
 800c62a:	1ac0      	subs	r0, r0, r3
 800c62c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c62e:	b10b      	cbz	r3, 800c634 <__sflush_r+0x48>
 800c630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c632:	1ac0      	subs	r0, r0, r3
 800c634:	2300      	movs	r3, #0
 800c636:	4602      	mov	r2, r0
 800c638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c63a:	6a21      	ldr	r1, [r4, #32]
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b0      	blx	r6
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	89a3      	ldrh	r3, [r4, #12]
 800c644:	d106      	bne.n	800c654 <__sflush_r+0x68>
 800c646:	6829      	ldr	r1, [r5, #0]
 800c648:	291d      	cmp	r1, #29
 800c64a:	d82b      	bhi.n	800c6a4 <__sflush_r+0xb8>
 800c64c:	4a29      	ldr	r2, [pc, #164]	; (800c6f4 <__sflush_r+0x108>)
 800c64e:	410a      	asrs	r2, r1
 800c650:	07d6      	lsls	r6, r2, #31
 800c652:	d427      	bmi.n	800c6a4 <__sflush_r+0xb8>
 800c654:	2200      	movs	r2, #0
 800c656:	6062      	str	r2, [r4, #4]
 800c658:	04d9      	lsls	r1, r3, #19
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	6022      	str	r2, [r4, #0]
 800c65e:	d504      	bpl.n	800c66a <__sflush_r+0x7e>
 800c660:	1c42      	adds	r2, r0, #1
 800c662:	d101      	bne.n	800c668 <__sflush_r+0x7c>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b903      	cbnz	r3, 800c66a <__sflush_r+0x7e>
 800c668:	6560      	str	r0, [r4, #84]	; 0x54
 800c66a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c66c:	602f      	str	r7, [r5, #0]
 800c66e:	2900      	cmp	r1, #0
 800c670:	d0c9      	beq.n	800c606 <__sflush_r+0x1a>
 800c672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c676:	4299      	cmp	r1, r3
 800c678:	d002      	beq.n	800c680 <__sflush_r+0x94>
 800c67a:	4628      	mov	r0, r5
 800c67c:	f7fe fbaa 	bl	800add4 <_free_r>
 800c680:	2000      	movs	r0, #0
 800c682:	6360      	str	r0, [r4, #52]	; 0x34
 800c684:	e7c0      	b.n	800c608 <__sflush_r+0x1c>
 800c686:	2301      	movs	r3, #1
 800c688:	4628      	mov	r0, r5
 800c68a:	47b0      	blx	r6
 800c68c:	1c41      	adds	r1, r0, #1
 800c68e:	d1c8      	bne.n	800c622 <__sflush_r+0x36>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0c5      	beq.n	800c622 <__sflush_r+0x36>
 800c696:	2b1d      	cmp	r3, #29
 800c698:	d001      	beq.n	800c69e <__sflush_r+0xb2>
 800c69a:	2b16      	cmp	r3, #22
 800c69c:	d101      	bne.n	800c6a2 <__sflush_r+0xb6>
 800c69e:	602f      	str	r7, [r5, #0]
 800c6a0:	e7b1      	b.n	800c606 <__sflush_r+0x1a>
 800c6a2:	89a3      	ldrh	r3, [r4, #12]
 800c6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	e7ad      	b.n	800c608 <__sflush_r+0x1c>
 800c6ac:	690f      	ldr	r7, [r1, #16]
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	d0a9      	beq.n	800c606 <__sflush_r+0x1a>
 800c6b2:	0793      	lsls	r3, r2, #30
 800c6b4:	680e      	ldr	r6, [r1, #0]
 800c6b6:	bf08      	it	eq
 800c6b8:	694b      	ldreq	r3, [r1, #20]
 800c6ba:	600f      	str	r7, [r1, #0]
 800c6bc:	bf18      	it	ne
 800c6be:	2300      	movne	r3, #0
 800c6c0:	eba6 0807 	sub.w	r8, r6, r7
 800c6c4:	608b      	str	r3, [r1, #8]
 800c6c6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ca:	dd9c      	ble.n	800c606 <__sflush_r+0x1a>
 800c6cc:	6a21      	ldr	r1, [r4, #32]
 800c6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6d0:	4643      	mov	r3, r8
 800c6d2:	463a      	mov	r2, r7
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b0      	blx	r6
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	dc06      	bgt.n	800c6ea <__sflush_r+0xfe>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	e78e      	b.n	800c608 <__sflush_r+0x1c>
 800c6ea:	4407      	add	r7, r0
 800c6ec:	eba8 0800 	sub.w	r8, r8, r0
 800c6f0:	e7e9      	b.n	800c6c6 <__sflush_r+0xda>
 800c6f2:	bf00      	nop
 800c6f4:	dfbffffe 	.word	0xdfbffffe

0800c6f8 <_fflush_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	690b      	ldr	r3, [r1, #16]
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	b913      	cbnz	r3, 800c708 <_fflush_r+0x10>
 800c702:	2500      	movs	r5, #0
 800c704:	4628      	mov	r0, r5
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	b118      	cbz	r0, 800c712 <_fflush_r+0x1a>
 800c70a:	6a03      	ldr	r3, [r0, #32]
 800c70c:	b90b      	cbnz	r3, 800c712 <_fflush_r+0x1a>
 800c70e:	f7fe f995 	bl	800aa3c <__sinit>
 800c712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0f3      	beq.n	800c702 <_fflush_r+0xa>
 800c71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c71c:	07d0      	lsls	r0, r2, #31
 800c71e:	d404      	bmi.n	800c72a <_fflush_r+0x32>
 800c720:	0599      	lsls	r1, r3, #22
 800c722:	d402      	bmi.n	800c72a <_fflush_r+0x32>
 800c724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c726:	f7fe fb1f 	bl	800ad68 <__retarget_lock_acquire_recursive>
 800c72a:	4628      	mov	r0, r5
 800c72c:	4621      	mov	r1, r4
 800c72e:	f7ff ff5d 	bl	800c5ec <__sflush_r>
 800c732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c734:	07da      	lsls	r2, r3, #31
 800c736:	4605      	mov	r5, r0
 800c738:	d4e4      	bmi.n	800c704 <_fflush_r+0xc>
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	059b      	lsls	r3, r3, #22
 800c73e:	d4e1      	bmi.n	800c704 <_fflush_r+0xc>
 800c740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c742:	f7fe fb12 	bl	800ad6a <__retarget_lock_release_recursive>
 800c746:	e7dd      	b.n	800c704 <_fflush_r+0xc>

0800c748 <fiprintf>:
 800c748:	b40e      	push	{r1, r2, r3}
 800c74a:	b503      	push	{r0, r1, lr}
 800c74c:	4601      	mov	r1, r0
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	4805      	ldr	r0, [pc, #20]	; (800c768 <fiprintf+0x20>)
 800c752:	f853 2b04 	ldr.w	r2, [r3], #4
 800c756:	6800      	ldr	r0, [r0, #0]
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	f000 f8a7 	bl	800c8ac <_vfiprintf_r>
 800c75e:	b002      	add	sp, #8
 800c760:	f85d eb04 	ldr.w	lr, [sp], #4
 800c764:	b003      	add	sp, #12
 800c766:	4770      	bx	lr
 800c768:	200002c0 	.word	0x200002c0

0800c76c <memmove>:
 800c76c:	4288      	cmp	r0, r1
 800c76e:	b510      	push	{r4, lr}
 800c770:	eb01 0402 	add.w	r4, r1, r2
 800c774:	d902      	bls.n	800c77c <memmove+0x10>
 800c776:	4284      	cmp	r4, r0
 800c778:	4623      	mov	r3, r4
 800c77a:	d807      	bhi.n	800c78c <memmove+0x20>
 800c77c:	1e43      	subs	r3, r0, #1
 800c77e:	42a1      	cmp	r1, r4
 800c780:	d008      	beq.n	800c794 <memmove+0x28>
 800c782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c78a:	e7f8      	b.n	800c77e <memmove+0x12>
 800c78c:	4402      	add	r2, r0
 800c78e:	4601      	mov	r1, r0
 800c790:	428a      	cmp	r2, r1
 800c792:	d100      	bne.n	800c796 <memmove+0x2a>
 800c794:	bd10      	pop	{r4, pc}
 800c796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c79e:	e7f7      	b.n	800c790 <memmove+0x24>

0800c7a0 <_sbrk_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4d06      	ldr	r5, [pc, #24]	; (800c7bc <_sbrk_r+0x1c>)
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	602b      	str	r3, [r5, #0]
 800c7ac:	f7f5 f9c8 	bl	8001b40 <_sbrk>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d102      	bne.n	800c7ba <_sbrk_r+0x1a>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	b103      	cbz	r3, 800c7ba <_sbrk_r+0x1a>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	20002148 	.word	0x20002148

0800c7c0 <abort>:
 800c7c0:	b508      	push	{r3, lr}
 800c7c2:	2006      	movs	r0, #6
 800c7c4:	f000 fa4a 	bl	800cc5c <raise>
 800c7c8:	2001      	movs	r0, #1
 800c7ca:	f7f5 f941 	bl	8001a50 <_exit>

0800c7ce <_calloc_r>:
 800c7ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7d0:	fba1 2402 	umull	r2, r4, r1, r2
 800c7d4:	b94c      	cbnz	r4, 800c7ea <_calloc_r+0x1c>
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	9201      	str	r2, [sp, #4]
 800c7da:	f7fe fec7 	bl	800b56c <_malloc_r>
 800c7de:	9a01      	ldr	r2, [sp, #4]
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	b930      	cbnz	r0, 800c7f2 <_calloc_r+0x24>
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	b003      	add	sp, #12
 800c7e8:	bd30      	pop	{r4, r5, pc}
 800c7ea:	220c      	movs	r2, #12
 800c7ec:	6002      	str	r2, [r0, #0]
 800c7ee:	2500      	movs	r5, #0
 800c7f0:	e7f8      	b.n	800c7e4 <_calloc_r+0x16>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	f7fe f9bb 	bl	800ab6e <memset>
 800c7f8:	e7f4      	b.n	800c7e4 <_calloc_r+0x16>

0800c7fa <_realloc_r>:
 800c7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fe:	4680      	mov	r8, r0
 800c800:	4614      	mov	r4, r2
 800c802:	460e      	mov	r6, r1
 800c804:	b921      	cbnz	r1, 800c810 <_realloc_r+0x16>
 800c806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c80a:	4611      	mov	r1, r2
 800c80c:	f7fe beae 	b.w	800b56c <_malloc_r>
 800c810:	b92a      	cbnz	r2, 800c81e <_realloc_r+0x24>
 800c812:	f7fe fadf 	bl	800add4 <_free_r>
 800c816:	4625      	mov	r5, r4
 800c818:	4628      	mov	r0, r5
 800c81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81e:	f000 fa39 	bl	800cc94 <_malloc_usable_size_r>
 800c822:	4284      	cmp	r4, r0
 800c824:	4607      	mov	r7, r0
 800c826:	d802      	bhi.n	800c82e <_realloc_r+0x34>
 800c828:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c82c:	d812      	bhi.n	800c854 <_realloc_r+0x5a>
 800c82e:	4621      	mov	r1, r4
 800c830:	4640      	mov	r0, r8
 800c832:	f7fe fe9b 	bl	800b56c <_malloc_r>
 800c836:	4605      	mov	r5, r0
 800c838:	2800      	cmp	r0, #0
 800c83a:	d0ed      	beq.n	800c818 <_realloc_r+0x1e>
 800c83c:	42bc      	cmp	r4, r7
 800c83e:	4622      	mov	r2, r4
 800c840:	4631      	mov	r1, r6
 800c842:	bf28      	it	cs
 800c844:	463a      	movcs	r2, r7
 800c846:	f7fe fa91 	bl	800ad6c <memcpy>
 800c84a:	4631      	mov	r1, r6
 800c84c:	4640      	mov	r0, r8
 800c84e:	f7fe fac1 	bl	800add4 <_free_r>
 800c852:	e7e1      	b.n	800c818 <_realloc_r+0x1e>
 800c854:	4635      	mov	r5, r6
 800c856:	e7df      	b.n	800c818 <_realloc_r+0x1e>

0800c858 <__sfputc_r>:
 800c858:	6893      	ldr	r3, [r2, #8]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	b410      	push	{r4}
 800c860:	6093      	str	r3, [r2, #8]
 800c862:	da08      	bge.n	800c876 <__sfputc_r+0x1e>
 800c864:	6994      	ldr	r4, [r2, #24]
 800c866:	42a3      	cmp	r3, r4
 800c868:	db01      	blt.n	800c86e <__sfputc_r+0x16>
 800c86a:	290a      	cmp	r1, #10
 800c86c:	d103      	bne.n	800c876 <__sfputc_r+0x1e>
 800c86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c872:	f000 b935 	b.w	800cae0 <__swbuf_r>
 800c876:	6813      	ldr	r3, [r2, #0]
 800c878:	1c58      	adds	r0, r3, #1
 800c87a:	6010      	str	r0, [r2, #0]
 800c87c:	7019      	strb	r1, [r3, #0]
 800c87e:	4608      	mov	r0, r1
 800c880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <__sfputs_r>:
 800c886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c888:	4606      	mov	r6, r0
 800c88a:	460f      	mov	r7, r1
 800c88c:	4614      	mov	r4, r2
 800c88e:	18d5      	adds	r5, r2, r3
 800c890:	42ac      	cmp	r4, r5
 800c892:	d101      	bne.n	800c898 <__sfputs_r+0x12>
 800c894:	2000      	movs	r0, #0
 800c896:	e007      	b.n	800c8a8 <__sfputs_r+0x22>
 800c898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89c:	463a      	mov	r2, r7
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ffda 	bl	800c858 <__sfputc_r>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d1f3      	bne.n	800c890 <__sfputs_r+0xa>
 800c8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8ac <_vfiprintf_r>:
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	460d      	mov	r5, r1
 800c8b2:	b09d      	sub	sp, #116	; 0x74
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	4698      	mov	r8, r3
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	b118      	cbz	r0, 800c8c4 <_vfiprintf_r+0x18>
 800c8bc:	6a03      	ldr	r3, [r0, #32]
 800c8be:	b90b      	cbnz	r3, 800c8c4 <_vfiprintf_r+0x18>
 800c8c0:	f7fe f8bc 	bl	800aa3c <__sinit>
 800c8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8c6:	07d9      	lsls	r1, r3, #31
 800c8c8:	d405      	bmi.n	800c8d6 <_vfiprintf_r+0x2a>
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	059a      	lsls	r2, r3, #22
 800c8ce:	d402      	bmi.n	800c8d6 <_vfiprintf_r+0x2a>
 800c8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8d2:	f7fe fa49 	bl	800ad68 <__retarget_lock_acquire_recursive>
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	071b      	lsls	r3, r3, #28
 800c8da:	d501      	bpl.n	800c8e0 <_vfiprintf_r+0x34>
 800c8dc:	692b      	ldr	r3, [r5, #16]
 800c8de:	b99b      	cbnz	r3, 800c908 <_vfiprintf_r+0x5c>
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f000 f93a 	bl	800cb5c <__swsetup_r>
 800c8e8:	b170      	cbz	r0, 800c908 <_vfiprintf_r+0x5c>
 800c8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8ec:	07dc      	lsls	r4, r3, #31
 800c8ee:	d504      	bpl.n	800c8fa <_vfiprintf_r+0x4e>
 800c8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f4:	b01d      	add	sp, #116	; 0x74
 800c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fa:	89ab      	ldrh	r3, [r5, #12]
 800c8fc:	0598      	lsls	r0, r3, #22
 800c8fe:	d4f7      	bmi.n	800c8f0 <_vfiprintf_r+0x44>
 800c900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c902:	f7fe fa32 	bl	800ad6a <__retarget_lock_release_recursive>
 800c906:	e7f3      	b.n	800c8f0 <_vfiprintf_r+0x44>
 800c908:	2300      	movs	r3, #0
 800c90a:	9309      	str	r3, [sp, #36]	; 0x24
 800c90c:	2320      	movs	r3, #32
 800c90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c912:	f8cd 800c 	str.w	r8, [sp, #12]
 800c916:	2330      	movs	r3, #48	; 0x30
 800c918:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cacc <_vfiprintf_r+0x220>
 800c91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c920:	f04f 0901 	mov.w	r9, #1
 800c924:	4623      	mov	r3, r4
 800c926:	469a      	mov	sl, r3
 800c928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c92c:	b10a      	cbz	r2, 800c932 <_vfiprintf_r+0x86>
 800c92e:	2a25      	cmp	r2, #37	; 0x25
 800c930:	d1f9      	bne.n	800c926 <_vfiprintf_r+0x7a>
 800c932:	ebba 0b04 	subs.w	fp, sl, r4
 800c936:	d00b      	beq.n	800c950 <_vfiprintf_r+0xa4>
 800c938:	465b      	mov	r3, fp
 800c93a:	4622      	mov	r2, r4
 800c93c:	4629      	mov	r1, r5
 800c93e:	4630      	mov	r0, r6
 800c940:	f7ff ffa1 	bl	800c886 <__sfputs_r>
 800c944:	3001      	adds	r0, #1
 800c946:	f000 80a9 	beq.w	800ca9c <_vfiprintf_r+0x1f0>
 800c94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94c:	445a      	add	r2, fp
 800c94e:	9209      	str	r2, [sp, #36]	; 0x24
 800c950:	f89a 3000 	ldrb.w	r3, [sl]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80a1 	beq.w	800ca9c <_vfiprintf_r+0x1f0>
 800c95a:	2300      	movs	r3, #0
 800c95c:	f04f 32ff 	mov.w	r2, #4294967295
 800c960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c964:	f10a 0a01 	add.w	sl, sl, #1
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	9307      	str	r3, [sp, #28]
 800c96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c970:	931a      	str	r3, [sp, #104]	; 0x68
 800c972:	4654      	mov	r4, sl
 800c974:	2205      	movs	r2, #5
 800c976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97a:	4854      	ldr	r0, [pc, #336]	; (800cacc <_vfiprintf_r+0x220>)
 800c97c:	f7f3 fc30 	bl	80001e0 <memchr>
 800c980:	9a04      	ldr	r2, [sp, #16]
 800c982:	b9d8      	cbnz	r0, 800c9bc <_vfiprintf_r+0x110>
 800c984:	06d1      	lsls	r1, r2, #27
 800c986:	bf44      	itt	mi
 800c988:	2320      	movmi	r3, #32
 800c98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c98e:	0713      	lsls	r3, r2, #28
 800c990:	bf44      	itt	mi
 800c992:	232b      	movmi	r3, #43	; 0x2b
 800c994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c998:	f89a 3000 	ldrb.w	r3, [sl]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d015      	beq.n	800c9cc <_vfiprintf_r+0x120>
 800c9a0:	9a07      	ldr	r2, [sp, #28]
 800c9a2:	4654      	mov	r4, sl
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f04f 0c0a 	mov.w	ip, #10
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b0:	3b30      	subs	r3, #48	; 0x30
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	d94d      	bls.n	800ca52 <_vfiprintf_r+0x1a6>
 800c9b6:	b1b0      	cbz	r0, 800c9e6 <_vfiprintf_r+0x13a>
 800c9b8:	9207      	str	r2, [sp, #28]
 800c9ba:	e014      	b.n	800c9e6 <_vfiprintf_r+0x13a>
 800c9bc:	eba0 0308 	sub.w	r3, r0, r8
 800c9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	9304      	str	r3, [sp, #16]
 800c9c8:	46a2      	mov	sl, r4
 800c9ca:	e7d2      	b.n	800c972 <_vfiprintf_r+0xc6>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	1d19      	adds	r1, r3, #4
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	9103      	str	r1, [sp, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bfbb      	ittet	lt
 800c9d8:	425b      	neglt	r3, r3
 800c9da:	f042 0202 	orrlt.w	r2, r2, #2
 800c9de:	9307      	strge	r3, [sp, #28]
 800c9e0:	9307      	strlt	r3, [sp, #28]
 800c9e2:	bfb8      	it	lt
 800c9e4:	9204      	strlt	r2, [sp, #16]
 800c9e6:	7823      	ldrb	r3, [r4, #0]
 800c9e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ea:	d10c      	bne.n	800ca06 <_vfiprintf_r+0x15a>
 800c9ec:	7863      	ldrb	r3, [r4, #1]
 800c9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f0:	d134      	bne.n	800ca5c <_vfiprintf_r+0x1b0>
 800c9f2:	9b03      	ldr	r3, [sp, #12]
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	9203      	str	r2, [sp, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bfb8      	it	lt
 800c9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca02:	3402      	adds	r4, #2
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cadc <_vfiprintf_r+0x230>
 800ca0a:	7821      	ldrb	r1, [r4, #0]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	4650      	mov	r0, sl
 800ca10:	f7f3 fbe6 	bl	80001e0 <memchr>
 800ca14:	b138      	cbz	r0, 800ca26 <_vfiprintf_r+0x17a>
 800ca16:	9b04      	ldr	r3, [sp, #16]
 800ca18:	eba0 000a 	sub.w	r0, r0, sl
 800ca1c:	2240      	movs	r2, #64	; 0x40
 800ca1e:	4082      	lsls	r2, r0
 800ca20:	4313      	orrs	r3, r2
 800ca22:	3401      	adds	r4, #1
 800ca24:	9304      	str	r3, [sp, #16]
 800ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2a:	4829      	ldr	r0, [pc, #164]	; (800cad0 <_vfiprintf_r+0x224>)
 800ca2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca30:	2206      	movs	r2, #6
 800ca32:	f7f3 fbd5 	bl	80001e0 <memchr>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d03f      	beq.n	800caba <_vfiprintf_r+0x20e>
 800ca3a:	4b26      	ldr	r3, [pc, #152]	; (800cad4 <_vfiprintf_r+0x228>)
 800ca3c:	bb1b      	cbnz	r3, 800ca86 <_vfiprintf_r+0x1da>
 800ca3e:	9b03      	ldr	r3, [sp, #12]
 800ca40:	3307      	adds	r3, #7
 800ca42:	f023 0307 	bic.w	r3, r3, #7
 800ca46:	3308      	adds	r3, #8
 800ca48:	9303      	str	r3, [sp, #12]
 800ca4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4c:	443b      	add	r3, r7
 800ca4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca50:	e768      	b.n	800c924 <_vfiprintf_r+0x78>
 800ca52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca56:	460c      	mov	r4, r1
 800ca58:	2001      	movs	r0, #1
 800ca5a:	e7a6      	b.n	800c9aa <_vfiprintf_r+0xfe>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	3401      	adds	r4, #1
 800ca60:	9305      	str	r3, [sp, #20]
 800ca62:	4619      	mov	r1, r3
 800ca64:	f04f 0c0a 	mov.w	ip, #10
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca6e:	3a30      	subs	r2, #48	; 0x30
 800ca70:	2a09      	cmp	r2, #9
 800ca72:	d903      	bls.n	800ca7c <_vfiprintf_r+0x1d0>
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d0c6      	beq.n	800ca06 <_vfiprintf_r+0x15a>
 800ca78:	9105      	str	r1, [sp, #20]
 800ca7a:	e7c4      	b.n	800ca06 <_vfiprintf_r+0x15a>
 800ca7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca80:	4604      	mov	r4, r0
 800ca82:	2301      	movs	r3, #1
 800ca84:	e7f0      	b.n	800ca68 <_vfiprintf_r+0x1bc>
 800ca86:	ab03      	add	r3, sp, #12
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4b12      	ldr	r3, [pc, #72]	; (800cad8 <_vfiprintf_r+0x22c>)
 800ca8e:	a904      	add	r1, sp, #16
 800ca90:	4630      	mov	r0, r6
 800ca92:	f3af 8000 	nop.w
 800ca96:	4607      	mov	r7, r0
 800ca98:	1c78      	adds	r0, r7, #1
 800ca9a:	d1d6      	bne.n	800ca4a <_vfiprintf_r+0x19e>
 800ca9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca9e:	07d9      	lsls	r1, r3, #31
 800caa0:	d405      	bmi.n	800caae <_vfiprintf_r+0x202>
 800caa2:	89ab      	ldrh	r3, [r5, #12]
 800caa4:	059a      	lsls	r2, r3, #22
 800caa6:	d402      	bmi.n	800caae <_vfiprintf_r+0x202>
 800caa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caaa:	f7fe f95e 	bl	800ad6a <__retarget_lock_release_recursive>
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	065b      	lsls	r3, r3, #25
 800cab2:	f53f af1d 	bmi.w	800c8f0 <_vfiprintf_r+0x44>
 800cab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cab8:	e71c      	b.n	800c8f4 <_vfiprintf_r+0x48>
 800caba:	ab03      	add	r3, sp, #12
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	462a      	mov	r2, r5
 800cac0:	4b05      	ldr	r3, [pc, #20]	; (800cad8 <_vfiprintf_r+0x22c>)
 800cac2:	a904      	add	r1, sp, #16
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7ff fc6f 	bl	800c3a8 <_printf_i>
 800caca:	e7e4      	b.n	800ca96 <_vfiprintf_r+0x1ea>
 800cacc:	0800de5d 	.word	0x0800de5d
 800cad0:	0800de67 	.word	0x0800de67
 800cad4:	00000000 	.word	0x00000000
 800cad8:	0800c887 	.word	0x0800c887
 800cadc:	0800de63 	.word	0x0800de63

0800cae0 <__swbuf_r>:
 800cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae2:	460e      	mov	r6, r1
 800cae4:	4614      	mov	r4, r2
 800cae6:	4605      	mov	r5, r0
 800cae8:	b118      	cbz	r0, 800caf2 <__swbuf_r+0x12>
 800caea:	6a03      	ldr	r3, [r0, #32]
 800caec:	b90b      	cbnz	r3, 800caf2 <__swbuf_r+0x12>
 800caee:	f7fd ffa5 	bl	800aa3c <__sinit>
 800caf2:	69a3      	ldr	r3, [r4, #24]
 800caf4:	60a3      	str	r3, [r4, #8]
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	071a      	lsls	r2, r3, #28
 800cafa:	d525      	bpl.n	800cb48 <__swbuf_r+0x68>
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	b31b      	cbz	r3, 800cb48 <__swbuf_r+0x68>
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	6922      	ldr	r2, [r4, #16]
 800cb04:	1a98      	subs	r0, r3, r2
 800cb06:	6963      	ldr	r3, [r4, #20]
 800cb08:	b2f6      	uxtb	r6, r6
 800cb0a:	4283      	cmp	r3, r0
 800cb0c:	4637      	mov	r7, r6
 800cb0e:	dc04      	bgt.n	800cb1a <__swbuf_r+0x3a>
 800cb10:	4621      	mov	r1, r4
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7ff fdf0 	bl	800c6f8 <_fflush_r>
 800cb18:	b9e0      	cbnz	r0, 800cb54 <__swbuf_r+0x74>
 800cb1a:	68a3      	ldr	r3, [r4, #8]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	60a3      	str	r3, [r4, #8]
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	6022      	str	r2, [r4, #0]
 800cb26:	701e      	strb	r6, [r3, #0]
 800cb28:	6962      	ldr	r2, [r4, #20]
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d004      	beq.n	800cb3a <__swbuf_r+0x5a>
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	07db      	lsls	r3, r3, #31
 800cb34:	d506      	bpl.n	800cb44 <__swbuf_r+0x64>
 800cb36:	2e0a      	cmp	r6, #10
 800cb38:	d104      	bne.n	800cb44 <__swbuf_r+0x64>
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f7ff fddb 	bl	800c6f8 <_fflush_r>
 800cb42:	b938      	cbnz	r0, 800cb54 <__swbuf_r+0x74>
 800cb44:	4638      	mov	r0, r7
 800cb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb48:	4621      	mov	r1, r4
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f000 f806 	bl	800cb5c <__swsetup_r>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d0d5      	beq.n	800cb00 <__swbuf_r+0x20>
 800cb54:	f04f 37ff 	mov.w	r7, #4294967295
 800cb58:	e7f4      	b.n	800cb44 <__swbuf_r+0x64>
	...

0800cb5c <__swsetup_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4b2a      	ldr	r3, [pc, #168]	; (800cc08 <__swsetup_r+0xac>)
 800cb60:	4605      	mov	r5, r0
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	460c      	mov	r4, r1
 800cb66:	b118      	cbz	r0, 800cb70 <__swsetup_r+0x14>
 800cb68:	6a03      	ldr	r3, [r0, #32]
 800cb6a:	b90b      	cbnz	r3, 800cb70 <__swsetup_r+0x14>
 800cb6c:	f7fd ff66 	bl	800aa3c <__sinit>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb76:	0718      	lsls	r0, r3, #28
 800cb78:	d422      	bmi.n	800cbc0 <__swsetup_r+0x64>
 800cb7a:	06d9      	lsls	r1, r3, #27
 800cb7c:	d407      	bmi.n	800cb8e <__swsetup_r+0x32>
 800cb7e:	2309      	movs	r3, #9
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	e034      	b.n	800cbf8 <__swsetup_r+0x9c>
 800cb8e:	0758      	lsls	r0, r3, #29
 800cb90:	d512      	bpl.n	800cbb8 <__swsetup_r+0x5c>
 800cb92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb94:	b141      	cbz	r1, 800cba8 <__swsetup_r+0x4c>
 800cb96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb9a:	4299      	cmp	r1, r3
 800cb9c:	d002      	beq.n	800cba4 <__swsetup_r+0x48>
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f7fe f918 	bl	800add4 <_free_r>
 800cba4:	2300      	movs	r3, #0
 800cba6:	6363      	str	r3, [r4, #52]	; 0x34
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	6063      	str	r3, [r4, #4]
 800cbb4:	6923      	ldr	r3, [r4, #16]
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	f043 0308 	orr.w	r3, r3, #8
 800cbbe:	81a3      	strh	r3, [r4, #12]
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	b94b      	cbnz	r3, 800cbd8 <__swsetup_r+0x7c>
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbce:	d003      	beq.n	800cbd8 <__swsetup_r+0x7c>
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f000 f88c 	bl	800ccf0 <__smakebuf_r>
 800cbd8:	89a0      	ldrh	r0, [r4, #12]
 800cbda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbde:	f010 0301 	ands.w	r3, r0, #1
 800cbe2:	d00a      	beq.n	800cbfa <__swsetup_r+0x9e>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	60a3      	str	r3, [r4, #8]
 800cbe8:	6963      	ldr	r3, [r4, #20]
 800cbea:	425b      	negs	r3, r3
 800cbec:	61a3      	str	r3, [r4, #24]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	b943      	cbnz	r3, 800cc04 <__swsetup_r+0xa8>
 800cbf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf6:	d1c4      	bne.n	800cb82 <__swsetup_r+0x26>
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	0781      	lsls	r1, r0, #30
 800cbfc:	bf58      	it	pl
 800cbfe:	6963      	ldrpl	r3, [r4, #20]
 800cc00:	60a3      	str	r3, [r4, #8]
 800cc02:	e7f4      	b.n	800cbee <__swsetup_r+0x92>
 800cc04:	2000      	movs	r0, #0
 800cc06:	e7f7      	b.n	800cbf8 <__swsetup_r+0x9c>
 800cc08:	200002c0 	.word	0x200002c0

0800cc0c <_raise_r>:
 800cc0c:	291f      	cmp	r1, #31
 800cc0e:	b538      	push	{r3, r4, r5, lr}
 800cc10:	4604      	mov	r4, r0
 800cc12:	460d      	mov	r5, r1
 800cc14:	d904      	bls.n	800cc20 <_raise_r+0x14>
 800cc16:	2316      	movs	r3, #22
 800cc18:	6003      	str	r3, [r0, #0]
 800cc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cc22:	b112      	cbz	r2, 800cc2a <_raise_r+0x1e>
 800cc24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc28:	b94b      	cbnz	r3, 800cc3e <_raise_r+0x32>
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f830 	bl	800cc90 <_getpid_r>
 800cc30:	462a      	mov	r2, r5
 800cc32:	4601      	mov	r1, r0
 800cc34:	4620      	mov	r0, r4
 800cc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc3a:	f000 b817 	b.w	800cc6c <_kill_r>
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d00a      	beq.n	800cc58 <_raise_r+0x4c>
 800cc42:	1c59      	adds	r1, r3, #1
 800cc44:	d103      	bne.n	800cc4e <_raise_r+0x42>
 800cc46:	2316      	movs	r3, #22
 800cc48:	6003      	str	r3, [r0, #0]
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	e7e7      	b.n	800cc1e <_raise_r+0x12>
 800cc4e:	2400      	movs	r4, #0
 800cc50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc54:	4628      	mov	r0, r5
 800cc56:	4798      	blx	r3
 800cc58:	2000      	movs	r0, #0
 800cc5a:	e7e0      	b.n	800cc1e <_raise_r+0x12>

0800cc5c <raise>:
 800cc5c:	4b02      	ldr	r3, [pc, #8]	; (800cc68 <raise+0xc>)
 800cc5e:	4601      	mov	r1, r0
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f7ff bfd3 	b.w	800cc0c <_raise_r>
 800cc66:	bf00      	nop
 800cc68:	200002c0 	.word	0x200002c0

0800cc6c <_kill_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d07      	ldr	r5, [pc, #28]	; (800cc8c <_kill_r+0x20>)
 800cc70:	2300      	movs	r3, #0
 800cc72:	4604      	mov	r4, r0
 800cc74:	4608      	mov	r0, r1
 800cc76:	4611      	mov	r1, r2
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	f7f4 fed9 	bl	8001a30 <_kill>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d102      	bne.n	800cc88 <_kill_r+0x1c>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	b103      	cbz	r3, 800cc88 <_kill_r+0x1c>
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	bd38      	pop	{r3, r4, r5, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20002148 	.word	0x20002148

0800cc90 <_getpid_r>:
 800cc90:	f7f4 bec6 	b.w	8001a20 <_getpid>

0800cc94 <_malloc_usable_size_r>:
 800cc94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc98:	1f18      	subs	r0, r3, #4
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	bfbc      	itt	lt
 800cc9e:	580b      	ldrlt	r3, [r1, r0]
 800cca0:	18c0      	addlt	r0, r0, r3
 800cca2:	4770      	bx	lr

0800cca4 <__swhatbuf_r>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	460c      	mov	r4, r1
 800cca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccac:	2900      	cmp	r1, #0
 800ccae:	b096      	sub	sp, #88	; 0x58
 800ccb0:	4615      	mov	r5, r2
 800ccb2:	461e      	mov	r6, r3
 800ccb4:	da0d      	bge.n	800ccd2 <__swhatbuf_r+0x2e>
 800ccb6:	89a3      	ldrh	r3, [r4, #12]
 800ccb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ccbc:	f04f 0100 	mov.w	r1, #0
 800ccc0:	bf0c      	ite	eq
 800ccc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ccc6:	2340      	movne	r3, #64	; 0x40
 800ccc8:	2000      	movs	r0, #0
 800ccca:	6031      	str	r1, [r6, #0]
 800cccc:	602b      	str	r3, [r5, #0]
 800ccce:	b016      	add	sp, #88	; 0x58
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}
 800ccd2:	466a      	mov	r2, sp
 800ccd4:	f000 f848 	bl	800cd68 <_fstat_r>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	dbec      	blt.n	800ccb6 <__swhatbuf_r+0x12>
 800ccdc:	9901      	ldr	r1, [sp, #4]
 800ccde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cce2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cce6:	4259      	negs	r1, r3
 800cce8:	4159      	adcs	r1, r3
 800ccea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccee:	e7eb      	b.n	800ccc8 <__swhatbuf_r+0x24>

0800ccf0 <__smakebuf_r>:
 800ccf0:	898b      	ldrh	r3, [r1, #12]
 800ccf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccf4:	079d      	lsls	r5, r3, #30
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	d507      	bpl.n	800cd0c <__smakebuf_r+0x1c>
 800ccfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	2301      	movs	r3, #1
 800cd06:	6163      	str	r3, [r4, #20]
 800cd08:	b002      	add	sp, #8
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
 800cd0c:	ab01      	add	r3, sp, #4
 800cd0e:	466a      	mov	r2, sp
 800cd10:	f7ff ffc8 	bl	800cca4 <__swhatbuf_r>
 800cd14:	9900      	ldr	r1, [sp, #0]
 800cd16:	4605      	mov	r5, r0
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7fe fc27 	bl	800b56c <_malloc_r>
 800cd1e:	b948      	cbnz	r0, 800cd34 <__smakebuf_r+0x44>
 800cd20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd24:	059a      	lsls	r2, r3, #22
 800cd26:	d4ef      	bmi.n	800cd08 <__smakebuf_r+0x18>
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	f043 0302 	orr.w	r3, r3, #2
 800cd30:	81a3      	strh	r3, [r4, #12]
 800cd32:	e7e3      	b.n	800ccfc <__smakebuf_r+0xc>
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	6020      	str	r0, [r4, #0]
 800cd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	9b00      	ldr	r3, [sp, #0]
 800cd40:	6163      	str	r3, [r4, #20]
 800cd42:	9b01      	ldr	r3, [sp, #4]
 800cd44:	6120      	str	r0, [r4, #16]
 800cd46:	b15b      	cbz	r3, 800cd60 <__smakebuf_r+0x70>
 800cd48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	f000 f81d 	bl	800cd8c <_isatty_r>
 800cd52:	b128      	cbz	r0, 800cd60 <__smakebuf_r+0x70>
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	f023 0303 	bic.w	r3, r3, #3
 800cd5a:	f043 0301 	orr.w	r3, r3, #1
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	431d      	orrs	r5, r3
 800cd64:	81a5      	strh	r5, [r4, #12]
 800cd66:	e7cf      	b.n	800cd08 <__smakebuf_r+0x18>

0800cd68 <_fstat_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	; (800cd88 <_fstat_r+0x20>)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	f7f4 feba 	bl	8001aee <_fstat>
 800cd7a:	1c43      	adds	r3, r0, #1
 800cd7c:	d102      	bne.n	800cd84 <_fstat_r+0x1c>
 800cd7e:	682b      	ldr	r3, [r5, #0]
 800cd80:	b103      	cbz	r3, 800cd84 <_fstat_r+0x1c>
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	bf00      	nop
 800cd88:	20002148 	.word	0x20002148

0800cd8c <_isatty_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d06      	ldr	r5, [pc, #24]	; (800cda8 <_isatty_r+0x1c>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	602b      	str	r3, [r5, #0]
 800cd98:	f7f4 feb9 	bl	8001b0e <_isatty>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_isatty_r+0x1a>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_isatty_r+0x1a>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20002148 	.word	0x20002148

0800cdac <asin>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	ed2d 8b02 	vpush	{d8}
 800cdb2:	ec55 4b10 	vmov	r4, r5, d0
 800cdb6:	f000 f93f 	bl	800d038 <__ieee754_asin>
 800cdba:	4622      	mov	r2, r4
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	eeb0 8a40 	vmov.f32	s16, s0
 800cdc6:	eef0 8a60 	vmov.f32	s17, s1
 800cdca:	f7f3 feaf 	bl	8000b2c <__aeabi_dcmpun>
 800cdce:	b9a8      	cbnz	r0, 800cdfc <asin+0x50>
 800cdd0:	ec45 4b10 	vmov	d0, r4, r5
 800cdd4:	f000 f84c 	bl	800ce70 <fabs>
 800cdd8:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <asin+0x60>)
 800cdda:	ec51 0b10 	vmov	r0, r1, d0
 800cdde:	2200      	movs	r2, #0
 800cde0:	f7f3 fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 800cde4:	b150      	cbz	r0, 800cdfc <asin+0x50>
 800cde6:	f7fd ff95 	bl	800ad14 <__errno>
 800cdea:	ecbd 8b02 	vpop	{d8}
 800cdee:	2321      	movs	r3, #33	; 0x21
 800cdf0:	6003      	str	r3, [r0, #0]
 800cdf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdf6:	4806      	ldr	r0, [pc, #24]	; (800ce10 <asin+0x64>)
 800cdf8:	f7fd bfc6 	b.w	800ad88 <nan>
 800cdfc:	eeb0 0a48 	vmov.f32	s0, s16
 800ce00:	eef0 0a68 	vmov.f32	s1, s17
 800ce04:	ecbd 8b02 	vpop	{d8}
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
 800ce0a:	bf00      	nop
 800ce0c:	3ff00000 	.word	0x3ff00000
 800ce10:	0800db94 	.word	0x0800db94

0800ce14 <atan2>:
 800ce14:	f000 bb24 	b.w	800d460 <__ieee754_atan2>

0800ce18 <sqrt>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	ed2d 8b02 	vpush	{d8}
 800ce1e:	ec55 4b10 	vmov	r4, r5, d0
 800ce22:	f000 f82f 	bl	800ce84 <__ieee754_sqrt>
 800ce26:	4622      	mov	r2, r4
 800ce28:	462b      	mov	r3, r5
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	eeb0 8a40 	vmov.f32	s16, s0
 800ce32:	eef0 8a60 	vmov.f32	s17, s1
 800ce36:	f7f3 fe79 	bl	8000b2c <__aeabi_dcmpun>
 800ce3a:	b990      	cbnz	r0, 800ce62 <sqrt+0x4a>
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4620      	mov	r0, r4
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7f3 fe4a 	bl	8000adc <__aeabi_dcmplt>
 800ce48:	b158      	cbz	r0, 800ce62 <sqrt+0x4a>
 800ce4a:	f7fd ff63 	bl	800ad14 <__errno>
 800ce4e:	2321      	movs	r3, #33	; 0x21
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	2200      	movs	r2, #0
 800ce54:	2300      	movs	r3, #0
 800ce56:	4610      	mov	r0, r2
 800ce58:	4619      	mov	r1, r3
 800ce5a:	f7f3 fcf7 	bl	800084c <__aeabi_ddiv>
 800ce5e:	ec41 0b18 	vmov	d8, r0, r1
 800ce62:	eeb0 0a48 	vmov.f32	s0, s16
 800ce66:	eef0 0a68 	vmov.f32	s1, s17
 800ce6a:	ecbd 8b02 	vpop	{d8}
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}

0800ce70 <fabs>:
 800ce70:	ec51 0b10 	vmov	r0, r1, d0
 800ce74:	ee10 2a10 	vmov	r2, s0
 800ce78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce7c:	ec43 2b10 	vmov	d0, r2, r3
 800ce80:	4770      	bx	lr
	...

0800ce84 <__ieee754_sqrt>:
 800ce84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce88:	ec55 4b10 	vmov	r4, r5, d0
 800ce8c:	4e67      	ldr	r6, [pc, #412]	; (800d02c <__ieee754_sqrt+0x1a8>)
 800ce8e:	43ae      	bics	r6, r5
 800ce90:	ee10 0a10 	vmov	r0, s0
 800ce94:	ee10 2a10 	vmov	r2, s0
 800ce98:	4629      	mov	r1, r5
 800ce9a:	462b      	mov	r3, r5
 800ce9c:	d10d      	bne.n	800ceba <__ieee754_sqrt+0x36>
 800ce9e:	f7f3 fbab 	bl	80005f8 <__aeabi_dmul>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 f9ef 	bl	800028c <__adddf3>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	ec45 4b10 	vmov	d0, r4, r5
 800ceb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceba:	2d00      	cmp	r5, #0
 800cebc:	dc0b      	bgt.n	800ced6 <__ieee754_sqrt+0x52>
 800cebe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cec2:	4326      	orrs	r6, r4
 800cec4:	d0f5      	beq.n	800ceb2 <__ieee754_sqrt+0x2e>
 800cec6:	b135      	cbz	r5, 800ced6 <__ieee754_sqrt+0x52>
 800cec8:	f7f3 f9de 	bl	8000288 <__aeabi_dsub>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	f7f3 fcbc 	bl	800084c <__aeabi_ddiv>
 800ced4:	e7eb      	b.n	800ceae <__ieee754_sqrt+0x2a>
 800ced6:	1509      	asrs	r1, r1, #20
 800ced8:	f000 808d 	beq.w	800cff6 <__ieee754_sqrt+0x172>
 800cedc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cee0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cee8:	07c9      	lsls	r1, r1, #31
 800ceea:	bf5c      	itt	pl
 800ceec:	005b      	lslpl	r3, r3, #1
 800ceee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cef2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cef6:	bf58      	it	pl
 800cef8:	0052      	lslpl	r2, r2, #1
 800cefa:	2500      	movs	r5, #0
 800cefc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf00:	1076      	asrs	r6, r6, #1
 800cf02:	0052      	lsls	r2, r2, #1
 800cf04:	f04f 0e16 	mov.w	lr, #22
 800cf08:	46ac      	mov	ip, r5
 800cf0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf0e:	eb0c 0001 	add.w	r0, ip, r1
 800cf12:	4298      	cmp	r0, r3
 800cf14:	bfde      	ittt	le
 800cf16:	1a1b      	suble	r3, r3, r0
 800cf18:	eb00 0c01 	addle.w	ip, r0, r1
 800cf1c:	186d      	addle	r5, r5, r1
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	f1be 0e01 	subs.w	lr, lr, #1
 800cf24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf28:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cf2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cf30:	d1ed      	bne.n	800cf0e <__ieee754_sqrt+0x8a>
 800cf32:	4674      	mov	r4, lr
 800cf34:	2720      	movs	r7, #32
 800cf36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cf3a:	4563      	cmp	r3, ip
 800cf3c:	eb01 000e 	add.w	r0, r1, lr
 800cf40:	dc02      	bgt.n	800cf48 <__ieee754_sqrt+0xc4>
 800cf42:	d113      	bne.n	800cf6c <__ieee754_sqrt+0xe8>
 800cf44:	4290      	cmp	r0, r2
 800cf46:	d811      	bhi.n	800cf6c <__ieee754_sqrt+0xe8>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	eb00 0e01 	add.w	lr, r0, r1
 800cf4e:	da57      	bge.n	800d000 <__ieee754_sqrt+0x17c>
 800cf50:	f1be 0f00 	cmp.w	lr, #0
 800cf54:	db54      	blt.n	800d000 <__ieee754_sqrt+0x17c>
 800cf56:	f10c 0801 	add.w	r8, ip, #1
 800cf5a:	eba3 030c 	sub.w	r3, r3, ip
 800cf5e:	4290      	cmp	r0, r2
 800cf60:	bf88      	it	hi
 800cf62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cf66:	1a12      	subs	r2, r2, r0
 800cf68:	440c      	add	r4, r1
 800cf6a:	46c4      	mov	ip, r8
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	3f01      	subs	r7, #1
 800cf70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf74:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cf78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cf7c:	d1dd      	bne.n	800cf3a <__ieee754_sqrt+0xb6>
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	d01b      	beq.n	800cfba <__ieee754_sqrt+0x136>
 800cf82:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d030 <__ieee754_sqrt+0x1ac>
 800cf86:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d034 <__ieee754_sqrt+0x1b0>
 800cf8a:	e9da 0100 	ldrd	r0, r1, [sl]
 800cf8e:	e9db 2300 	ldrd	r2, r3, [fp]
 800cf92:	f7f3 f979 	bl	8000288 <__aeabi_dsub>
 800cf96:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4640      	mov	r0, r8
 800cfa0:	4649      	mov	r1, r9
 800cfa2:	f7f3 fda5 	bl	8000af0 <__aeabi_dcmple>
 800cfa6:	b140      	cbz	r0, 800cfba <__ieee754_sqrt+0x136>
 800cfa8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cfac:	e9da 0100 	ldrd	r0, r1, [sl]
 800cfb0:	e9db 2300 	ldrd	r2, r3, [fp]
 800cfb4:	d126      	bne.n	800d004 <__ieee754_sqrt+0x180>
 800cfb6:	3501      	adds	r5, #1
 800cfb8:	463c      	mov	r4, r7
 800cfba:	106a      	asrs	r2, r5, #1
 800cfbc:	0863      	lsrs	r3, r4, #1
 800cfbe:	07e9      	lsls	r1, r5, #31
 800cfc0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cfc4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cfc8:	bf48      	it	mi
 800cfca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cfce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800cfd2:	461c      	mov	r4, r3
 800cfd4:	e76d      	b.n	800ceb2 <__ieee754_sqrt+0x2e>
 800cfd6:	0ad3      	lsrs	r3, r2, #11
 800cfd8:	3815      	subs	r0, #21
 800cfda:	0552      	lsls	r2, r2, #21
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0fa      	beq.n	800cfd6 <__ieee754_sqrt+0x152>
 800cfe0:	02dc      	lsls	r4, r3, #11
 800cfe2:	d50a      	bpl.n	800cffa <__ieee754_sqrt+0x176>
 800cfe4:	f1c1 0420 	rsb	r4, r1, #32
 800cfe8:	fa22 f404 	lsr.w	r4, r2, r4
 800cfec:	1e4d      	subs	r5, r1, #1
 800cfee:	408a      	lsls	r2, r1
 800cff0:	4323      	orrs	r3, r4
 800cff2:	1b41      	subs	r1, r0, r5
 800cff4:	e772      	b.n	800cedc <__ieee754_sqrt+0x58>
 800cff6:	4608      	mov	r0, r1
 800cff8:	e7f0      	b.n	800cfdc <__ieee754_sqrt+0x158>
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	3101      	adds	r1, #1
 800cffe:	e7ef      	b.n	800cfe0 <__ieee754_sqrt+0x15c>
 800d000:	46e0      	mov	r8, ip
 800d002:	e7aa      	b.n	800cf5a <__ieee754_sqrt+0xd6>
 800d004:	f7f3 f942 	bl	800028c <__adddf3>
 800d008:	e9da 8900 	ldrd	r8, r9, [sl]
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4640      	mov	r0, r8
 800d012:	4649      	mov	r1, r9
 800d014:	f7f3 fd62 	bl	8000adc <__aeabi_dcmplt>
 800d018:	b120      	cbz	r0, 800d024 <__ieee754_sqrt+0x1a0>
 800d01a:	1ca0      	adds	r0, r4, #2
 800d01c:	bf08      	it	eq
 800d01e:	3501      	addeq	r5, #1
 800d020:	3402      	adds	r4, #2
 800d022:	e7ca      	b.n	800cfba <__ieee754_sqrt+0x136>
 800d024:	3401      	adds	r4, #1
 800d026:	f024 0401 	bic.w	r4, r4, #1
 800d02a:	e7c6      	b.n	800cfba <__ieee754_sqrt+0x136>
 800d02c:	7ff00000 	.word	0x7ff00000
 800d030:	200002c8 	.word	0x200002c8
 800d034:	200002d0 	.word	0x200002d0

0800d038 <__ieee754_asin>:
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	ed2d 8b04 	vpush	{d8-d9}
 800d040:	ec55 4b10 	vmov	r4, r5, d0
 800d044:	4bcc      	ldr	r3, [pc, #816]	; (800d378 <__ieee754_asin+0x340>)
 800d046:	b083      	sub	sp, #12
 800d048:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d04c:	4598      	cmp	r8, r3
 800d04e:	9501      	str	r5, [sp, #4]
 800d050:	dd33      	ble.n	800d0ba <__ieee754_asin+0x82>
 800d052:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800d056:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800d05a:	ea58 0804 	orrs.w	r8, r8, r4
 800d05e:	d117      	bne.n	800d090 <__ieee754_asin+0x58>
 800d060:	a3ab      	add	r3, pc, #684	; (adr r3, 800d310 <__ieee754_asin+0x2d8>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	ee10 0a10 	vmov	r0, s0
 800d06a:	4629      	mov	r1, r5
 800d06c:	f7f3 fac4 	bl	80005f8 <__aeabi_dmul>
 800d070:	a3a9      	add	r3, pc, #676	; (adr r3, 800d318 <__ieee754_asin+0x2e0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	4620      	mov	r0, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	f7f3 fabb 	bl	80005f8 <__aeabi_dmul>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4630      	mov	r0, r6
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 f8ff 	bl	800028c <__adddf3>
 800d08e:	e00b      	b.n	800d0a8 <__ieee754_asin+0x70>
 800d090:	ee10 2a10 	vmov	r2, s0
 800d094:	462b      	mov	r3, r5
 800d096:	ee10 0a10 	vmov	r0, s0
 800d09a:	4629      	mov	r1, r5
 800d09c:	f7f3 f8f4 	bl	8000288 <__aeabi_dsub>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	f7f3 fbd2 	bl	800084c <__aeabi_ddiv>
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	ec45 4b10 	vmov	d0, r4, r5
 800d0b0:	b003      	add	sp, #12
 800d0b2:	ecbd 8b04 	vpop	{d8-d9}
 800d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ba:	4bb0      	ldr	r3, [pc, #704]	; (800d37c <__ieee754_asin+0x344>)
 800d0bc:	4598      	cmp	r8, r3
 800d0be:	dc11      	bgt.n	800d0e4 <__ieee754_asin+0xac>
 800d0c0:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d0c4:	f280 80ae 	bge.w	800d224 <__ieee754_asin+0x1ec>
 800d0c8:	a395      	add	r3, pc, #596	; (adr r3, 800d320 <__ieee754_asin+0x2e8>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	ee10 0a10 	vmov	r0, s0
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	f7f3 f8da 	bl	800028c <__adddf3>
 800d0d8:	4ba9      	ldr	r3, [pc, #676]	; (800d380 <__ieee754_asin+0x348>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f7f3 fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d1e3      	bne.n	800d0ac <__ieee754_asin+0x74>
 800d0e4:	ec45 4b10 	vmov	d0, r4, r5
 800d0e8:	f7ff fec2 	bl	800ce70 <fabs>
 800d0ec:	49a4      	ldr	r1, [pc, #656]	; (800d380 <__ieee754_asin+0x348>)
 800d0ee:	ec53 2b10 	vmov	r2, r3, d0
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	f7f3 f8c8 	bl	8000288 <__aeabi_dsub>
 800d0f8:	4ba2      	ldr	r3, [pc, #648]	; (800d384 <__ieee754_asin+0x34c>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	a389      	add	r3, pc, #548	; (adr r3, 800d328 <__ieee754_asin+0x2f0>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	4604      	mov	r4, r0
 800d108:	460d      	mov	r5, r1
 800d10a:	f7f3 fa75 	bl	80005f8 <__aeabi_dmul>
 800d10e:	a388      	add	r3, pc, #544	; (adr r3, 800d330 <__ieee754_asin+0x2f8>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f8ba 	bl	800028c <__adddf3>
 800d118:	4622      	mov	r2, r4
 800d11a:	462b      	mov	r3, r5
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	a385      	add	r3, pc, #532	; (adr r3, 800d338 <__ieee754_asin+0x300>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 f8af 	bl	8000288 <__aeabi_dsub>
 800d12a:	4622      	mov	r2, r4
 800d12c:	462b      	mov	r3, r5
 800d12e:	f7f3 fa63 	bl	80005f8 <__aeabi_dmul>
 800d132:	a383      	add	r3, pc, #524	; (adr r3, 800d340 <__ieee754_asin+0x308>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 f8a8 	bl	800028c <__adddf3>
 800d13c:	4622      	mov	r2, r4
 800d13e:	462b      	mov	r3, r5
 800d140:	f7f3 fa5a 	bl	80005f8 <__aeabi_dmul>
 800d144:	a380      	add	r3, pc, #512	; (adr r3, 800d348 <__ieee754_asin+0x310>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7f3 f89d 	bl	8000288 <__aeabi_dsub>
 800d14e:	4622      	mov	r2, r4
 800d150:	462b      	mov	r3, r5
 800d152:	f7f3 fa51 	bl	80005f8 <__aeabi_dmul>
 800d156:	a37e      	add	r3, pc, #504	; (adr r3, 800d350 <__ieee754_asin+0x318>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	f7f3 f896 	bl	800028c <__adddf3>
 800d160:	4622      	mov	r2, r4
 800d162:	462b      	mov	r3, r5
 800d164:	f7f3 fa48 	bl	80005f8 <__aeabi_dmul>
 800d168:	a37b      	add	r3, pc, #492	; (adr r3, 800d358 <__ieee754_asin+0x320>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	ec41 0b18 	vmov	d8, r0, r1
 800d172:	4620      	mov	r0, r4
 800d174:	4629      	mov	r1, r5
 800d176:	f7f3 fa3f 	bl	80005f8 <__aeabi_dmul>
 800d17a:	a379      	add	r3, pc, #484	; (adr r3, 800d360 <__ieee754_asin+0x328>)
 800d17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d180:	f7f3 f882 	bl	8000288 <__aeabi_dsub>
 800d184:	4622      	mov	r2, r4
 800d186:	462b      	mov	r3, r5
 800d188:	f7f3 fa36 	bl	80005f8 <__aeabi_dmul>
 800d18c:	a376      	add	r3, pc, #472	; (adr r3, 800d368 <__ieee754_asin+0x330>)
 800d18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d192:	f7f3 f87b 	bl	800028c <__adddf3>
 800d196:	4622      	mov	r2, r4
 800d198:	462b      	mov	r3, r5
 800d19a:	f7f3 fa2d 	bl	80005f8 <__aeabi_dmul>
 800d19e:	a374      	add	r3, pc, #464	; (adr r3, 800d370 <__ieee754_asin+0x338>)
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	f7f3 f870 	bl	8000288 <__aeabi_dsub>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	462b      	mov	r3, r5
 800d1ac:	f7f3 fa24 	bl	80005f8 <__aeabi_dmul>
 800d1b0:	4b73      	ldr	r3, [pc, #460]	; (800d380 <__ieee754_asin+0x348>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f7f3 f86a 	bl	800028c <__adddf3>
 800d1b8:	ec45 4b10 	vmov	d0, r4, r5
 800d1bc:	4606      	mov	r6, r0
 800d1be:	460f      	mov	r7, r1
 800d1c0:	f7ff fe60 	bl	800ce84 <__ieee754_sqrt>
 800d1c4:	4b70      	ldr	r3, [pc, #448]	; (800d388 <__ieee754_asin+0x350>)
 800d1c6:	4598      	cmp	r8, r3
 800d1c8:	ec5b ab10 	vmov	sl, fp, d0
 800d1cc:	f340 80de 	ble.w	800d38c <__ieee754_asin+0x354>
 800d1d0:	4632      	mov	r2, r6
 800d1d2:	463b      	mov	r3, r7
 800d1d4:	ec51 0b18 	vmov	r0, r1, d8
 800d1d8:	f7f3 fb38 	bl	800084c <__aeabi_ddiv>
 800d1dc:	4652      	mov	r2, sl
 800d1de:	465b      	mov	r3, fp
 800d1e0:	f7f3 fa0a 	bl	80005f8 <__aeabi_dmul>
 800d1e4:	4652      	mov	r2, sl
 800d1e6:	465b      	mov	r3, fp
 800d1e8:	f7f3 f850 	bl	800028c <__adddf3>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	f7f3 f84c 	bl	800028c <__adddf3>
 800d1f4:	a348      	add	r3, pc, #288	; (adr r3, 800d318 <__ieee754_asin+0x2e0>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f3 f845 	bl	8000288 <__aeabi_dsub>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	a143      	add	r1, pc, #268	; (adr r1, 800d310 <__ieee754_asin+0x2d8>)
 800d204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d208:	f7f3 f83e 	bl	8000288 <__aeabi_dsub>
 800d20c:	9b01      	ldr	r3, [sp, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	bfdc      	itt	le
 800d212:	4602      	movle	r2, r0
 800d214:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800d218:	4604      	mov	r4, r0
 800d21a:	460d      	mov	r5, r1
 800d21c:	bfdc      	itt	le
 800d21e:	4614      	movle	r4, r2
 800d220:	461d      	movle	r5, r3
 800d222:	e743      	b.n	800d0ac <__ieee754_asin+0x74>
 800d224:	ee10 2a10 	vmov	r2, s0
 800d228:	ee10 0a10 	vmov	r0, s0
 800d22c:	462b      	mov	r3, r5
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 f9e2 	bl	80005f8 <__aeabi_dmul>
 800d234:	a33c      	add	r3, pc, #240	; (adr r3, 800d328 <__ieee754_asin+0x2f0>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	4606      	mov	r6, r0
 800d23c:	460f      	mov	r7, r1
 800d23e:	f7f3 f9db 	bl	80005f8 <__aeabi_dmul>
 800d242:	a33b      	add	r3, pc, #236	; (adr r3, 800d330 <__ieee754_asin+0x2f8>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f820 	bl	800028c <__adddf3>
 800d24c:	4632      	mov	r2, r6
 800d24e:	463b      	mov	r3, r7
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	a338      	add	r3, pc, #224	; (adr r3, 800d338 <__ieee754_asin+0x300>)
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f7f3 f815 	bl	8000288 <__aeabi_dsub>
 800d25e:	4632      	mov	r2, r6
 800d260:	463b      	mov	r3, r7
 800d262:	f7f3 f9c9 	bl	80005f8 <__aeabi_dmul>
 800d266:	a336      	add	r3, pc, #216	; (adr r3, 800d340 <__ieee754_asin+0x308>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f80e 	bl	800028c <__adddf3>
 800d270:	4632      	mov	r2, r6
 800d272:	463b      	mov	r3, r7
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	a333      	add	r3, pc, #204	; (adr r3, 800d348 <__ieee754_asin+0x310>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f803 	bl	8000288 <__aeabi_dsub>
 800d282:	4632      	mov	r2, r6
 800d284:	463b      	mov	r3, r7
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	a331      	add	r3, pc, #196	; (adr r3, 800d350 <__ieee754_asin+0x318>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	f7f2 fffc 	bl	800028c <__adddf3>
 800d294:	4632      	mov	r2, r6
 800d296:	463b      	mov	r3, r7
 800d298:	f7f3 f9ae 	bl	80005f8 <__aeabi_dmul>
 800d29c:	a32e      	add	r3, pc, #184	; (adr r3, 800d358 <__ieee754_asin+0x320>)
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	4680      	mov	r8, r0
 800d2a4:	4689      	mov	r9, r1
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	f7f3 f9a5 	bl	80005f8 <__aeabi_dmul>
 800d2ae:	a32c      	add	r3, pc, #176	; (adr r3, 800d360 <__ieee754_asin+0x328>)
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	f7f2 ffe8 	bl	8000288 <__aeabi_dsub>
 800d2b8:	4632      	mov	r2, r6
 800d2ba:	463b      	mov	r3, r7
 800d2bc:	f7f3 f99c 	bl	80005f8 <__aeabi_dmul>
 800d2c0:	a329      	add	r3, pc, #164	; (adr r3, 800d368 <__ieee754_asin+0x330>)
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	f7f2 ffe1 	bl	800028c <__adddf3>
 800d2ca:	4632      	mov	r2, r6
 800d2cc:	463b      	mov	r3, r7
 800d2ce:	f7f3 f993 	bl	80005f8 <__aeabi_dmul>
 800d2d2:	a327      	add	r3, pc, #156	; (adr r3, 800d370 <__ieee754_asin+0x338>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	f7f2 ffd6 	bl	8000288 <__aeabi_dsub>
 800d2dc:	4632      	mov	r2, r6
 800d2de:	463b      	mov	r3, r7
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	4b26      	ldr	r3, [pc, #152]	; (800d380 <__ieee754_asin+0x348>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f7f2 ffd0 	bl	800028c <__adddf3>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	4649      	mov	r1, r9
 800d2f4:	f7f3 faaa 	bl	800084c <__aeabi_ddiv>
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	462b      	mov	r3, r5
 800d2fc:	f7f3 f97c 	bl	80005f8 <__aeabi_dmul>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4620      	mov	r0, r4
 800d306:	4629      	mov	r1, r5
 800d308:	e6bf      	b.n	800d08a <__ieee754_asin+0x52>
 800d30a:	bf00      	nop
 800d30c:	f3af 8000 	nop.w
 800d310:	54442d18 	.word	0x54442d18
 800d314:	3ff921fb 	.word	0x3ff921fb
 800d318:	33145c07 	.word	0x33145c07
 800d31c:	3c91a626 	.word	0x3c91a626
 800d320:	8800759c 	.word	0x8800759c
 800d324:	7e37e43c 	.word	0x7e37e43c
 800d328:	0dfdf709 	.word	0x0dfdf709
 800d32c:	3f023de1 	.word	0x3f023de1
 800d330:	7501b288 	.word	0x7501b288
 800d334:	3f49efe0 	.word	0x3f49efe0
 800d338:	b5688f3b 	.word	0xb5688f3b
 800d33c:	3fa48228 	.word	0x3fa48228
 800d340:	0e884455 	.word	0x0e884455
 800d344:	3fc9c155 	.word	0x3fc9c155
 800d348:	03eb6f7d 	.word	0x03eb6f7d
 800d34c:	3fd4d612 	.word	0x3fd4d612
 800d350:	55555555 	.word	0x55555555
 800d354:	3fc55555 	.word	0x3fc55555
 800d358:	b12e9282 	.word	0xb12e9282
 800d35c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d360:	1b8d0159 	.word	0x1b8d0159
 800d364:	3fe6066c 	.word	0x3fe6066c
 800d368:	9c598ac8 	.word	0x9c598ac8
 800d36c:	40002ae5 	.word	0x40002ae5
 800d370:	1c8a2d4b 	.word	0x1c8a2d4b
 800d374:	40033a27 	.word	0x40033a27
 800d378:	3fefffff 	.word	0x3fefffff
 800d37c:	3fdfffff 	.word	0x3fdfffff
 800d380:	3ff00000 	.word	0x3ff00000
 800d384:	3fe00000 	.word	0x3fe00000
 800d388:	3fef3332 	.word	0x3fef3332
 800d38c:	ee10 2a10 	vmov	r2, s0
 800d390:	ee10 0a10 	vmov	r0, s0
 800d394:	465b      	mov	r3, fp
 800d396:	4659      	mov	r1, fp
 800d398:	f7f2 ff78 	bl	800028c <__adddf3>
 800d39c:	4632      	mov	r2, r6
 800d39e:	463b      	mov	r3, r7
 800d3a0:	ec41 0b19 	vmov	d9, r0, r1
 800d3a4:	ec51 0b18 	vmov	r0, r1, d8
 800d3a8:	f7f3 fa50 	bl	800084c <__aeabi_ddiv>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	ec51 0b19 	vmov	r0, r1, d9
 800d3b4:	f7f3 f920 	bl	80005f8 <__aeabi_dmul>
 800d3b8:	f04f 0800 	mov.w	r8, #0
 800d3bc:	4606      	mov	r6, r0
 800d3be:	460f      	mov	r7, r1
 800d3c0:	4642      	mov	r2, r8
 800d3c2:	465b      	mov	r3, fp
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	4659      	mov	r1, fp
 800d3c8:	f7f3 f916 	bl	80005f8 <__aeabi_dmul>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	f7f2 ff58 	bl	8000288 <__aeabi_dsub>
 800d3d8:	4642      	mov	r2, r8
 800d3da:	4604      	mov	r4, r0
 800d3dc:	460d      	mov	r5, r1
 800d3de:	465b      	mov	r3, fp
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	f7f2 ff52 	bl	800028c <__adddf3>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	f7f3 fa2c 	bl	800084c <__aeabi_ddiv>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	f7f2 ff48 	bl	800028c <__adddf3>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	a113      	add	r1, pc, #76	; (adr r1, 800d450 <__ieee754_asin+0x418>)
 800d402:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d406:	f7f2 ff3f 	bl	8000288 <__aeabi_dsub>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	4630      	mov	r0, r6
 800d410:	4639      	mov	r1, r7
 800d412:	f7f2 ff39 	bl	8000288 <__aeabi_dsub>
 800d416:	4642      	mov	r2, r8
 800d418:	4604      	mov	r4, r0
 800d41a:	460d      	mov	r5, r1
 800d41c:	465b      	mov	r3, fp
 800d41e:	4640      	mov	r0, r8
 800d420:	4659      	mov	r1, fp
 800d422:	f7f2 ff33 	bl	800028c <__adddf3>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	a10b      	add	r1, pc, #44	; (adr r1, 800d458 <__ieee754_asin+0x420>)
 800d42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d430:	f7f2 ff2a 	bl	8000288 <__aeabi_dsub>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4620      	mov	r0, r4
 800d43a:	4629      	mov	r1, r5
 800d43c:	f7f2 ff24 	bl	8000288 <__aeabi_dsub>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	a104      	add	r1, pc, #16	; (adr r1, 800d458 <__ieee754_asin+0x420>)
 800d446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d44a:	e6dd      	b.n	800d208 <__ieee754_asin+0x1d0>
 800d44c:	f3af 8000 	nop.w
 800d450:	33145c07 	.word	0x33145c07
 800d454:	3c91a626 	.word	0x3c91a626
 800d458:	54442d18 	.word	0x54442d18
 800d45c:	3fe921fb 	.word	0x3fe921fb

0800d460 <__ieee754_atan2>:
 800d460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d464:	ec57 6b11 	vmov	r6, r7, d1
 800d468:	4273      	negs	r3, r6
 800d46a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d5e8 <__ieee754_atan2+0x188>
 800d46e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d472:	4333      	orrs	r3, r6
 800d474:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d478:	4543      	cmp	r3, r8
 800d47a:	ec51 0b10 	vmov	r0, r1, d0
 800d47e:	ee11 5a10 	vmov	r5, s2
 800d482:	d80a      	bhi.n	800d49a <__ieee754_atan2+0x3a>
 800d484:	4244      	negs	r4, r0
 800d486:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d48a:	4304      	orrs	r4, r0
 800d48c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d490:	4544      	cmp	r4, r8
 800d492:	ee10 9a10 	vmov	r9, s0
 800d496:	468e      	mov	lr, r1
 800d498:	d907      	bls.n	800d4aa <__ieee754_atan2+0x4a>
 800d49a:	4632      	mov	r2, r6
 800d49c:	463b      	mov	r3, r7
 800d49e:	f7f2 fef5 	bl	800028c <__adddf3>
 800d4a2:	ec41 0b10 	vmov	d0, r0, r1
 800d4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d4ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d4b2:	4334      	orrs	r4, r6
 800d4b4:	d103      	bne.n	800d4be <__ieee754_atan2+0x5e>
 800d4b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ba:	f000 b899 	b.w	800d5f0 <atan>
 800d4be:	17bc      	asrs	r4, r7, #30
 800d4c0:	f004 0402 	and.w	r4, r4, #2
 800d4c4:	ea53 0909 	orrs.w	r9, r3, r9
 800d4c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d4cc:	d107      	bne.n	800d4de <__ieee754_atan2+0x7e>
 800d4ce:	2c02      	cmp	r4, #2
 800d4d0:	d05f      	beq.n	800d592 <__ieee754_atan2+0x132>
 800d4d2:	2c03      	cmp	r4, #3
 800d4d4:	d1e5      	bne.n	800d4a2 <__ieee754_atan2+0x42>
 800d4d6:	a140      	add	r1, pc, #256	; (adr r1, 800d5d8 <__ieee754_atan2+0x178>)
 800d4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4dc:	e7e1      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d4de:	4315      	orrs	r5, r2
 800d4e0:	d106      	bne.n	800d4f0 <__ieee754_atan2+0x90>
 800d4e2:	f1be 0f00 	cmp.w	lr, #0
 800d4e6:	da5f      	bge.n	800d5a8 <__ieee754_atan2+0x148>
 800d4e8:	a13d      	add	r1, pc, #244	; (adr r1, 800d5e0 <__ieee754_atan2+0x180>)
 800d4ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4ee:	e7d8      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d4f0:	4542      	cmp	r2, r8
 800d4f2:	d10f      	bne.n	800d514 <__ieee754_atan2+0xb4>
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d4fa:	d107      	bne.n	800d50c <__ieee754_atan2+0xac>
 800d4fc:	2c02      	cmp	r4, #2
 800d4fe:	d84c      	bhi.n	800d59a <__ieee754_atan2+0x13a>
 800d500:	4b33      	ldr	r3, [pc, #204]	; (800d5d0 <__ieee754_atan2+0x170>)
 800d502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d50a:	e7ca      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d50c:	2c02      	cmp	r4, #2
 800d50e:	d848      	bhi.n	800d5a2 <__ieee754_atan2+0x142>
 800d510:	4b30      	ldr	r3, [pc, #192]	; (800d5d4 <__ieee754_atan2+0x174>)
 800d512:	e7f6      	b.n	800d502 <__ieee754_atan2+0xa2>
 800d514:	4543      	cmp	r3, r8
 800d516:	d0e4      	beq.n	800d4e2 <__ieee754_atan2+0x82>
 800d518:	1a9b      	subs	r3, r3, r2
 800d51a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d51e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d522:	da1e      	bge.n	800d562 <__ieee754_atan2+0x102>
 800d524:	2f00      	cmp	r7, #0
 800d526:	da01      	bge.n	800d52c <__ieee754_atan2+0xcc>
 800d528:	323c      	adds	r2, #60	; 0x3c
 800d52a:	db1e      	blt.n	800d56a <__ieee754_atan2+0x10a>
 800d52c:	4632      	mov	r2, r6
 800d52e:	463b      	mov	r3, r7
 800d530:	f7f3 f98c 	bl	800084c <__aeabi_ddiv>
 800d534:	ec41 0b10 	vmov	d0, r0, r1
 800d538:	f7ff fc9a 	bl	800ce70 <fabs>
 800d53c:	f000 f858 	bl	800d5f0 <atan>
 800d540:	ec51 0b10 	vmov	r0, r1, d0
 800d544:	2c01      	cmp	r4, #1
 800d546:	d013      	beq.n	800d570 <__ieee754_atan2+0x110>
 800d548:	2c02      	cmp	r4, #2
 800d54a:	d015      	beq.n	800d578 <__ieee754_atan2+0x118>
 800d54c:	2c00      	cmp	r4, #0
 800d54e:	d0a8      	beq.n	800d4a2 <__ieee754_atan2+0x42>
 800d550:	a317      	add	r3, pc, #92	; (adr r3, 800d5b0 <__ieee754_atan2+0x150>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f2 fe97 	bl	8000288 <__aeabi_dsub>
 800d55a:	a317      	add	r3, pc, #92	; (adr r3, 800d5b8 <__ieee754_atan2+0x158>)
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	e014      	b.n	800d58c <__ieee754_atan2+0x12c>
 800d562:	a117      	add	r1, pc, #92	; (adr r1, 800d5c0 <__ieee754_atan2+0x160>)
 800d564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d568:	e7ec      	b.n	800d544 <__ieee754_atan2+0xe4>
 800d56a:	2000      	movs	r0, #0
 800d56c:	2100      	movs	r1, #0
 800d56e:	e7e9      	b.n	800d544 <__ieee754_atan2+0xe4>
 800d570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d574:	4619      	mov	r1, r3
 800d576:	e794      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d578:	a30d      	add	r3, pc, #52	; (adr r3, 800d5b0 <__ieee754_atan2+0x150>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f2 fe83 	bl	8000288 <__aeabi_dsub>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	a10c      	add	r1, pc, #48	; (adr r1, 800d5b8 <__ieee754_atan2+0x158>)
 800d588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d58c:	f7f2 fe7c 	bl	8000288 <__aeabi_dsub>
 800d590:	e787      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d592:	a109      	add	r1, pc, #36	; (adr r1, 800d5b8 <__ieee754_atan2+0x158>)
 800d594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d598:	e783      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d59a:	a10b      	add	r1, pc, #44	; (adr r1, 800d5c8 <__ieee754_atan2+0x168>)
 800d59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5a0:	e77f      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	e77c      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d5a8:	a105      	add	r1, pc, #20	; (adr r1, 800d5c0 <__ieee754_atan2+0x160>)
 800d5aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ae:	e778      	b.n	800d4a2 <__ieee754_atan2+0x42>
 800d5b0:	33145c07 	.word	0x33145c07
 800d5b4:	3ca1a626 	.word	0x3ca1a626
 800d5b8:	54442d18 	.word	0x54442d18
 800d5bc:	400921fb 	.word	0x400921fb
 800d5c0:	54442d18 	.word	0x54442d18
 800d5c4:	3ff921fb 	.word	0x3ff921fb
 800d5c8:	54442d18 	.word	0x54442d18
 800d5cc:	3fe921fb 	.word	0x3fe921fb
 800d5d0:	0800de90 	.word	0x0800de90
 800d5d4:	0800dea8 	.word	0x0800dea8
 800d5d8:	54442d18 	.word	0x54442d18
 800d5dc:	c00921fb 	.word	0xc00921fb
 800d5e0:	54442d18 	.word	0x54442d18
 800d5e4:	bff921fb 	.word	0xbff921fb
 800d5e8:	7ff00000 	.word	0x7ff00000
 800d5ec:	00000000 	.word	0x00000000

0800d5f0 <atan>:
 800d5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	ec55 4b10 	vmov	r4, r5, d0
 800d5f8:	4bc3      	ldr	r3, [pc, #780]	; (800d908 <atan+0x318>)
 800d5fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d5fe:	429e      	cmp	r6, r3
 800d600:	46ab      	mov	fp, r5
 800d602:	dd18      	ble.n	800d636 <atan+0x46>
 800d604:	4bc1      	ldr	r3, [pc, #772]	; (800d90c <atan+0x31c>)
 800d606:	429e      	cmp	r6, r3
 800d608:	dc01      	bgt.n	800d60e <atan+0x1e>
 800d60a:	d109      	bne.n	800d620 <atan+0x30>
 800d60c:	b144      	cbz	r4, 800d620 <atan+0x30>
 800d60e:	4622      	mov	r2, r4
 800d610:	462b      	mov	r3, r5
 800d612:	4620      	mov	r0, r4
 800d614:	4629      	mov	r1, r5
 800d616:	f7f2 fe39 	bl	800028c <__adddf3>
 800d61a:	4604      	mov	r4, r0
 800d61c:	460d      	mov	r5, r1
 800d61e:	e006      	b.n	800d62e <atan+0x3e>
 800d620:	f1bb 0f00 	cmp.w	fp, #0
 800d624:	f300 8131 	bgt.w	800d88a <atan+0x29a>
 800d628:	a59b      	add	r5, pc, #620	; (adr r5, 800d898 <atan+0x2a8>)
 800d62a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d62e:	ec45 4b10 	vmov	d0, r4, r5
 800d632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d636:	4bb6      	ldr	r3, [pc, #728]	; (800d910 <atan+0x320>)
 800d638:	429e      	cmp	r6, r3
 800d63a:	dc14      	bgt.n	800d666 <atan+0x76>
 800d63c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d640:	429e      	cmp	r6, r3
 800d642:	dc0d      	bgt.n	800d660 <atan+0x70>
 800d644:	a396      	add	r3, pc, #600	; (adr r3, 800d8a0 <atan+0x2b0>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	ee10 0a10 	vmov	r0, s0
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f2 fe1c 	bl	800028c <__adddf3>
 800d654:	4baf      	ldr	r3, [pc, #700]	; (800d914 <atan+0x324>)
 800d656:	2200      	movs	r2, #0
 800d658:	f7f3 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d1e6      	bne.n	800d62e <atan+0x3e>
 800d660:	f04f 3aff 	mov.w	sl, #4294967295
 800d664:	e02b      	b.n	800d6be <atan+0xce>
 800d666:	f7ff fc03 	bl	800ce70 <fabs>
 800d66a:	4bab      	ldr	r3, [pc, #684]	; (800d918 <atan+0x328>)
 800d66c:	429e      	cmp	r6, r3
 800d66e:	ec55 4b10 	vmov	r4, r5, d0
 800d672:	f300 80bf 	bgt.w	800d7f4 <atan+0x204>
 800d676:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d67a:	429e      	cmp	r6, r3
 800d67c:	f300 80a0 	bgt.w	800d7c0 <atan+0x1d0>
 800d680:	ee10 2a10 	vmov	r2, s0
 800d684:	ee10 0a10 	vmov	r0, s0
 800d688:	462b      	mov	r3, r5
 800d68a:	4629      	mov	r1, r5
 800d68c:	f7f2 fdfe 	bl	800028c <__adddf3>
 800d690:	4ba0      	ldr	r3, [pc, #640]	; (800d914 <atan+0x324>)
 800d692:	2200      	movs	r2, #0
 800d694:	f7f2 fdf8 	bl	8000288 <__aeabi_dsub>
 800d698:	2200      	movs	r2, #0
 800d69a:	4606      	mov	r6, r0
 800d69c:	460f      	mov	r7, r1
 800d69e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7f2 fdf1 	bl	800028c <__adddf3>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	f7f3 f8cb 	bl	800084c <__aeabi_ddiv>
 800d6b6:	f04f 0a00 	mov.w	sl, #0
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	460d      	mov	r5, r1
 800d6be:	4622      	mov	r2, r4
 800d6c0:	462b      	mov	r3, r5
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f7f2 ff97 	bl	80005f8 <__aeabi_dmul>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	4689      	mov	r9, r1
 800d6d2:	f7f2 ff91 	bl	80005f8 <__aeabi_dmul>
 800d6d6:	a374      	add	r3, pc, #464	; (adr r3, 800d8a8 <atan+0x2b8>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	4606      	mov	r6, r0
 800d6de:	460f      	mov	r7, r1
 800d6e0:	f7f2 ff8a 	bl	80005f8 <__aeabi_dmul>
 800d6e4:	a372      	add	r3, pc, #456	; (adr r3, 800d8b0 <atan+0x2c0>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	f7f2 fdcf 	bl	800028c <__adddf3>
 800d6ee:	4632      	mov	r2, r6
 800d6f0:	463b      	mov	r3, r7
 800d6f2:	f7f2 ff81 	bl	80005f8 <__aeabi_dmul>
 800d6f6:	a370      	add	r3, pc, #448	; (adr r3, 800d8b8 <atan+0x2c8>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 fdc6 	bl	800028c <__adddf3>
 800d700:	4632      	mov	r2, r6
 800d702:	463b      	mov	r3, r7
 800d704:	f7f2 ff78 	bl	80005f8 <__aeabi_dmul>
 800d708:	a36d      	add	r3, pc, #436	; (adr r3, 800d8c0 <atan+0x2d0>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f2 fdbd 	bl	800028c <__adddf3>
 800d712:	4632      	mov	r2, r6
 800d714:	463b      	mov	r3, r7
 800d716:	f7f2 ff6f 	bl	80005f8 <__aeabi_dmul>
 800d71a:	a36b      	add	r3, pc, #428	; (adr r3, 800d8c8 <atan+0x2d8>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f7f2 fdb4 	bl	800028c <__adddf3>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f2 ff66 	bl	80005f8 <__aeabi_dmul>
 800d72c:	a368      	add	r3, pc, #416	; (adr r3, 800d8d0 <atan+0x2e0>)
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 fdab 	bl	800028c <__adddf3>
 800d736:	4642      	mov	r2, r8
 800d738:	464b      	mov	r3, r9
 800d73a:	f7f2 ff5d 	bl	80005f8 <__aeabi_dmul>
 800d73e:	a366      	add	r3, pc, #408	; (adr r3, 800d8d8 <atan+0x2e8>)
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	4680      	mov	r8, r0
 800d746:	4689      	mov	r9, r1
 800d748:	4630      	mov	r0, r6
 800d74a:	4639      	mov	r1, r7
 800d74c:	f7f2 ff54 	bl	80005f8 <__aeabi_dmul>
 800d750:	a363      	add	r3, pc, #396	; (adr r3, 800d8e0 <atan+0x2f0>)
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	f7f2 fd97 	bl	8000288 <__aeabi_dsub>
 800d75a:	4632      	mov	r2, r6
 800d75c:	463b      	mov	r3, r7
 800d75e:	f7f2 ff4b 	bl	80005f8 <__aeabi_dmul>
 800d762:	a361      	add	r3, pc, #388	; (adr r3, 800d8e8 <atan+0x2f8>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	f7f2 fd8e 	bl	8000288 <__aeabi_dsub>
 800d76c:	4632      	mov	r2, r6
 800d76e:	463b      	mov	r3, r7
 800d770:	f7f2 ff42 	bl	80005f8 <__aeabi_dmul>
 800d774:	a35e      	add	r3, pc, #376	; (adr r3, 800d8f0 <atan+0x300>)
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f7f2 fd85 	bl	8000288 <__aeabi_dsub>
 800d77e:	4632      	mov	r2, r6
 800d780:	463b      	mov	r3, r7
 800d782:	f7f2 ff39 	bl	80005f8 <__aeabi_dmul>
 800d786:	a35c      	add	r3, pc, #368	; (adr r3, 800d8f8 <atan+0x308>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f2 fd7c 	bl	8000288 <__aeabi_dsub>
 800d790:	4632      	mov	r2, r6
 800d792:	463b      	mov	r3, r7
 800d794:	f7f2 ff30 	bl	80005f8 <__aeabi_dmul>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4640      	mov	r0, r8
 800d79e:	4649      	mov	r1, r9
 800d7a0:	f7f2 fd74 	bl	800028c <__adddf3>
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	f7f2 ff26 	bl	80005f8 <__aeabi_dmul>
 800d7ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	d14b      	bne.n	800d84e <atan+0x25e>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f2 fd65 	bl	8000288 <__aeabi_dsub>
 800d7be:	e72c      	b.n	800d61a <atan+0x2a>
 800d7c0:	ee10 0a10 	vmov	r0, s0
 800d7c4:	4b53      	ldr	r3, [pc, #332]	; (800d914 <atan+0x324>)
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	f7f2 fd5d 	bl	8000288 <__aeabi_dsub>
 800d7ce:	4b51      	ldr	r3, [pc, #324]	; (800d914 <atan+0x324>)
 800d7d0:	4606      	mov	r6, r0
 800d7d2:	460f      	mov	r7, r1
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	4629      	mov	r1, r5
 800d7da:	f7f2 fd57 	bl	800028c <__adddf3>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	f7f3 f831 	bl	800084c <__aeabi_ddiv>
 800d7ea:	f04f 0a01 	mov.w	sl, #1
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	460d      	mov	r5, r1
 800d7f2:	e764      	b.n	800d6be <atan+0xce>
 800d7f4:	4b49      	ldr	r3, [pc, #292]	; (800d91c <atan+0x32c>)
 800d7f6:	429e      	cmp	r6, r3
 800d7f8:	da1d      	bge.n	800d836 <atan+0x246>
 800d7fa:	ee10 0a10 	vmov	r0, s0
 800d7fe:	4b48      	ldr	r3, [pc, #288]	; (800d920 <atan+0x330>)
 800d800:	2200      	movs	r2, #0
 800d802:	4629      	mov	r1, r5
 800d804:	f7f2 fd40 	bl	8000288 <__aeabi_dsub>
 800d808:	4b45      	ldr	r3, [pc, #276]	; (800d920 <atan+0x330>)
 800d80a:	4606      	mov	r6, r0
 800d80c:	460f      	mov	r7, r1
 800d80e:	2200      	movs	r2, #0
 800d810:	4620      	mov	r0, r4
 800d812:	4629      	mov	r1, r5
 800d814:	f7f2 fef0 	bl	80005f8 <__aeabi_dmul>
 800d818:	4b3e      	ldr	r3, [pc, #248]	; (800d914 <atan+0x324>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	f7f2 fd36 	bl	800028c <__adddf3>
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	4630      	mov	r0, r6
 800d826:	4639      	mov	r1, r7
 800d828:	f7f3 f810 	bl	800084c <__aeabi_ddiv>
 800d82c:	f04f 0a02 	mov.w	sl, #2
 800d830:	4604      	mov	r4, r0
 800d832:	460d      	mov	r5, r1
 800d834:	e743      	b.n	800d6be <atan+0xce>
 800d836:	462b      	mov	r3, r5
 800d838:	ee10 2a10 	vmov	r2, s0
 800d83c:	4939      	ldr	r1, [pc, #228]	; (800d924 <atan+0x334>)
 800d83e:	2000      	movs	r0, #0
 800d840:	f7f3 f804 	bl	800084c <__aeabi_ddiv>
 800d844:	f04f 0a03 	mov.w	sl, #3
 800d848:	4604      	mov	r4, r0
 800d84a:	460d      	mov	r5, r1
 800d84c:	e737      	b.n	800d6be <atan+0xce>
 800d84e:	4b36      	ldr	r3, [pc, #216]	; (800d928 <atan+0x338>)
 800d850:	4e36      	ldr	r6, [pc, #216]	; (800d92c <atan+0x33c>)
 800d852:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f7f2 fd15 	bl	8000288 <__aeabi_dsub>
 800d85e:	4622      	mov	r2, r4
 800d860:	462b      	mov	r3, r5
 800d862:	f7f2 fd11 	bl	8000288 <__aeabi_dsub>
 800d866:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
 800d86e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d872:	f7f2 fd09 	bl	8000288 <__aeabi_dsub>
 800d876:	f1bb 0f00 	cmp.w	fp, #0
 800d87a:	4604      	mov	r4, r0
 800d87c:	460d      	mov	r5, r1
 800d87e:	f6bf aed6 	bge.w	800d62e <atan+0x3e>
 800d882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d886:	461d      	mov	r5, r3
 800d888:	e6d1      	b.n	800d62e <atan+0x3e>
 800d88a:	a51d      	add	r5, pc, #116	; (adr r5, 800d900 <atan+0x310>)
 800d88c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d890:	e6cd      	b.n	800d62e <atan+0x3e>
 800d892:	bf00      	nop
 800d894:	f3af 8000 	nop.w
 800d898:	54442d18 	.word	0x54442d18
 800d89c:	bff921fb 	.word	0xbff921fb
 800d8a0:	8800759c 	.word	0x8800759c
 800d8a4:	7e37e43c 	.word	0x7e37e43c
 800d8a8:	e322da11 	.word	0xe322da11
 800d8ac:	3f90ad3a 	.word	0x3f90ad3a
 800d8b0:	24760deb 	.word	0x24760deb
 800d8b4:	3fa97b4b 	.word	0x3fa97b4b
 800d8b8:	a0d03d51 	.word	0xa0d03d51
 800d8bc:	3fb10d66 	.word	0x3fb10d66
 800d8c0:	c54c206e 	.word	0xc54c206e
 800d8c4:	3fb745cd 	.word	0x3fb745cd
 800d8c8:	920083ff 	.word	0x920083ff
 800d8cc:	3fc24924 	.word	0x3fc24924
 800d8d0:	5555550d 	.word	0x5555550d
 800d8d4:	3fd55555 	.word	0x3fd55555
 800d8d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d8dc:	bfa2b444 	.word	0xbfa2b444
 800d8e0:	52defd9a 	.word	0x52defd9a
 800d8e4:	3fadde2d 	.word	0x3fadde2d
 800d8e8:	af749a6d 	.word	0xaf749a6d
 800d8ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800d8f0:	fe231671 	.word	0xfe231671
 800d8f4:	3fbc71c6 	.word	0x3fbc71c6
 800d8f8:	9998ebc4 	.word	0x9998ebc4
 800d8fc:	3fc99999 	.word	0x3fc99999
 800d900:	54442d18 	.word	0x54442d18
 800d904:	3ff921fb 	.word	0x3ff921fb
 800d908:	440fffff 	.word	0x440fffff
 800d90c:	7ff00000 	.word	0x7ff00000
 800d910:	3fdbffff 	.word	0x3fdbffff
 800d914:	3ff00000 	.word	0x3ff00000
 800d918:	3ff2ffff 	.word	0x3ff2ffff
 800d91c:	40038000 	.word	0x40038000
 800d920:	3ff80000 	.word	0x3ff80000
 800d924:	bff00000 	.word	0xbff00000
 800d928:	0800dee0 	.word	0x0800dee0
 800d92c:	0800dec0 	.word	0x0800dec0

0800d930 <_init>:
 800d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d932:	bf00      	nop
 800d934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d936:	bc08      	pop	{r3}
 800d938:	469e      	mov	lr, r3
 800d93a:	4770      	bx	lr

0800d93c <_fini>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	bf00      	nop
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr
