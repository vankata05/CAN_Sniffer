
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d9c  08008d9c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008da4  08008da4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da4  08008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001db0  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001efc  20001efc  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fe12  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003043  00000000  00000000  0002ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce8  00000000  00000000  00033018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000987  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023466  00000000  00000000  00034687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000116d3  00000000  00000000  00057aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c67a4  00000000  00000000  000691c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003878  00000000  00000000  0012f964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001331dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bf8 	.word	0x08008bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008bf8 	.word	0x08008bf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:
//extern CAN_HandleTypeDef hcan2;

uint8_t data[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005a2:	f000 fff1 	bl	8001588 <HAL_CAN_GetRxMessage>
//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	  CDC_Transmit_FS(data, 8);
 80005a6:	2108      	movs	r1, #8
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80005aa:	f007 fa13 	bl	80079d4 <CDC_Transmit_FS>
//	  CDC_Transmit_FS(rxPHead.IDE, 4);

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000168 	.word	0x20000168
 80005bc:	20000174 	.word	0x20000174

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b09b      	sub	sp, #108	; 0x6c
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fc05 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f921 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f9ef 	bl	80009b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f007 f923 	bl	800781c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005d6:	e005      	b.n	80005e4 <main+0x24>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	4883      	ldr	r0, [pc, #524]	; (80007ec <main+0x22c>)
 80005e0:	f001 fe00 	bl	80021e4 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005e4:	2101      	movs	r1, #1
 80005e6:	4882      	ldr	r0, [pc, #520]	; (80007f0 <main+0x230>)
 80005e8:	f001 fde4 	bl	80021b4 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f2      	beq.n	80005d8 <main+0x18>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	487c      	ldr	r0, [pc, #496]	; (80007ec <main+0x22c>)
 80005fa:	f001 fdf3 	bl	80021e4 <HAL_GPIO_WritePin>

  uint32_t PRE[4] = {42, 210, 84, 21};
 80005fe:	4b7d      	ldr	r3, [pc, #500]	; (80007f4 <main+0x234>)
 8000600:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t i;
  for(i = 0; i < 5; i++){
 800060a:	2300      	movs	r3, #0
 800060c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000610:	e063      	b.n	80006da <main+0x11a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000612:	4b79      	ldr	r3, [pc, #484]	; (80007f8 <main+0x238>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d12b      	bne.n	8000674 <main+0xb4>
 800061c:	4b77      	ldr	r3, [pc, #476]	; (80007fc <main+0x23c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d126      	bne.n	8000674 <main+0xb4>
		  if(i == 0){
 8000626:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10c      	bne.n	8000648 <main+0x88>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800062e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000630:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f955 	bl	80008e4 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800063a:	4871      	ldr	r0, [pc, #452]	; (8000800 <main+0x240>)
 800063c:	f000 fe3c 	bl	80012b8 <HAL_CAN_Start>
			  HAL_Delay(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f000 fc39 	bl	8000eb8 <HAL_Delay>
		  if(i == 0){
 8000646:	e043      	b.n	80006d0 <main+0x110>
		  }else{
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_0);
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_1);
			  HAL_CAN_Stop(&hcan1);
 8000648:	486d      	ldr	r0, [pc, #436]	; (8000800 <main+0x240>)
 800064a:	f000 fe79 	bl	8001340 <HAL_CAN_Stop>
//			  HAL_Delay(100);
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800064e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	3368      	adds	r3, #104	; 0x68
 8000656:	443b      	add	r3, r7
 8000658:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800065c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f93f 	bl	80008e4 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000666:	4866      	ldr	r0, [pc, #408]	; (8000800 <main+0x240>)
 8000668:	f000 fe26 	bl	80012b8 <HAL_CAN_Start>
			  HAL_Delay(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f000 fc23 	bl	8000eb8 <HAL_Delay>
		  if(i == 0){
 8000672:	e02d      	b.n	80006d0 <main+0x110>
		  }
	  }else{
		  if(IRQRX1 == 1 || IRQRX0 == 1){
 8000674:	4b60      	ldr	r3, [pc, #384]	; (80007f8 <main+0x238>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b01      	cmp	r3, #1
 800067c:	d004      	beq.n	8000688 <main+0xc8>
 800067e:	4b5f      	ldr	r3, [pc, #380]	; (80007fc <main+0x23c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d123      	bne.n	80006d0 <main+0x110>
			  char str[42];
			  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800068c:	3b01      	subs	r3, #1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	3368      	adds	r3, #104	; 0x68
 8000692:	443b      	add	r3, r7
 8000694:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	495a      	ldr	r1, [pc, #360]	; (8000804 <main+0x244>)
 800069c:	4618      	mov	r0, r3
 800069e:	f007 fe07 	bl	80082b0 <siprintf>
			  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 f98e 	bl	80079d4 <CDC_Transmit_FS>
			  HAL_CAN_Stop(&hcan1);
 80006b8:	4851      	ldr	r0, [pc, #324]	; (8000800 <main+0x240>)
 80006ba:	f000 fe41 	bl	8001340 <HAL_CAN_Stop>
//			  MX_CAN1_Init(PRE[i], CAN_MODE_NORMAL);
			  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006be:	4b50      	ldr	r3, [pc, #320]	; (8000800 <main+0x240>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
			  HAL_CAN_Init(&hcan1);
 80006c4:	484e      	ldr	r0, [pc, #312]	; (8000800 <main+0x240>)
 80006c6:	f000 fc1b 	bl	8000f00 <HAL_CAN_Init>
			  HAL_CAN_Start(&hcan1);
 80006ca:	484d      	ldr	r0, [pc, #308]	; (8000800 <main+0x240>)
 80006cc:	f000 fdf4 	bl	80012b8 <HAL_CAN_Start>
  for(i = 0; i < 5; i++){
 80006d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006d4:	3301      	adds	r3, #1
 80006d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80006da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d997      	bls.n	8000612 <main+0x52>

		  }
	  }
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006e2:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <main+0x238>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10a      	bne.n	8000702 <main+0x142>
 80006ec:	4b43      	ldr	r3, [pc, #268]	; (80007fc <main+0x23c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <main+0x142>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80006f6:	2118      	movs	r1, #24
 80006f8:	4843      	ldr	r0, [pc, #268]	; (8000808 <main+0x248>)
 80006fa:	f007 f96b 	bl	80079d4 <CDC_Transmit_FS>
	  Error_Handler();
 80006fe:	f000 f9b7 	bl	8000a70 <Error_Handler>

//    **Transmit**
//  **PIDs Supported**
  uint32_t mailbox;
  CAN_TxHeaderTypeDef pHead;
  pHead.StdId = 0x7DF;
 8000702:	f240 73df 	movw	r3, #2015	; 0x7df
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  pHead.IDE = CAN_ID_STD;
 8000708:	2300      	movs	r3, #0
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  pHead.RTR = CAN_RTR_DATA;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  pHead.DLC = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t data[] = {0x02, 0x01, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 8000714:	4a3d      	ldr	r2, [pc, #244]	; (800080c <main+0x24c>)
 8000716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071e:	e883 0003 	stmia.w	r3, {r0, r1}

  //  **PIDs supported(01-20)**
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000726:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800072a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <main+0x240>)
 8000730:	f000 fe4f 	bl	80013d2 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 8000734:	2032      	movs	r0, #50	; 0x32
 8000736:	f000 fbbf 	bl	8000eb8 <HAL_Delay>

  //  **PIDs supported(21-40)**
  data[2] = 0x20;
 800073a:	2320      	movs	r3, #32
 800073c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000740:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000744:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000748:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0x240>)
 800074e:	f000 fe40 	bl	80013d2 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f000 fbb0 	bl	8000eb8 <HAL_Delay>

  //  **PIDs supported(41-60)**
  data[2] = 0x40;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800075e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000762:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000766:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <main+0x240>)
 800076c:	f000 fe31 	bl	80013d2 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 8000770:	2032      	movs	r0, #50	; 0x32
 8000772:	f000 fba1 	bl	8000eb8 <HAL_Delay>

  //  **PIDs supported(61-80)**
  data[2] = 0x60;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800077c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000780:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000784:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000788:	481d      	ldr	r0, [pc, #116]	; (8000800 <main+0x240>)
 800078a:	f000 fe22 	bl	80013d2 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f000 fb92 	bl	8000eb8 <HAL_Delay>

  //  **PIDs supported(81-A0)**
  data[2] = 0x80;
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800079a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800079e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007a6:	4816      	ldr	r0, [pc, #88]	; (8000800 <main+0x240>)
 80007a8:	f000 fe13 	bl	80013d2 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 80007ac:	2032      	movs	r0, #50	; 0x32
 80007ae:	f000 fb83 	bl	8000eb8 <HAL_Delay>

  //  **PIDs supported(A1-C0)**
  data[2] = 0xA0;
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80007b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <main+0x240>)
 80007c6:	f000 fe04 	bl	80013d2 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 80007ca:	2032      	movs	r0, #50	; 0x32
 80007cc:	f000 fb74 	bl	8000eb8 <HAL_Delay>

  //  **PIDs supported(C1-E0)**
  data[2] = 0xC0;
 80007d0:	23c0      	movs	r3, #192	; 0xc0
 80007d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80007d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <main+0x240>)
 80007e4:	f000 fdf5 	bl	80013d2 <HAL_CAN_AddTxMessage>

  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x228>
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40020000 	.word	0x40020000
 80007f4:	08008cf8 	.word	0x08008cf8
 80007f8:	20000171 	.word	0x20000171
 80007fc:	20000170 	.word	0x20000170
 8000800:	20000174 	.word	0x20000174
 8000804:	08008cb0 	.word	0x08008cb0
 8000808:	08008cdc 	.word	0x08008cdc
 800080c:	08008d08 	.word	0x08008d08

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 fd66 	bl	80082f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <SystemClock_Config+0xd0>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000884:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000888:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088e:	2307      	movs	r3, #7
 8000890:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	4618      	mov	r0, r3
 8000898:	f002 ff3a 	bl	8003710 <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008a2:	f000 f8e5 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2105      	movs	r1, #5
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f99b 	bl	8003c00 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d0:	f000 f8ce 	bl	8000a70 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	; 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_CAN1_Init>:
  * @param None
  * @retval None
  */

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_CAN1_Init+0xc4>)
 80008f0:	4a2e      	ldr	r2, [pc, #184]	; (80009ac <MX_CAN1_Init+0xc8>)
 80008f2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <MX_CAN1_Init+0xc4>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <MX_CAN1_Init+0xc4>)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000908:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800090c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000916:	2200      	movs	r2, #0
 8000918:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_CAN1_Init+0xc4>)
 800091c:	2200      	movs	r2, #0
 800091e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000922:	2200      	movs	r2, #0
 8000924:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000928:	2200      	movs	r2, #0
 800092a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_CAN1_Init+0xc4>)
 800092e:	2200      	movs	r2, #0
 8000930:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000934:	2200      	movs	r2, #0
 8000936:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000938:	481b      	ldr	r0, [pc, #108]	; (80009a8 <MX_CAN1_Init+0xc4>)
 800093a:	f000 fae1 	bl	8000f00 <HAL_CAN_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000944:	f000 f894 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <MX_CAN1_Init+0xc4>)
 800094e:	f000 ff2d 	bl	80017ac <HAL_CAN_ActivateNotification>

//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fcc8 	bl	80082f0 <memset>


  filters.FilterActivation = ENABLE;
 8000960:	2301      	movs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  filters.FilterBank = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 8000970:	2301      	movs	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  filters.FilterIdHigh = 0x7E8 << 5;
 8000974:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000978:	60bb      	str	r3, [r7, #8]
  filters.FilterIdLow = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 800097e:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8000982:	613b      	str	r3, [r7, #16]
  filters.FilterMaskIdLow = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

//  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_CAN1_Init+0xc4>)
 8000990:	f000 fbb2 	bl	80010f8 <HAL_CAN_ConfigFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_CAN1_Init+0xba>
  {
    Error_Handler();
 800099a:	f000 f869 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */
}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	; 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000174 	.word	0x20000174
 80009ac:	40006400 	.word	0x40006400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0xb8>)
 8000a22:	f001 fbdf 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a26:	2301      	movs	r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0xbc>)
 8000a3a:	f001 fa1f 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0xb8>)
 8000a58:	f001 fa10 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40020000 	.word	0x40020000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a4e      	ldr	r2, [pc, #312]	; (8000c24 <HAL_CAN_MspInit+0x158>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d14d      	bne.n	8000b8a <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aee:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <HAL_CAN_MspInit+0x15c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a4c      	ldr	r2, [pc, #304]	; (8000c28 <HAL_CAN_MspInit+0x15c>)
 8000af6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <HAL_CAN_MspInit+0x15c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10d      	bne.n	8000b1c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a48      	ldr	r2, [pc, #288]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b48:	2309      	movs	r3, #9
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4837      	ldr	r0, [pc, #220]	; (8000c30 <HAL_CAN_MspInit+0x164>)
 8000b54:	f001 f992 	bl	8001e7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2013      	movs	r0, #19
 8000b5e:	f001 f956 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b62:	2013      	movs	r0, #19
 8000b64:	f001 f96f 	bl	8001e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f001 f94e 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b72:	2014      	movs	r0, #20
 8000b74:	f001 f967 	bl	8001e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2015      	movs	r0, #21
 8000b7e:	f001 f946 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b82:	2015      	movs	r0, #21
 8000b84:	f001 f95f 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b88:	e048      	b.n	8000c1c <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <HAL_CAN_MspInit+0x168>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d143      	bne.n	8000c1c <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_CAN_MspInit+0x15c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <HAL_CAN_MspInit+0x15c>)
 8000bb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_CAN_MspInit+0x15c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10d      	bne.n	8000bde <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_CAN_MspInit+0x160>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c0c:	2309      	movs	r3, #9
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4808      	ldr	r0, [pc, #32]	; (8000c38 <HAL_CAN_MspInit+0x16c>)
 8000c18:	f001 f930 	bl	8001e7c <HAL_GPIO_Init>
}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	; 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40006400 	.word	0x40006400
 8000c28:	2000019c 	.word	0x2000019c
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40006800 	.word	0x40006800
 8000c38:	40020400 	.word	0x40020400

08000c3c <NMI_Handler>:
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	f000 f8f6 	bl	8000e78 <HAL_IncTick>
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <CAN1_TX_IRQHandler>:
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <CAN1_TX_IRQHandler+0x10>)
 8000c96:	f000 fdaf 	bl	80017f8 <HAL_CAN_IRQHandler>
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000174 	.word	0x20000174

08000ca4 <CAN1_RX0_IRQHandler>:
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <CAN1_RX0_IRQHandler+0x14>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <CAN1_RX0_IRQHandler+0x18>)
 8000cb0:	f000 fda2 	bl	80017f8 <HAL_CAN_IRQHandler>
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000170 	.word	0x20000170
 8000cbc:	20000174 	.word	0x20000174

08000cc0 <CAN1_RX1_IRQHandler>:
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <CAN1_RX1_IRQHandler+0x14>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <CAN1_RX1_IRQHandler+0x18>)
 8000ccc:	f000 fd94 	bl	80017f8 <HAL_CAN_IRQHandler>
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000171 	.word	0x20000171
 8000cd8:	20000174 	.word	0x20000174

08000cdc <OTG_FS_IRQHandler>:
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <OTG_FS_IRQHandler+0x10>)
 8000ce2:	f001 fbe8 	bl	80024b6 <HAL_PCD_IRQHandler>
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20001688 	.word	0x20001688

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f007 faee 	bl	8008300 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20020000 	.word	0x20020000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	200001a0 	.word	0x200001a0
 8000d58:	20001f00 	.word	0x20001f00

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f007 faad 	bl	800830c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fc05 	bl	80005c0 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000dc4:	08008dac 	.word	0x08008dac
  ldr r2, =_sbss
 8000dc8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000dcc:	20001efc 	.word	0x20001efc

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 fffb 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fe38 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 f813 	bl	8001e62 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 ffdb 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200001a4 	.word	0x200001a4

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001a4 	.word	0x200001a4

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_CAN_Init>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_CAN_Init+0x12>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e0ed      	b.n	80010ee <HAL_CAN_Init+0x1ee>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_CAN_Init+0x24>
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fdd4 	bl	8000acc <HAL_CAN_MspInit>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0201 	orr.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	f7ff ffb4 	bl	8000ea0 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	e012      	b.n	8000f62 <HAL_CAN_Init+0x62>
 8000f3c:	f7ff ffb0 	bl	8000ea0 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d90b      	bls.n	8000f62 <HAL_CAN_Init+0x62>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0c5      	b.n	80010ee <HAL_CAN_Init+0x1ee>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0e5      	beq.n	8000f3c <HAL_CAN_Init+0x3c>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0202 	bic.w	r2, r2, #2
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	f7ff ff8e 	bl	8000ea0 <HAL_GetTick>
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	e012      	b.n	8000fae <HAL_CAN_Init+0xae>
 8000f88:	f7ff ff8a 	bl	8000ea0 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b0a      	cmp	r3, #10
 8000f94:	d90b      	bls.n	8000fae <HAL_CAN_Init+0xae>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]
 8000faa:	2301      	movs	r3, #1
 8000fac:	e09f      	b.n	80010ee <HAL_CAN_Init+0x1ee>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1e5      	bne.n	8000f88 <HAL_CAN_Init+0x88>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7e1b      	ldrb	r3, [r3, #24]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_CAN_Init+0xd6>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_Init+0xe6>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e5b      	ldrb	r3, [r3, #25]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_CAN_Init+0x100>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_Init+0x110>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7e9b      	ldrb	r3, [r3, #26]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d108      	bne.n	800102a <HAL_CAN_Init+0x12a>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e007      	b.n	800103a <HAL_CAN_Init+0x13a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0220 	bic.w	r2, r2, #32
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d108      	bne.n	8001054 <HAL_CAN_Init+0x154>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0210 	bic.w	r2, r2, #16
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e007      	b.n	8001064 <HAL_CAN_Init+0x164>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0210 	orr.w	r2, r2, #16
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7f1b      	ldrb	r3, [r3, #28]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d108      	bne.n	800107e <HAL_CAN_Init+0x17e>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0208 	orr.w	r2, r2, #8
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e007      	b.n	800108e <HAL_CAN_Init+0x18e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0208 	bic.w	r2, r2, #8
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7f5b      	ldrb	r3, [r3, #29]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <HAL_CAN_Init+0x1a8>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0204 	orr.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_CAN_Init+0x1b8>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0204 	bic.w	r2, r2, #4
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	ea42 0103 	orr.w	r1, r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	61da      	str	r2, [r3, #28]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]
 80010ec:	2300      	movs	r3, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_CAN_ConfigFilter>:
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110e:	74fb      	strb	r3, [r7, #19]
 8001110:	7cfb      	ldrb	r3, [r7, #19]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d003      	beq.n	800111e <HAL_CAN_ConfigFilter+0x26>
 8001116:	7cfb      	ldrb	r3, [r7, #19]
 8001118:	2b02      	cmp	r3, #2
 800111a:	f040 80be 	bne.w	800129a <HAL_CAN_ConfigFilter+0x1a2>
 800111e:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001138:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	431a      	orrs	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	2201      	movs	r2, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d123      	bne.n	80011c8 <HAL_CAN_ConfigFilter+0xd0>
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	0419      	lsls	r1, r3, #16
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	b29b      	uxth	r3, r3
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	6952      	ldr	r2, [r2, #20]
 80011a2:	4319      	orrs	r1, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3248      	adds	r2, #72	; 0x48
 80011a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	0419      	lsls	r1, r3, #16
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	430a      	orrs	r2, r1
 80011be:	6979      	ldr	r1, [r7, #20]
 80011c0:	3348      	adds	r3, #72	; 0x48
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d122      	bne.n	8001216 <HAL_CAN_ConfigFilter+0x11e>
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	431a      	orrs	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0419      	lsls	r1, r3, #16
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6952      	ldr	r2, [r2, #20]
 80011f0:	4319      	orrs	r1, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3248      	adds	r2, #72	; 0x48
 80011f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	0419      	lsls	r1, r3, #16
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	b29a      	uxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	430a      	orrs	r2, r1
 800120c:	6979      	ldr	r1, [r7, #20]
 800120e:	3348      	adds	r3, #72	; 0x48
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_CAN_ConfigFilter+0x13a>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001230:	e007      	b.n	8001242 <HAL_CAN_ConfigFilter+0x14a>
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	431a      	orrs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_CAN_ConfigFilter+0x166>
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800125c:	e007      	b.n	800126e <HAL_CAN_ConfigFilter+0x176>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	431a      	orrs	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_CAN_ConfigFilter+0x18e>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	431a      	orrs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800128c:	f023 0201 	bic.w	r2, r3, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001296:	2300      	movs	r3, #0
 8001298:	e006      	b.n	80012a8 <HAL_CAN_ConfigFilter+0x1b0>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
 80012a6:	2301      	movs	r3, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40006400 	.word	0x40006400

080012b8 <HAL_CAN_Start>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d12e      	bne.n	800132a <HAL_CAN_Start+0x72>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f7ff fddc 	bl	8000ea0 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	e012      	b.n	8001312 <HAL_CAN_Start+0x5a>
 80012ec:	f7ff fdd8 	bl	8000ea0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d90b      	bls.n	8001312 <HAL_CAN_Start+0x5a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2020 	strb.w	r2, [r3, #32]
 800130e:	2301      	movs	r3, #1
 8001310:	e012      	b.n	8001338 <HAL_CAN_Start+0x80>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e5      	bne.n	80012ec <HAL_CAN_Start+0x34>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
 8001326:	2300      	movs	r3, #0
 8001328:	e006      	b.n	8001338 <HAL_CAN_Start+0x80>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
 8001336:	2301      	movs	r3, #1
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_CAN_Stop>:
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d133      	bne.n	80013bc <HAL_CAN_Stop+0x7c>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f7ff fd9c 	bl	8000ea0 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	e012      	b.n	8001392 <HAL_CAN_Stop+0x52>
 800136c:	f7ff fd98 	bl	8000ea0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_CAN_Stop+0x52>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2205      	movs	r2, #5
 800138a:	f883 2020 	strb.w	r2, [r3, #32]
 800138e:	2301      	movs	r3, #1
 8001390:	e01b      	b.n	80013ca <HAL_CAN_Stop+0x8a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e5      	beq.n	800136c <HAL_CAN_Stop+0x2c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0202 	bic.w	r2, r2, #2
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]
 80013b8:	2300      	movs	r3, #0
 80013ba:	e006      	b.n	80013ca <HAL_CAN_Stop+0x8a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
 80013c8:	2301      	movs	r3, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_CAN_AddTxMessage>:
 80013d2:	b480      	push	{r7}
 80013d4:	b089      	sub	sp, #36	; 0x24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	77fb      	strb	r3, [r7, #31]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <HAL_CAN_AddTxMessage+0x2c>
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	f040 80b8 	bne.w	800156e <HAL_CAN_AddTxMessage+0x19c>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10a      	bne.n	800141e <HAL_CAN_AddTxMessage+0x4c>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <HAL_CAN_AddTxMessage+0x4c>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a0 	beq.w	800155e <HAL_CAN_AddTxMessage+0x18c>
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	0e1b      	lsrs	r3, r3, #24
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d907      	bls.n	800143e <HAL_CAN_AddTxMessage+0x6c>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
 800143a:	2301      	movs	r3, #1
 800143c:	e09e      	b.n	800157c <HAL_CAN_AddTxMessage+0x1aa>
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10d      	bne.n	800146c <HAL_CAN_AddTxMessage+0x9a>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	055a      	lsls	r2, r3, #21
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	6809      	ldr	r1, [r1, #0]
 800145e:	431a      	orrs	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	440b      	add	r3, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e00f      	b.n	800148c <HAL_CAN_AddTxMessage+0xba>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	00da      	lsls	r2, r3, #3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	431a      	orrs	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	6809      	ldr	r1, [r1, #0]
 8001480:	431a      	orrs	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3318      	adds	r3, #24
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	440b      	add	r3, r1
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3318      	adds	r3, #24
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	440b      	add	r3, r1
 800149c:	3304      	adds	r3, #4
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	7d1b      	ldrb	r3, [r3, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d111      	bne.n	80014cc <HAL_CAN_AddTxMessage+0xfa>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3318      	adds	r3, #24
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	3304      	adds	r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3318      	adds	r3, #24
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3307      	adds	r3, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	061a      	lsls	r2, r3, #24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3306      	adds	r3, #6
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3305      	adds	r3, #5
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	4313      	orrs	r3, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	3204      	adds	r2, #4
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4610      	mov	r0, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	6811      	ldr	r1, [r2, #0]
 80014f4:	ea43 0200 	orr.w	r2, r3, r0
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	440b      	add	r3, r1
 80014fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3303      	adds	r3, #3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	061a      	lsls	r2, r3, #24
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3302      	adds	r3, #2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3301      	adds	r3, #1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	4313      	orrs	r3, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	4610      	mov	r0, r2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	6811      	ldr	r1, [r2, #0]
 800152a:	ea43 0200 	orr.w	r2, r3, r0
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	440b      	add	r3, r1
 8001534:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3318      	adds	r3, #24
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3318      	adds	r3, #24
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	440b      	add	r3, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	e00e      	b.n	800157c <HAL_CAN_AddTxMessage+0x1aa>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
 800156a:	2301      	movs	r3, #1
 800156c:	e006      	b.n	800157c <HAL_CAN_AddTxMessage+0x1aa>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
 800157a:	2301      	movs	r3, #1
 800157c:	4618      	mov	r0, r3
 800157e:	3724      	adds	r7, #36	; 0x24
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_GetRxMessage>:
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	75fb      	strb	r3, [r7, #23]
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d003      	beq.n	80015ac <HAL_CAN_GetRxMessage+0x24>
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	f040 80f3 	bne.w	8001792 <HAL_CAN_GetRxMessage+0x20a>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10e      	bne.n	80015d0 <HAL_CAN_GetRxMessage+0x48>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d116      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x66>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0e7      	b.n	80017a0 <HAL_CAN_GetRxMessage+0x218>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x66>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0d8      	b.n	80017a0 <HAL_CAN_GetRxMessage+0x218>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	331b      	adds	r3, #27
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0204 	and.w	r2, r3, #4
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10c      	bne.n	8001626 <HAL_CAN_GetRxMessage+0x9e>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	331b      	adds	r3, #27
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0d5b      	lsrs	r3, r3, #21
 800161c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e00b      	b.n	800163e <HAL_CAN_GetRxMessage+0xb6>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	331b      	adds	r3, #27
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	331b      	adds	r3, #27
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0202 	and.w	r2, r3, #2
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	331b      	adds	r3, #27
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 020f 	and.w	r2, r3, #15
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	331b      	adds	r3, #27
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	3304      	adds	r3, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b2da      	uxtb	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	331b      	adds	r3, #27
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0a1a      	lsrs	r2, r3, #8
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0c1a      	lsrs	r2, r3, #16
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	3302      	adds	r3, #2
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0e1a      	lsrs	r2, r3, #24
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3303      	adds	r3, #3
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3304      	adds	r3, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0a1a      	lsrs	r2, r3, #8
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3305      	adds	r3, #5
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0c1a      	lsrs	r2, r3, #16
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3306      	adds	r3, #6
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0e1a      	lsrs	r2, r3, #24
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3307      	adds	r3, #7
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <HAL_CAN_GetRxMessage+0x1f6>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	e007      	b.n	800178e <HAL_CAN_GetRxMessage+0x206>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0220 	orr.w	r2, r2, #32
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	2300      	movs	r3, #0
 8001790:	e006      	b.n	80017a0 <HAL_CAN_GetRxMessage+0x218>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
 800179e:	2301      	movs	r3, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_ActivateNotification>:
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d002      	beq.n	80017ca <HAL_CAN_ActivateNotification+0x1e>
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d109      	bne.n	80017de <HAL_CAN_ActivateNotification+0x32>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6959      	ldr	r1, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	2300      	movs	r3, #0
 80017dc:	e006      	b.n	80017ec <HAL_CAN_ActivateNotification+0x40>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ea:	2301      	movs	r3, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_CAN_IRQHandler>:
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d07c      	beq.n	8001938 <HAL_CAN_IRQHandler+0x140>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_CAN_IRQHandler+0x98>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2201      	movs	r2, #1
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_CAN_IRQHandler+0x6a>
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f983 	bl	8001b66 <HAL_CAN_TxMailbox0CompleteCallback>
 8001860:	e016      	b.n	8001890 <HAL_CAN_IRQHandler+0x98>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_CAN_IRQHandler+0x7e>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e00c      	b.n	8001890 <HAL_CAN_IRQHandler+0x98>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_CAN_IRQHandler+0x92>
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e002      	b.n	8001890 <HAL_CAN_IRQHandler+0x98>
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f989 	bl	8001ba2 <HAL_CAN_TxMailbox0AbortCallback>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d024      	beq.n	80018e4 <HAL_CAN_IRQHandler+0xec>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_CAN_IRQHandler+0xbe>
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f963 	bl	8001b7a <HAL_CAN_TxMailbox1CompleteCallback>
 80018b4:	e016      	b.n	80018e4 <HAL_CAN_IRQHandler+0xec>
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <HAL_CAN_IRQHandler+0xd2>
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
 80018c8:	e00c      	b.n	80018e4 <HAL_CAN_IRQHandler+0xec>
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_CAN_IRQHandler+0xe6>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
 80018dc:	e002      	b.n	80018e4 <HAL_CAN_IRQHandler+0xec>
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f969 	bl	8001bb6 <HAL_CAN_TxMailbox1AbortCallback>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <HAL_CAN_IRQHandler+0x140>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_CAN_IRQHandler+0x112>
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f943 	bl	8001b8e <HAL_CAN_TxMailbox2CompleteCallback>
 8001908:	e016      	b.n	8001938 <HAL_CAN_IRQHandler+0x140>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <HAL_CAN_IRQHandler+0x126>
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
 800191c:	e00c      	b.n	8001938 <HAL_CAN_IRQHandler+0x140>
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_CAN_IRQHandler+0x13a>
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e002      	b.n	8001938 <HAL_CAN_IRQHandler+0x140>
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f949 	bl	8001bca <HAL_CAN_TxMailbox2AbortCallback>
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <HAL_CAN_IRQHandler+0x164>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_CAN_IRQHandler+0x164>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2210      	movs	r2, #16
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_CAN_IRQHandler+0x186>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_CAN_IRQHandler+0x186>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2208      	movs	r2, #8
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f930 	bl	8001bde <HAL_CAN_RxFifo0FullCallback>
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <HAL_CAN_IRQHandler+0x1a4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_CAN_IRQHandler+0x1a4>
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fdf0 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00c      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x1c8>
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x1c8>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x1ea>
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x1ea>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2208      	movs	r2, #8
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f912 	bl	8001c06 <HAL_CAN_RxFifo1FullCallback>
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d009      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x208>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x208>
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f8f9 	bl	8001bf2 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x22a>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x22a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2210      	movs	r2, #16
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8fc 	bl	8001c1a <HAL_CAN_SleepCallback>
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x24c>
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x24c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f8f5 	bl	8001c2e <HAL_CAN_WakeUpFromRxMsgCallback>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d07b      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x34e>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d072      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x346>
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x27c>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x27c>
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x298>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x298>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_CAN_IRQHandler+0x2b4>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_CAN_IRQHandler+0x2b4>
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d043      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x346>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03e      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x346>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ac6:	2b60      	cmp	r3, #96	; 0x60
 8001ac8:	d02b      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x32a>
 8001aca:	2b60      	cmp	r3, #96	; 0x60
 8001acc:	d82e      	bhi.n	8001b2c <HAL_CAN_IRQHandler+0x334>
 8001ace:	2b50      	cmp	r3, #80	; 0x50
 8001ad0:	d022      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x320>
 8001ad2:	2b50      	cmp	r3, #80	; 0x50
 8001ad4:	d82a      	bhi.n	8001b2c <HAL_CAN_IRQHandler+0x334>
 8001ad6:	2b40      	cmp	r3, #64	; 0x40
 8001ad8:	d019      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x316>
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d826      	bhi.n	8001b2c <HAL_CAN_IRQHandler+0x334>
 8001ade:	2b30      	cmp	r3, #48	; 0x30
 8001ae0:	d010      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x30c>
 8001ae2:	2b30      	cmp	r3, #48	; 0x30
 8001ae4:	d822      	bhi.n	8001b2c <HAL_CAN_IRQHandler+0x334>
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d002      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x2f8>
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	d005      	beq.n	8001afa <HAL_CAN_IRQHandler+0x302>
 8001aee:	e01d      	b.n	8001b2c <HAL_CAN_IRQHandler+0x334>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
 8001af8:	e019      	b.n	8001b2e <HAL_CAN_IRQHandler+0x336>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	e014      	b.n	8001b2e <HAL_CAN_IRQHandler+0x336>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e00f      	b.n	8001b2e <HAL_CAN_IRQHandler+0x336>
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	e00a      	b.n	8001b2e <HAL_CAN_IRQHandler+0x336>
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	e005      	b.n	8001b2e <HAL_CAN_IRQHandler+0x336>
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e000      	b.n	8001b2e <HAL_CAN_IRQHandler+0x336>
 8001b2c:	bf00      	nop
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x366>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f872 	bl	8001c42 <HAL_CAN_ErrorCallback>
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_CAN_TxMailbox1CompleteCallback>:
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_CAN_TxMailbox2CompleteCallback>:
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_CAN_TxMailbox0AbortCallback>:
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_CAN_TxMailbox1AbortCallback>:
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_CAN_TxMailbox2AbortCallback>:
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_CAN_RxFifo0FullCallback>:
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_CAN_RxFifo1FullCallback>:
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_CAN_SleepCallback>:
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_CAN_ErrorCallback>:
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e16b      	b.n	8002170 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 815a 	bne.w	800216a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80b4 	beq.w	800216a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b60      	ldr	r3, [pc, #384]	; (8002188 <HAL_GPIO_Init+0x30c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a5f      	ldr	r2, [pc, #380]	; (8002188 <HAL_GPIO_Init+0x30c>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_GPIO_Init+0x30c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a5b      	ldr	r2, [pc, #364]	; (800218c <HAL_GPIO_Init+0x310>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x314>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x318>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x222>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x31c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x21e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x320>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x216>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <HAL_GPIO_Init+0x328>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x212>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x32c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4b      	ldr	r2, [pc, #300]	; (80021ac <HAL_GPIO_Init+0x330>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x20a>
 8002082:	2307      	movs	r3, #7
 8002084:	e00e      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 8002086:	2308      	movs	r3, #8
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800208a:	2306      	movs	r3, #6
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	; (800218c <HAL_GPIO_Init+0x310>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_GPIO_Init+0x334>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a32      	ldr	r2, [pc, #200]	; (80021b0 <HAL_GPIO_Init+0x334>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_GPIO_Init+0x334>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_GPIO_Init+0x334>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae90 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40021c00 	.word	0x40021c00
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002218:	b08f      	sub	sp, #60	; 0x3c
 800221a:	af0a      	add	r7, sp, #40	; 0x28
 800221c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e10f      	b.n	8002448 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f005 fd0e 	bl	8007c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f001 ffd7 	bl	800421a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	687e      	ldr	r6, [r7, #4]
 8002274:	466d      	mov	r5, sp
 8002276:	f106 0410 	add.w	r4, r6, #16
 800227a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002286:	e885 0003 	stmia.w	r5, {r0, r1}
 800228a:	1d33      	adds	r3, r6, #4
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f001 feae 	bl	8003ff0 <USB_CoreInit>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0d0      	b.n	8002448 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 ffc5 	bl	800423c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e04a      	b.n	800234e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	333d      	adds	r3, #61	; 0x3d
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3344      	adds	r3, #68	; 0x44
 80022f4:	4602      	mov	r2, r0
 80022f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3340      	adds	r3, #64	; 0x40
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3348      	adds	r3, #72	; 0x48
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334c      	adds	r3, #76	; 0x4c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3354      	adds	r3, #84	; 0x54
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	3301      	adds	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3af      	bcc.n	80022b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e044      	b.n	80023e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3b5      	bcc.n	800235e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	687e      	ldr	r6, [r7, #4]
 80023fa:	466d      	mov	r5, sp
 80023fc:	f106 0410 	add.w	r4, r6, #16
 8002400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002410:	1d33      	adds	r3, r6, #4
 8002412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002414:	6838      	ldr	r0, [r7, #0]
 8002416:	f001 ff5d 	bl	80042d4 <USB_DevInit>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e00d      	b.n	8002448 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 f8ac 	bl	800559e <USB_DevDisconnect>

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002450 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_PCD_Start+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e020      	b.n	80024ae <HAL_PCD_Start+0x5e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	2b01      	cmp	r3, #1
 800247a:	d109      	bne.n	8002490 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002480:	2b01      	cmp	r3, #1
 8002482:	d005      	beq.n	8002490 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f001 feaf 	bl	80041f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 f85c 	bl	800555c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b08d      	sub	sp, #52	; 0x34
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f91a 	bl	8005706 <USB_GetMode>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 848a 	bne.w	8002dee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 f87e 	bl	80055e0 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8480 	beq.w	8002dec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f86b 	bl	80055e0 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d107      	bne.n	8002524 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f002 0202 	and.w	r2, r2, #2
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 f859 	bl	80055e0 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b10      	cmp	r3, #16
 8002536:	d161      	bne.n	80025fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0210 	bic.w	r2, r2, #16
 8002546:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	2b02      	cmp	r3, #2
 8002572:	d124      	bne.n	80025be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d035      	beq.n	80025ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6a38      	ldr	r0, [r7, #32]
 8002594:	f002 fe90 	bl	80052b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a4:	441a      	add	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b6:	441a      	add	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	621a      	str	r2, [r3, #32]
 80025bc:	e016      	b.n	80025ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	0c5b      	lsrs	r3, r3, #17
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d110      	bne.n	80025ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025d0:	2208      	movs	r2, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	6a38      	ldr	r0, [r7, #32]
 80025d6:	f002 fe6f 	bl	80052b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e6:	441a      	add	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f002 ffed 	bl	80055e0 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002610:	f040 80a7 	bne.w	8002762 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f002 fff2 	bl	8005606 <USB_ReadDevAllOutEpInterrupt>
 8002622:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002624:	e099      	b.n	800275a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 808e 	beq.w	800274e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f816 	bl	800566e <USB_ReadDevOutEPInterrupt>
 8002642:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	461a      	mov	r2, r3
 800265c:	2301      	movs	r3, #1
 800265e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fec2 	bl	80033ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267e:	461a      	mov	r2, r3
 8002680:	2308      	movs	r3, #8
 8002682:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 ff98 	bl	80035bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	461a      	mov	r2, r3
 80026a4:	2310      	movs	r3, #16
 80026a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d030      	beq.n	8002714 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d109      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	78db      	ldrb	r3, [r3, #3]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 fbc9 	bl	8007e94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270e:	461a      	mov	r2, r3
 8002710:	2302      	movs	r3, #2
 8002712:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	461a      	mov	r2, r3
 800272c:	2320      	movs	r3, #32
 800272e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002746:	461a      	mov	r2, r3
 8002748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	f47f af62 	bne.w	8002626 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 ff3a 	bl	80055e0 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002776:	f040 80db 	bne.w	8002930 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 ff5b 	bl	800563a <USB_ReadDevAllInEpInterrupt>
 8002784:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800278a:	e0cd      	b.n	8002928 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80c2 	beq.w	800291c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 ff81 	bl	80056aa <USB_ReadDevInEPInterrupt>
 80027a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d057      	beq.n	8002864 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69f9      	ldr	r1, [r7, #28]
 80027d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d4:	4013      	ands	r3, r2
 80027d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e4:	461a      	mov	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d132      	bne.n	8002858 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	334c      	adds	r3, #76	; 0x4c
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4403      	add	r3, r0
 8002812:	3348      	adds	r3, #72	; 0x48
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4419      	add	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4403      	add	r3, r0
 8002826:	334c      	adds	r3, #76	; 0x4c
 8002828:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d113      	bne.n	8002858 <HAL_PCD_IRQHandler+0x3a2>
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3354      	adds	r3, #84	; 0x54
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002850:	461a      	mov	r2, r3
 8002852:	2101      	movs	r1, #1
 8002854:	f002 ff88 	bl	8005768 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 fa93 	bl	8007d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	461a      	mov	r2, r3
 800287c:	2308      	movs	r3, #8
 800287e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	461a      	mov	r2, r3
 8002898:	2310      	movs	r3, #16
 800289a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b2:	461a      	mov	r2, r3
 80028b4:	2340      	movs	r3, #64	; 0x40
 80028b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d023      	beq.n	800290a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c4:	6a38      	ldr	r0, [r7, #32]
 80028c6:	f001 fe69 	bl	800459c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	3338      	adds	r3, #56	; 0x38
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	3304      	adds	r3, #4
 80028dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f005 fae0 	bl	8007eb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002904:	461a      	mov	r2, r3
 8002906:	2302      	movs	r3, #2
 8002908:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fcdb 	bl	80032d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3301      	adds	r3, #1
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	f47f af2e 	bne.w	800278c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fe53 	bl	80055e0 <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002944:	d122      	bne.n	800298c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002960:	2b01      	cmp	r3, #1
 8002962:	d108      	bne.n	8002976 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800296c:	2100      	movs	r1, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fec2 	bl	80036f8 <HAL_PCDEx_LPM_Callback>
 8002974:	e002      	b.n	800297c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f005 fa7e 	bl	8007e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800298a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f002 fe25 	bl	80055e0 <USB_ReadInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a0:	d112      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f005 fa3a 	bl	8007e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fe07 	bl	80055e0 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	f040 80b7 	bne.w	8002b4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2110      	movs	r1, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fdce 	bl	800459c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a04:	e046      	b.n	8002a94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a12:	461a      	mov	r2, r3
 8002a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5e:	0151      	lsls	r1, r2, #5
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	440a      	add	r2, r1
 8002a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	0151      	lsls	r1, r2, #5
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	440a      	add	r2, r1
 8002a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	3301      	adds	r3, #1
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3b3      	bcc.n	8002a06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ab0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aca:	f043 030b 	orr.w	r3, r3, #11
 8002ace:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae0:	f043 030b 	orr.w	r3, r3, #11
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	e015      	b.n	8002b14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002afa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002afe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0e:	f043 030b 	orr.w	r3, r3, #11
 8002b12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f002 fe15 	bl	8005768 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fd44 	bl	80055e0 <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b62:	d124      	bne.n	8002bae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fdda 	bl	8005722 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fd8f 	bl	8004696 <USB_GetDevSpeed>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681c      	ldr	r4, [r3, #0]
 8002b84:	f001 fa28 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8002b88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	4620      	mov	r0, r4
 8002b94:	f001 fa8e 	bl	80040b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f005 f91e 	bl	8007dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fd14 	bl	80055e0 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f005 f8fb 	bl	8007dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f002 0208 	and.w	r2, r2, #8
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fcff 	bl	80055e0 <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d122      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	e014      	b.n	8002c28 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fb27 	bl	8003270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3301      	adds	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3e5      	bcc.n	8002bfe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 fcd2 	bl	80055e0 <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c46:	d13b      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	e02b      	b.n	8002ca6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3340      	adds	r3, #64	; 0x40
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d115      	bne.n	8002ca0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da12      	bge.n	8002ca0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	333f      	adds	r3, #63	; 0x3f
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fae8 	bl	8003270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d3ce      	bcc.n	8002c4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fc8b 	bl	80055e0 <USB_ReadInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd4:	d155      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	e045      	b.n	8002d68 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d12e      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da2b      	bge.n	8002d62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d121      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5e:	6053      	str	r3, [r2, #4]
            break;
 8002d60:	e007      	b.n	8002d72 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	3301      	adds	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d3b4      	bcc.n	8002cdc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fc2a 	bl	80055e0 <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d10a      	bne.n	8002dae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f005 f89f 	bl	8007edc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 fc14 	bl	80055e0 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d115      	bne.n	8002dee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f005 f88f 	bl	8007ef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e000      	b.n	8002dee <HAL_PCD_IRQHandler+0x938>
      return;
 8002dec:	bf00      	nop
    }
  }
}
 8002dee:	3734      	adds	r7, #52	; 0x34
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_PCD_SetAddress+0x1a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e013      	b.n	8002e36 <HAL_PCD_SetAddress+0x42>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fb72 	bl	8005510 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	4608      	mov	r0, r1
 8002e48:	4611      	mov	r1, r2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	70fb      	strb	r3, [r7, #3]
 8002e50:	460b      	mov	r3, r1
 8002e52:	803b      	strh	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da0f      	bge.n	8002e84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	3338      	adds	r3, #56	; 0x38
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	705a      	strb	r2, [r3, #1]
 8002e82:	e00f      	b.n	8002ea4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eb0:	883a      	ldrh	r2, [r7, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	78ba      	ldrb	r2, [r7, #2]
 8002eba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ece:	78bb      	ldrb	r3, [r7, #2]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d102      	bne.n	8002eda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_PCD_EP_Open+0xaa>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e00e      	b.n	8002f06 <HAL_PCD_EP_Open+0xc8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68f9      	ldr	r1, [r7, #12]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fbf2 	bl	80046e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f04:	7afb      	ldrb	r3, [r7, #11]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da0f      	bge.n	8002f42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3338      	adds	r3, #56	; 0x38
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	705a      	strb	r2, [r3, #1]
 8002f40:	e00f      	b.n	8002f62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_EP_Close+0x6e>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e00e      	b.n	8002f9a <HAL_PCD_EP_Close+0x8c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 fc30 	bl	80047f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	7afb      	ldrb	r3, [r7, #11]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d102      	bne.n	8002ffe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	6979      	ldr	r1, [r7, #20]
 8003016:	f001 ff0f 	bl	8004e38 <USB_EP0StartXfer>
 800301a:	e008      	b.n	800302e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	6979      	ldr	r1, [r7, #20]
 800302a:	f001 fcbd 	bl	80049a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 020f 	and.w	r2, r3, #15
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	460b      	mov	r3, r1
 8003076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3338      	adds	r3, #56	; 0x38
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2200      	movs	r2, #0
 80030a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2201      	movs	r2, #1
 80030a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a8:	7afb      	ldrb	r3, [r7, #11]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d102      	bne.n	80030c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	f001 fead 	bl	8004e38 <USB_EP0StartXfer>
 80030de:	e008      	b.n	80030f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	f001 fc5b 	bl	80049a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 020f 	and.w	r2, r3, #15
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d901      	bls.n	800311a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e050      	b.n	80031bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800311a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311e:	2b00      	cmp	r3, #0
 8003120:	da0f      	bge.n	8003142 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	3338      	adds	r3, #56	; 0x38
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	705a      	strb	r2, [r3, #1]
 8003140:	e00d      	b.n	800315e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_PCD_EP_SetStall+0x82>
 800317a:	2302      	movs	r3, #2
 800317c:	e01e      	b.n	80031bc <HAL_PCD_EP_SetStall+0xc0>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	4618      	mov	r0, r3
 800318e:	f002 f8eb 	bl	8005368 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	b2d9      	uxtb	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ac:	461a      	mov	r2, r3
 80031ae:	f002 fadb 	bl	8005768 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 020f 	and.w	r2, r3, #15
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d901      	bls.n	80031e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e042      	b.n	8003268 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	da0f      	bge.n	800320a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	3338      	adds	r3, #56	; 0x38
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	3304      	adds	r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	705a      	strb	r2, [r3, #1]
 8003208:	e00f      	b.n	800322a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_PCD_EP_ClrStall+0x86>
 8003246:	2302      	movs	r3, #2
 8003248:	e00e      	b.n	8003268 <HAL_PCD_EP_ClrStall+0xa4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	4618      	mov	r0, r3
 800325a:	f002 f8f3 	bl	8005444 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800327c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003280:	2b00      	cmp	r3, #0
 8003282:	da0c      	bge.n	800329e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 020f 	and.w	r2, r3, #15
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3338      	adds	r3, #56	; 0x38
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e00c      	b.n	80032b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 ff12 	bl	80050e8 <USB_EPStopXfer>
 80032c4:	4603      	mov	r3, r0
 80032c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032c8:	7afb      	ldrb	r3, [r7, #11]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b08a      	sub	sp, #40	; 0x28
 80032d6:	af02      	add	r7, sp, #8
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	3338      	adds	r3, #56	; 0x38
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	3304      	adds	r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	429a      	cmp	r2, r3
 8003304:	d901      	bls.n	800330a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06c      	b.n	80033e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	429a      	cmp	r2, r3
 800331e:	d902      	bls.n	8003326 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3303      	adds	r3, #3
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800332e:	e02b      	b.n	8003388 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	429a      	cmp	r2, r3
 8003344:	d902      	bls.n	800334c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3303      	adds	r3, #3
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6919      	ldr	r1, [r3, #16]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003364:	b2db      	uxtb	r3, r3
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4603      	mov	r3, r0
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f001 ff66 	bl	800523c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	441a      	add	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	429a      	cmp	r2, r3
 800339c:	d809      	bhi.n	80033b2 <PCD_WriteEmptyTxFifo+0xe0>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d203      	bcs.n	80033b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1be      	bne.n	8003330 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d811      	bhi.n	80033e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	2201      	movs	r2, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	6939      	ldr	r1, [r7, #16]
 80033da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033de:	4013      	ands	r3, r2
 80033e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	333c      	adds	r3, #60	; 0x3c
 8003404:	3304      	adds	r3, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d17b      	bne.n	800351a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d015      	beq.n	8003458 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f240 80b9 	bls.w	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80b3 	beq.w	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003454:	6093      	str	r3, [r2, #8]
 8003456:	e0a7      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	461a      	mov	r2, r3
 8003470:	2320      	movs	r3, #32
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	e098      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 8093 	bne.w	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	4a4b      	ldr	r2, [pc, #300]	; (80035b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d90f      	bls.n	80034aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a0:	461a      	mov	r2, r3
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	6093      	str	r3, [r2, #8]
 80034a8:	e07e      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	0159      	lsls	r1, r3, #5
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	1ad2      	subs	r2, r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d114      	bne.n	800350c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f4:	461a      	mov	r2, r3
 80034f6:	2101      	movs	r1, #1
 80034f8:	f002 f936 	bl	8005768 <USB_EP0_OutStart>
 80034fc:	e006      	b.n	800350c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	441a      	add	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f004 fc1e 	bl	8007d54 <HAL_PCD_DataOutStageCallback>
 8003518:	e046      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d124      	bne.n	800356c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	461a      	mov	r2, r3
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	e032      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	461a      	mov	r2, r3
 800355a:	2320      	movs	r3, #32
 800355c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f004 fbf5 	bl	8007d54 <HAL_PCD_DataOutStageCallback>
 800356a:	e01d      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d114      	bne.n	800359c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003594:	461a      	mov	r2, r3
 8003596:	2100      	movs	r1, #0
 8003598:	f002 f8e6 	bl	8005768 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f004 fbd6 	bl	8007d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	4f54300a 	.word	0x4f54300a
 80035b8:	4f54310a 	.word	0x4f54310a

080035bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	333c      	adds	r3, #60	; 0x3c
 80035d4:	3304      	adds	r3, #4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a15      	ldr	r2, [pc, #84]	; (8003644 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d90e      	bls.n	8003610 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f004 fb8d 	bl	8007d30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <PCD_EP_OutSetupPacket_int+0x88>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d90c      	bls.n	8003638 <PCD_EP_OutSetupPacket_int+0x7c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d108      	bne.n	8003638 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003630:	461a      	mov	r2, r3
 8003632:	2101      	movs	r1, #1
 8003634:	f002 f898 	bl	8005768 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	4f54300a 	.word	0x4f54300a

08003648 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
 8003654:	4613      	mov	r3, r2
 8003656:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003666:	883b      	ldrh	r3, [r7, #0]
 8003668:	0419      	lsls	r1, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	430a      	orrs	r2, r1
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
 8003674:	e028      	b.n	80036c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e00d      	b.n	80036a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3340      	adds	r3, #64	; 0x40
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d3ec      	bcc.n	800368a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036b0:	883b      	ldrh	r3, [r7, #0]
 80036b2:	0418      	lsls	r0, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	4302      	orrs	r2, r0
 80036c0:	3340      	adds	r3, #64	; 0x40
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e267      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d075      	beq.n	800381a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b04      	cmp	r3, #4
 8003738:	d00c      	beq.n	8003754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4b85      	ldr	r3, [pc, #532]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003742:	2b08      	cmp	r3, #8
 8003744:	d112      	bne.n	800376c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003746:	4b82      	ldr	r3, [pc, #520]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003752:	d10b      	bne.n	800376c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	4b7e      	ldr	r3, [pc, #504]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05b      	beq.n	8003818 <HAL_RCC_OscConfig+0x108>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d157      	bne.n	8003818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e242      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d106      	bne.n	8003784 <HAL_RCC_OscConfig+0x74>
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xb0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x98>
 800378e:	4b70      	ldr	r3, [pc, #448]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6f      	ldr	r2, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6c      	ldr	r2, [pc, #432]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xb0>
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a68      	ldr	r2, [pc, #416]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b66      	ldr	r3, [pc, #408]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd fb6a 	bl	8000ea0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fd fb66 	bl	8000ea0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e207      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xc0>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fd fb56 	bl	8000ea0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fd fb52 	bl	8000ea0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1f3      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b51      	ldr	r3, [pc, #324]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0xe8>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383e:	4b44      	ldr	r3, [pc, #272]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x152>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1c7      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b3b      	ldr	r3, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4937      	ldr	r1, [pc, #220]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e03a      	b.n	80038ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b34      	ldr	r3, [pc, #208]	; (8003954 <HAL_RCC_OscConfig+0x244>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fb0b 	bl	8000ea0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388e:	f7fd fb07 	bl	8000ea0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1a8      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4925      	ldr	r1, [pc, #148]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCC_OscConfig+0x244>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd faea 	bl	8000ea0 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fd fae6 	bl	8000ea0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e187      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d036      	beq.n	8003968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <HAL_RCC_OscConfig+0x248>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fd faca 	bl	8000ea0 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003910:	f7fd fac6 	bl	8000ea0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e167      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x240>)
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x200>
 800392e:	e01b      	b.n	8003968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_OscConfig+0x248>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7fd fab3 	bl	8000ea0 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	e00e      	b.n	800395c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393e:	f7fd faaf 	bl	8000ea0 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d907      	bls.n	800395c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e150      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
 8003950:	40023800 	.word	0x40023800
 8003954:	42470000 	.word	0x42470000
 8003958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395c:	4b88      	ldr	r3, [pc, #544]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 800395e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ea      	bne.n	800393e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8097 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	4b7d      	ldr	r3, [pc, #500]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a7c      	ldr	r2, [pc, #496]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b7a      	ldr	r3, [pc, #488]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a6:	4b77      	ldr	r3, [pc, #476]	; (8003b84 <HAL_RCC_OscConfig+0x474>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d118      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b2:	4b74      	ldr	r3, [pc, #464]	; (8003b84 <HAL_RCC_OscConfig+0x474>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a73      	ldr	r2, [pc, #460]	; (8003b84 <HAL_RCC_OscConfig+0x474>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039be:	f7fd fa6f 	bl	8000ea0 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fd fa6b 	bl	8000ea0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e10c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_OscConfig+0x474>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x2ea>
 80039ec:	4b64      	ldr	r3, [pc, #400]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a63      	ldr	r2, [pc, #396]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	e01c      	b.n	8003a34 <HAL_RCC_OscConfig+0x324>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x30c>
 8003a02:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a5e      	ldr	r2, [pc, #376]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	4b5c      	ldr	r3, [pc, #368]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_OscConfig+0x324>
 8003a1c:	4b58      	ldr	r3, [pc, #352]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a54      	ldr	r2, [pc, #336]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	f023 0304 	bic.w	r3, r3, #4
 8003a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fa30 	bl	8000ea0 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fd fa2c 	bl	8000ea0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0cb      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5a:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ee      	beq.n	8003a44 <HAL_RCC_OscConfig+0x334>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a68:	f7fd fa1a 	bl	8000ea0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fd fa16 	bl	8000ea0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0b5      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a86:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ee      	bne.n	8003a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a98:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	4a38      	ldr	r2, [pc, #224]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a1 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aae:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d05c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d141      	bne.n	8003b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac2:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <HAL_RCC_OscConfig+0x478>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd f9ea 	bl	8000ea0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd f9e6 	bl	8000ea0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e087      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	019b      	lsls	r3, r3, #6
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	041b      	lsls	r3, r3, #16
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	491b      	ldr	r1, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HAL_RCC_OscConfig+0x478>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fd f9bf 	bl	8000ea0 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fd f9bb 	bl	8000ea0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e05c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x416>
 8003b44:	e054      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_RCC_OscConfig+0x478>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd f9a8 	bl	8000ea0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd f9a4 	bl	8000ea0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e045      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_OscConfig+0x470>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x444>
 8003b72:	e03d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e038      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40007000 	.word	0x40007000
 8003b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b8c:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_RCC_OscConfig+0x4ec>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d028      	beq.n	8003bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d121      	bne.n	8003bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d11a      	bne.n	8003bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d111      	bne.n	8003bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800

08003c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0cc      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c14:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d90c      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b63      	ldr	r3, [pc, #396]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0b8      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c54:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c6c:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a52      	ldr	r2, [pc, #328]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c78:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	494d      	ldr	r1, [pc, #308]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d044      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d119      	bne.n	8003cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e06f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e067      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 0203 	bic.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4934      	ldr	r1, [pc, #208]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf0:	f7fd f8d6 	bl	8000ea0 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf8:	f7fd f8d2 	bl	8000ea0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e04f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 020c 	and.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d1eb      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d20c      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e032      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4916      	ldr	r1, [pc, #88]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	490e      	ldr	r1, [pc, #56]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d86:	f000 f821 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	490a      	ldr	r1, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	5ccb      	ldrb	r3, [r1, r3]
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f836 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023c00 	.word	0x40023c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	08008d58 	.word	0x08008d58
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	20000004 	.word	0x20000004

08003dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b094      	sub	sp, #80	; 0x50
 8003dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd8:	2300      	movs	r3, #0
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ddc:	2300      	movs	r3, #0
 8003dde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de4:	4b79      	ldr	r3, [pc, #484]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x40>
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	f200 80e1 	bhi.w	8003fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x34>
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dfe:	e0db      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b73      	ldr	r3, [pc, #460]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e04:	e0db      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e06:	4b73      	ldr	r3, [pc, #460]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e0a:	e0d8      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e0c:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e16:	4b6d      	ldr	r3, [pc, #436]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e22:	4b6a      	ldr	r3, [pc, #424]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
 8003e36:	2300      	movs	r3, #0
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e3e:	4622      	mov	r2, r4
 8003e40:	462b      	mov	r3, r5
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	0159      	lsls	r1, r3, #5
 8003e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e50:	0150      	lsls	r0, r2, #5
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4621      	mov	r1, r4
 8003e58:	1a51      	subs	r1, r2, r1
 8003e5a:	6139      	str	r1, [r7, #16]
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e70:	4659      	mov	r1, fp
 8003e72:	018b      	lsls	r3, r1, #6
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	018a      	lsls	r2, r1, #6
 8003e7e:	4651      	mov	r1, sl
 8003e80:	ebb2 0801 	subs.w	r8, r2, r1
 8003e84:	4659      	mov	r1, fp
 8003e86:	eb63 0901 	sbc.w	r9, r3, r1
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e9e:	4690      	mov	r8, r2
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	eb18 0303 	adds.w	r3, r8, r3
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	462b      	mov	r3, r5
 8003eac:	eb49 0303 	adc.w	r3, r9, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	024b      	lsls	r3, r1, #9
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ec8:	4621      	mov	r1, r4
 8003eca:	024a      	lsls	r2, r1, #9
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003edc:	f7fc f9d0 	bl	8000280 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	e058      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eea:	4b38      	ldr	r3, [pc, #224]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	f04f 0000 	mov.w	r0, #0
 8003f0c:	f04f 0100 	mov.w	r1, #0
 8003f10:	0159      	lsls	r1, r3, #5
 8003f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f16:	0150      	lsls	r0, r2, #5
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f22:	4649      	mov	r1, r9
 8003f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f40:	eb63 050b 	sbc.w	r5, r3, fp
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	00eb      	lsls	r3, r5, #3
 8003f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f52:	00e2      	lsls	r2, r4, #3
 8003f54:	4614      	mov	r4, r2
 8003f56:	461d      	mov	r5, r3
 8003f58:	4643      	mov	r3, r8
 8003f5a:	18e3      	adds	r3, r4, r3
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	464b      	mov	r3, r9
 8003f60:	eb45 0303 	adc.w	r3, r5, r3
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f72:	4629      	mov	r1, r5
 8003f74:	028b      	lsls	r3, r1, #10
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	028a      	lsls	r2, r1, #10
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	61fa      	str	r2, [r7, #28]
 8003f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f90:	f7fc f976 	bl	8000280 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb6:	e002      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3750      	adds	r7, #80	; 0x50
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	007a1200 	.word	0x007a1200

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	f107 001c 	add.w	r0, r7, #28
 8003ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	2b01      	cmp	r3, #1
 8004006:	d122      	bne.n	800404e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800401c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f001 fbee 	bl	8005824 <USB_CoreReset>
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e01a      	b.n	8004084 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f001 fbe2 	bl	8005824 <USB_CoreReset>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
 8004076:	e005      	b.n	8004084 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10b      	bne.n	80040a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f043 0206 	orr.w	r2, r3, #6
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040ae:	b004      	add	sp, #16
 80040b0:	4770      	bx	lr
	...

080040b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d165      	bne.n	8004194 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a41      	ldr	r2, [pc, #260]	; (80041d0 <USB_SetTurnaroundTime+0x11c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <USB_SetTurnaroundTime+0x2a>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <USB_SetTurnaroundTime+0x120>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d202      	bcs.n	80040de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040d8:	230f      	movs	r3, #15
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e062      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <USB_SetTurnaroundTime+0x120>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d306      	bcc.n	80040f4 <USB_SetTurnaroundTime+0x40>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <USB_SetTurnaroundTime+0x124>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d202      	bcs.n	80040f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040ee:	230e      	movs	r3, #14
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e057      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <USB_SetTurnaroundTime+0x124>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d306      	bcc.n	800410a <USB_SetTurnaroundTime+0x56>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a37      	ldr	r2, [pc, #220]	; (80041dc <USB_SetTurnaroundTime+0x128>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d202      	bcs.n	800410a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004104:	230d      	movs	r3, #13
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e04c      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a33      	ldr	r2, [pc, #204]	; (80041dc <USB_SetTurnaroundTime+0x128>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d306      	bcc.n	8004120 <USB_SetTurnaroundTime+0x6c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <USB_SetTurnaroundTime+0x12c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d802      	bhi.n	8004120 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800411a:	230c      	movs	r3, #12
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e041      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a2f      	ldr	r2, [pc, #188]	; (80041e0 <USB_SetTurnaroundTime+0x12c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d906      	bls.n	8004136 <USB_SetTurnaroundTime+0x82>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a2e      	ldr	r2, [pc, #184]	; (80041e4 <USB_SetTurnaroundTime+0x130>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d802      	bhi.n	8004136 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004130:	230b      	movs	r3, #11
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e036      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <USB_SetTurnaroundTime+0x130>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d906      	bls.n	800414c <USB_SetTurnaroundTime+0x98>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <USB_SetTurnaroundTime+0x134>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d802      	bhi.n	800414c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004146:	230a      	movs	r3, #10
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e02b      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <USB_SetTurnaroundTime+0x134>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d906      	bls.n	8004162 <USB_SetTurnaroundTime+0xae>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a25      	ldr	r2, [pc, #148]	; (80041ec <USB_SetTurnaroundTime+0x138>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d202      	bcs.n	8004162 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800415c:	2309      	movs	r3, #9
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e020      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a21      	ldr	r2, [pc, #132]	; (80041ec <USB_SetTurnaroundTime+0x138>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d306      	bcc.n	8004178 <USB_SetTurnaroundTime+0xc4>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <USB_SetTurnaroundTime+0x13c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d802      	bhi.n	8004178 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004172:	2308      	movs	r3, #8
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e015      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <USB_SetTurnaroundTime+0x13c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d906      	bls.n	800418e <USB_SetTurnaroundTime+0xda>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <USB_SetTurnaroundTime+0x140>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d202      	bcs.n	800418e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004188:	2307      	movs	r3, #7
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e00a      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800418e:	2306      	movs	r3, #6
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e007      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800419a:	2309      	movs	r3, #9
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e001      	b.n	80041a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041a0:	2309      	movs	r3, #9
 80041a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	029b      	lsls	r3, r3, #10
 80041b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	00d8acbf 	.word	0x00d8acbf
 80041d4:	00e4e1c0 	.word	0x00e4e1c0
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	01067380 	.word	0x01067380
 80041e0:	011a499f 	.word	0x011a499f
 80041e4:	01312cff 	.word	0x01312cff
 80041e8:	014ca43f 	.word	0x014ca43f
 80041ec:	016e3600 	.word	0x016e3600
 80041f0:	01a6ab1f 	.word	0x01a6ab1f
 80041f4:	01e84800 	.word	0x01e84800

080041f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d115      	bne.n	800428a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800426a:	2001      	movs	r0, #1
 800426c:	f7fc fe24 	bl	8000eb8 <HAL_Delay>
      ms++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fa45 	bl	8005706 <USB_GetMode>
 800427c:	4603      	mov	r3, r0
 800427e:	2b01      	cmp	r3, #1
 8004280:	d01e      	beq.n	80042c0 <USB_SetCurrentMode+0x84>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b31      	cmp	r3, #49	; 0x31
 8004286:	d9f0      	bls.n	800426a <USB_SetCurrentMode+0x2e>
 8004288:	e01a      	b.n	80042c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d115      	bne.n	80042bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800429c:	2001      	movs	r0, #1
 800429e:	f7fc fe0b 	bl	8000eb8 <HAL_Delay>
      ms++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 fa2c 	bl	8005706 <USB_GetMode>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <USB_SetCurrentMode+0x84>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b31      	cmp	r3, #49	; 0x31
 80042b8:	d9f0      	bls.n	800429c <USB_SetCurrentMode+0x60>
 80042ba:	e001      	b.n	80042c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e005      	b.n	80042cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b32      	cmp	r3, #50	; 0x32
 80042c4:	d101      	bne.n	80042ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042d4:	b084      	sub	sp, #16
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e009      	b.n	8004308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3340      	adds	r3, #64	; 0x40
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	2200      	movs	r2, #0
 8004300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3301      	adds	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b0e      	cmp	r3, #14
 800430c:	d9f2      	bls.n	80042f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11c      	bne.n	800434e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004322:	f043 0302 	orr.w	r3, r3, #2
 8004326:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
 800434c:	e00b      	b.n	8004366 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800436c:	461a      	mov	r2, r3
 800436e:	2300      	movs	r3, #0
 8004370:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004378:	4619      	mov	r1, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	461a      	mov	r2, r3
 8004382:	680b      	ldr	r3, [r1, #0]
 8004384:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10c      	bne.n	80043a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004392:	2100      	movs	r1, #0
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f965 	bl	8004664 <USB_SetDevSpeed>
 800439a:	e008      	b.n	80043ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800439c:	2101      	movs	r1, #1
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f960 	bl	8004664 <USB_SetDevSpeed>
 80043a4:	e003      	b.n	80043ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043a6:	2103      	movs	r1, #3
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f95b 	bl	8004664 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043ae:	2110      	movs	r1, #16
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f8f3 	bl	800459c <USB_FlushTxFifo>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f91f 	bl	8004604 <USB_FlushRxFifo>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	461a      	mov	r2, r3
 80043d8:	2300      	movs	r3, #0
 80043da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e043      	b.n	8004482 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800440c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004410:	d118      	bne.n	8004444 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	461a      	mov	r2, r3
 8004426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	e013      	b.n	8004456 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443a:	461a      	mov	r2, r3
 800443c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e008      	b.n	8004456 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004450:	461a      	mov	r2, r3
 8004452:	2300      	movs	r3, #0
 8004454:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800447a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	3301      	adds	r3, #1
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d3b7      	bcc.n	80043fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	e043      	b.n	8004518 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a6:	d118      	bne.n	80044da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e013      	b.n	80044ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e008      	b.n	80044ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	461a      	mov	r2, r3
 80044e8:	2300      	movs	r3, #0
 80044ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	461a      	mov	r2, r3
 80044fa:	2300      	movs	r3, #0
 80044fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	461a      	mov	r2, r3
 800450c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3301      	adds	r3, #1
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d3b7      	bcc.n	8004490 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004532:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004540:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <USB_DevInit+0x2c4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f043 0208 	orr.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004588:	7dfb      	ldrb	r3, [r7, #23]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004594:	b004      	add	sp, #16
 8004596:	4770      	bx	lr
 8004598:	803c3800 	.word	0x803c3800

0800459c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <USB_FlushTxFifo+0x64>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e01b      	b.n	80045f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	daf2      	bge.n	80045aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a08      	ldr	r2, [pc, #32]	; (8004600 <USB_FlushTxFifo+0x64>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e006      	b.n	80045f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d0f0      	beq.n	80045d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	00030d40 	.word	0x00030d40

08004604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4a11      	ldr	r2, [pc, #68]	; (8004660 <USB_FlushRxFifo+0x5c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e018      	b.n	8004654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	daf2      	bge.n	8004610 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2210      	movs	r2, #16
 8004632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3301      	adds	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a08      	ldr	r2, [pc, #32]	; (8004660 <USB_FlushRxFifo+0x5c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e006      	b.n	8004654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b10      	cmp	r3, #16
 8004650:	d0f0      	beq.n	8004634 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	00030d40 	.word	0x00030d40

08004664 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004696:	b480      	push	{r7}
 8004698:	b087      	sub	sp, #28
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
 80046ba:	e00a      	b.n	80046d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d002      	beq.n	80046c8 <USB_GetDevSpeed+0x32>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d102      	bne.n	80046ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046c8:	2302      	movs	r3, #2
 80046ca:	75fb      	strb	r3, [r7, #23]
 80046cc:	e001      	b.n	80046d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046ce:	230f      	movs	r3, #15
 80046d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d13a      	bne.n	8004772 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	b29b      	uxth	r3, r3
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800471a:	4313      	orrs	r3, r2
 800471c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d155      	bne.n	80047e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004750:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	059b      	lsls	r3, r3, #22
 8004756:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004758:	4313      	orrs	r3, r2
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e036      	b.n	80047e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004790:	4313      	orrs	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11a      	bne.n	80047e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	791b      	ldrb	r3, [r3, #4]
 80047c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047c6:	430b      	orrs	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d161      	bne.n	80048d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004822:	d11f      	bne.n	8004864 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004842:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004862:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	b29b      	uxth	r3, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004884:	4013      	ands	r3, r2
 8004886:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	b29b      	uxth	r3, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a8:	4013      	ands	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	0159      	lsls	r1, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	4619      	mov	r1, r3
 80048c8:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <USB_DeactivateEndpoint+0x1b0>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
 80048ce:	e060      	b.n	8004992 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e6:	d11f      	bne.n	8004928 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004906:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	43db      	mvns	r3, r3
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004948:	4013      	ands	r3, r2
 800494a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	43db      	mvns	r3, r3
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496c:	4013      	ands	r3, r2
 800496e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0159      	lsls	r1, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	440b      	add	r3, r1
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	4619      	mov	r1, r3
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <USB_DeactivateEndpoint+0x1b4>)
 800498e:	4013      	ands	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	ec337800 	.word	0xec337800
 80049a4:	eff37800 	.word	0xeff37800

080049a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	f040 815c 	bne.w	8004c82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d132      	bne.n	8004a38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a30:	0cdb      	lsrs	r3, r3, #19
 8004a32:	04db      	lsls	r3, r3, #19
 8004a34:	6113      	str	r3, [r2, #16]
 8004a36:	e074      	b.n	8004b22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a52:	0cdb      	lsrs	r3, r3, #19
 8004a54:	04db      	lsls	r3, r3, #19
 8004a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	440b      	add	r3, r1
 8004a94:	1e59      	subs	r1, r3, #1
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004aa0:	4b9d      	ldr	r3, [pc, #628]	; (8004d18 <USB_EPStartXfer+0x370>)
 8004aa2:	400b      	ands	r3, r1
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	0148      	lsls	r0, r1, #5
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	4401      	add	r1, r0
 8004aac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aca:	69b9      	ldr	r1, [r7, #24]
 8004acc:	0148      	lsls	r0, r1, #5
 8004ace:	69f9      	ldr	r1, [r7, #28]
 8004ad0:	4401      	add	r1, r0
 8004ad2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	791b      	ldrb	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d11f      	bne.n	8004b22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d14b      	bne.n	8004bc0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d128      	bne.n	8004b9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d110      	bne.n	8004b7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e00f      	b.n	8004b9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e133      	b.n	8004e28 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	791b      	ldrb	r3, [r3, #4]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d015      	beq.n	8004c14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 811b 	beq.w	8004e28 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f303 	lsl.w	r3, r1, r3
 8004c08:	69f9      	ldr	r1, [r7, #28]
 8004c0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	634b      	str	r3, [r1, #52]	; 0x34
 8004c12:	e109      	b.n	8004e28 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e00f      	b.n	8004c66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6919      	ldr	r1, [r3, #16]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781a      	ldrb	r2, [r3, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	b298      	uxth	r0, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fade 	bl	800523c <USB_WritePacket>
 8004c80:	e0d2      	b.n	8004e28 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9c:	0cdb      	lsrs	r3, r3, #19
 8004c9e:	04db      	lsls	r3, r3, #19
 8004ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d126      	bne.n	8004d1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	0148      	lsls	r0, r1, #5
 8004ce8:	69f9      	ldr	r1, [r7, #28]
 8004cea:	4401      	add	r1, r0
 8004cec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d12:	6113      	str	r3, [r2, #16]
 8004d14:	e03a      	b.n	8004d8c <USB_EPStartXfer+0x3e4>
 8004d16:	bf00      	nop
 8004d18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	1e5a      	subs	r2, r3, #1
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	8afa      	ldrh	r2, [r7, #22]
 8004d38:	fb03 f202 	mul.w	r2, r3, r2
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	8afb      	ldrh	r3, [r7, #22]
 8004d50:	04d9      	lsls	r1, r3, #19
 8004d52:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <USB_EPStartXfer+0x48c>)
 8004d54:	400b      	ands	r3, r1
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	0148      	lsls	r0, r1, #5
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	4401      	add	r1, r0
 8004d5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d62:	4313      	orrs	r3, r2
 8004d64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7c:	69b9      	ldr	r1, [r7, #24]
 8004d7e:	0148      	lsls	r0, r1, #5
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	4401      	add	r1, r0
 8004d84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10d      	bne.n	8004dae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6919      	ldr	r1, [r3, #16]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	460a      	mov	r2, r1
 8004dac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	791b      	ldrb	r3, [r3, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d128      	bne.n	8004e08 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d110      	bne.n	8004de8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e00f      	b.n	8004e08 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	1ff80000 	.word	0x1ff80000

08004e38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 80ce 	bne.w	8004ff6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d132      	bne.n	8004ec8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec0:	0cdb      	lsrs	r3, r3, #19
 8004ec2:	04db      	lsls	r3, r3, #19
 8004ec4:	6113      	str	r3, [r2, #16]
 8004ec6:	e04e      	b.n	8004f66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee2:	0cdb      	lsrs	r3, r3, #19
 8004ee4:	04db      	lsls	r3, r3, #19
 8004ee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d903      	bls.n	8004f20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	0148      	lsls	r0, r1, #5
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	4401      	add	r1, r0
 8004f5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f62:	4313      	orrs	r3, r2
 8004f64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d11e      	bne.n	8004faa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d009      	beq.n	8004f88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e097      	b.n	80050da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8083 	beq.w	80050da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ff4:	e071      	b.n	80050da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	0cdb      	lsrs	r3, r3, #19
 8005012:	04db      	lsls	r3, r3, #19
 8005014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005038:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005088:	6939      	ldr	r1, [r7, #16]
 800508a:	0148      	lsls	r0, r1, #5
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	4401      	add	r1, r0
 8005090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10d      	bne.n	80050ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6919      	ldr	r1, [r3, #16]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b6:	460a      	mov	r2, r1
 80050b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d14a      	bne.n	800519c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800511a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511e:	f040 8086 	bne.w	800522e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005144:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005168:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f242 7210 	movw	r2, #10000	; 0x2710
 8005176:	4293      	cmp	r3, r2
 8005178:	d902      	bls.n	8005180 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
          break;
 800517e:	e056      	b.n	800522e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005198:	d0e7      	beq.n	800516a <USB_EPStopXfer+0x82>
 800519a:	e048      	b.n	800522e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b4:	d13b      	bne.n	800522e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f242 7210 	movw	r2, #10000	; 0x2710
 800520a:	4293      	cmp	r3, r2
 800520c:	d902      	bls.n	8005214 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	75fb      	strb	r3, [r7, #23]
          break;
 8005212:	e00c      	b.n	800522e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800522c:	d0e7      	beq.n	80051fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4611      	mov	r1, r2
 8005248:	461a      	mov	r2, r3
 800524a:	460b      	mov	r3, r1
 800524c:	71fb      	strb	r3, [r7, #7]
 800524e:	4613      	mov	r3, r2
 8005250:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800525a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	d123      	bne.n	80052aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005262:	88bb      	ldrh	r3, [r7, #4]
 8005264:	3303      	adds	r3, #3
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e018      	b.n	80052a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	031a      	lsls	r2, r3, #12
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527c:	461a      	mov	r2, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3301      	adds	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3301      	adds	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	3301      	adds	r3, #1
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3e2      	bcc.n	8005270 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b08b      	sub	sp, #44	; 0x2c
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	089b      	lsrs	r3, r3, #2
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	e014      	b.n	800530e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	3301      	adds	r3, #1
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	3301      	adds	r3, #1
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	3301      	adds	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	3301      	adds	r3, #1
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3e6      	bcc.n	80052e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005316:	8bfb      	ldrh	r3, [r7, #30]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005326:	461a      	mov	r2, r3
 8005328:	f107 0310 	add.w	r3, r7, #16
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
 800533c:	b2da      	uxtb	r2, r3
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	701a      	strb	r2, [r3, #0]
      i++;
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	3301      	adds	r3, #1
 8005346:	623b      	str	r3, [r7, #32]
      pDest++;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	3301      	adds	r3, #1
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800534e:	8bfb      	ldrh	r3, [r7, #30]
 8005350:	3b01      	subs	r3, #1
 8005352:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005354:	8bfb      	ldrh	r3, [r7, #30]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ea      	bne.n	8005330 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800535c:	4618      	mov	r0, r3
 800535e:	372c      	adds	r7, #44	; 0x2c
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d12c      	bne.n	80053de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	db12      	blt.n	80053bc <USB_EPSetStall+0x54>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00f      	beq.n	80053bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e02b      	b.n	8005436 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	db12      	blt.n	8005416 <USB_EPSetStall+0xae>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00f      	beq.n	8005416 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005414:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d128      	bne.n	80054b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800547e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d003      	beq.n	8005490 <USB_EPClearStall+0x4c>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	791b      	ldrb	r3, [r3, #4]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d138      	bne.n	8005502 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e027      	b.n	8005502 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	791b      	ldrb	r3, [r3, #4]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d003      	beq.n	80054e2 <USB_EPClearStall+0x9e>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d10f      	bne.n	8005502 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005500:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005532:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558a:	f023 0302 	bic.w	r3, r3, #2
 800558e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055cc:	f043 0302 	orr.w	r3, r3, #2
 80055d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	4013      	ands	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	0c1b      	lsrs	r3, r3, #16
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	b29b      	uxth	r3, r3
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800569c:	68bb      	ldr	r3, [r7, #8]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056f8:	68bb      	ldr	r3, [r7, #8]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0301 	and.w	r3, r3, #1
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	460b      	mov	r3, r1
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	333c      	adds	r3, #60	; 0x3c
 800577e:	3304      	adds	r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4a26      	ldr	r2, [pc, #152]	; (8005820 <USB_EP0_OutStart+0xb8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d90a      	bls.n	80057a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579c:	d101      	bne.n	80057a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e037      	b.n	8005812 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f043 0318 	orr.w	r3, r3, #24
 80057d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d10f      	bne.n	8005810 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800580e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	4f54300a 	.word	0x4f54300a

08005824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <USB_CoreReset+0x64>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e01b      	b.n	800587a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	daf2      	bge.n	8005830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f043 0201 	orr.w	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <USB_CoreReset+0x64>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d0f0      	beq.n	800585a <USB_CoreReset+0x36>

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	00030d40 	.word	0x00030d40

0800588c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005898:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800589c:	f002 fcc4 	bl	8008228 <USBD_static_malloc>
 80058a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	32b0      	adds	r2, #176	; 0xb0
 80058b2:	2100      	movs	r1, #0
 80058b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0d4      	b.n	8005a66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80058bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80058c0:	2100      	movs	r1, #0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f002 fd14 	bl	80082f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	32b0      	adds	r2, #176	; 0xb0
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	32b0      	adds	r2, #176	; 0xb0
 80058e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	7c1b      	ldrb	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d138      	bne.n	8005966 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058f4:	4b5e      	ldr	r3, [pc, #376]	; (8005a70 <USBD_CDC_Init+0x1e4>)
 80058f6:	7819      	ldrb	r1, [r3, #0]
 80058f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058fc:	2202      	movs	r2, #2
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f002 fb6f 	bl	8007fe2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005904:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <USBD_CDC_Init+0x1e4>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	3324      	adds	r3, #36	; 0x24
 800591a:	2201      	movs	r2, #1
 800591c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800591e:	4b55      	ldr	r3, [pc, #340]	; (8005a74 <USBD_CDC_Init+0x1e8>)
 8005920:	7819      	ldrb	r1, [r3, #0]
 8005922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005926:	2202      	movs	r2, #2
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f002 fb5a 	bl	8007fe2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800592e:	4b51      	ldr	r3, [pc, #324]	; (8005a74 <USBD_CDC_Init+0x1e8>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005946:	2201      	movs	r2, #1
 8005948:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800594a:	4b4b      	ldr	r3, [pc, #300]	; (8005a78 <USBD_CDC_Init+0x1ec>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	3326      	adds	r3, #38	; 0x26
 8005960:	2210      	movs	r2, #16
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	e035      	b.n	80059d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005966:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <USBD_CDC_Init+0x1e4>)
 8005968:	7819      	ldrb	r1, [r3, #0]
 800596a:	2340      	movs	r3, #64	; 0x40
 800596c:	2202      	movs	r2, #2
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 fb37 	bl	8007fe2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005974:	4b3e      	ldr	r3, [pc, #248]	; (8005a70 <USBD_CDC_Init+0x1e4>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 020f 	and.w	r2, r3, #15
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	3324      	adds	r3, #36	; 0x24
 800598a:	2201      	movs	r2, #1
 800598c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800598e:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <USBD_CDC_Init+0x1e8>)
 8005990:	7819      	ldrb	r1, [r3, #0]
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	2202      	movs	r2, #2
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f002 fb23 	bl	8007fe2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800599c:	4b35      	ldr	r3, [pc, #212]	; (8005a74 <USBD_CDC_Init+0x1e8>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059b4:	2201      	movs	r2, #1
 80059b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059b8:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <USBD_CDC_Init+0x1ec>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3326      	adds	r3, #38	; 0x26
 80059ce:	2210      	movs	r2, #16
 80059d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059d2:	4b29      	ldr	r3, [pc, #164]	; (8005a78 <USBD_CDC_Init+0x1ec>)
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	2308      	movs	r3, #8
 80059d8:	2203      	movs	r2, #3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f002 fb01 	bl	8007fe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <USBD_CDC_Init+0x1ec>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	2201      	movs	r2, #1
 80059f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	33b0      	adds	r3, #176	; 0xb0
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e018      	b.n	8005a66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7c1b      	ldrb	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <USBD_CDC_Init+0x1e8>)
 8005a3e:	7819      	ldrb	r1, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 fbb8 	bl	80081c0 <USBD_LL_PrepareReceive>
 8005a50:	e008      	b.n	8005a64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <USBD_CDC_Init+0x1e8>)
 8005a54:	7819      	ldrb	r1, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f002 fbae 	bl	80081c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000093 	.word	0x20000093
 8005a74:	20000094 	.word	0x20000094
 8005a78:	20000095 	.word	0x20000095

08005a7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a88:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <USBD_CDC_DeInit+0xf8>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 facd 	bl	800802e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a94:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <USBD_CDC_DeInit+0xf8>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3324      	adds	r3, #36	; 0x24
 8005aaa:	2200      	movs	r2, #0
 8005aac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005aae:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <USBD_CDC_DeInit+0xfc>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 faba 	bl	800802e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005aba:	4b2f      	ldr	r3, [pc, #188]	; (8005b78 <USBD_CDC_DeInit+0xfc>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f003 020f 	and.w	r2, r3, #15
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <USBD_CDC_DeInit+0x100>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f002 faa6 	bl	800802e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <USBD_CDC_DeInit+0x100>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	3324      	adds	r3, #36	; 0x24
 8005af8:	2200      	movs	r2, #0
 8005afa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005afc:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <USBD_CDC_DeInit+0x100>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 020f 	and.w	r2, r3, #15
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	3326      	adds	r3, #38	; 0x26
 8005b12:	2200      	movs	r2, #0
 8005b14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	32b0      	adds	r2, #176	; 0xb0
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01f      	beq.n	8005b68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	33b0      	adds	r3, #176	; 0xb0
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32b0      	adds	r2, #176	; 0xb0
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f002 fb7a 	bl	8008244 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32b0      	adds	r2, #176	; 0xb0
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000093 	.word	0x20000093
 8005b78:	20000094 	.word	0x20000094
 8005b7c:	20000095 	.word	0x20000095

08005b80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32b0      	adds	r2, #176	; 0xb0
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e0bf      	b.n	8005d30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d050      	beq.n	8005c5e <USBD_CDC_Setup+0xde>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	f040 80af 	bne.w	8005d20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	88db      	ldrh	r3, [r3, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d03a      	beq.n	8005c40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b25b      	sxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da1b      	bge.n	8005c0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	33b0      	adds	r3, #176	; 0xb0
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	88d2      	ldrh	r2, [r2, #6]
 8005bf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	88db      	ldrh	r3, [r3, #6]
 8005bf6:	2b07      	cmp	r3, #7
 8005bf8:	bf28      	it	cs
 8005bfa:	2307      	movcs	r3, #7
 8005bfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	89fa      	ldrh	r2, [r7, #14]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fd89 	bl	800771c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c0a:	e090      	b.n	8005d2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785a      	ldrb	r2, [r3, #1]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	88db      	ldrh	r3, [r3, #6]
 8005c1a:	2b3f      	cmp	r3, #63	; 0x3f
 8005c1c:	d803      	bhi.n	8005c26 <USBD_CDC_Setup+0xa6>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	88db      	ldrh	r3, [r3, #6]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	e000      	b.n	8005c28 <USBD_CDC_Setup+0xa8>
 8005c26:	2240      	movs	r2, #64	; 0x40
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c2e:	6939      	ldr	r1, [r7, #16]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c36:	461a      	mov	r2, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 fd9b 	bl	8007774 <USBD_CtlPrepareRx>
      break;
 8005c3e:	e076      	b.n	8005d2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	33b0      	adds	r3, #176	; 0xb0
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	7850      	ldrb	r0, [r2, #1]
 8005c56:	2200      	movs	r2, #0
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	4798      	blx	r3
      break;
 8005c5c:	e067      	b.n	8005d2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b0b      	cmp	r3, #11
 8005c64:	d851      	bhi.n	8005d0a <USBD_CDC_Setup+0x18a>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USBD_CDC_Setup+0xec>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c9d 	.word	0x08005c9d
 8005c70:	08005d19 	.word	0x08005d19
 8005c74:	08005d0b 	.word	0x08005d0b
 8005c78:	08005d0b 	.word	0x08005d0b
 8005c7c:	08005d0b 	.word	0x08005d0b
 8005c80:	08005d0b 	.word	0x08005d0b
 8005c84:	08005d0b 	.word	0x08005d0b
 8005c88:	08005d0b 	.word	0x08005d0b
 8005c8c:	08005d0b 	.word	0x08005d0b
 8005c90:	08005d0b 	.word	0x08005d0b
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cf1 	.word	0x08005cf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d107      	bne.n	8005cb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ca8:	f107 030a 	add.w	r3, r7, #10
 8005cac:	2202      	movs	r2, #2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 fd33 	bl	800771c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cb6:	e032      	b.n	8005d1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fcbd 	bl	800763a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc4:	e02b      	b.n	8005d1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d107      	bne.n	8005ce2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cd2:	f107 030d 	add.w	r3, r7, #13
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fd1e 	bl	800771c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ce0:	e01d      	b.n	8005d1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fca8 	bl	800763a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	75fb      	strb	r3, [r7, #23]
          break;
 8005cee:	e016      	b.n	8005d1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d00f      	beq.n	8005d1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 fc9b 	bl	800763a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d08:	e008      	b.n	8005d1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fc94 	bl	800763a <USBD_CtlError>
          ret = USBD_FAIL;
 8005d12:	2303      	movs	r3, #3
 8005d14:	75fb      	strb	r3, [r7, #23]
          break;
 8005d16:	e002      	b.n	8005d1e <USBD_CDC_Setup+0x19e>
          break;
 8005d18:	bf00      	nop
 8005d1a:	e008      	b.n	8005d2e <USBD_CDC_Setup+0x1ae>
          break;
 8005d1c:	bf00      	nop
      }
      break;
 8005d1e:	e006      	b.n	8005d2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 fc89 	bl	800763a <USBD_CtlError>
      ret = USBD_FAIL;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	32b0      	adds	r2, #176	; 0xb0
 8005d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e065      	b.n	8005e2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	32b0      	adds	r2, #176	; 0xb0
 8005d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3318      	adds	r3, #24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02f      	beq.n	8005dec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3318      	adds	r3, #24
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	f003 010f 	and.w	r1, r3, #15
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	460b      	mov	r3, r1
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	440b      	add	r3, r1
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4403      	add	r3, r0
 8005db4:	3348      	adds	r3, #72	; 0x48
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005dbc:	fb01 f303 	mul.w	r3, r1, r3
 8005dc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d112      	bne.n	8005dec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3318      	adds	r3, #24
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dde:	78f9      	ldrb	r1, [r7, #3]
 8005de0:	2300      	movs	r3, #0
 8005de2:	2200      	movs	r2, #0
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 f9ca 	bl	800817e <USBD_LL_Transmit>
 8005dea:	e01f      	b.n	8005e2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	33b0      	adds	r3, #176	; 0xb0
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d010      	beq.n	8005e2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	33b0      	adds	r3, #176	; 0xb0
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	32b0      	adds	r2, #176	; 0xb0
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	32b0      	adds	r2, #176	; 0xb0
 8005e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e01a      	b.n	8005e9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f002 f9c8 	bl	8008202 <USBD_LL_GetRxDataSize>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	33b0      	adds	r3, #176	; 0xb0
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	32b0      	adds	r2, #176	; 0xb0
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e025      	b.n	8005f14 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	33b0      	adds	r3, #176	; 0xb0
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <USBD_CDC_EP0_RxReady+0x6c>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ee2:	2bff      	cmp	r3, #255	; 0xff
 8005ee4:	d015      	beq.n	8005f12 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	33b0      	adds	r3, #176	; 0xb0
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005efe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f06:	b292      	uxth	r2, r2
 8005f08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f24:	2182      	movs	r1, #130	; 0x82
 8005f26:	4818      	ldr	r0, [pc, #96]	; (8005f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f28:	f000 fd4f 	bl	80069ca <USBD_GetEpDesc>
 8005f2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4815      	ldr	r0, [pc, #84]	; (8005f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f32:	f000 fd4a 	bl	80069ca <USBD_GetEpDesc>
 8005f36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f38:	2181      	movs	r1, #129	; 0x81
 8005f3a:	4813      	ldr	r0, [pc, #76]	; (8005f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f3c:	f000 fd45 	bl	80069ca <USBD_GetEpDesc>
 8005f40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	711a      	strb	r2, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f70:	711a      	strb	r2, [r3, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2243      	movs	r2, #67	; 0x43
 8005f7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000050 	.word	0x20000050

08005f8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f94:	2182      	movs	r1, #130	; 0x82
 8005f96:	4818      	ldr	r0, [pc, #96]	; (8005ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f98:	f000 fd17 	bl	80069ca <USBD_GetEpDesc>
 8005f9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4815      	ldr	r0, [pc, #84]	; (8005ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fa2:	f000 fd12 	bl	80069ca <USBD_GetEpDesc>
 8005fa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fa8:	2181      	movs	r1, #129	; 0x81
 8005faa:	4813      	ldr	r0, [pc, #76]	; (8005ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fac:	f000 fd0d 	bl	80069ca <USBD_GetEpDesc>
 8005fb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	711a      	strb	r2, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f042 0202 	orr.w	r2, r2, #2
 8005fd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	711a      	strb	r2, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f042 0202 	orr.w	r2, r2, #2
 8005fe4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2243      	movs	r2, #67	; 0x43
 8005fea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fec:	4b02      	ldr	r3, [pc, #8]	; (8005ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000050 	.word	0x20000050

08005ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006004:	2182      	movs	r1, #130	; 0x82
 8006006:	4818      	ldr	r0, [pc, #96]	; (8006068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006008:	f000 fcdf 	bl	80069ca <USBD_GetEpDesc>
 800600c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800600e:	2101      	movs	r1, #1
 8006010:	4815      	ldr	r0, [pc, #84]	; (8006068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006012:	f000 fcda 	bl	80069ca <USBD_GetEpDesc>
 8006016:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006018:	2181      	movs	r1, #129	; 0x81
 800601a:	4813      	ldr	r0, [pc, #76]	; (8006068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800601c:	f000 fcd5 	bl	80069ca <USBD_GetEpDesc>
 8006020:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2210      	movs	r2, #16
 800602c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d006      	beq.n	8006042 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2200      	movs	r2, #0
 8006038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800603c:	711a      	strb	r2, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d006      	beq.n	8006056 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006050:	711a      	strb	r2, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2243      	movs	r2, #67	; 0x43
 800605a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800605c:	4b02      	ldr	r3, [pc, #8]	; (8006068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000050 	.word	0x20000050

0800606c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	220a      	movs	r2, #10
 8006078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800607a:	4b03      	ldr	r3, [pc, #12]	; (8006088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	2000000c 	.word	0x2000000c

0800608c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	e009      	b.n	80060b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	33b0      	adds	r3, #176	; 0xb0
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	32b0      	adds	r2, #176	; 0xb0
 80060d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e008      	b.n	80060f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	32b0      	adds	r2, #176	; 0xb0
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e004      	b.n	8006132 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32b0      	adds	r2, #176	; 0xb0
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006158:	2301      	movs	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32b0      	adds	r2, #176	; 0xb0
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	e025      	b.n	80061be <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006178:	2b00      	cmp	r3, #0
 800617a:	d11f      	bne.n	80061bc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2201      	movs	r2, #1
 8006180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006184:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <USBD_CDC_TransmitPacket+0x88>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4403      	add	r3, r0
 800619e:	3318      	adds	r3, #24
 80061a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061a2:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <USBD_CDC_TransmitPacket+0x88>)
 80061a4:	7819      	ldrb	r1, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 ffe3 	bl	800817e <USBD_LL_Transmit>

    ret = USBD_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000093 	.word	0x20000093

080061cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	32b0      	adds	r2, #176	; 0xb0
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	32b0      	adds	r2, #176	; 0xb0
 80061ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e018      	b.n	800622c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7c1b      	ldrb	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <USBD_CDC_ReceivePacket+0x68>)
 8006204:	7819      	ldrb	r1, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800620c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 ffd5 	bl	80081c0 <USBD_LL_PrepareReceive>
 8006216:	e008      	b.n	800622a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006218:	4b06      	ldr	r3, [pc, #24]	; (8006234 <USBD_CDC_ReceivePacket+0x68>)
 800621a:	7819      	ldrb	r1, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006222:	2340      	movs	r3, #64	; 0x40
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 ffcb 	bl	80081c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000094 	.word	0x20000094

08006238 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800624c:	2303      	movs	r3, #3
 800624e:	e01f      	b.n	8006290 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	79fa      	ldrb	r2, [r7, #7]
 8006282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f001 fe45 	bl	8007f14 <USBD_LL_Init>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e025      	b.n	80062fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	32ae      	adds	r2, #174	; 0xae
 80062c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00f      	beq.n	80062ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	32ae      	adds	r2, #174	; 0xae
 80062d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	f107 020e 	add.w	r2, r7, #14
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fe4d 	bl	8007fac <USBD_LL_Start>
 8006312:	4603      	mov	r3, r0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	4611      	mov	r1, r2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	4611      	mov	r1, r2
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f908 	bl	80075c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d01a      	beq.n	8006410 <USBD_LL_SetupStage+0x72>
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d822      	bhi.n	8006424 <USBD_LL_SetupStage+0x86>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <USBD_LL_SetupStage+0x4a>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d00a      	beq.n	80063fc <USBD_LL_SetupStage+0x5e>
 80063e6:	e01d      	b.n	8006424 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fb5f 	bl	8006ab4 <USBD_StdDevReq>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
      break;
 80063fa:	e020      	b.n	800643e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fbc7 	bl	8006b98 <USBD_StdItfReq>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
      break;
 800640e:	e016      	b.n	800643e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc29 	bl	8006c70 <USBD_StdEPReq>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]
      break;
 8006422:	e00c      	b.n	800643e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800642a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800642e:	b2db      	uxtb	r3, r3
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fe1a 	bl	800806c <USBD_LL_StallEP>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	bf00      	nop
  }

  return ret;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	460b      	mov	r3, r1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d16e      	bne.n	800653e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006466:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800646e:	2b03      	cmp	r3, #3
 8006470:	f040 8098 	bne.w	80065a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	429a      	cmp	r2, r3
 800647e:	d913      	bls.n	80064a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	1ad2      	subs	r2, r2, r3
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4293      	cmp	r3, r2
 8006498:	bf28      	it	cs
 800649a:	4613      	movcs	r3, r2
 800649c:	461a      	mov	r2, r3
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 f984 	bl	80077ae <USBD_CtlContinueRx>
 80064a6:	e07d      	b.n	80065a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d014      	beq.n	80064e0 <USBD_LL_DataOutStage+0x98>
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d81d      	bhi.n	80064f6 <USBD_LL_DataOutStage+0xae>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <USBD_LL_DataOutStage+0x7c>
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d003      	beq.n	80064ca <USBD_LL_DataOutStage+0x82>
 80064c2:	e018      	b.n	80064f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	75bb      	strb	r3, [r7, #22]
            break;
 80064c8:	e018      	b.n	80064fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	4619      	mov	r1, r3
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fa5e 	bl	8006996 <USBD_CoreFindIF>
 80064da:	4603      	mov	r3, r0
 80064dc:	75bb      	strb	r3, [r7, #22]
            break;
 80064de:	e00d      	b.n	80064fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	4619      	mov	r1, r3
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fa60 	bl	80069b0 <USBD_CoreFindEP>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75bb      	strb	r3, [r7, #22]
            break;
 80064f4:	e002      	b.n	80064fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75bb      	strb	r3, [r7, #22]
            break;
 80064fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80064fc:	7dbb      	ldrb	r3, [r7, #22]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d119      	bne.n	8006536 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b03      	cmp	r3, #3
 800650c:	d113      	bne.n	8006536 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800650e:	7dba      	ldrb	r2, [r7, #22]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	32ae      	adds	r2, #174	; 0xae
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800651e:	7dba      	ldrb	r2, [r7, #22]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006526:	7dba      	ldrb	r2, [r7, #22]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	32ae      	adds	r2, #174	; 0xae
 800652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f001 f94a 	bl	80077d0 <USBD_CtlSendStatus>
 800653c:	e032      	b.n	80065a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa31 	bl	80069b0 <USBD_CoreFindEP>
 800654e:	4603      	mov	r3, r0
 8006550:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006552:	7dbb      	ldrb	r3, [r7, #22]
 8006554:	2bff      	cmp	r3, #255	; 0xff
 8006556:	d025      	beq.n	80065a4 <USBD_LL_DataOutStage+0x15c>
 8006558:	7dbb      	ldrb	r3, [r7, #22]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d122      	bne.n	80065a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b03      	cmp	r3, #3
 8006568:	d117      	bne.n	800659a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800656a:	7dba      	ldrb	r2, [r7, #22]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	32ae      	adds	r2, #174	; 0xae
 8006570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800657a:	7dba      	ldrb	r2, [r7, #22]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006582:	7dba      	ldrb	r2, [r7, #22]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	32ae      	adds	r2, #174	; 0xae
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	7afa      	ldrb	r2, [r7, #11]
 8006590:	4611      	mov	r1, r2
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	4798      	blx	r3
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	e000      	b.n	80065a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	460b      	mov	r3, r1
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d16f      	bne.n	80066a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3314      	adds	r3, #20
 80065c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d15a      	bne.n	8006688 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d914      	bls.n	8006608 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	1ad2      	subs	r2, r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 f8ac 	bl	8007752 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065fa:	2300      	movs	r3, #0
 80065fc:	2200      	movs	r2, #0
 80065fe:	2100      	movs	r1, #0
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f001 fddd 	bl	80081c0 <USBD_LL_PrepareReceive>
 8006606:	e03f      	b.n	8006688 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d11c      	bne.n	800664e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800661c:	429a      	cmp	r2, r3
 800661e:	d316      	bcc.n	800664e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800662a:	429a      	cmp	r2, r3
 800662c:	d20f      	bcs.n	800664e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f001 f88d 	bl	8007752 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006640:	2300      	movs	r3, #0
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f001 fdba 	bl	80081c0 <USBD_LL_PrepareReceive>
 800664c:	e01c      	b.n	8006688 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d10f      	bne.n	800667a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f001 fcf5 	bl	800806c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f8b7 	bl	80077f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d03a      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fe42 	bl	800631c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066a0:	e032      	b.n	8006708 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f97f 	bl	80069b0 <USBD_CoreFindEP>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2bff      	cmp	r3, #255	; 0xff
 80066ba:	d025      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d122      	bne.n	8006708 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d11c      	bne.n	8006708 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066ce:	7dfa      	ldrb	r2, [r7, #23]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d014      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066de:	7dfa      	ldrb	r2, [r7, #23]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066e6:	7dfa      	ldrb	r2, [r7, #23]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	32ae      	adds	r2, #174	; 0xae
 80066ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	7afa      	ldrb	r2, [r7, #11]
 80066f4:	4611      	mov	r1, r2
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	4798      	blx	r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80066fe:	7dbb      	ldrb	r3, [r7, #22]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006704:	7dbb      	ldrb	r3, [r7, #22]
 8006706:	e000      	b.n	800670a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d014      	beq.n	8006778 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	4611      	mov	r1, r2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006778:	2340      	movs	r3, #64	; 0x40
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fc2f 	bl	8007fe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2240      	movs	r2, #64	; 0x40
 8006790:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fc21 	bl	8007fe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2240      	movs	r2, #64	; 0x40
 80067aa:	621a      	str	r2, [r3, #32]

  return ret;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2204      	movs	r2, #4
 80067f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b04      	cmp	r3, #4
 8006814:	d106      	bne.n	8006824 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800681c:	b2da      	uxtb	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d110      	bne.n	8006868 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32ae      	adds	r2, #174	; 0xae
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	e01c      	b.n	80068ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b03      	cmp	r3, #3
 800689e:	d115      	bne.n	80068cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32ae      	adds	r2, #174	; 0xae
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	32ae      	adds	r2, #174	; 0xae
 80068be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	4611      	mov	r1, r2
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32ae      	adds	r2, #174	; 0xae
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e01c      	b.n	8006932 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b03      	cmp	r3, #3
 8006902:	d115      	bne.n	8006930 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32ae      	adds	r2, #174	; 0xae
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	; 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	4611      	mov	r1, r2
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	885b      	ldrh	r3, [r3, #2]
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d920      	bls.n	8006a34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80069fa:	e013      	b.n	8006a24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80069fc:	f107 030a 	add.w	r3, r7, #10
 8006a00:	4619      	mov	r1, r3
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	f000 f81b 	bl	8006a3e <USBD_GetNextDesc>
 8006a08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d108      	bne.n	8006a24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	789b      	ldrb	r3, [r3, #2]
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d008      	beq.n	8006a32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	885b      	ldrh	r3, [r3, #2]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	897b      	ldrh	r3, [r7, #10]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d8e5      	bhi.n	80069fc <USBD_GetEpDesc+0x32>
 8006a30:	e000      	b.n	8006a34 <USBD_GetEpDesc+0x6a>
          break;
 8006a32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a34:	693b      	ldr	r3, [r7, #16]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a96:	8a3b      	ldrh	r3, [r7, #16]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	b21a      	sxth	r2, r3
 8006a9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b21b      	sxth	r3, r3
 8006aa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d005      	beq.n	8006ada <USBD_StdDevReq+0x26>
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d857      	bhi.n	8006b82 <USBD_StdDevReq+0xce>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <USBD_StdDevReq+0x42>
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d153      	bne.n	8006b82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	32ae      	adds	r2, #174	; 0xae
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	e04a      	b.n	8006b8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b09      	cmp	r3, #9
 8006afc:	d83b      	bhi.n	8006b76 <USBD_StdDevReq+0xc2>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <USBD_StdDevReq+0x50>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b77 	.word	0x08006b77
 8006b10:	08006b63 	.word	0x08006b63
 8006b14:	08006b77 	.word	0x08006b77
 8006b18:	08006b37 	.word	0x08006b37
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b77 	.word	0x08006b77
 8006b24:	08006b4f 	.word	0x08006b4f
 8006b28:	08006b41 	.word	0x08006b41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa3c 	bl	8006fac <USBD_GetDescriptor>
          break;
 8006b34:	e024      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fba1 	bl	8007280 <USBD_SetAddress>
          break;
 8006b3e:	e01f      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fbe0 	bl	8007308 <USBD_SetConfig>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b4c:	e018      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc83 	bl	800745c <USBD_GetConfig>
          break;
 8006b56:	e013      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fcb4 	bl	80074c8 <USBD_GetStatus>
          break;
 8006b60:	e00e      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fce3 	bl	8007530 <USBD_SetFeature>
          break;
 8006b6a:	e009      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fd07 	bl	8007582 <USBD_ClrFeature>
          break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fd5e 	bl	800763a <USBD_CtlError>
          break;
 8006b7e:	bf00      	nop
      }
      break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fd58 	bl	800763a <USBD_CtlError>
      break;
 8006b8a:	bf00      	nop
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d005      	beq.n	8006bbe <USBD_StdItfReq+0x26>
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d852      	bhi.n	8006c5c <USBD_StdItfReq+0xc4>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <USBD_StdItfReq+0x26>
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d14e      	bne.n	8006c5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d840      	bhi.n	8006c4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	889b      	ldrh	r3, [r3, #4]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d836      	bhi.n	8006c44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	889b      	ldrh	r3, [r3, #4]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fed9 	bl	8006996 <USBD_CoreFindIF>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2bff      	cmp	r3, #255	; 0xff
 8006bec:	d01d      	beq.n	8006c2a <USBD_StdItfReq+0x92>
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11a      	bne.n	8006c2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006bf4:	7bba      	ldrb	r2, [r7, #14]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32ae      	adds	r2, #174	; 0xae
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c04:	7bba      	ldrb	r2, [r7, #14]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c0c:	7bba      	ldrb	r2, [r7, #14]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32ae      	adds	r2, #174	; 0xae
 8006c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c22:	e004      	b.n	8006c2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c28:	e001      	b.n	8006c2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d110      	bne.n	8006c58 <USBD_StdItfReq+0xc0>
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fdc7 	bl	80077d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c42:	e009      	b.n	8006c58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fcf7 	bl	800763a <USBD_CtlError>
          break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fcf2 	bl	800763a <USBD_CtlError>
          break;
 8006c56:	e000      	b.n	8006c5a <USBD_StdItfReq+0xc2>
          break;
 8006c58:	bf00      	nop
      }
      break;
 8006c5a:	e004      	b.n	8006c66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fceb 	bl	800763a <USBD_CtlError>
      break;
 8006c64:	bf00      	nop
  }

  return ret;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	889b      	ldrh	r3, [r3, #4]
 8006c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d007      	beq.n	8006ca0 <USBD_StdEPReq+0x30>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	f200 817f 	bhi.w	8006f94 <USBD_StdEPReq+0x324>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d02a      	beq.n	8006cf0 <USBD_StdEPReq+0x80>
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	f040 817a 	bne.w	8006f94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fe83 	bl	80069b0 <USBD_CoreFindEP>
 8006caa:	4603      	mov	r3, r0
 8006cac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cae:	7b7b      	ldrb	r3, [r7, #13]
 8006cb0:	2bff      	cmp	r3, #255	; 0xff
 8006cb2:	f000 8174 	beq.w	8006f9e <USBD_StdEPReq+0x32e>
 8006cb6:	7b7b      	ldrb	r3, [r7, #13]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8170 	bne.w	8006f9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cbe:	7b7a      	ldrb	r2, [r7, #13]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cc6:	7b7a      	ldrb	r2, [r7, #13]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	32ae      	adds	r2, #174	; 0xae
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8163 	beq.w	8006f9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006cd8:	7b7a      	ldrb	r2, [r7, #13]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	; 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cee:	e156      	b.n	8006f9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d008      	beq.n	8006d0a <USBD_StdEPReq+0x9a>
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	f300 8145 	bgt.w	8006f88 <USBD_StdEPReq+0x318>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 809b 	beq.w	8006e3a <USBD_StdEPReq+0x1ca>
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d03c      	beq.n	8006d82 <USBD_StdEPReq+0x112>
 8006d08:	e13e      	b.n	8006f88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d002      	beq.n	8006d1c <USBD_StdEPReq+0xac>
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d016      	beq.n	8006d48 <USBD_StdEPReq+0xd8>
 8006d1a:	e02c      	b.n	8006d76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <USBD_StdEPReq+0xce>
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d00a      	beq.n	8006d3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f99d 	bl	800806c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f999 	bl	800806c <USBD_LL_StallEP>
 8006d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d3c:	e020      	b.n	8006d80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fc7a 	bl	800763a <USBD_CtlError>
              break;
 8006d46:	e01b      	b.n	8006d80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	885b      	ldrh	r3, [r3, #2]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10e      	bne.n	8006d6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <USBD_StdEPReq+0xfe>
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b80      	cmp	r3, #128	; 0x80
 8006d5a:	d008      	beq.n	8006d6e <USBD_StdEPReq+0xfe>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f97f 	bl	800806c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fd2e 	bl	80077d0 <USBD_CtlSendStatus>

              break;
 8006d74:	e004      	b.n	8006d80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc5e 	bl	800763a <USBD_CtlError>
              break;
 8006d7e:	bf00      	nop
          }
          break;
 8006d80:	e107      	b.n	8006f92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d002      	beq.n	8006d94 <USBD_StdEPReq+0x124>
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d016      	beq.n	8006dc0 <USBD_StdEPReq+0x150>
 8006d92:	e04b      	b.n	8006e2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <USBD_StdEPReq+0x146>
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d00a      	beq.n	8006db6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f961 	bl	800806c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f95d 	bl	800806c <USBD_LL_StallEP>
 8006db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006db4:	e040      	b.n	8006e38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc3e 	bl	800763a <USBD_CtlError>
              break;
 8006dbe:	e03b      	b.n	8006e38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	885b      	ldrh	r3, [r3, #2]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d136      	bne.n	8006e36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 f967 	bl	80080aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fcf7 	bl	80077d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fde2 	bl	80069b0 <USBD_CoreFindEP>
 8006dec:	4603      	mov	r3, r0
 8006dee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006df0:	7b7b      	ldrb	r3, [r7, #13]
 8006df2:	2bff      	cmp	r3, #255	; 0xff
 8006df4:	d01f      	beq.n	8006e36 <USBD_StdEPReq+0x1c6>
 8006df6:	7b7b      	ldrb	r3, [r7, #13]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11c      	bne.n	8006e36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006dfc:	7b7a      	ldrb	r2, [r7, #13]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e04:	7b7a      	ldrb	r2, [r7, #13]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32ae      	adds	r2, #174	; 0xae
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d010      	beq.n	8006e36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32ae      	adds	r2, #174	; 0xae
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e2a:	e004      	b.n	8006e36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fc03 	bl	800763a <USBD_CtlError>
              break;
 8006e34:	e000      	b.n	8006e38 <USBD_StdEPReq+0x1c8>
              break;
 8006e36:	bf00      	nop
          }
          break;
 8006e38:	e0ab      	b.n	8006f92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d002      	beq.n	8006e4c <USBD_StdEPReq+0x1dc>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d032      	beq.n	8006eb0 <USBD_StdEPReq+0x240>
 8006e4a:	e097      	b.n	8006f7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <USBD_StdEPReq+0x1f2>
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b80      	cmp	r3, #128	; 0x80
 8006e56:	d004      	beq.n	8006e62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fbed 	bl	800763a <USBD_CtlError>
                break;
 8006e60:	e091      	b.n	8006f86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da0b      	bge.n	8006e82 <USBD_StdEPReq+0x212>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	3310      	adds	r3, #16
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3304      	adds	r3, #4
 8006e80:	e00b      	b.n	8006e9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	3304      	adds	r3, #4
 8006e9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc37 	bl	800771c <USBD_CtlSendData>
              break;
 8006eae:	e06a      	b.n	8006f86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da11      	bge.n	8006edc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d117      	bne.n	8006f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fbb0 	bl	800763a <USBD_CtlError>
                  break;
 8006eda:	e054      	b.n	8006f86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fb9d 	bl	800763a <USBD_CtlError>
                  break;
 8006f00:	e041      	b.n	8006f86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da0b      	bge.n	8006f22 <USBD_StdEPReq+0x2b2>
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	3310      	adds	r3, #16
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3304      	adds	r3, #4
 8006f20:	e00b      	b.n	8006f3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <USBD_StdEPReq+0x2d8>
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d103      	bne.n	8006f50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e00e      	b.n	8006f6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f8c7 	bl	80080e8 <USBD_LL_IsStallEP>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2201      	movs	r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e002      	b.n	8006f6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2202      	movs	r2, #2
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fbd1 	bl	800771c <USBD_CtlSendData>
              break;
 8006f7a:	e004      	b.n	8006f86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fb5b 	bl	800763a <USBD_CtlError>
              break;
 8006f84:	bf00      	nop
          }
          break;
 8006f86:	e004      	b.n	8006f92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb55 	bl	800763a <USBD_CtlError>
          break;
 8006f90:	bf00      	nop
      }
      break;
 8006f92:	e005      	b.n	8006fa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb4f 	bl	800763a <USBD_CtlError>
      break;
 8006f9c:	e000      	b.n	8006fa0 <USBD_StdEPReq+0x330>
      break;
 8006f9e:	bf00      	nop
  }

  return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	885b      	ldrh	r3, [r3, #2]
 8006fc6:	0a1b      	lsrs	r3, r3, #8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	2b06      	cmp	r3, #6
 8006fce:	f200 8128 	bhi.w	8007222 <USBD_GetDescriptor+0x276>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBD_GetDescriptor+0x2c>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	0800700d 	.word	0x0800700d
 8006fe0:	0800704d 	.word	0x0800704d
 8006fe4:	08007223 	.word	0x08007223
 8006fe8:	08007223 	.word	0x08007223
 8006fec:	080071c3 	.word	0x080071c3
 8006ff0:	080071ef 	.word	0x080071ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
      break;
 800700a:	e112      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10d      	bne.n	8007030 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	f107 0208 	add.w	r2, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	2202      	movs	r2, #2
 800702c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800702e:	e100      	b.n	8007232 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e0f2      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	885b      	ldrh	r3, [r3, #2]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b05      	cmp	r3, #5
 8007054:	f200 80ac 	bhi.w	80071b0 <USBD_GetDescriptor+0x204>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <USBD_GetDescriptor+0xb4>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007079 	.word	0x08007079
 8007064:	080070ad 	.word	0x080070ad
 8007068:	080070e1 	.word	0x080070e1
 800706c:	08007115 	.word	0x08007115
 8007070:	08007149 	.word	0x08007149
 8007074:	0800717d 	.word	0x0800717d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e091      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 facb 	bl	800763a <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e089      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ce:	e077      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fab1 	bl	800763a <USBD_CtlError>
            err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
          break;
 80070de:	e06f      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007102:	e05d      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa97 	bl	800763a <USBD_CtlError>
            err++;
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	3301      	adds	r3, #1
 8007110:	72fb      	strb	r3, [r7, #11]
          break;
 8007112:	e055      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007136:	e043      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa7d 	bl	800763a <USBD_CtlError>
            err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
          break;
 8007146:	e03b      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716a:	e029      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa63 	bl	800763a <USBD_CtlError>
            err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
          break;
 800717a:	e021      	b.n	80071c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7c12      	ldrb	r2, [r2, #16]
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719e:	e00f      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa49 	bl	800763a <USBD_CtlError>
            err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
          break;
 80071ae:	e007      	b.n	80071c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa41 	bl	800763a <USBD_CtlError>
          err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071be:	bf00      	nop
      }
      break;
 80071c0:	e037      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	7c1b      	ldrb	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	f107 0208 	add.w	r2, r7, #8
 80071d6:	4610      	mov	r0, r2
 80071d8:	4798      	blx	r3
 80071da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071dc:	e029      	b.n	8007232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa2a 	bl	800763a <USBD_CtlError>
        err++;
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	3301      	adds	r3, #1
 80071ea:	72fb      	strb	r3, [r7, #11]
      break;
 80071ec:	e021      	b.n	8007232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7c1b      	ldrb	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f107 0208 	add.w	r2, r7, #8
 8007202:	4610      	mov	r0, r2
 8007204:	4798      	blx	r3
 8007206:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	2207      	movs	r2, #7
 800720e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007210:	e00f      	b.n	8007232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa10 	bl	800763a <USBD_CtlError>
        err++;
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	3301      	adds	r3, #1
 800721e:	72fb      	strb	r3, [r7, #11]
      break;
 8007220:	e007      	b.n	8007232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fa08 	bl	800763a <USBD_CtlError>
      err++;
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	3301      	adds	r3, #1
 800722e:	72fb      	strb	r3, [r7, #11]
      break;
 8007230:	bf00      	nop
  }

  if (err != 0U)
 8007232:	7afb      	ldrb	r3, [r7, #11]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d11e      	bne.n	8007276 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	88db      	ldrh	r3, [r3, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d016      	beq.n	800726e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007240:	893b      	ldrh	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00e      	beq.n	8007264 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	88da      	ldrh	r2, [r3, #6]
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	4293      	cmp	r3, r2
 800724e:	bf28      	it	cs
 8007250:	4613      	movcs	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	461a      	mov	r2, r3
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa5d 	bl	800771c <USBD_CtlSendData>
 8007262:	e009      	b.n	8007278 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f9e7 	bl	800763a <USBD_CtlError>
 800726c:	e004      	b.n	8007278 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 faae 	bl	80077d0 <USBD_CtlSendStatus>
 8007274:	e000      	b.n	8007278 <USBD_GetDescriptor+0x2cc>
    return;
 8007276:	bf00      	nop
  }
}
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	889b      	ldrh	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d131      	bne.n	80072f6 <USBD_SetAddress+0x76>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d12d      	bne.n	80072f6 <USBD_SetAddress+0x76>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	885b      	ldrh	r3, [r3, #2]
 800729e:	2b7f      	cmp	r3, #127	; 0x7f
 80072a0:	d829      	bhi.n	80072f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	885b      	ldrh	r3, [r3, #2]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d104      	bne.n	80072c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f9bc 	bl	800763a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c2:	e01d      	b.n	8007300 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	7bfa      	ldrb	r2, [r7, #15]
 80072c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 ff35 	bl	8008140 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa7a 	bl	80077d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	e009      	b.n	8007300 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f4:	e004      	b.n	8007300 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f99e 	bl	800763a <USBD_CtlError>
  }
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	885b      	ldrh	r3, [r3, #2]
 800731a:	b2da      	uxtb	r2, r3
 800731c:	4b4e      	ldr	r3, [pc, #312]	; (8007458 <USBD_SetConfig+0x150>)
 800731e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007320:	4b4d      	ldr	r3, [pc, #308]	; (8007458 <USBD_SetConfig+0x150>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d905      	bls.n	8007334 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f985 	bl	800763a <USBD_CtlError>
    return USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	e08c      	b.n	800744e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d002      	beq.n	8007346 <USBD_SetConfig+0x3e>
 8007340:	2b03      	cmp	r3, #3
 8007342:	d029      	beq.n	8007398 <USBD_SetConfig+0x90>
 8007344:	e075      	b.n	8007432 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007346:	4b44      	ldr	r3, [pc, #272]	; (8007458 <USBD_SetConfig+0x150>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d020      	beq.n	8007390 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800734e:	4b42      	ldr	r3, [pc, #264]	; (8007458 <USBD_SetConfig+0x150>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007358:	4b3f      	ldr	r3, [pc, #252]	; (8007458 <USBD_SetConfig+0x150>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fe ffe7 	bl	8006332 <USBD_SetClassConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f962 	bl	800763a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800737e:	e065      	b.n	800744c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa25 	bl	80077d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2203      	movs	r2, #3
 800738a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800738e:	e05d      	b.n	800744c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa1d 	bl	80077d0 <USBD_CtlSendStatus>
      break;
 8007396:	e059      	b.n	800744c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007398:	4b2f      	ldr	r3, [pc, #188]	; (8007458 <USBD_SetConfig+0x150>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d112      	bne.n	80073c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073a8:	4b2b      	ldr	r3, [pc, #172]	; (8007458 <USBD_SetConfig+0x150>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073b2:	4b29      	ldr	r3, [pc, #164]	; (8007458 <USBD_SetConfig+0x150>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fe ffd6 	bl	800636a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa06 	bl	80077d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073c4:	e042      	b.n	800744c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073c6:	4b24      	ldr	r3, [pc, #144]	; (8007458 <USBD_SetConfig+0x150>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d02a      	beq.n	800742a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fe ffc4 	bl	800636a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073e2:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <USBD_SetConfig+0x150>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <USBD_SetConfig+0x150>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fe ff9d 	bl	8006332 <USBD_SetClassConfig>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f918 	bl	800763a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fe ffa9 	bl	800636a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007420:	e014      	b.n	800744c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9d4 	bl	80077d0 <USBD_CtlSendStatus>
      break;
 8007428:	e010      	b.n	800744c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f9d0 	bl	80077d0 <USBD_CtlSendStatus>
      break;
 8007430:	e00c      	b.n	800744c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f900 	bl	800763a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <USBD_SetConfig+0x150>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fe ff92 	bl	800636a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007446:	2303      	movs	r3, #3
 8007448:	73fb      	strb	r3, [r7, #15]
      break;
 800744a:	bf00      	nop
  }

  return ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200001a8 	.word	0x200001a8

0800745c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d004      	beq.n	8007478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f8e2 	bl	800763a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007476:	e023      	b.n	80074c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	dc02      	bgt.n	800748a <USBD_GetConfig+0x2e>
 8007484:	2b00      	cmp	r3, #0
 8007486:	dc03      	bgt.n	8007490 <USBD_GetConfig+0x34>
 8007488:	e015      	b.n	80074b6 <USBD_GetConfig+0x5a>
 800748a:	2b03      	cmp	r3, #3
 800748c:	d00b      	beq.n	80074a6 <USBD_GetConfig+0x4a>
 800748e:	e012      	b.n	80074b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3308      	adds	r3, #8
 800749a:	2201      	movs	r2, #1
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f93c 	bl	800771c <USBD_CtlSendData>
        break;
 80074a4:	e00c      	b.n	80074c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	2201      	movs	r2, #1
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f934 	bl	800771c <USBD_CtlSendData>
        break;
 80074b4:	e004      	b.n	80074c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8be 	bl	800763a <USBD_CtlError>
        break;
 80074be:	bf00      	nop
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d81e      	bhi.n	800751e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	88db      	ldrh	r3, [r3, #6]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d004      	beq.n	80074f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8a5 	bl	800763a <USBD_CtlError>
        break;
 80074f0:	e01a      	b.n	8007528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f043 0202 	orr.w	r2, r3, #2
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	330c      	adds	r3, #12
 8007512:	2202      	movs	r2, #2
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f900 	bl	800771c <USBD_CtlSendData>
      break;
 800751c:	e004      	b.n	8007528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f88a 	bl	800763a <USBD_CtlError>
      break;
 8007526:	bf00      	nop
  }
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d107      	bne.n	8007552 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f940 	bl	80077d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007550:	e013      	b.n	800757a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	885b      	ldrh	r3, [r3, #2]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d10b      	bne.n	8007572 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	889b      	ldrh	r3, [r3, #4]
 800755e:	0a1b      	lsrs	r3, r3, #8
 8007560:	b29b      	uxth	r3, r3
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f930 	bl	80077d0 <USBD_CtlSendStatus>
}
 8007570:	e003      	b.n	800757a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f860 	bl	800763a <USBD_CtlError>
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007592:	b2db      	uxtb	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	2b02      	cmp	r3, #2
 8007598:	d80b      	bhi.n	80075b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	885b      	ldrh	r3, [r3, #2]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10c      	bne.n	80075bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f910 	bl	80077d0 <USBD_CtlSendStatus>
      }
      break;
 80075b0:	e004      	b.n	80075bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f840 	bl	800763a <USBD_CtlError>
      break;
 80075ba:	e000      	b.n	80075be <USBD_ClrFeature+0x3c>
      break;
 80075bc:	bf00      	nop
  }
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7ff fa41 	bl	8006a78 <SWAPBYTE>
 80075f6:	4603      	mov	r3, r0
 80075f8:	461a      	mov	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fa34 	bl	8006a78 <SWAPBYTE>
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7ff fa27 	bl	8006a78 <SWAPBYTE>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	80da      	strh	r2, [r3, #6]
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007644:	2180      	movs	r1, #128	; 0x80
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fd10 	bl	800806c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fd0c 	bl	800806c <USBD_LL_StallEP>
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d036      	beq.n	80076e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007676:	6938      	ldr	r0, [r7, #16]
 8007678:	f000 f836 	bl	80076e8 <USBD_GetLen>
 800767c:	4603      	mov	r3, r0
 800767e:	3301      	adds	r3, #1
 8007680:	b29b      	uxth	r3, r3
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4413      	add	r3, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7812      	ldrb	r2, [r2, #0]
 8007694:	701a      	strb	r2, [r3, #0]
  idx++;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	3301      	adds	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	2203      	movs	r2, #3
 80076a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	3301      	adds	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076ac:	e013      	b.n	80076d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	4413      	add	r3, r2
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	7812      	ldrb	r2, [r2, #0]
 80076b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3301      	adds	r3, #1
 80076be:	613b      	str	r3, [r7, #16]
    idx++;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	3301      	adds	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4413      	add	r3, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	3301      	adds	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e7      	bne.n	80076ae <USBD_GetString+0x52>
 80076de:	e000      	b.n	80076e2 <USBD_GetString+0x86>
    return;
 80076e0:	bf00      	nop
  }
}
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076f8:	e005      	b.n	8007706 <USBD_GetLen+0x1e>
  {
    len++;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	3301      	adds	r3, #1
 80076fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	3301      	adds	r3, #1
 8007704:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f5      	bne.n	80076fa <USBD_GetLen+0x12>
  }

  return len;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2202      	movs	r2, #2
 800772c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fd1b 	bl	800817e <USBD_LL_Transmit>

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	2100      	movs	r1, #0
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fd0a 	bl	800817e <USBD_LL_Transmit>

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2203      	movs	r2, #3
 8007784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	2100      	movs	r1, #0
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fd0e 	bl	80081c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	2100      	movs	r1, #0
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fcfd 	bl	80081c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2204      	movs	r2, #4
 80077dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077e0:	2300      	movs	r3, #0
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fcc9 	bl	800817e <USBD_LL_Transmit>

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2205      	movs	r2, #5
 8007802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007806:	2300      	movs	r3, #0
 8007808:	2200      	movs	r2, #0
 800780a:	2100      	movs	r1, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fcd7 	bl	80081c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007820:	2200      	movs	r2, #0
 8007822:	4912      	ldr	r1, [pc, #72]	; (800786c <MX_USB_DEVICE_Init+0x50>)
 8007824:	4812      	ldr	r0, [pc, #72]	; (8007870 <MX_USB_DEVICE_Init+0x54>)
 8007826:	f7fe fd07 	bl	8006238 <USBD_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007830:	f7f9 f91e 	bl	8000a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007834:	490f      	ldr	r1, [pc, #60]	; (8007874 <MX_USB_DEVICE_Init+0x58>)
 8007836:	480e      	ldr	r0, [pc, #56]	; (8007870 <MX_USB_DEVICE_Init+0x54>)
 8007838:	f7fe fd2e 	bl	8006298 <USBD_RegisterClass>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007842:	f7f9 f915 	bl	8000a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007846:	490c      	ldr	r1, [pc, #48]	; (8007878 <MX_USB_DEVICE_Init+0x5c>)
 8007848:	4809      	ldr	r0, [pc, #36]	; (8007870 <MX_USB_DEVICE_Init+0x54>)
 800784a:	f7fe fc1f 	bl	800608c <USBD_CDC_RegisterInterface>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007854:	f7f9 f90c 	bl	8000a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <MX_USB_DEVICE_Init+0x54>)
 800785a:	f7fe fd53 	bl	8006304 <USBD_Start>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007864:	f7f9 f904 	bl	8000a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007868:	bf00      	nop
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200000ac 	.word	0x200000ac
 8007870:	200001ac 	.word	0x200001ac
 8007874:	20000018 	.word	0x20000018
 8007878:	20000098 	.word	0x20000098

0800787c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007880:	2200      	movs	r2, #0
 8007882:	4905      	ldr	r1, [pc, #20]	; (8007898 <CDC_Init_FS+0x1c>)
 8007884:	4805      	ldr	r0, [pc, #20]	; (800789c <CDC_Init_FS+0x20>)
 8007886:	f7fe fc1b 	bl	80060c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800788a:	4905      	ldr	r1, [pc, #20]	; (80078a0 <CDC_Init_FS+0x24>)
 800788c:	4803      	ldr	r0, [pc, #12]	; (800789c <CDC_Init_FS+0x20>)
 800788e:	f7fe fc39 	bl	8006104 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007892:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007894:	4618      	mov	r0, r3
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000c88 	.word	0x20000c88
 800789c:	200001ac 	.word	0x200001ac
 80078a0:	20000488 	.word	0x20000488

080078a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b23      	cmp	r3, #35	; 0x23
 80078c8:	d84a      	bhi.n	8007960 <CDC_Control_FS+0xac>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <CDC_Control_FS+0x1c>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007961 	.word	0x08007961
 80078d8:	08007961 	.word	0x08007961
 80078dc:	08007961 	.word	0x08007961
 80078e0:	08007961 	.word	0x08007961
 80078e4:	08007961 	.word	0x08007961
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007961 	.word	0x08007961
 80078f0:	08007961 	.word	0x08007961
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007961 	.word	0x08007961
 80078fc:	08007961 	.word	0x08007961
 8007900:	08007961 	.word	0x08007961
 8007904:	08007961 	.word	0x08007961
 8007908:	08007961 	.word	0x08007961
 800790c:	08007961 	.word	0x08007961
 8007910:	08007961 	.word	0x08007961
 8007914:	08007961 	.word	0x08007961
 8007918:	08007961 	.word	0x08007961
 800791c:	08007961 	.word	0x08007961
 8007920:	08007961 	.word	0x08007961
 8007924:	08007961 	.word	0x08007961
 8007928:	08007961 	.word	0x08007961
 800792c:	08007961 	.word	0x08007961
 8007930:	08007961 	.word	0x08007961
 8007934:	08007961 	.word	0x08007961
 8007938:	08007961 	.word	0x08007961
 800793c:	08007961 	.word	0x08007961
 8007940:	08007961 	.word	0x08007961
 8007944:	08007961 	.word	0x08007961
 8007948:	08007961 	.word	0x08007961
 800794c:	08007961 	.word	0x08007961
 8007950:	08007961 	.word	0x08007961
 8007954:	08007961 	.word	0x08007961
 8007958:	08007961 	.word	0x08007961
 800795c:	08007961 	.word	0x08007961
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007960:	bf00      	nop
  }

  return (USBD_OK);
 8007962:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	4813      	ldr	r0, [pc, #76]	; (80079cc <CDC_Receive_FS+0x5c>)
 800797e:	f7fe fbc1 	bl	8006104 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007982:	4812      	ldr	r0, [pc, #72]	; (80079cc <CDC_Receive_FS+0x5c>)
 8007984:	f7fe fc22 	bl	80061cc <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f81f 	bl	80079d4 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b31      	cmp	r3, #49	; 0x31
 800799c:	d106      	bne.n	80079ac <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800799e:	2201      	movs	r2, #1
 80079a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079a4:	480a      	ldr	r0, [pc, #40]	; (80079d0 <CDC_Receive_FS+0x60>)
 80079a6:	f7fa fc1d 	bl	80021e4 <HAL_GPIO_WritePin>
 80079aa:	e009      	b.n	80079c0 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b30      	cmp	r3, #48	; 0x30
 80079b2:	d105      	bne.n	80079c0 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80079b4:	2200      	movs	r2, #0
 80079b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079ba:	4805      	ldr	r0, [pc, #20]	; (80079d0 <CDC_Receive_FS+0x60>)
 80079bc:	f7fa fc12 	bl	80021e4 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 80079c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200001ac 	.word	0x200001ac
 80079d0:	40020c00 	.word	0x40020c00

080079d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <CDC_Transmit_FS+0x48>)
 80079e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e00b      	b.n	8007a12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079fa:	887b      	ldrh	r3, [r7, #2]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	4806      	ldr	r0, [pc, #24]	; (8007a1c <CDC_Transmit_FS+0x48>)
 8007a02:	f7fe fb5d 	bl	80060c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a06:	4805      	ldr	r0, [pc, #20]	; (8007a1c <CDC_Transmit_FS+0x48>)
 8007a08:	f7fe fb9a 	bl	8006140 <USBD_CDC_TransmitPacket>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200001ac 	.word	0x200001ac

08007a20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2212      	movs	r2, #18
 8007a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a56:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	200000c8 	.word	0x200000c8

08007a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2204      	movs	r2, #4
 8007a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a7a:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	200000dc 	.word	0x200000dc

08007a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	4907      	ldr	r1, [pc, #28]	; (8007ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aa2:	4808      	ldr	r0, [pc, #32]	; (8007ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aa4:	f7ff fdda 	bl	800765c <USBD_GetString>
 8007aa8:	e004      	b.n	8007ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4904      	ldr	r1, [pc, #16]	; (8007ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aae:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ab0:	f7ff fdd4 	bl	800765c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20001488 	.word	0x20001488
 8007ac4:	08008d10 	.word	0x08008d10

08007ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	4904      	ldr	r1, [pc, #16]	; (8007ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ad8:	4804      	ldr	r0, [pc, #16]	; (8007aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ada:	f7ff fdbf 	bl	800765c <USBD_GetString>
  return USBD_StrDesc;
 8007ade:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20001488 	.word	0x20001488
 8007aec:	08008d28 	.word	0x08008d28

08007af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	221a      	movs	r2, #26
 8007b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b02:	f000 f843 	bl	8007b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b06:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200000e0 	.word	0x200000e0

08007b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b2a:	4808      	ldr	r0, [pc, #32]	; (8007b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b2c:	f7ff fd96 	bl	800765c <USBD_GetString>
 8007b30:	e004      	b.n	8007b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4904      	ldr	r1, [pc, #16]	; (8007b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b36:	4805      	ldr	r0, [pc, #20]	; (8007b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b38:	f7ff fd90 	bl	800765c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20001488 	.word	0x20001488
 8007b4c:	08008d3c 	.word	0x08008d3c

08007b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	4907      	ldr	r1, [pc, #28]	; (8007b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b66:	4808      	ldr	r0, [pc, #32]	; (8007b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b68:	f7ff fd78 	bl	800765c <USBD_GetString>
 8007b6c:	e004      	b.n	8007b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4904      	ldr	r1, [pc, #16]	; (8007b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b72:	4805      	ldr	r0, [pc, #20]	; (8007b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b74:	f7ff fd72 	bl	800765c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20001488 	.word	0x20001488
 8007b88:	08008d48 	.word	0x08008d48

08007b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <Get_SerialNum+0x44>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <Get_SerialNum+0x48>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b9e:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <Get_SerialNum+0x4c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	4909      	ldr	r1, [pc, #36]	; (8007bdc <Get_SerialNum+0x50>)
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f814 	bl	8007be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	4908      	ldr	r1, [pc, #32]	; (8007be0 <Get_SerialNum+0x54>)
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f000 f80f 	bl	8007be4 <IntToUnicode>
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	1fff7a10 	.word	0x1fff7a10
 8007bd4:	1fff7a14 	.word	0x1fff7a14
 8007bd8:	1fff7a18 	.word	0x1fff7a18
 8007bdc:	200000e2 	.word	0x200000e2
 8007be0:	200000f2 	.word	0x200000f2

08007be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
 8007bfa:	e027      	b.n	8007c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0f1b      	lsrs	r3, r3, #28
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d80b      	bhi.n	8007c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	0f1b      	lsrs	r3, r3, #28
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	440b      	add	r3, r1
 8007c14:	3230      	adds	r2, #48	; 0x30
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	e00a      	b.n	8007c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0f1b      	lsrs	r3, r3, #28
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	4619      	mov	r1, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3237      	adds	r2, #55	; 0x37
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	7dfa      	ldrb	r2, [r7, #23]
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3d3      	bcc.n	8007bfc <IntToUnicode+0x18>
  }
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	609a      	str	r2, [r3, #8]
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c84:	d14b      	bne.n	8007d1e <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	4b27      	ldr	r3, [pc, #156]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	6313      	str	r3, [r2, #48]	; 0x30
 8007c96:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]
 8007ca0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cb4:	230a      	movs	r3, #10
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cb8:	f107 0314 	add.w	r3, r7, #20
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	481b      	ldr	r0, [pc, #108]	; (8007d2c <HAL_PCD_MspInit+0xc8>)
 8007cc0:	f7fa f8dc 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cd6:	230a      	movs	r3, #10
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cda:	f107 0314 	add.w	r3, r7, #20
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4812      	ldr	r0, [pc, #72]	; (8007d2c <HAL_PCD_MspInit+0xc8>)
 8007ce2:	f7fa f8cb 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ce6:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	4a0f      	ldr	r2, [pc, #60]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf0:	6353      	str	r3, [r2, #52]	; 0x34
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	4a0b      	ldr	r2, [pc, #44]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d00:	6453      	str	r3, [r2, #68]	; 0x44
 8007d02:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <HAL_PCD_MspInit+0xc4>)
 8007d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2100      	movs	r1, #0
 8007d12:	2043      	movs	r0, #67	; 0x43
 8007d14:	f7fa f87b 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d18:	2043      	movs	r0, #67	; 0x43
 8007d1a:	f7fa f894 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d1e:	bf00      	nop
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	40020000 	.word	0x40020000

08007d30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7fe fb29 	bl	800639e <USBD_LL_SetupStage>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f7fe fb63 	bl	8006448 <USBD_LL_DataOutStage>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	334c      	adds	r3, #76	; 0x4c
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	4619      	mov	r1, r3
 8007db2:	f7fe fbfc 	bl	80065ae <USBD_LL_DataInStage>
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe fd30 	bl	8006832 <USBD_LL_SOF>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	e008      	b.n	8007e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d102      	bne.n	8007e02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
 8007e00:	e001      	b.n	8007e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e02:	f7f8 fe35 	bl	8000a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fcd0 	bl	80067b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fc78 	bl	8006712 <USBD_LL_Reset>
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fccb 	bl	80067d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <HAL_PCD_SuspendCallback+0x48>)
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	4a03      	ldr	r2, [pc, #12]	; (8007e74 <HAL_PCD_SuspendCallback+0x48>)
 8007e66:	f043 0306 	orr.w	r3, r3, #6
 8007e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	e000ed00 	.word	0xe000ed00

08007e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fcbb 	bl	8006802 <USBD_LL_Resume>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fd13 	bl	80068d6 <USBD_LL_IsoOUTIncomplete>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fccf 	bl	8006872 <USBD_LL_IsoINIncomplete>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fd25 	bl	800693a <USBD_LL_DevConnected>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fd22 	bl	8006950 <USBD_LL_DevDisconnected>
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d13c      	bne.n	8007f9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f24:	4a20      	ldr	r2, [pc, #128]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f34:	4b1c      	ldr	r3, [pc, #112]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f3c:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f3e:	2204      	movs	r2, #4
 8007f40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f42:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f44:	2202      	movs	r2, #2
 8007f46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f48:	4b17      	ldr	r3, [pc, #92]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f4e:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f50:	2202      	movs	r2, #2
 8007f52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f54:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f66:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f72:	480d      	ldr	r0, [pc, #52]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f74:	f7fa f94f 	bl	8002216 <HAL_PCD_Init>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f7e:	f7f8 fd77 	bl	8000a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f82:	2180      	movs	r1, #128	; 0x80
 8007f84:	4808      	ldr	r0, [pc, #32]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f86:	f7fb fba6 	bl	80036d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f8a:	2240      	movs	r2, #64	; 0x40
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4806      	ldr	r0, [pc, #24]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f90:	f7fb fb5a 	bl	8003648 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f94:	2280      	movs	r2, #128	; 0x80
 8007f96:	2101      	movs	r1, #1
 8007f98:	4803      	ldr	r0, [pc, #12]	; (8007fa8 <USBD_LL_Init+0x94>)
 8007f9a:	f7fb fb55 	bl	8003648 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20001688 	.word	0x20001688

08007fac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fa fa44 	bl	8002450 <HAL_PCD_Start>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f942 	bl	8008258 <USBD_Get_USB_Status>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	4608      	mov	r0, r1
 8007fec:	4611      	mov	r1, r2
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	70fb      	strb	r3, [r7, #3]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70bb      	strb	r3, [r7, #2]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800800a:	78bb      	ldrb	r3, [r7, #2]
 800800c:	883a      	ldrh	r2, [r7, #0]
 800800e:	78f9      	ldrb	r1, [r7, #3]
 8008010:	f7fa ff15 	bl	8002e3e <HAL_PCD_EP_Open>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f91c 	bl	8008258 <USBD_Get_USB_Status>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008024:	7bbb      	ldrb	r3, [r7, #14]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f7fa ff5e 	bl	8002f0e <HAL_PCD_EP_Close>
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f8fd 	bl	8008258 <USBD_Get_USB_Status>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008062:	7bbb      	ldrb	r3, [r7, #14]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f7fb f836 	bl	80030fc <HAL_PCD_EP_SetStall>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f8de 	bl	8008258 <USBD_Get_USB_Status>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fb f87b 	bl	80031c4 <HAL_PCD_EP_ClrStall>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f8bf 	bl	8008258 <USBD_Get_USB_Status>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080de:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008100:	2b00      	cmp	r3, #0
 8008102:	da0b      	bge.n	800811c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	4613      	mov	r3, r2
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	333e      	adds	r3, #62	; 0x3e
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	e00b      	b.n	8008134 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	4613      	mov	r3, r2
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008132:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f7fa fe48 	bl	8002df4 <HAL_PCD_SetAddress>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f874 	bl	8008258 <USBD_Get_USB_Status>
 8008170:	4603      	mov	r3, r0
 8008172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008174:	7bbb      	ldrb	r3, [r7, #14]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b086      	sub	sp, #24
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
 800818a:	460b      	mov	r3, r1
 800818c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800819c:	7af9      	ldrb	r1, [r7, #11]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	f7fa ff61 	bl	8003068 <HAL_PCD_EP_Transmit>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 f853 	bl	8008258 <USBD_Get_USB_Status>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	460b      	mov	r3, r1
 80081ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80081de:	7af9      	ldrb	r1, [r7, #11]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	f7fa fedd 	bl	8002fa2 <HAL_PCD_EP_Receive>
 80081e8:	4603      	mov	r3, r0
 80081ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 f832 	bl	8008258 <USBD_Get_USB_Status>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	460b      	mov	r3, r1
 800820c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7fa ff0d 	bl	8003038 <HAL_PCD_EP_GetRxCount>
 800821e:	4603      	mov	r3, r0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008230:	4b03      	ldr	r3, [pc, #12]	; (8008240 <USBD_static_malloc+0x18>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20001b94 	.word	0x20001b94

08008244 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2b03      	cmp	r3, #3
 800826a:	d817      	bhi.n	800829c <USBD_Get_USB_Status+0x44>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <USBD_Get_USB_Status+0x1c>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	08008285 	.word	0x08008285
 8008278:	0800828b 	.word	0x0800828b
 800827c:	08008291 	.word	0x08008291
 8008280:	08008297 	.word	0x08008297
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
    break;
 8008288:	e00b      	b.n	80082a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800828a:	2303      	movs	r3, #3
 800828c:	73fb      	strb	r3, [r7, #15]
    break;
 800828e:	e008      	b.n	80082a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
    break;
 8008294:	e005      	b.n	80082a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	73fb      	strb	r3, [r7, #15]
    break;
 800829a:	e002      	b.n	80082a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800829c:	2303      	movs	r3, #3
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	bf00      	nop
  }
  return usb_status;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <siprintf>:
 80082b0:	b40e      	push	{r1, r2, r3}
 80082b2:	b500      	push	{lr}
 80082b4:	b09c      	sub	sp, #112	; 0x70
 80082b6:	ab1d      	add	r3, sp, #116	; 0x74
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9006      	str	r0, [sp, #24]
 80082bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c0:	4809      	ldr	r0, [pc, #36]	; (80082e8 <siprintf+0x38>)
 80082c2:	9107      	str	r1, [sp, #28]
 80082c4:	9104      	str	r1, [sp, #16]
 80082c6:	4909      	ldr	r1, [pc, #36]	; (80082ec <siprintf+0x3c>)
 80082c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082cc:	9105      	str	r1, [sp, #20]
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	a902      	add	r1, sp, #8
 80082d4:	f000 f992 	bl	80085fc <_svfiprintf_r>
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	b01c      	add	sp, #112	; 0x70
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	b003      	add	sp, #12
 80082e6:	4770      	bx	lr
 80082e8:	20000148 	.word	0x20000148
 80082ec:	ffff0208 	.word	0xffff0208

080082f0 <memset>:
 80082f0:	4402      	add	r2, r0
 80082f2:	4603      	mov	r3, r0
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d100      	bne.n	80082fa <memset+0xa>
 80082f8:	4770      	bx	lr
 80082fa:	f803 1b01 	strb.w	r1, [r3], #1
 80082fe:	e7f9      	b.n	80082f4 <memset+0x4>

08008300 <__errno>:
 8008300:	4b01      	ldr	r3, [pc, #4]	; (8008308 <__errno+0x8>)
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000148 	.word	0x20000148

0800830c <__libc_init_array>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	4d0d      	ldr	r5, [pc, #52]	; (8008344 <__libc_init_array+0x38>)
 8008310:	4c0d      	ldr	r4, [pc, #52]	; (8008348 <__libc_init_array+0x3c>)
 8008312:	1b64      	subs	r4, r4, r5
 8008314:	10a4      	asrs	r4, r4, #2
 8008316:	2600      	movs	r6, #0
 8008318:	42a6      	cmp	r6, r4
 800831a:	d109      	bne.n	8008330 <__libc_init_array+0x24>
 800831c:	4d0b      	ldr	r5, [pc, #44]	; (800834c <__libc_init_array+0x40>)
 800831e:	4c0c      	ldr	r4, [pc, #48]	; (8008350 <__libc_init_array+0x44>)
 8008320:	f000 fc6a 	bl	8008bf8 <_init>
 8008324:	1b64      	subs	r4, r4, r5
 8008326:	10a4      	asrs	r4, r4, #2
 8008328:	2600      	movs	r6, #0
 800832a:	42a6      	cmp	r6, r4
 800832c:	d105      	bne.n	800833a <__libc_init_array+0x2e>
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	f855 3b04 	ldr.w	r3, [r5], #4
 8008334:	4798      	blx	r3
 8008336:	3601      	adds	r6, #1
 8008338:	e7ee      	b.n	8008318 <__libc_init_array+0xc>
 800833a:	f855 3b04 	ldr.w	r3, [r5], #4
 800833e:	4798      	blx	r3
 8008340:	3601      	adds	r6, #1
 8008342:	e7f2      	b.n	800832a <__libc_init_array+0x1e>
 8008344:	08008da4 	.word	0x08008da4
 8008348:	08008da4 	.word	0x08008da4
 800834c:	08008da4 	.word	0x08008da4
 8008350:	08008da8 	.word	0x08008da8

08008354 <__retarget_lock_acquire_recursive>:
 8008354:	4770      	bx	lr

08008356 <__retarget_lock_release_recursive>:
 8008356:	4770      	bx	lr

08008358 <_free_r>:
 8008358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800835a:	2900      	cmp	r1, #0
 800835c:	d044      	beq.n	80083e8 <_free_r+0x90>
 800835e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008362:	9001      	str	r0, [sp, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f1a1 0404 	sub.w	r4, r1, #4
 800836a:	bfb8      	it	lt
 800836c:	18e4      	addlt	r4, r4, r3
 800836e:	f000 f8df 	bl	8008530 <__malloc_lock>
 8008372:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <_free_r+0x94>)
 8008374:	9801      	ldr	r0, [sp, #4]
 8008376:	6813      	ldr	r3, [r2, #0]
 8008378:	b933      	cbnz	r3, 8008388 <_free_r+0x30>
 800837a:	6063      	str	r3, [r4, #4]
 800837c:	6014      	str	r4, [r2, #0]
 800837e:	b003      	add	sp, #12
 8008380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008384:	f000 b8da 	b.w	800853c <__malloc_unlock>
 8008388:	42a3      	cmp	r3, r4
 800838a:	d908      	bls.n	800839e <_free_r+0x46>
 800838c:	6825      	ldr	r5, [r4, #0]
 800838e:	1961      	adds	r1, r4, r5
 8008390:	428b      	cmp	r3, r1
 8008392:	bf01      	itttt	eq
 8008394:	6819      	ldreq	r1, [r3, #0]
 8008396:	685b      	ldreq	r3, [r3, #4]
 8008398:	1949      	addeq	r1, r1, r5
 800839a:	6021      	streq	r1, [r4, #0]
 800839c:	e7ed      	b.n	800837a <_free_r+0x22>
 800839e:	461a      	mov	r2, r3
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	b10b      	cbz	r3, 80083a8 <_free_r+0x50>
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d9fa      	bls.n	800839e <_free_r+0x46>
 80083a8:	6811      	ldr	r1, [r2, #0]
 80083aa:	1855      	adds	r5, r2, r1
 80083ac:	42a5      	cmp	r5, r4
 80083ae:	d10b      	bne.n	80083c8 <_free_r+0x70>
 80083b0:	6824      	ldr	r4, [r4, #0]
 80083b2:	4421      	add	r1, r4
 80083b4:	1854      	adds	r4, r2, r1
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	6011      	str	r1, [r2, #0]
 80083ba:	d1e0      	bne.n	800837e <_free_r+0x26>
 80083bc:	681c      	ldr	r4, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	6053      	str	r3, [r2, #4]
 80083c2:	440c      	add	r4, r1
 80083c4:	6014      	str	r4, [r2, #0]
 80083c6:	e7da      	b.n	800837e <_free_r+0x26>
 80083c8:	d902      	bls.n	80083d0 <_free_r+0x78>
 80083ca:	230c      	movs	r3, #12
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	e7d6      	b.n	800837e <_free_r+0x26>
 80083d0:	6825      	ldr	r5, [r4, #0]
 80083d2:	1961      	adds	r1, r4, r5
 80083d4:	428b      	cmp	r3, r1
 80083d6:	bf04      	itt	eq
 80083d8:	6819      	ldreq	r1, [r3, #0]
 80083da:	685b      	ldreq	r3, [r3, #4]
 80083dc:	6063      	str	r3, [r4, #4]
 80083de:	bf04      	itt	eq
 80083e0:	1949      	addeq	r1, r1, r5
 80083e2:	6021      	streq	r1, [r4, #0]
 80083e4:	6054      	str	r4, [r2, #4]
 80083e6:	e7ca      	b.n	800837e <_free_r+0x26>
 80083e8:	b003      	add	sp, #12
 80083ea:	bd30      	pop	{r4, r5, pc}
 80083ec:	20001ef4 	.word	0x20001ef4

080083f0 <sbrk_aligned>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4e0e      	ldr	r6, [pc, #56]	; (800842c <sbrk_aligned+0x3c>)
 80083f4:	460c      	mov	r4, r1
 80083f6:	6831      	ldr	r1, [r6, #0]
 80083f8:	4605      	mov	r5, r0
 80083fa:	b911      	cbnz	r1, 8008402 <sbrk_aligned+0x12>
 80083fc:	f000 fba6 	bl	8008b4c <_sbrk_r>
 8008400:	6030      	str	r0, [r6, #0]
 8008402:	4621      	mov	r1, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f000 fba1 	bl	8008b4c <_sbrk_r>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d00a      	beq.n	8008424 <sbrk_aligned+0x34>
 800840e:	1cc4      	adds	r4, r0, #3
 8008410:	f024 0403 	bic.w	r4, r4, #3
 8008414:	42a0      	cmp	r0, r4
 8008416:	d007      	beq.n	8008428 <sbrk_aligned+0x38>
 8008418:	1a21      	subs	r1, r4, r0
 800841a:	4628      	mov	r0, r5
 800841c:	f000 fb96 	bl	8008b4c <_sbrk_r>
 8008420:	3001      	adds	r0, #1
 8008422:	d101      	bne.n	8008428 <sbrk_aligned+0x38>
 8008424:	f04f 34ff 	mov.w	r4, #4294967295
 8008428:	4620      	mov	r0, r4
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	20001ef8 	.word	0x20001ef8

08008430 <_malloc_r>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	1ccd      	adds	r5, r1, #3
 8008436:	f025 0503 	bic.w	r5, r5, #3
 800843a:	3508      	adds	r5, #8
 800843c:	2d0c      	cmp	r5, #12
 800843e:	bf38      	it	cc
 8008440:	250c      	movcc	r5, #12
 8008442:	2d00      	cmp	r5, #0
 8008444:	4607      	mov	r7, r0
 8008446:	db01      	blt.n	800844c <_malloc_r+0x1c>
 8008448:	42a9      	cmp	r1, r5
 800844a:	d905      	bls.n	8008458 <_malloc_r+0x28>
 800844c:	230c      	movs	r3, #12
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	2600      	movs	r6, #0
 8008452:	4630      	mov	r0, r6
 8008454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008458:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800852c <_malloc_r+0xfc>
 800845c:	f000 f868 	bl	8008530 <__malloc_lock>
 8008460:	f8d8 3000 	ldr.w	r3, [r8]
 8008464:	461c      	mov	r4, r3
 8008466:	bb5c      	cbnz	r4, 80084c0 <_malloc_r+0x90>
 8008468:	4629      	mov	r1, r5
 800846a:	4638      	mov	r0, r7
 800846c:	f7ff ffc0 	bl	80083f0 <sbrk_aligned>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	4604      	mov	r4, r0
 8008474:	d155      	bne.n	8008522 <_malloc_r+0xf2>
 8008476:	f8d8 4000 	ldr.w	r4, [r8]
 800847a:	4626      	mov	r6, r4
 800847c:	2e00      	cmp	r6, #0
 800847e:	d145      	bne.n	800850c <_malloc_r+0xdc>
 8008480:	2c00      	cmp	r4, #0
 8008482:	d048      	beq.n	8008516 <_malloc_r+0xe6>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	4631      	mov	r1, r6
 8008488:	4638      	mov	r0, r7
 800848a:	eb04 0903 	add.w	r9, r4, r3
 800848e:	f000 fb5d 	bl	8008b4c <_sbrk_r>
 8008492:	4581      	cmp	r9, r0
 8008494:	d13f      	bne.n	8008516 <_malloc_r+0xe6>
 8008496:	6821      	ldr	r1, [r4, #0]
 8008498:	1a6d      	subs	r5, r5, r1
 800849a:	4629      	mov	r1, r5
 800849c:	4638      	mov	r0, r7
 800849e:	f7ff ffa7 	bl	80083f0 <sbrk_aligned>
 80084a2:	3001      	adds	r0, #1
 80084a4:	d037      	beq.n	8008516 <_malloc_r+0xe6>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	442b      	add	r3, r5
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	f8d8 3000 	ldr.w	r3, [r8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d038      	beq.n	8008526 <_malloc_r+0xf6>
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	42a2      	cmp	r2, r4
 80084b8:	d12b      	bne.n	8008512 <_malloc_r+0xe2>
 80084ba:	2200      	movs	r2, #0
 80084bc:	605a      	str	r2, [r3, #4]
 80084be:	e00f      	b.n	80084e0 <_malloc_r+0xb0>
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	1b52      	subs	r2, r2, r5
 80084c4:	d41f      	bmi.n	8008506 <_malloc_r+0xd6>
 80084c6:	2a0b      	cmp	r2, #11
 80084c8:	d917      	bls.n	80084fa <_malloc_r+0xca>
 80084ca:	1961      	adds	r1, r4, r5
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	6025      	str	r5, [r4, #0]
 80084d0:	bf18      	it	ne
 80084d2:	6059      	strne	r1, [r3, #4]
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	bf08      	it	eq
 80084d8:	f8c8 1000 	streq.w	r1, [r8]
 80084dc:	5162      	str	r2, [r4, r5]
 80084de:	604b      	str	r3, [r1, #4]
 80084e0:	4638      	mov	r0, r7
 80084e2:	f104 060b 	add.w	r6, r4, #11
 80084e6:	f000 f829 	bl	800853c <__malloc_unlock>
 80084ea:	f026 0607 	bic.w	r6, r6, #7
 80084ee:	1d23      	adds	r3, r4, #4
 80084f0:	1af2      	subs	r2, r6, r3
 80084f2:	d0ae      	beq.n	8008452 <_malloc_r+0x22>
 80084f4:	1b9b      	subs	r3, r3, r6
 80084f6:	50a3      	str	r3, [r4, r2]
 80084f8:	e7ab      	b.n	8008452 <_malloc_r+0x22>
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	6862      	ldr	r2, [r4, #4]
 80084fe:	d1dd      	bne.n	80084bc <_malloc_r+0x8c>
 8008500:	f8c8 2000 	str.w	r2, [r8]
 8008504:	e7ec      	b.n	80084e0 <_malloc_r+0xb0>
 8008506:	4623      	mov	r3, r4
 8008508:	6864      	ldr	r4, [r4, #4]
 800850a:	e7ac      	b.n	8008466 <_malloc_r+0x36>
 800850c:	4634      	mov	r4, r6
 800850e:	6876      	ldr	r6, [r6, #4]
 8008510:	e7b4      	b.n	800847c <_malloc_r+0x4c>
 8008512:	4613      	mov	r3, r2
 8008514:	e7cc      	b.n	80084b0 <_malloc_r+0x80>
 8008516:	230c      	movs	r3, #12
 8008518:	603b      	str	r3, [r7, #0]
 800851a:	4638      	mov	r0, r7
 800851c:	f000 f80e 	bl	800853c <__malloc_unlock>
 8008520:	e797      	b.n	8008452 <_malloc_r+0x22>
 8008522:	6025      	str	r5, [r4, #0]
 8008524:	e7dc      	b.n	80084e0 <_malloc_r+0xb0>
 8008526:	605b      	str	r3, [r3, #4]
 8008528:	deff      	udf	#255	; 0xff
 800852a:	bf00      	nop
 800852c:	20001ef4 	.word	0x20001ef4

08008530 <__malloc_lock>:
 8008530:	4801      	ldr	r0, [pc, #4]	; (8008538 <__malloc_lock+0x8>)
 8008532:	f7ff bf0f 	b.w	8008354 <__retarget_lock_acquire_recursive>
 8008536:	bf00      	nop
 8008538:	20001ef0 	.word	0x20001ef0

0800853c <__malloc_unlock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_unlock+0x8>)
 800853e:	f7ff bf0a 	b.w	8008356 <__retarget_lock_release_recursive>
 8008542:	bf00      	nop
 8008544:	20001ef0 	.word	0x20001ef0

08008548 <__ssputs_r>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	688e      	ldr	r6, [r1, #8]
 800854e:	461f      	mov	r7, r3
 8008550:	42be      	cmp	r6, r7
 8008552:	680b      	ldr	r3, [r1, #0]
 8008554:	4682      	mov	sl, r0
 8008556:	460c      	mov	r4, r1
 8008558:	4690      	mov	r8, r2
 800855a:	d82c      	bhi.n	80085b6 <__ssputs_r+0x6e>
 800855c:	898a      	ldrh	r2, [r1, #12]
 800855e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008562:	d026      	beq.n	80085b2 <__ssputs_r+0x6a>
 8008564:	6965      	ldr	r5, [r4, #20]
 8008566:	6909      	ldr	r1, [r1, #16]
 8008568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800856c:	eba3 0901 	sub.w	r9, r3, r1
 8008570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008574:	1c7b      	adds	r3, r7, #1
 8008576:	444b      	add	r3, r9
 8008578:	106d      	asrs	r5, r5, #1
 800857a:	429d      	cmp	r5, r3
 800857c:	bf38      	it	cc
 800857e:	461d      	movcc	r5, r3
 8008580:	0553      	lsls	r3, r2, #21
 8008582:	d527      	bpl.n	80085d4 <__ssputs_r+0x8c>
 8008584:	4629      	mov	r1, r5
 8008586:	f7ff ff53 	bl	8008430 <_malloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	b360      	cbz	r0, 80085e8 <__ssputs_r+0xa0>
 800858e:	6921      	ldr	r1, [r4, #16]
 8008590:	464a      	mov	r2, r9
 8008592:	f000 faeb 	bl	8008b6c <memcpy>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	6126      	str	r6, [r4, #16]
 80085a4:	6165      	str	r5, [r4, #20]
 80085a6:	444e      	add	r6, r9
 80085a8:	eba5 0509 	sub.w	r5, r5, r9
 80085ac:	6026      	str	r6, [r4, #0]
 80085ae:	60a5      	str	r5, [r4, #8]
 80085b0:	463e      	mov	r6, r7
 80085b2:	42be      	cmp	r6, r7
 80085b4:	d900      	bls.n	80085b8 <__ssputs_r+0x70>
 80085b6:	463e      	mov	r6, r7
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	4632      	mov	r2, r6
 80085bc:	4641      	mov	r1, r8
 80085be:	f000 faab 	bl	8008b18 <memmove>
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	1b9b      	subs	r3, r3, r6
 80085c6:	60a3      	str	r3, [r4, #8]
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	4433      	add	r3, r6
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	2000      	movs	r0, #0
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	462a      	mov	r2, r5
 80085d6:	f000 fad7 	bl	8008b88 <_realloc_r>
 80085da:	4606      	mov	r6, r0
 80085dc:	2800      	cmp	r0, #0
 80085de:	d1e0      	bne.n	80085a2 <__ssputs_r+0x5a>
 80085e0:	6921      	ldr	r1, [r4, #16]
 80085e2:	4650      	mov	r0, sl
 80085e4:	f7ff feb8 	bl	8008358 <_free_r>
 80085e8:	230c      	movs	r3, #12
 80085ea:	f8ca 3000 	str.w	r3, [sl]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	e7e9      	b.n	80085d0 <__ssputs_r+0x88>

080085fc <_svfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	4698      	mov	r8, r3
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	b09d      	sub	sp, #116	; 0x74
 8008608:	4607      	mov	r7, r0
 800860a:	460d      	mov	r5, r1
 800860c:	4614      	mov	r4, r2
 800860e:	d50e      	bpl.n	800862e <_svfiprintf_r+0x32>
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	b963      	cbnz	r3, 800862e <_svfiprintf_r+0x32>
 8008614:	2140      	movs	r1, #64	; 0x40
 8008616:	f7ff ff0b 	bl	8008430 <_malloc_r>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	6128      	str	r0, [r5, #16]
 800861e:	b920      	cbnz	r0, 800862a <_svfiprintf_r+0x2e>
 8008620:	230c      	movs	r3, #12
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e0d0      	b.n	80087cc <_svfiprintf_r+0x1d0>
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	616b      	str	r3, [r5, #20]
 800862e:	2300      	movs	r3, #0
 8008630:	9309      	str	r3, [sp, #36]	; 0x24
 8008632:	2320      	movs	r3, #32
 8008634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008638:	f8cd 800c 	str.w	r8, [sp, #12]
 800863c:	2330      	movs	r3, #48	; 0x30
 800863e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80087e4 <_svfiprintf_r+0x1e8>
 8008642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008646:	f04f 0901 	mov.w	r9, #1
 800864a:	4623      	mov	r3, r4
 800864c:	469a      	mov	sl, r3
 800864e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008652:	b10a      	cbz	r2, 8008658 <_svfiprintf_r+0x5c>
 8008654:	2a25      	cmp	r2, #37	; 0x25
 8008656:	d1f9      	bne.n	800864c <_svfiprintf_r+0x50>
 8008658:	ebba 0b04 	subs.w	fp, sl, r4
 800865c:	d00b      	beq.n	8008676 <_svfiprintf_r+0x7a>
 800865e:	465b      	mov	r3, fp
 8008660:	4622      	mov	r2, r4
 8008662:	4629      	mov	r1, r5
 8008664:	4638      	mov	r0, r7
 8008666:	f7ff ff6f 	bl	8008548 <__ssputs_r>
 800866a:	3001      	adds	r0, #1
 800866c:	f000 80a9 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008672:	445a      	add	r2, fp
 8008674:	9209      	str	r2, [sp, #36]	; 0x24
 8008676:	f89a 3000 	ldrb.w	r3, [sl]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80a1 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008680:	2300      	movs	r3, #0
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868a:	f10a 0a01 	add.w	sl, sl, #1
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008696:	931a      	str	r3, [sp, #104]	; 0x68
 8008698:	4654      	mov	r4, sl
 800869a:	2205      	movs	r2, #5
 800869c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a0:	4850      	ldr	r0, [pc, #320]	; (80087e4 <_svfiprintf_r+0x1e8>)
 80086a2:	f7f7 fd9d 	bl	80001e0 <memchr>
 80086a6:	9a04      	ldr	r2, [sp, #16]
 80086a8:	b9d8      	cbnz	r0, 80086e2 <_svfiprintf_r+0xe6>
 80086aa:	06d0      	lsls	r0, r2, #27
 80086ac:	bf44      	itt	mi
 80086ae:	2320      	movmi	r3, #32
 80086b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b4:	0711      	lsls	r1, r2, #28
 80086b6:	bf44      	itt	mi
 80086b8:	232b      	movmi	r3, #43	; 0x2b
 80086ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086be:	f89a 3000 	ldrb.w	r3, [sl]
 80086c2:	2b2a      	cmp	r3, #42	; 0x2a
 80086c4:	d015      	beq.n	80086f2 <_svfiprintf_r+0xf6>
 80086c6:	9a07      	ldr	r2, [sp, #28]
 80086c8:	4654      	mov	r4, sl
 80086ca:	2000      	movs	r0, #0
 80086cc:	f04f 0c0a 	mov.w	ip, #10
 80086d0:	4621      	mov	r1, r4
 80086d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d6:	3b30      	subs	r3, #48	; 0x30
 80086d8:	2b09      	cmp	r3, #9
 80086da:	d94d      	bls.n	8008778 <_svfiprintf_r+0x17c>
 80086dc:	b1b0      	cbz	r0, 800870c <_svfiprintf_r+0x110>
 80086de:	9207      	str	r2, [sp, #28]
 80086e0:	e014      	b.n	800870c <_svfiprintf_r+0x110>
 80086e2:	eba0 0308 	sub.w	r3, r0, r8
 80086e6:	fa09 f303 	lsl.w	r3, r9, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	46a2      	mov	sl, r4
 80086f0:	e7d2      	b.n	8008698 <_svfiprintf_r+0x9c>
 80086f2:	9b03      	ldr	r3, [sp, #12]
 80086f4:	1d19      	adds	r1, r3, #4
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	9103      	str	r1, [sp, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfbb      	ittet	lt
 80086fe:	425b      	neglt	r3, r3
 8008700:	f042 0202 	orrlt.w	r2, r2, #2
 8008704:	9307      	strge	r3, [sp, #28]
 8008706:	9307      	strlt	r3, [sp, #28]
 8008708:	bfb8      	it	lt
 800870a:	9204      	strlt	r2, [sp, #16]
 800870c:	7823      	ldrb	r3, [r4, #0]
 800870e:	2b2e      	cmp	r3, #46	; 0x2e
 8008710:	d10c      	bne.n	800872c <_svfiprintf_r+0x130>
 8008712:	7863      	ldrb	r3, [r4, #1]
 8008714:	2b2a      	cmp	r3, #42	; 0x2a
 8008716:	d134      	bne.n	8008782 <_svfiprintf_r+0x186>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	9203      	str	r2, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	bfb8      	it	lt
 8008724:	f04f 33ff 	movlt.w	r3, #4294967295
 8008728:	3402      	adds	r4, #2
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80087f4 <_svfiprintf_r+0x1f8>
 8008730:	7821      	ldrb	r1, [r4, #0]
 8008732:	2203      	movs	r2, #3
 8008734:	4650      	mov	r0, sl
 8008736:	f7f7 fd53 	bl	80001e0 <memchr>
 800873a:	b138      	cbz	r0, 800874c <_svfiprintf_r+0x150>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	eba0 000a 	sub.w	r0, r0, sl
 8008742:	2240      	movs	r2, #64	; 0x40
 8008744:	4082      	lsls	r2, r0
 8008746:	4313      	orrs	r3, r2
 8008748:	3401      	adds	r4, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	4825      	ldr	r0, [pc, #148]	; (80087e8 <_svfiprintf_r+0x1ec>)
 8008752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008756:	2206      	movs	r2, #6
 8008758:	f7f7 fd42 	bl	80001e0 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d038      	beq.n	80087d2 <_svfiprintf_r+0x1d6>
 8008760:	4b22      	ldr	r3, [pc, #136]	; (80087ec <_svfiprintf_r+0x1f0>)
 8008762:	bb1b      	cbnz	r3, 80087ac <_svfiprintf_r+0x1b0>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3307      	adds	r3, #7
 8008768:	f023 0307 	bic.w	r3, r3, #7
 800876c:	3308      	adds	r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008772:	4433      	add	r3, r6
 8008774:	9309      	str	r3, [sp, #36]	; 0x24
 8008776:	e768      	b.n	800864a <_svfiprintf_r+0x4e>
 8008778:	fb0c 3202 	mla	r2, ip, r2, r3
 800877c:	460c      	mov	r4, r1
 800877e:	2001      	movs	r0, #1
 8008780:	e7a6      	b.n	80086d0 <_svfiprintf_r+0xd4>
 8008782:	2300      	movs	r3, #0
 8008784:	3401      	adds	r4, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	4619      	mov	r1, r3
 800878a:	f04f 0c0a 	mov.w	ip, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	3a30      	subs	r2, #48	; 0x30
 8008796:	2a09      	cmp	r2, #9
 8008798:	d903      	bls.n	80087a2 <_svfiprintf_r+0x1a6>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0c6      	beq.n	800872c <_svfiprintf_r+0x130>
 800879e:	9105      	str	r1, [sp, #20]
 80087a0:	e7c4      	b.n	800872c <_svfiprintf_r+0x130>
 80087a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a6:	4604      	mov	r4, r0
 80087a8:	2301      	movs	r3, #1
 80087aa:	e7f0      	b.n	800878e <_svfiprintf_r+0x192>
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <_svfiprintf_r+0x1f4>)
 80087b4:	a904      	add	r1, sp, #16
 80087b6:	4638      	mov	r0, r7
 80087b8:	f3af 8000 	nop.w
 80087bc:	1c42      	adds	r2, r0, #1
 80087be:	4606      	mov	r6, r0
 80087c0:	d1d6      	bne.n	8008770 <_svfiprintf_r+0x174>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af2d 	bmi.w	8008624 <_svfiprintf_r+0x28>
 80087ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087cc:	b01d      	add	sp, #116	; 0x74
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	ab03      	add	r3, sp, #12
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	462a      	mov	r2, r5
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <_svfiprintf_r+0x1f4>)
 80087da:	a904      	add	r1, sp, #16
 80087dc:	4638      	mov	r0, r7
 80087de:	f000 f879 	bl	80088d4 <_printf_i>
 80087e2:	e7eb      	b.n	80087bc <_svfiprintf_r+0x1c0>
 80087e4:	08008d68 	.word	0x08008d68
 80087e8:	08008d72 	.word	0x08008d72
 80087ec:	00000000 	.word	0x00000000
 80087f0:	08008549 	.word	0x08008549
 80087f4:	08008d6e 	.word	0x08008d6e

080087f8 <_printf_common>:
 80087f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087fc:	4616      	mov	r6, r2
 80087fe:	4699      	mov	r9, r3
 8008800:	688a      	ldr	r2, [r1, #8]
 8008802:	690b      	ldr	r3, [r1, #16]
 8008804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008808:	4293      	cmp	r3, r2
 800880a:	bfb8      	it	lt
 800880c:	4613      	movlt	r3, r2
 800880e:	6033      	str	r3, [r6, #0]
 8008810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008814:	4607      	mov	r7, r0
 8008816:	460c      	mov	r4, r1
 8008818:	b10a      	cbz	r2, 800881e <_printf_common+0x26>
 800881a:	3301      	adds	r3, #1
 800881c:	6033      	str	r3, [r6, #0]
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	0699      	lsls	r1, r3, #26
 8008822:	bf42      	ittt	mi
 8008824:	6833      	ldrmi	r3, [r6, #0]
 8008826:	3302      	addmi	r3, #2
 8008828:	6033      	strmi	r3, [r6, #0]
 800882a:	6825      	ldr	r5, [r4, #0]
 800882c:	f015 0506 	ands.w	r5, r5, #6
 8008830:	d106      	bne.n	8008840 <_printf_common+0x48>
 8008832:	f104 0a19 	add.w	sl, r4, #25
 8008836:	68e3      	ldr	r3, [r4, #12]
 8008838:	6832      	ldr	r2, [r6, #0]
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	42ab      	cmp	r3, r5
 800883e:	dc26      	bgt.n	800888e <_printf_common+0x96>
 8008840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008844:	1e13      	subs	r3, r2, #0
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	bf18      	it	ne
 800884a:	2301      	movne	r3, #1
 800884c:	0692      	lsls	r2, r2, #26
 800884e:	d42b      	bmi.n	80088a8 <_printf_common+0xb0>
 8008850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008854:	4649      	mov	r1, r9
 8008856:	4638      	mov	r0, r7
 8008858:	47c0      	blx	r8
 800885a:	3001      	adds	r0, #1
 800885c:	d01e      	beq.n	800889c <_printf_common+0xa4>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	6922      	ldr	r2, [r4, #16]
 8008862:	f003 0306 	and.w	r3, r3, #6
 8008866:	2b04      	cmp	r3, #4
 8008868:	bf02      	ittt	eq
 800886a:	68e5      	ldreq	r5, [r4, #12]
 800886c:	6833      	ldreq	r3, [r6, #0]
 800886e:	1aed      	subeq	r5, r5, r3
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	bf0c      	ite	eq
 8008874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008878:	2500      	movne	r5, #0
 800887a:	4293      	cmp	r3, r2
 800887c:	bfc4      	itt	gt
 800887e:	1a9b      	subgt	r3, r3, r2
 8008880:	18ed      	addgt	r5, r5, r3
 8008882:	2600      	movs	r6, #0
 8008884:	341a      	adds	r4, #26
 8008886:	42b5      	cmp	r5, r6
 8008888:	d11a      	bne.n	80088c0 <_printf_common+0xc8>
 800888a:	2000      	movs	r0, #0
 800888c:	e008      	b.n	80088a0 <_printf_common+0xa8>
 800888e:	2301      	movs	r3, #1
 8008890:	4652      	mov	r2, sl
 8008892:	4649      	mov	r1, r9
 8008894:	4638      	mov	r0, r7
 8008896:	47c0      	blx	r8
 8008898:	3001      	adds	r0, #1
 800889a:	d103      	bne.n	80088a4 <_printf_common+0xac>
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a4:	3501      	adds	r5, #1
 80088a6:	e7c6      	b.n	8008836 <_printf_common+0x3e>
 80088a8:	18e1      	adds	r1, r4, r3
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	2030      	movs	r0, #48	; 0x30
 80088ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088b2:	4422      	add	r2, r4
 80088b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088bc:	3302      	adds	r3, #2
 80088be:	e7c7      	b.n	8008850 <_printf_common+0x58>
 80088c0:	2301      	movs	r3, #1
 80088c2:	4622      	mov	r2, r4
 80088c4:	4649      	mov	r1, r9
 80088c6:	4638      	mov	r0, r7
 80088c8:	47c0      	blx	r8
 80088ca:	3001      	adds	r0, #1
 80088cc:	d0e6      	beq.n	800889c <_printf_common+0xa4>
 80088ce:	3601      	adds	r6, #1
 80088d0:	e7d9      	b.n	8008886 <_printf_common+0x8e>
	...

080088d4 <_printf_i>:
 80088d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	7e0f      	ldrb	r7, [r1, #24]
 80088da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088dc:	2f78      	cmp	r7, #120	; 0x78
 80088de:	4691      	mov	r9, r2
 80088e0:	4680      	mov	r8, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	469a      	mov	sl, r3
 80088e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ea:	d807      	bhi.n	80088fc <_printf_i+0x28>
 80088ec:	2f62      	cmp	r7, #98	; 0x62
 80088ee:	d80a      	bhi.n	8008906 <_printf_i+0x32>
 80088f0:	2f00      	cmp	r7, #0
 80088f2:	f000 80d4 	beq.w	8008a9e <_printf_i+0x1ca>
 80088f6:	2f58      	cmp	r7, #88	; 0x58
 80088f8:	f000 80c0 	beq.w	8008a7c <_printf_i+0x1a8>
 80088fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008904:	e03a      	b.n	800897c <_printf_i+0xa8>
 8008906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800890a:	2b15      	cmp	r3, #21
 800890c:	d8f6      	bhi.n	80088fc <_printf_i+0x28>
 800890e:	a101      	add	r1, pc, #4	; (adr r1, 8008914 <_printf_i+0x40>)
 8008910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008914:	0800896d 	.word	0x0800896d
 8008918:	08008981 	.word	0x08008981
 800891c:	080088fd 	.word	0x080088fd
 8008920:	080088fd 	.word	0x080088fd
 8008924:	080088fd 	.word	0x080088fd
 8008928:	080088fd 	.word	0x080088fd
 800892c:	08008981 	.word	0x08008981
 8008930:	080088fd 	.word	0x080088fd
 8008934:	080088fd 	.word	0x080088fd
 8008938:	080088fd 	.word	0x080088fd
 800893c:	080088fd 	.word	0x080088fd
 8008940:	08008a85 	.word	0x08008a85
 8008944:	080089ad 	.word	0x080089ad
 8008948:	08008a3f 	.word	0x08008a3f
 800894c:	080088fd 	.word	0x080088fd
 8008950:	080088fd 	.word	0x080088fd
 8008954:	08008aa7 	.word	0x08008aa7
 8008958:	080088fd 	.word	0x080088fd
 800895c:	080089ad 	.word	0x080089ad
 8008960:	080088fd 	.word	0x080088fd
 8008964:	080088fd 	.word	0x080088fd
 8008968:	08008a47 	.word	0x08008a47
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	1d1a      	adds	r2, r3, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	602a      	str	r2, [r5, #0]
 8008974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800897c:	2301      	movs	r3, #1
 800897e:	e09f      	b.n	8008ac0 <_printf_i+0x1ec>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	0607      	lsls	r7, r0, #24
 8008986:	f103 0104 	add.w	r1, r3, #4
 800898a:	6029      	str	r1, [r5, #0]
 800898c:	d501      	bpl.n	8008992 <_printf_i+0xbe>
 800898e:	681e      	ldr	r6, [r3, #0]
 8008990:	e003      	b.n	800899a <_printf_i+0xc6>
 8008992:	0646      	lsls	r6, r0, #25
 8008994:	d5fb      	bpl.n	800898e <_printf_i+0xba>
 8008996:	f9b3 6000 	ldrsh.w	r6, [r3]
 800899a:	2e00      	cmp	r6, #0
 800899c:	da03      	bge.n	80089a6 <_printf_i+0xd2>
 800899e:	232d      	movs	r3, #45	; 0x2d
 80089a0:	4276      	negs	r6, r6
 80089a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a6:	485a      	ldr	r0, [pc, #360]	; (8008b10 <_printf_i+0x23c>)
 80089a8:	230a      	movs	r3, #10
 80089aa:	e012      	b.n	80089d2 <_printf_i+0xfe>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	6820      	ldr	r0, [r4, #0]
 80089b0:	1d19      	adds	r1, r3, #4
 80089b2:	6029      	str	r1, [r5, #0]
 80089b4:	0605      	lsls	r5, r0, #24
 80089b6:	d501      	bpl.n	80089bc <_printf_i+0xe8>
 80089b8:	681e      	ldr	r6, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <_printf_i+0xee>
 80089bc:	0641      	lsls	r1, r0, #25
 80089be:	d5fb      	bpl.n	80089b8 <_printf_i+0xe4>
 80089c0:	881e      	ldrh	r6, [r3, #0]
 80089c2:	4853      	ldr	r0, [pc, #332]	; (8008b10 <_printf_i+0x23c>)
 80089c4:	2f6f      	cmp	r7, #111	; 0x6f
 80089c6:	bf0c      	ite	eq
 80089c8:	2308      	moveq	r3, #8
 80089ca:	230a      	movne	r3, #10
 80089cc:	2100      	movs	r1, #0
 80089ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089d2:	6865      	ldr	r5, [r4, #4]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	bfa2      	ittt	ge
 80089da:	6821      	ldrge	r1, [r4, #0]
 80089dc:	f021 0104 	bicge.w	r1, r1, #4
 80089e0:	6021      	strge	r1, [r4, #0]
 80089e2:	b90e      	cbnz	r6, 80089e8 <_printf_i+0x114>
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	d04b      	beq.n	8008a80 <_printf_i+0x1ac>
 80089e8:	4615      	mov	r5, r2
 80089ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80089ee:	fb03 6711 	mls	r7, r3, r1, r6
 80089f2:	5dc7      	ldrb	r7, [r0, r7]
 80089f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089f8:	4637      	mov	r7, r6
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	460e      	mov	r6, r1
 80089fe:	d9f4      	bls.n	80089ea <_printf_i+0x116>
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10b      	bne.n	8008a1c <_printf_i+0x148>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07de      	lsls	r6, r3, #31
 8008a08:	d508      	bpl.n	8008a1c <_printf_i+0x148>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	bfde      	ittt	le
 8008a12:	2330      	movle	r3, #48	; 0x30
 8008a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a1c:	1b52      	subs	r2, r2, r5
 8008a1e:	6122      	str	r2, [r4, #16]
 8008a20:	f8cd a000 	str.w	sl, [sp]
 8008a24:	464b      	mov	r3, r9
 8008a26:	aa03      	add	r2, sp, #12
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff fee4 	bl	80087f8 <_printf_common>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d14a      	bne.n	8008aca <_printf_i+0x1f6>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b004      	add	sp, #16
 8008a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	f043 0320 	orr.w	r3, r3, #32
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	4833      	ldr	r0, [pc, #204]	; (8008b14 <_printf_i+0x240>)
 8008a48:	2778      	movs	r7, #120	; 0x78
 8008a4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	6829      	ldr	r1, [r5, #0]
 8008a52:	061f      	lsls	r7, r3, #24
 8008a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a58:	d402      	bmi.n	8008a60 <_printf_i+0x18c>
 8008a5a:	065f      	lsls	r7, r3, #25
 8008a5c:	bf48      	it	mi
 8008a5e:	b2b6      	uxthmi	r6, r6
 8008a60:	07df      	lsls	r7, r3, #31
 8008a62:	bf48      	it	mi
 8008a64:	f043 0320 	orrmi.w	r3, r3, #32
 8008a68:	6029      	str	r1, [r5, #0]
 8008a6a:	bf48      	it	mi
 8008a6c:	6023      	strmi	r3, [r4, #0]
 8008a6e:	b91e      	cbnz	r6, 8008a78 <_printf_i+0x1a4>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	f023 0320 	bic.w	r3, r3, #32
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	2310      	movs	r3, #16
 8008a7a:	e7a7      	b.n	80089cc <_printf_i+0xf8>
 8008a7c:	4824      	ldr	r0, [pc, #144]	; (8008b10 <_printf_i+0x23c>)
 8008a7e:	e7e4      	b.n	8008a4a <_printf_i+0x176>
 8008a80:	4615      	mov	r5, r2
 8008a82:	e7bd      	b.n	8008a00 <_printf_i+0x12c>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	6826      	ldr	r6, [r4, #0]
 8008a88:	6961      	ldr	r1, [r4, #20]
 8008a8a:	1d18      	adds	r0, r3, #4
 8008a8c:	6028      	str	r0, [r5, #0]
 8008a8e:	0635      	lsls	r5, r6, #24
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	d501      	bpl.n	8008a98 <_printf_i+0x1c4>
 8008a94:	6019      	str	r1, [r3, #0]
 8008a96:	e002      	b.n	8008a9e <_printf_i+0x1ca>
 8008a98:	0670      	lsls	r0, r6, #25
 8008a9a:	d5fb      	bpl.n	8008a94 <_printf_i+0x1c0>
 8008a9c:	8019      	strh	r1, [r3, #0]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	4615      	mov	r5, r2
 8008aa4:	e7bc      	b.n	8008a20 <_printf_i+0x14c>
 8008aa6:	682b      	ldr	r3, [r5, #0]
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	602a      	str	r2, [r5, #0]
 8008aac:	681d      	ldr	r5, [r3, #0]
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f7f7 fb94 	bl	80001e0 <memchr>
 8008ab8:	b108      	cbz	r0, 8008abe <_printf_i+0x1ea>
 8008aba:	1b40      	subs	r0, r0, r5
 8008abc:	6060      	str	r0, [r4, #4]
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac8:	e7aa      	b.n	8008a20 <_printf_i+0x14c>
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	462a      	mov	r2, r5
 8008ace:	4649      	mov	r1, r9
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	47d0      	blx	sl
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d0ad      	beq.n	8008a34 <_printf_i+0x160>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	079b      	lsls	r3, r3, #30
 8008adc:	d413      	bmi.n	8008b06 <_printf_i+0x232>
 8008ade:	68e0      	ldr	r0, [r4, #12]
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	bfb8      	it	lt
 8008ae6:	4618      	movlt	r0, r3
 8008ae8:	e7a6      	b.n	8008a38 <_printf_i+0x164>
 8008aea:	2301      	movs	r3, #1
 8008aec:	4632      	mov	r2, r6
 8008aee:	4649      	mov	r1, r9
 8008af0:	4640      	mov	r0, r8
 8008af2:	47d0      	blx	sl
 8008af4:	3001      	adds	r0, #1
 8008af6:	d09d      	beq.n	8008a34 <_printf_i+0x160>
 8008af8:	3501      	adds	r5, #1
 8008afa:	68e3      	ldr	r3, [r4, #12]
 8008afc:	9903      	ldr	r1, [sp, #12]
 8008afe:	1a5b      	subs	r3, r3, r1
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	dcf2      	bgt.n	8008aea <_printf_i+0x216>
 8008b04:	e7eb      	b.n	8008ade <_printf_i+0x20a>
 8008b06:	2500      	movs	r5, #0
 8008b08:	f104 0619 	add.w	r6, r4, #25
 8008b0c:	e7f5      	b.n	8008afa <_printf_i+0x226>
 8008b0e:	bf00      	nop
 8008b10:	08008d79 	.word	0x08008d79
 8008b14:	08008d8a 	.word	0x08008d8a

08008b18 <memmove>:
 8008b18:	4288      	cmp	r0, r1
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	eb01 0402 	add.w	r4, r1, r2
 8008b20:	d902      	bls.n	8008b28 <memmove+0x10>
 8008b22:	4284      	cmp	r4, r0
 8008b24:	4623      	mov	r3, r4
 8008b26:	d807      	bhi.n	8008b38 <memmove+0x20>
 8008b28:	1e43      	subs	r3, r0, #1
 8008b2a:	42a1      	cmp	r1, r4
 8008b2c:	d008      	beq.n	8008b40 <memmove+0x28>
 8008b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b36:	e7f8      	b.n	8008b2a <memmove+0x12>
 8008b38:	4402      	add	r2, r0
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	428a      	cmp	r2, r1
 8008b3e:	d100      	bne.n	8008b42 <memmove+0x2a>
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4a:	e7f7      	b.n	8008b3c <memmove+0x24>

08008b4c <_sbrk_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	; (8008b68 <_sbrk_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f8 f8ca 	bl	8000cf0 <_sbrk>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_sbrk_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_sbrk_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	20001eec 	.word	0x20001eec

08008b6c <memcpy>:
 8008b6c:	440a      	add	r2, r1
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b74:	d100      	bne.n	8008b78 <memcpy+0xc>
 8008b76:	4770      	bx	lr
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b82:	4291      	cmp	r1, r2
 8008b84:	d1f9      	bne.n	8008b7a <memcpy+0xe>
 8008b86:	bd10      	pop	{r4, pc}

08008b88 <_realloc_r>:
 8008b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4614      	mov	r4, r2
 8008b90:	460e      	mov	r6, r1
 8008b92:	b921      	cbnz	r1, 8008b9e <_realloc_r+0x16>
 8008b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b98:	4611      	mov	r1, r2
 8008b9a:	f7ff bc49 	b.w	8008430 <_malloc_r>
 8008b9e:	b92a      	cbnz	r2, 8008bac <_realloc_r+0x24>
 8008ba0:	f7ff fbda 	bl	8008358 <_free_r>
 8008ba4:	4625      	mov	r5, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	f000 f81b 	bl	8008be6 <_malloc_usable_size_r>
 8008bb0:	4284      	cmp	r4, r0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	d802      	bhi.n	8008bbc <_realloc_r+0x34>
 8008bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bba:	d812      	bhi.n	8008be2 <_realloc_r+0x5a>
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f7ff fc36 	bl	8008430 <_malloc_r>
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0ed      	beq.n	8008ba6 <_realloc_r+0x1e>
 8008bca:	42bc      	cmp	r4, r7
 8008bcc:	4622      	mov	r2, r4
 8008bce:	4631      	mov	r1, r6
 8008bd0:	bf28      	it	cs
 8008bd2:	463a      	movcs	r2, r7
 8008bd4:	f7ff ffca 	bl	8008b6c <memcpy>
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff fbbc 	bl	8008358 <_free_r>
 8008be0:	e7e1      	b.n	8008ba6 <_realloc_r+0x1e>
 8008be2:	4635      	mov	r5, r6
 8008be4:	e7df      	b.n	8008ba6 <_realloc_r+0x1e>

08008be6 <_malloc_usable_size_r>:
 8008be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bea:	1f18      	subs	r0, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbc      	itt	lt
 8008bf0:	580b      	ldrlt	r3, [r1, r0]
 8008bf2:	18c0      	addlt	r0, r0, r3
 8008bf4:	4770      	bx	lr
	...

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
